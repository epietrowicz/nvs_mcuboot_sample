
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

0000c200 <_vector_table>:
    c200:	40 10 00 20 85 f1 00 00 03 27 01 00 d9 f1 00 00     @.. .....'......
    c210:	d9 f1 00 00 d9 f1 00 00 d9 f1 00 00 00 00 00 00     ................
	...
    c22c:	3d ef 00 00 d9 f1 00 00 00 00 00 00 e9 ee 00 00     =...............
    c23c:	ed 26 01 00                                         .&..

0000c240 <_irq_vector_table>:
    c240:	45 f1 00 00 45 f1 00 00 45 f1 00 00 45 f1 00 00     E...E...E...E...
    c250:	45 f1 00 00 45 f1 00 00 45 f1 00 00 45 f1 00 00     E...E...E...E...
    c260:	45 f1 00 00 45 f1 00 00 45 f1 00 00 45 f1 00 00     E...E...E...E...
    c270:	45 f1 00 00 45 f1 00 00 45 f1 00 00 45 f1 00 00     E...E...E...E...
    c280:	45 f1 00 00 45 f1 00 00 45 f1 00 00 45 f1 00 00     E...E...E...E...
    c290:	45 f1 00 00 45 f1 00 00 45 f1 00 00 45 f1 00 00     E...E...E...E...
    c2a0:	45 f1 00 00 45 f1 00 00 45 f1 00 00 45 f1 00 00     E...E...E...E...
    c2b0:	45 f1 00 00 45 f1 00 00 45 f1 00 00 45 f1 00 00     E...E...E...E...
    c2c0:	45 f1 00 00 45 f1 00 00 45 f1 00 00 45 f1 00 00     E...E...E...E...
    c2d0:	45 f1 00 00 45 f1 00 00 45 f1 00 00                 E...E...E...

Disassembly of section text:

0000c2dc <__aeabi_uldivmod>:
    c2dc:	b953      	cbnz	r3, c2f4 <__aeabi_uldivmod+0x18>
    c2de:	b94a      	cbnz	r2, c2f4 <__aeabi_uldivmod+0x18>
    c2e0:	2900      	cmp	r1, #0
    c2e2:	bf08      	it	eq
    c2e4:	2800      	cmpeq	r0, #0
    c2e6:	bf1c      	itt	ne
    c2e8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
    c2ec:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    c2f0:	f000 b974 	b.w	c5dc <__aeabi_idiv0>
    c2f4:	f1ad 0c08 	sub.w	ip, sp, #8
    c2f8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    c2fc:	f000 f806 	bl	c30c <__udivmoddi4>
    c300:	f8dd e004 	ldr.w	lr, [sp, #4]
    c304:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    c308:	b004      	add	sp, #16
    c30a:	4770      	bx	lr

0000c30c <__udivmoddi4>:
    c30c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c310:	9e08      	ldr	r6, [sp, #32]
    c312:	460d      	mov	r5, r1
    c314:	4604      	mov	r4, r0
    c316:	4688      	mov	r8, r1
    c318:	2b00      	cmp	r3, #0
    c31a:	d14d      	bne.n	c3b8 <__udivmoddi4+0xac>
    c31c:	428a      	cmp	r2, r1
    c31e:	4694      	mov	ip, r2
    c320:	d968      	bls.n	c3f4 <__udivmoddi4+0xe8>
    c322:	fab2 f282 	clz	r2, r2
    c326:	b152      	cbz	r2, c33e <__udivmoddi4+0x32>
    c328:	fa01 f302 	lsl.w	r3, r1, r2
    c32c:	f1c2 0120 	rsb	r1, r2, #32
    c330:	fa20 f101 	lsr.w	r1, r0, r1
    c334:	fa0c fc02 	lsl.w	ip, ip, r2
    c338:	ea41 0803 	orr.w	r8, r1, r3
    c33c:	4094      	lsls	r4, r2
    c33e:	ea4f 451c 	mov.w	r5, ip, lsr #16
    c342:	0c21      	lsrs	r1, r4, #16
    c344:	fbb8 fef5 	udiv	lr, r8, r5
    c348:	fa1f f78c 	uxth.w	r7, ip
    c34c:	fb05 831e 	mls	r3, r5, lr, r8
    c350:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
    c354:	fb0e f107 	mul.w	r1, lr, r7
    c358:	4299      	cmp	r1, r3
    c35a:	d90b      	bls.n	c374 <__udivmoddi4+0x68>
    c35c:	eb1c 0303 	adds.w	r3, ip, r3
    c360:	f10e 30ff 	add.w	r0, lr, #4294967295	; 0xffffffff
    c364:	f080 811e 	bcs.w	c5a4 <__udivmoddi4+0x298>
    c368:	4299      	cmp	r1, r3
    c36a:	f240 811b 	bls.w	c5a4 <__udivmoddi4+0x298>
    c36e:	f1ae 0e02 	sub.w	lr, lr, #2
    c372:	4463      	add	r3, ip
    c374:	1a5b      	subs	r3, r3, r1
    c376:	b2a4      	uxth	r4, r4
    c378:	fbb3 f0f5 	udiv	r0, r3, r5
    c37c:	fb05 3310 	mls	r3, r5, r0, r3
    c380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    c384:	fb00 f707 	mul.w	r7, r0, r7
    c388:	42a7      	cmp	r7, r4
    c38a:	d90a      	bls.n	c3a2 <__udivmoddi4+0x96>
    c38c:	eb1c 0404 	adds.w	r4, ip, r4
    c390:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
    c394:	f080 8108 	bcs.w	c5a8 <__udivmoddi4+0x29c>
    c398:	42a7      	cmp	r7, r4
    c39a:	f240 8105 	bls.w	c5a8 <__udivmoddi4+0x29c>
    c39e:	4464      	add	r4, ip
    c3a0:	3802      	subs	r0, #2
    c3a2:	1be4      	subs	r4, r4, r7
    c3a4:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
    c3a8:	2100      	movs	r1, #0
    c3aa:	b11e      	cbz	r6, c3b4 <__udivmoddi4+0xa8>
    c3ac:	40d4      	lsrs	r4, r2
    c3ae:	2300      	movs	r3, #0
    c3b0:	e9c6 4300 	strd	r4, r3, [r6]
    c3b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c3b8:	428b      	cmp	r3, r1
    c3ba:	d908      	bls.n	c3ce <__udivmoddi4+0xc2>
    c3bc:	2e00      	cmp	r6, #0
    c3be:	f000 80ee 	beq.w	c59e <__udivmoddi4+0x292>
    c3c2:	2100      	movs	r1, #0
    c3c4:	e9c6 0500 	strd	r0, r5, [r6]
    c3c8:	4608      	mov	r0, r1
    c3ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c3ce:	fab3 f183 	clz	r1, r3
    c3d2:	2900      	cmp	r1, #0
    c3d4:	d14a      	bne.n	c46c <__udivmoddi4+0x160>
    c3d6:	42ab      	cmp	r3, r5
    c3d8:	d302      	bcc.n	c3e0 <__udivmoddi4+0xd4>
    c3da:	4282      	cmp	r2, r0
    c3dc:	f200 80f9 	bhi.w	c5d2 <__udivmoddi4+0x2c6>
    c3e0:	1a84      	subs	r4, r0, r2
    c3e2:	eb65 0303 	sbc.w	r3, r5, r3
    c3e6:	2001      	movs	r0, #1
    c3e8:	4698      	mov	r8, r3
    c3ea:	2e00      	cmp	r6, #0
    c3ec:	d0e2      	beq.n	c3b4 <__udivmoddi4+0xa8>
    c3ee:	e9c6 4800 	strd	r4, r8, [r6]
    c3f2:	e7df      	b.n	c3b4 <__udivmoddi4+0xa8>
    c3f4:	b902      	cbnz	r2, c3f8 <__udivmoddi4+0xec>
    c3f6:	deff      	udf	#255	; 0xff
    c3f8:	fab2 f282 	clz	r2, r2
    c3fc:	2a00      	cmp	r2, #0
    c3fe:	f040 8091 	bne.w	c524 <__udivmoddi4+0x218>
    c402:	eba1 050c 	sub.w	r5, r1, ip
    c406:	ea4f 471c 	mov.w	r7, ip, lsr #16
    c40a:	fa1f fe8c 	uxth.w	lr, ip
    c40e:	2101      	movs	r1, #1
    c410:	fbb5 f3f7 	udiv	r3, r5, r7
    c414:	fb07 5013 	mls	r0, r7, r3, r5
    c418:	0c25      	lsrs	r5, r4, #16
    c41a:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
    c41e:	fb0e f003 	mul.w	r0, lr, r3
    c422:	42a8      	cmp	r0, r5
    c424:	d908      	bls.n	c438 <__udivmoddi4+0x12c>
    c426:	eb1c 0505 	adds.w	r5, ip, r5
    c42a:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
    c42e:	d202      	bcs.n	c436 <__udivmoddi4+0x12a>
    c430:	42a8      	cmp	r0, r5
    c432:	f200 80cb 	bhi.w	c5cc <__udivmoddi4+0x2c0>
    c436:	4643      	mov	r3, r8
    c438:	1a2d      	subs	r5, r5, r0
    c43a:	b2a4      	uxth	r4, r4
    c43c:	fbb5 f0f7 	udiv	r0, r5, r7
    c440:	fb07 5510 	mls	r5, r7, r0, r5
    c444:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
    c448:	fb0e fe00 	mul.w	lr, lr, r0
    c44c:	45a6      	cmp	lr, r4
    c44e:	d908      	bls.n	c462 <__udivmoddi4+0x156>
    c450:	eb1c 0404 	adds.w	r4, ip, r4
    c454:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
    c458:	d202      	bcs.n	c460 <__udivmoddi4+0x154>
    c45a:	45a6      	cmp	lr, r4
    c45c:	f200 80bb 	bhi.w	c5d6 <__udivmoddi4+0x2ca>
    c460:	4628      	mov	r0, r5
    c462:	eba4 040e 	sub.w	r4, r4, lr
    c466:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
    c46a:	e79e      	b.n	c3aa <__udivmoddi4+0x9e>
    c46c:	f1c1 0720 	rsb	r7, r1, #32
    c470:	408b      	lsls	r3, r1
    c472:	fa22 fc07 	lsr.w	ip, r2, r7
    c476:	ea4c 0c03 	orr.w	ip, ip, r3
    c47a:	fa20 f407 	lsr.w	r4, r0, r7
    c47e:	fa05 f301 	lsl.w	r3, r5, r1
    c482:	431c      	orrs	r4, r3
    c484:	40fd      	lsrs	r5, r7
    c486:	ea4f 491c 	mov.w	r9, ip, lsr #16
    c48a:	fa00 f301 	lsl.w	r3, r0, r1
    c48e:	fbb5 f8f9 	udiv	r8, r5, r9
    c492:	0c20      	lsrs	r0, r4, #16
    c494:	fa1f fe8c 	uxth.w	lr, ip
    c498:	fb09 5518 	mls	r5, r9, r8, r5
    c49c:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
    c4a0:	fb08 f00e 	mul.w	r0, r8, lr
    c4a4:	42a8      	cmp	r0, r5
    c4a6:	fa02 f201 	lsl.w	r2, r2, r1
    c4aa:	d90b      	bls.n	c4c4 <__udivmoddi4+0x1b8>
    c4ac:	eb1c 0505 	adds.w	r5, ip, r5
    c4b0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
    c4b4:	f080 8088 	bcs.w	c5c8 <__udivmoddi4+0x2bc>
    c4b8:	42a8      	cmp	r0, r5
    c4ba:	f240 8085 	bls.w	c5c8 <__udivmoddi4+0x2bc>
    c4be:	f1a8 0802 	sub.w	r8, r8, #2
    c4c2:	4465      	add	r5, ip
    c4c4:	1a2d      	subs	r5, r5, r0
    c4c6:	b2a4      	uxth	r4, r4
    c4c8:	fbb5 f0f9 	udiv	r0, r5, r9
    c4cc:	fb09 5510 	mls	r5, r9, r0, r5
    c4d0:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
    c4d4:	fb00 fe0e 	mul.w	lr, r0, lr
    c4d8:	45ae      	cmp	lr, r5
    c4da:	d908      	bls.n	c4ee <__udivmoddi4+0x1e2>
    c4dc:	eb1c 0505 	adds.w	r5, ip, r5
    c4e0:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
    c4e4:	d26c      	bcs.n	c5c0 <__udivmoddi4+0x2b4>
    c4e6:	45ae      	cmp	lr, r5
    c4e8:	d96a      	bls.n	c5c0 <__udivmoddi4+0x2b4>
    c4ea:	3802      	subs	r0, #2
    c4ec:	4465      	add	r5, ip
    c4ee:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
    c4f2:	fba0 9402 	umull	r9, r4, r0, r2
    c4f6:	eba5 050e 	sub.w	r5, r5, lr
    c4fa:	42a5      	cmp	r5, r4
    c4fc:	46c8      	mov	r8, r9
    c4fe:	46a6      	mov	lr, r4
    c500:	d356      	bcc.n	c5b0 <__udivmoddi4+0x2a4>
    c502:	d053      	beq.n	c5ac <__udivmoddi4+0x2a0>
    c504:	b15e      	cbz	r6, c51e <__udivmoddi4+0x212>
    c506:	ebb3 0208 	subs.w	r2, r3, r8
    c50a:	eb65 050e 	sbc.w	r5, r5, lr
    c50e:	fa05 f707 	lsl.w	r7, r5, r7
    c512:	fa22 f301 	lsr.w	r3, r2, r1
    c516:	40cd      	lsrs	r5, r1
    c518:	431f      	orrs	r7, r3
    c51a:	e9c6 7500 	strd	r7, r5, [r6]
    c51e:	2100      	movs	r1, #0
    c520:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c524:	f1c2 0320 	rsb	r3, r2, #32
    c528:	fa20 f103 	lsr.w	r1, r0, r3
    c52c:	fa0c fc02 	lsl.w	ip, ip, r2
    c530:	fa25 f303 	lsr.w	r3, r5, r3
    c534:	4095      	lsls	r5, r2
    c536:	430d      	orrs	r5, r1
    c538:	ea4f 471c 	mov.w	r7, ip, lsr #16
    c53c:	fa1f fe8c 	uxth.w	lr, ip
    c540:	fbb3 f1f7 	udiv	r1, r3, r7
    c544:	fb07 3011 	mls	r0, r7, r1, r3
    c548:	0c2b      	lsrs	r3, r5, #16
    c54a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
    c54e:	fb01 f00e 	mul.w	r0, r1, lr
    c552:	4298      	cmp	r0, r3
    c554:	fa04 f402 	lsl.w	r4, r4, r2
    c558:	d908      	bls.n	c56c <__udivmoddi4+0x260>
    c55a:	eb1c 0303 	adds.w	r3, ip, r3
    c55e:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
    c562:	d22f      	bcs.n	c5c4 <__udivmoddi4+0x2b8>
    c564:	4298      	cmp	r0, r3
    c566:	d92d      	bls.n	c5c4 <__udivmoddi4+0x2b8>
    c568:	3902      	subs	r1, #2
    c56a:	4463      	add	r3, ip
    c56c:	1a1b      	subs	r3, r3, r0
    c56e:	b2ad      	uxth	r5, r5
    c570:	fbb3 f0f7 	udiv	r0, r3, r7
    c574:	fb07 3310 	mls	r3, r7, r0, r3
    c578:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
    c57c:	fb00 f30e 	mul.w	r3, r0, lr
    c580:	42ab      	cmp	r3, r5
    c582:	d908      	bls.n	c596 <__udivmoddi4+0x28a>
    c584:	eb1c 0505 	adds.w	r5, ip, r5
    c588:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
    c58c:	d216      	bcs.n	c5bc <__udivmoddi4+0x2b0>
    c58e:	42ab      	cmp	r3, r5
    c590:	d914      	bls.n	c5bc <__udivmoddi4+0x2b0>
    c592:	3802      	subs	r0, #2
    c594:	4465      	add	r5, ip
    c596:	1aed      	subs	r5, r5, r3
    c598:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
    c59c:	e738      	b.n	c410 <__udivmoddi4+0x104>
    c59e:	4631      	mov	r1, r6
    c5a0:	4630      	mov	r0, r6
    c5a2:	e707      	b.n	c3b4 <__udivmoddi4+0xa8>
    c5a4:	4686      	mov	lr, r0
    c5a6:	e6e5      	b.n	c374 <__udivmoddi4+0x68>
    c5a8:	4618      	mov	r0, r3
    c5aa:	e6fa      	b.n	c3a2 <__udivmoddi4+0x96>
    c5ac:	454b      	cmp	r3, r9
    c5ae:	d2a9      	bcs.n	c504 <__udivmoddi4+0x1f8>
    c5b0:	ebb9 0802 	subs.w	r8, r9, r2
    c5b4:	eb64 0e0c 	sbc.w	lr, r4, ip
    c5b8:	3801      	subs	r0, #1
    c5ba:	e7a3      	b.n	c504 <__udivmoddi4+0x1f8>
    c5bc:	4640      	mov	r0, r8
    c5be:	e7ea      	b.n	c596 <__udivmoddi4+0x28a>
    c5c0:	4620      	mov	r0, r4
    c5c2:	e794      	b.n	c4ee <__udivmoddi4+0x1e2>
    c5c4:	4641      	mov	r1, r8
    c5c6:	e7d1      	b.n	c56c <__udivmoddi4+0x260>
    c5c8:	46d0      	mov	r8, sl
    c5ca:	e77b      	b.n	c4c4 <__udivmoddi4+0x1b8>
    c5cc:	3b02      	subs	r3, #2
    c5ce:	4465      	add	r5, ip
    c5d0:	e732      	b.n	c438 <__udivmoddi4+0x12c>
    c5d2:	4608      	mov	r0, r1
    c5d4:	e709      	b.n	c3ea <__udivmoddi4+0xde>
    c5d6:	4464      	add	r4, ip
    c5d8:	3802      	subs	r0, #2
    c5da:	e742      	b.n	c462 <__udivmoddi4+0x156>

0000c5dc <__aeabi_idiv0>:
    c5dc:	4770      	bx	lr
    c5de:	bf00      	nop

0000c5e0 <main>:
#define RBT_CNT_ID 3
#define STRING_ID 4
#define LONG_ID 5

void main(void)
{
    c5e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c5e4:	b0ae      	sub	sp, #184	; 0xb8
	int rc = 0, cnt = 0, cnt_his = 0;
	char buf[16];
	uint8_t key[8], longarray[128];
	uint32_t reboot_counter = 0U, reboot_counter_his;
    c5e6:	2300      	movs	r3, #0
    c5e8:	9303      	str	r3, [sp, #12]
 *
 * @return a non-positive integer as documented in device_usable_check().
 */
static inline int z_device_usable_check(const struct device *dev)
{
	return z_device_ready(dev) ? 0 : -ENODEV;
    c5ea:	4daf      	ldr	r5, [pc, #700]	; (c8a8 <main+0x2c8>)
    c5ec:	4628      	mov	r0, r5
    c5ee:	f006 fa58 	bl	12aa2 <z_device_ready>
    c5f2:	b180      	cbz	r0, c616 <main+0x36>
	if (!device_is_ready(flash_dev))
	{
		printk("Flash device %s is not ready\n", flash_dev->name);
		return;
	}
	fs.offset = FLASH_AREA_OFFSET(storage);
    c5f4:	4cad      	ldr	r4, [pc, #692]	; (c8ac <main+0x2cc>)

	printk("fs offset %d\n", fs.offset);
    c5f6:	48ae      	ldr	r0, [pc, #696]	; (c8b0 <main+0x2d0>)
	fs.offset = FLASH_AREA_OFFSET(storage);
    c5f8:	f44f 21e8 	mov.w	r1, #475136	; 0x74000
    c5fc:	6021      	str	r1, [r4, #0]
	printk("fs offset %d\n", fs.offset);
    c5fe:	f005 fa67 	bl	11ad0 <printk>
	rc = flash_get_page_info_by_offs(flash_dev, fs.offset, &info);
    c602:	6821      	ldr	r1, [r4, #0]
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke3(*(uintptr_t *)&dev, *(uintptr_t *)&offset, *(uintptr_t *)&info, K_SYSCALL_FLASH_GET_PAGE_INFO_BY_OFFS);
	}
#endif
	compiler_barrier();
	return z_impl_flash_get_page_info_by_offs(dev, offset, info);
    c604:	aa07      	add	r2, sp, #28
    c606:	4628      	mov	r0, r5
    c608:	f006 f9aa 	bl	12960 <z_impl_flash_get_page_info_by_offs>
	if (rc)
    c60c:	b150      	cbz	r0, c624 <main+0x44>
	{
		printk("Unable to get page info\n");
    c60e:	48a9      	ldr	r0, [pc, #676]	; (c8b4 <main+0x2d4>)
	printk("size: %d, total: %d\n", info.size, info.size * 3);

	rc = nvs_init(&fs, flash_dev->name);
	if (rc)
	{
		printk("Flash Init failed\n");
    c610:	f005 fa5e 	bl	11ad0 <printk>
		return;
    c614:	e003      	b.n	c61e <main+0x3e>
		printk("Flash device %s is not ready\n", flash_dev->name);
    c616:	6829      	ldr	r1, [r5, #0]
    c618:	48a7      	ldr	r0, [pc, #668]	; (c8b8 <main+0x2d8>)
    c61a:	f005 fa59 	bl	11ad0 <printk>
			(void)nvs_write(&fs, RBT_CNT_ID, &reboot_counter,
							sizeof(reboot_counter));
			break;
		}
	}
}
    c61e:	b02e      	add	sp, #184	; 0xb8
    c620:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	fs.sector_size = info.size;
    c624:	9908      	ldr	r1, [sp, #32]
	printk("size: %d, total: %d\n", info.size, info.size * 3);
    c626:	48a5      	ldr	r0, [pc, #660]	; (c8bc <main+0x2dc>)
	fs.sector_size = info.size;
    c628:	81a1      	strh	r1, [r4, #12]
	fs.sector_count = 2U;
    c62a:	2302      	movs	r3, #2
	printk("size: %d, total: %d\n", info.size, info.size * 3);
    c62c:	eb01 0241 	add.w	r2, r1, r1, lsl #1
	fs.sector_count = 2U;
    c630:	81e3      	strh	r3, [r4, #14]
	printk("size: %d, total: %d\n", info.size, info.size * 3);
    c632:	f005 fa4d 	bl	11ad0 <printk>
	rc = nvs_init(&fs, flash_dev->name);
    c636:	6829      	ldr	r1, [r5, #0]
    c638:	4620      	mov	r0, r4
    c63a:	f001 fddd 	bl	e1f8 <nvs_init>
	if (rc)
    c63e:	4605      	mov	r5, r0
    c640:	b108      	cbz	r0, c646 <main+0x66>
		printk("Flash Init failed\n");
    c642:	489f      	ldr	r0, [pc, #636]	; (c8c0 <main+0x2e0>)
    c644:	e7e4      	b.n	c610 <main+0x30>
	rc = nvs_read(&fs, ADDRESS_ID, &buf, sizeof(buf));
    c646:	2310      	movs	r3, #16
    c648:	aa0a      	add	r2, sp, #40	; 0x28
    c64a:	2101      	movs	r1, #1
    c64c:	4620      	mov	r0, r4
    c64e:	f005 ffb2 	bl	125b6 <nvs_read>
	if (rc > 0)
    c652:	2800      	cmp	r0, #0
    c654:	f340 8084 	ble.w	c760 <main+0x180>
		printk("Id: %d, Address: %s\n", ADDRESS_ID, buf);
    c658:	489a      	ldr	r0, [pc, #616]	; (c8c4 <main+0x2e4>)
    c65a:	aa0a      	add	r2, sp, #40	; 0x28
    c65c:	2101      	movs	r1, #1
    c65e:	f005 fa37 	bl	11ad0 <printk>
	rc = nvs_read(&fs, KEY_ID, &key, sizeof(key));
    c662:	2102      	movs	r1, #2
    c664:	4891      	ldr	r0, [pc, #580]	; (c8ac <main+0x2cc>)
    c666:	2308      	movs	r3, #8
    c668:	aa05      	add	r2, sp, #20
    c66a:	f005 ffa4 	bl	125b6 <nvs_read>
	if (rc > 0)
    c66e:	2800      	cmp	r0, #0
		printk("Id: %d, Key: ", KEY_ID);
    c670:	f04f 0102 	mov.w	r1, #2
	if (rc > 0)
    c674:	f340 8087 	ble.w	c786 <main+0x1a6>
		printk("Id: %d, Key: ", KEY_ID);
    c678:	4893      	ldr	r0, [pc, #588]	; (c8c8 <main+0x2e8>)
			printk("%x ", key[n]);
    c67a:	4f94      	ldr	r7, [pc, #592]	; (c8cc <main+0x2ec>)
		printk("Id: %d, Key: ", KEY_ID);
    c67c:	f005 fa28 	bl	11ad0 <printk>
		for (int n = 0; n < 8; n++)
    c680:	ae05      	add	r6, sp, #20
    c682:	2400      	movs	r4, #0
			printk("%x ", key[n]);
    c684:	f816 1b01 	ldrb.w	r1, [r6], #1
    c688:	4638      	mov	r0, r7
		for (int n = 0; n < 8; n++)
    c68a:	3401      	adds	r4, #1
			printk("%x ", key[n]);
    c68c:	f005 fa20 	bl	11ad0 <printk>
		for (int n = 0; n < 8; n++)
    c690:	2c08      	cmp	r4, #8
    c692:	d1f7      	bne.n	c684 <main+0xa4>
		printk("\n");
    c694:	488e      	ldr	r0, [pc, #568]	; (c8d0 <main+0x2f0>)
    c696:	f005 fa1b 	bl	11ad0 <printk>
	rc = nvs_read(&fs, RBT_CNT_ID, &reboot_counter, sizeof(reboot_counter));
    c69a:	4884      	ldr	r0, [pc, #528]	; (c8ac <main+0x2cc>)
    c69c:	2304      	movs	r3, #4
    c69e:	aa03      	add	r2, sp, #12
    c6a0:	2103      	movs	r1, #3
    c6a2:	f005 ff88 	bl	125b6 <nvs_read>
	if (rc > 0)
    c6a6:	2800      	cmp	r0, #0
    c6a8:	f340 808f 	ble.w	c7ca <main+0x1ea>
		printk("Id: %d, Reboot_counter: %d\n",
    c6ac:	9a03      	ldr	r2, [sp, #12]
    c6ae:	4889      	ldr	r0, [pc, #548]	; (c8d4 <main+0x2f4>)
    c6b0:	2103      	movs	r1, #3
    c6b2:	f005 fa0d 	bl	11ad0 <printk>
	rc = nvs_read(&fs, STRING_ID, &buf, sizeof(buf));
    c6b6:	487d      	ldr	r0, [pc, #500]	; (c8ac <main+0x2cc>)
    c6b8:	2310      	movs	r3, #16
    c6ba:	aa0a      	add	r2, sp, #40	; 0x28
    c6bc:	2104      	movs	r1, #4
    c6be:	f005 ff7a 	bl	125b6 <nvs_read>
	if (rc > 0)
    c6c2:	2800      	cmp	r0, #0
    c6c4:	f340 808c 	ble.w	c7e0 <main+0x200>
		printk("Id: %d, Data: %s\n",
    c6c8:	4883      	ldr	r0, [pc, #524]	; (c8d8 <main+0x2f8>)
    c6ca:	aa0a      	add	r2, sp, #40	; 0x28
    c6cc:	2104      	movs	r1, #4
    c6ce:	f005 f9ff 	bl	11ad0 <printk>
		if (reboot_counter == 10U)
    c6d2:	9b03      	ldr	r3, [sp, #12]
    c6d4:	2b0a      	cmp	r3, #10
    c6d6:	d103      	bne.n	c6e0 <main+0x100>
			(void)nvs_delete(&fs, STRING_ID);
    c6d8:	4874      	ldr	r0, [pc, #464]	; (c8ac <main+0x2cc>)
    c6da:	2104      	movs	r1, #4
    c6dc:	f005 ff67 	bl	125ae <nvs_delete>
	rc = nvs_read(&fs, LONG_ID, &longarray, sizeof(longarray));
    c6e0:	4872      	ldr	r0, [pc, #456]	; (c8ac <main+0x2cc>)
    c6e2:	2380      	movs	r3, #128	; 0x80
    c6e4:	aa0e      	add	r2, sp, #56	; 0x38
    c6e6:	2105      	movs	r1, #5
    c6e8:	f005 ff65 	bl	125b6 <nvs_read>
	if (rc > 0)
    c6ec:	2800      	cmp	r0, #0
    c6ee:	f340 808d 	ble.w	c80c <main+0x22c>
		printk("Id: %d, Longarray: ", LONG_ID);
    c6f2:	487a      	ldr	r0, [pc, #488]	; (c8dc <main+0x2fc>)
			printk("%x ", longarray[n]);
    c6f4:	4f75      	ldr	r7, [pc, #468]	; (c8cc <main+0x2ec>)
		printk("Id: %d, Longarray: ", LONG_ID);
    c6f6:	2105      	movs	r1, #5
    c6f8:	f005 f9ea 	bl	11ad0 <printk>
		for (int n = 0; n < sizeof(longarray); n++)
    c6fc:	ae0e      	add	r6, sp, #56	; 0x38
    c6fe:	2400      	movs	r4, #0
			printk("%x ", longarray[n]);
    c700:	f816 1b01 	ldrb.w	r1, [r6], #1
    c704:	4638      	mov	r0, r7
		for (int n = 0; n < sizeof(longarray); n++)
    c706:	3401      	adds	r4, #1
			printk("%x ", longarray[n]);
    c708:	f005 f9e2 	bl	11ad0 <printk>
		for (int n = 0; n < sizeof(longarray); n++)
    c70c:	2c80      	cmp	r4, #128	; 0x80
    c70e:	d1f7      	bne.n	c700 <main+0x120>
		printk("\n");
    c710:	486f      	ldr	r0, [pc, #444]	; (c8d0 <main+0x2f0>)
    c712:	f005 f9dd 	bl	11ad0 <printk>
				printk("Reboot counter history: ");
    c716:	f8df 81c8 	ldr.w	r8, [pc, #456]	; c8e0 <main+0x300>
					rc = nvs_read_hist(
    c71a:	4e64      	ldr	r6, [pc, #400]	; (c8ac <main+0x2cc>)
					printk("...%d", reboot_counter_his);
    c71c:	4f71      	ldr	r7, [pc, #452]	; (c8e4 <main+0x304>)
			for (int n = 0; n < sizeof(longarray); n++)
    c71e:	2405      	movs	r4, #5
		/* coverity[OVERRUN] */
		return (int32_t) arch_syscall_invoke2(parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(timeout);
    c720:	f640 40cd 	movw	r0, #3277	; 0xccd
    c724:	2100      	movs	r1, #0
    c726:	f004 ff53 	bl	115d0 <z_impl_k_sleep>
		if (reboot_counter < MAX_REBOOT)
    c72a:	9b03      	ldr	r3, [sp, #12]
    c72c:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
    c730:	f080 80aa 	bcs.w	c888 <main+0x2a8>
			if (cnt == 5)
    c734:	2c05      	cmp	r4, #5
    c736:	f040 8084 	bne.w	c842 <main+0x262>
				printk("Reboot counter history: ");
    c73a:	4640      	mov	r0, r8
    c73c:	f005 f9c8 	bl	11ad0 <printk>
					rc = nvs_read_hist(
    c740:	b2ab      	uxth	r3, r5
    c742:	9300      	str	r3, [sp, #0]
    c744:	aa04      	add	r2, sp, #16
    c746:	2304      	movs	r3, #4
    c748:	2103      	movs	r1, #3
    c74a:	4630      	mov	r0, r6
    c74c:	f002 f808 	bl	e760 <nvs_read_hist>
					if (rc < 0)
    c750:	2800      	cmp	r0, #0
    c752:	db6f      	blt.n	c834 <main+0x254>
					printk("...%d", reboot_counter_his);
    c754:	9904      	ldr	r1, [sp, #16]
    c756:	4638      	mov	r0, r7
    c758:	f005 f9ba 	bl	11ad0 <printk>
					cnt_his++;
    c75c:	3501      	adds	r5, #1
					rc = nvs_read_hist(
    c75e:	e7ef      	b.n	c740 <main+0x160>
		strcpy(buf, "192.168.1.1");
    c760:	4961      	ldr	r1, [pc, #388]	; (c8e8 <main+0x308>)
    c762:	a80a      	add	r0, sp, #40	; 0x28
    c764:	f005 ffd4 	bl	12710 <strcpy>
		printk("No address found, adding %s at id %d\n", buf,
    c768:	a90a      	add	r1, sp, #40	; 0x28
    c76a:	2201      	movs	r2, #1
    c76c:	485f      	ldr	r0, [pc, #380]	; (c8ec <main+0x30c>)
    c76e:	f005 f9af 	bl	11ad0 <printk>
		(void)nvs_write(&fs, ADDRESS_ID, &buf, strlen(buf) + 1);
    c772:	a80a      	add	r0, sp, #40	; 0x28
    c774:	f005 ffe8 	bl	12748 <strlen>
    c778:	aa0a      	add	r2, sp, #40	; 0x28
    c77a:	1c43      	adds	r3, r0, #1
    c77c:	2101      	movs	r1, #1
    c77e:	4620      	mov	r0, r4
    c780:	f001 ff1a 	bl	e5b8 <nvs_write>
    c784:	e76d      	b.n	c662 <main+0x82>
		printk("No key found, adding it at id %d\n", KEY_ID);
    c786:	485a      	ldr	r0, [pc, #360]	; (c8f0 <main+0x310>)
    c788:	f005 f9a2 	bl	11ad0 <printk>
		key[0] = 0xFF;
    c78c:	23ff      	movs	r3, #255	; 0xff
    c78e:	f88d 3014 	strb.w	r3, [sp, #20]
		key[1] = 0xFE;
    c792:	23fe      	movs	r3, #254	; 0xfe
    c794:	f88d 3015 	strb.w	r3, [sp, #21]
		key[2] = 0xFD;
    c798:	23fd      	movs	r3, #253	; 0xfd
    c79a:	f88d 3016 	strb.w	r3, [sp, #22]
		key[3] = 0xFC;
    c79e:	23fc      	movs	r3, #252	; 0xfc
    c7a0:	f88d 3017 	strb.w	r3, [sp, #23]
		key[4] = 0xFB;
    c7a4:	23fb      	movs	r3, #251	; 0xfb
    c7a6:	f88d 3018 	strb.w	r3, [sp, #24]
		key[5] = 0xFA;
    c7aa:	23fa      	movs	r3, #250	; 0xfa
    c7ac:	f88d 3019 	strb.w	r3, [sp, #25]
		key[6] = 0xF9;
    c7b0:	23f9      	movs	r3, #249	; 0xf9
    c7b2:	f88d 301a 	strb.w	r3, [sp, #26]
		key[7] = 0xF8;
    c7b6:	23f8      	movs	r3, #248	; 0xf8
    c7b8:	f88d 301b 	strb.w	r3, [sp, #27]
		(void)nvs_write(&fs, KEY_ID, &key, sizeof(key));
    c7bc:	aa05      	add	r2, sp, #20
    c7be:	2308      	movs	r3, #8
    c7c0:	2102      	movs	r1, #2
    c7c2:	483a      	ldr	r0, [pc, #232]	; (c8ac <main+0x2cc>)
    c7c4:	f001 fef8 	bl	e5b8 <nvs_write>
    c7c8:	e767      	b.n	c69a <main+0xba>
		printk("No Reboot counter found, adding it at id %d\n",
    c7ca:	484a      	ldr	r0, [pc, #296]	; (c8f4 <main+0x314>)
    c7cc:	2103      	movs	r1, #3
    c7ce:	f005 f97f 	bl	11ad0 <printk>
		(void)nvs_write(&fs, RBT_CNT_ID, &reboot_counter,
    c7d2:	2304      	movs	r3, #4
    c7d4:	aa03      	add	r2, sp, #12
    c7d6:	2103      	movs	r1, #3
    c7d8:	4834      	ldr	r0, [pc, #208]	; (c8ac <main+0x2cc>)
    c7da:	f001 feed 	bl	e5b8 <nvs_write>
    c7de:	e76a      	b.n	c6b6 <main+0xd6>
		if (reboot_counter == 0U)
    c7e0:	9b03      	ldr	r3, [sp, #12]
    c7e2:	2b00      	cmp	r3, #0
    c7e4:	f47f af7c 	bne.w	c6e0 <main+0x100>
			printk("Id: %d not found, adding it\n",
    c7e8:	4843      	ldr	r0, [pc, #268]	; (c8f8 <main+0x318>)
    c7ea:	2104      	movs	r1, #4
    c7ec:	f005 f970 	bl	11ad0 <printk>
			strcpy(buf, "DATA");
    c7f0:	4942      	ldr	r1, [pc, #264]	; (c8fc <main+0x31c>)
    c7f2:	a80a      	add	r0, sp, #40	; 0x28
    c7f4:	f005 ff8c 	bl	12710 <strcpy>
			(void)nvs_write(&fs, STRING_ID, &buf, strlen(buf) + 1);
    c7f8:	a80a      	add	r0, sp, #40	; 0x28
    c7fa:	f005 ffa5 	bl	12748 <strlen>
    c7fe:	aa0a      	add	r2, sp, #40	; 0x28
    c800:	1c43      	adds	r3, r0, #1
    c802:	2104      	movs	r1, #4
    c804:	4829      	ldr	r0, [pc, #164]	; (c8ac <main+0x2cc>)
    c806:	f001 fed7 	bl	e5b8 <nvs_write>
    c80a:	e769      	b.n	c6e0 <main+0x100>
		if (reboot_counter == 0U)
    c80c:	9c03      	ldr	r4, [sp, #12]
    c80e:	2c00      	cmp	r4, #0
    c810:	d181      	bne.n	c716 <main+0x136>
			printk("Longarray not found, adding it as id %d\n",
    c812:	483b      	ldr	r0, [pc, #236]	; (c900 <main+0x320>)
    c814:	2105      	movs	r1, #5
    c816:	f005 f95b 	bl	11ad0 <printk>
			for (int n = 0; n < sizeof(longarray); n++)
    c81a:	aa0e      	add	r2, sp, #56	; 0x38
    c81c:	4623      	mov	r3, r4
				longarray[n] = n;
    c81e:	f802 3b01 	strb.w	r3, [r2], #1
			for (int n = 0; n < sizeof(longarray); n++)
    c822:	3301      	adds	r3, #1
    c824:	2b80      	cmp	r3, #128	; 0x80
    c826:	d1fa      	bne.n	c81e <main+0x23e>
			(void)nvs_write(
    c828:	aa0e      	add	r2, sp, #56	; 0x38
    c82a:	2105      	movs	r1, #5
    c82c:	481f      	ldr	r0, [pc, #124]	; (c8ac <main+0x2cc>)
    c82e:	f001 fec3 	bl	e5b8 <nvs_write>
    c832:	e770      	b.n	c716 <main+0x136>
				if (cnt_his == 0)
    c834:	bb1d      	cbnz	r5, c87e <main+0x29e>
					printk("\n Error, no Reboot counter");
    c836:	4833      	ldr	r0, [pc, #204]	; (c904 <main+0x324>)
    c838:	f005 f94a 	bl	11ad0 <printk>
				printk("\nRebooting in ");
    c83c:	4832      	ldr	r0, [pc, #200]	; (c908 <main+0x328>)
    c83e:	f005 f947 	bl	11ad0 <printk>
			printk("...%d", cnt);
    c842:	4621      	mov	r1, r4
    c844:	4638      	mov	r0, r7
    c846:	f005 f943 	bl	11ad0 <printk>
			if (cnt == 0)
    c84a:	3c01      	subs	r4, #1
    c84c:	f47f af68 	bne.w	c720 <main+0x140>
				printk("\n");
    c850:	481f      	ldr	r0, [pc, #124]	; (c8d0 <main+0x2f0>)
    c852:	f005 f93d 	bl	11ad0 <printk>
				reboot_counter++;
    c856:	9b03      	ldr	r3, [sp, #12]
    c858:	3301      	adds	r3, #1
    c85a:	9303      	str	r3, [sp, #12]
				(void)nvs_write(
    c85c:	aa03      	add	r2, sp, #12
    c85e:	2304      	movs	r3, #4
    c860:	2103      	movs	r1, #3
    c862:	4630      	mov	r0, r6
    c864:	f001 fea8 	bl	e5b8 <nvs_write>
				if (reboot_counter == MAX_REBOOT)
    c868:	9b03      	ldr	r3, [sp, #12]
    c86a:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
    c86e:	d102      	bne.n	c876 <main+0x296>
					printk("Doing last reboot...\n");
    c870:	4826      	ldr	r0, [pc, #152]	; (c90c <main+0x32c>)
    c872:	f005 f92d 	bl	11ad0 <printk>
				sys_reboot(0);
    c876:	2000      	movs	r0, #0
    c878:	f000 fd3a 	bl	d2f0 <sys_reboot>
    c87c:	e750      	b.n	c720 <main+0x140>
					printk("\nOldest reboot counter: %d",
    c87e:	9904      	ldr	r1, [sp, #16]
    c880:	4823      	ldr	r0, [pc, #140]	; (c910 <main+0x330>)
    c882:	f005 f925 	bl	11ad0 <printk>
    c886:	e7d9      	b.n	c83c <main+0x25c>
			printk("Reboot counter reached max value.\n");
    c888:	4822      	ldr	r0, [pc, #136]	; (c914 <main+0x334>)
    c88a:	f005 f921 	bl	11ad0 <printk>
			printk("Reset to 0 and exit test.\n");
    c88e:	4822      	ldr	r0, [pc, #136]	; (c918 <main+0x338>)
    c890:	f005 f91e 	bl	11ad0 <printk>
			reboot_counter = 0U;
    c894:	2300      	movs	r3, #0
    c896:	9303      	str	r3, [sp, #12]
			(void)nvs_write(&fs, RBT_CNT_ID, &reboot_counter,
    c898:	aa03      	add	r2, sp, #12
    c89a:	2304      	movs	r3, #4
    c89c:	2103      	movs	r1, #3
    c89e:	4803      	ldr	r0, [pc, #12]	; (c8ac <main+0x2cc>)
    c8a0:	f001 fe8a 	bl	e5b8 <nvs_write>
			break;
    c8a4:	e6bb      	b.n	c61e <main+0x3e>
    c8a6:	bf00      	nop
    c8a8:	00012ec4 	.word	0x00012ec4
    c8ac:	20000218 	.word	0x20000218
    c8b0:	00013234 	.word	0x00013234
    c8b4:	00013260 	.word	0x00013260
    c8b8:	00013242 	.word	0x00013242
    c8bc:	00013279 	.word	0x00013279
    c8c0:	0001328e 	.word	0x0001328e
    c8c4:	000132a1 	.word	0x000132a1
    c8c8:	000132e8 	.word	0x000132e8
    c8cc:	000132f6 	.word	0x000132f6
    c8d0:	00013533 	.word	0x00013533
    c8d4:	0001331c 	.word	0x0001331c
    c8d8:	00013365 	.word	0x00013365
    c8dc:	00013399 	.word	0x00013399
    c8e0:	000133d6 	.word	0x000133d6
    c8e4:	000133ef 	.word	0x000133ef
    c8e8:	000132b6 	.word	0x000132b6
    c8ec:	000132c2 	.word	0x000132c2
    c8f0:	000132fa 	.word	0x000132fa
    c8f4:	00013338 	.word	0x00013338
    c8f8:	00013377 	.word	0x00013377
    c8fc:	00013394 	.word	0x00013394
    c900:	000133ad 	.word	0x000133ad
    c904:	000133f5 	.word	0x000133f5
    c908:	0001342b 	.word	0x0001342b
    c90c:	0001343a 	.word	0x0001343a
    c910:	00013410 	.word	0x00013410
    c914:	00013450 	.word	0x00013450
    c918:	00013473 	.word	0x00013473

0000c91c <crc8_ccitt>:
	0x00, 0x07, 0x0e, 0x09, 0x1c, 0x1b, 0x12, 0x15,
	0x38, 0x3f, 0x36, 0x31, 0x24, 0x23, 0x2a, 0x2d
};

uint8_t crc8_ccitt(uint8_t val, const void *buf, size_t cnt)
{
    c91c:	b530      	push	{r4, r5, lr}
	size_t i;
	const uint8_t *p = buf;

	for (i = 0; i < cnt; i++) {
		val ^= p[i];
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
    c91e:	4c0a      	ldr	r4, [pc, #40]	; (c948 <crc8_ccitt+0x2c>)
    c920:	440a      	add	r2, r1
	for (i = 0; i < cnt; i++) {
    c922:	4291      	cmp	r1, r2
    c924:	d100      	bne.n	c928 <crc8_ccitt+0xc>
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
	}
	return val;
}
    c926:	bd30      	pop	{r4, r5, pc}
		val ^= p[i];
    c928:	f811 3b01 	ldrb.w	r3, [r1], #1
    c92c:	4058      	eors	r0, r3
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
    c92e:	0903      	lsrs	r3, r0, #4
    c930:	5ce3      	ldrb	r3, [r4, r3]
    c932:	ea83 1300 	eor.w	r3, r3, r0, lsl #4
    c936:	b2dd      	uxtb	r5, r3
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
    c938:	f3c3 1303 	ubfx	r3, r3, #4, #4
    c93c:	5ce0      	ldrb	r0, [r4, r3]
    c93e:	ea80 1005 	eor.w	r0, r0, r5, lsl #4
    c942:	b2c0      	uxtb	r0, r0
	for (i = 0; i < cnt; i++) {
    c944:	e7ed      	b.n	c922 <crc8_ccitt+0x6>
    c946:	bf00      	nop
    c948:	0001348e 	.word	0x0001348e

0000c94c <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
    c94c:	680b      	ldr	r3, [r1, #0]
    c94e:	3301      	adds	r3, #1
    c950:	600b      	str	r3, [r1, #0]
	return _char_out(c);
    c952:	4b01      	ldr	r3, [pc, #4]	; (c958 <char_out+0xc>)
    c954:	681b      	ldr	r3, [r3, #0]
    c956:	4718      	bx	r3
    c958:	20000000 	.word	0x20000000

0000c95c <__printk_hook_install>:
	_char_out = fn;
    c95c:	4b01      	ldr	r3, [pc, #4]	; (c964 <__printk_hook_install+0x8>)
    c95e:	6018      	str	r0, [r3, #0]
}
    c960:	4770      	bx	lr
    c962:	bf00      	nop
    c964:	20000000 	.word	0x20000000

0000c968 <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
    c968:	b507      	push	{r0, r1, r2, lr}
    c96a:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
    c96c:	2100      	movs	r1, #0
{
    c96e:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
    c970:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	cbvprintf(char_out, &ctx, fmt, ap);
    c972:	4803      	ldr	r0, [pc, #12]	; (c980 <vprintk+0x18>)
    c974:	a901      	add	r1, sp, #4
    c976:	f000 f8f9 	bl	cb6c <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
    c97a:	b003      	add	sp, #12
    c97c:	f85d fb04 	ldr.w	pc, [sp], #4
    c980:	0000c94d 	.word	0x0000c94d

0000c984 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
    c984:	b530      	push	{r4, r5, lr}
    c986:	b085      	sub	sp, #20
	struct str_context ctx = { str, size, 0 };
    c988:	e9cd 0101 	strd	r0, r1, [sp, #4]
{
    c98c:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
    c98e:	2500      	movs	r5, #0

	cbvprintf(str_out, &ctx, fmt, ap);
    c990:	a901      	add	r1, sp, #4
    c992:	4805      	ldr	r0, [pc, #20]	; (c9a8 <vsnprintk+0x24>)
	struct str_context ctx = { str, size, 0 };
    c994:	9503      	str	r5, [sp, #12]
	cbvprintf(str_out, &ctx, fmt, ap);
    c996:	f000 f8e9 	bl	cb6c <cbvprintf>

	if (ctx.count < ctx.max) {
    c99a:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
    c99e:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
    c9a0:	bfb8      	it	lt
    c9a2:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
    c9a4:	b005      	add	sp, #20
    c9a6:	bd30      	pop	{r4, r5, pc}
    c9a8:	00011aab 	.word	0x00011aab

0000c9ac <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    c9ac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    c9b0:	f8b0 9018 	ldrh.w	r9, [r0, #24]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    c9b4:	f019 0808 	ands.w	r8, r9, #8
{
    c9b8:	4604      	mov	r4, r0
    c9ba:	4693      	mov	fp, r2
	if (processing) {
    c9bc:	d00d      	beq.n	c9da <process_event+0x2e>
		if (evt == EVT_COMPLETE) {
    c9be:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    c9c0:	bf0c      	ite	eq
    c9c2:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
    c9c6:	f049 0920 	orrne.w	r9, r9, #32
    c9ca:	f8a0 9018 	strh.w	r9, [r0, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    c9ce:	f38b 8811 	msr	BASEPRI, fp
    c9d2:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
    c9d6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    c9da:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
    c9de:	2902      	cmp	r1, #2
    c9e0:	d107      	bne.n	c9f2 <process_event+0x46>
			evt = process_recheck(mgr);
    c9e2:	4620      	mov	r0, r4
    c9e4:	f005 f88e 	bl	11b04 <process_recheck>
		if (evt == EVT_NOP) {
    c9e8:	2800      	cmp	r0, #0
    c9ea:	d0f0      	beq.n	c9ce <process_event+0x22>
		if (evt == EVT_COMPLETE) {
    c9ec:	2801      	cmp	r0, #1
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    c9ee:	8b23      	ldrh	r3, [r4, #24]
		if (evt == EVT_COMPLETE) {
    c9f0:	d14e      	bne.n	ca90 <process_event+0xe4>
			res = mgr->last_res;
    c9f2:	6967      	ldr	r7, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    c9f4:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
    c9f6:	2f00      	cmp	r7, #0
    c9f8:	da15      	bge.n	ca26 <process_event+0x7a>
		*clients = mgr->clients;
    c9fa:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    c9fc:	f021 0107 	bic.w	r1, r1, #7
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
	list->tail = NULL;
    ca00:	e9c4 8800 	strd	r8, r8, [r4]
    ca04:	f041 0101 	orr.w	r1, r1, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
    ca08:	8321      	strh	r1, [r4, #24]
		onoff_transition_fn transit = NULL;
    ca0a:	2600      	movs	r6, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    ca0c:	8b21      	ldrh	r1, [r4, #24]
    ca0e:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    ca12:	45ca      	cmp	sl, r9
    ca14:	d002      	beq.n	ca1c <process_event+0x70>
		if (do_monitors
    ca16:	68a3      	ldr	r3, [r4, #8]
    ca18:	2b00      	cmp	r3, #0
    ca1a:	d15a      	bne.n	cad2 <process_event+0x126>
		    || !sys_slist_is_empty(&clients)
    ca1c:	b90d      	cbnz	r5, ca22 <process_event+0x76>
		    || (transit != NULL)) {
    ca1e:	2e00      	cmp	r6, #0
    ca20:	d071      	beq.n	cb06 <process_event+0x15a>
    ca22:	2300      	movs	r3, #0
    ca24:	e056      	b.n	cad4 <process_event+0x128>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    ca26:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    ca2a:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    ca2c:	2a01      	cmp	r2, #1
    ca2e:	d81e      	bhi.n	ca6e <process_event+0xc2>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    ca30:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
    ca34:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
    ca36:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    ca38:	b289      	uxth	r1, r1
    ca3a:	e9c4 8800 	strd	r8, r8, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    ca3e:	d10a      	bne.n	ca56 <process_event+0xaa>
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    ca40:	b13d      	cbz	r5, ca52 <process_event+0xa6>
    ca42:	8b63      	ldrh	r3, [r4, #26]
    ca44:	462a      	mov	r2, r5

#define SYS_SLIST_STATIC_INIT(ptr_to_list) {NULL, NULL}

static inline sys_snode_t *z_snode_next_peek(sys_snode_t *node)
{
	return node->next;
    ca46:	6812      	ldr	r2, [r2, #0]
				mgr->refs += 1U;
    ca48:	3301      	adds	r3, #1
    ca4a:	b29b      	uxth	r3, r3
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    ca4c:	2a00      	cmp	r2, #0
    ca4e:	d1fa      	bne.n	ca46 <process_event+0x9a>
    ca50:	8363      	strh	r3, [r4, #26]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    ca52:	f041 0102 	orr.w	r1, r1, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
    ca56:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    ca58:	4620      	mov	r0, r4
    ca5a:	f005 f853 	bl	11b04 <process_recheck>
    ca5e:	4606      	mov	r6, r0
    ca60:	2800      	cmp	r0, #0
    ca62:	d0d3      	beq.n	ca0c <process_event+0x60>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    ca64:	8b23      	ldrh	r3, [r4, #24]
    ca66:	f043 0320 	orr.w	r3, r3, #32
    ca6a:	8323      	strh	r3, [r4, #24]
    ca6c:	e7cd      	b.n	ca0a <process_event+0x5e>
	} else if (state == ONOFF_STATE_TO_OFF) {
    ca6e:	2b04      	cmp	r3, #4
    ca70:	d10c      	bne.n	ca8c <process_event+0xe0>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    ca72:	f021 0107 	bic.w	r1, r1, #7
    ca76:	b289      	uxth	r1, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
    ca78:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    ca7a:	4620      	mov	r0, r4
    ca7c:	f005 f842 	bl	11b04 <process_recheck>
    ca80:	4605      	mov	r5, r0
    ca82:	2800      	cmp	r0, #0
    ca84:	d0c1      	beq.n	ca0a <process_event+0x5e>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    ca86:	f041 0120 	orr.w	r1, r1, #32
    ca8a:	8321      	strh	r1, [r4, #24]
    ca8c:	2500      	movs	r5, #0
    ca8e:	e7bc      	b.n	ca0a <process_event+0x5e>
		} else if (evt == EVT_START) {
    ca90:	2803      	cmp	r0, #3
    ca92:	d109      	bne.n	caa8 <process_event+0xfc>
			transit = mgr->transitions->start;
    ca94:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    ca96:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->start;
    ca9a:	6816      	ldr	r6, [r2, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    ca9c:	f043 0306 	orr.w	r3, r3, #6
	mgr->flags = (state & ONOFF_STATE_MASK)
    caa0:	8323      	strh	r3, [r4, #24]
}
    caa2:	2500      	movs	r5, #0
		res = 0;
    caa4:	462f      	mov	r7, r5
    caa6:	e7b1      	b.n	ca0c <process_event+0x60>
		} else if (evt == EVT_STOP) {
    caa8:	2804      	cmp	r0, #4
    caaa:	d106      	bne.n	caba <process_event+0x10e>
			transit = mgr->transitions->stop;
    caac:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    caae:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->stop;
    cab2:	6856      	ldr	r6, [r2, #4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    cab4:	f043 0304 	orr.w	r3, r3, #4
    cab8:	e7f2      	b.n	caa0 <process_event+0xf4>
		} else if (evt == EVT_RESET) {
    caba:	2805      	cmp	r0, #5
    cabc:	d106      	bne.n	cacc <process_event+0x120>
			transit = mgr->transitions->reset;
    cabe:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    cac0:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->reset;
    cac4:	6896      	ldr	r6, [r2, #8]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    cac6:	f043 0305 	orr.w	r3, r3, #5
    caca:	e7e9      	b.n	caa0 <process_event+0xf4>
    cacc:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
    cace:	462e      	mov	r6, r5
    cad0:	e7e8      	b.n	caa4 <process_event+0xf8>
				   && !sys_slist_is_empty(&mgr->monitors);
    cad2:	2301      	movs	r3, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    cad4:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    cad8:	8321      	strh	r1, [r4, #24]
    cada:	f38b 8811 	msr	BASEPRI, fp
    cade:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
    cae2:	b9fb      	cbnz	r3, cb24 <process_event+0x178>
	while (!sys_slist_is_empty(list)) {
    cae4:	bb85      	cbnz	r5, cb48 <process_event+0x19c>
			if (transit != NULL) {
    cae6:	b116      	cbz	r6, caee <process_event+0x142>
				transit(mgr, transition_complete);
    cae8:	491f      	ldr	r1, [pc, #124]	; (cb68 <process_event+0x1bc>)
    caea:	4620      	mov	r0, r4
    caec:	47b0      	blx	r6
	__asm__ volatile(
    caee:	f04f 0320 	mov.w	r3, #32
    caf2:	f3ef 8b11 	mrs	fp, BASEPRI
    caf6:	f383 8811 	msr	BASEPRI, r3
    cafa:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    cafe:	8b23      	ldrh	r3, [r4, #24]
    cb00:	f023 0308 	bic.w	r3, r3, #8
    cb04:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    cb06:	8b23      	ldrh	r3, [r4, #24]
    cb08:	06da      	lsls	r2, r3, #27
    cb0a:	d525      	bpl.n	cb58 <process_event+0x1ac>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    cb0c:	f023 0310 	bic.w	r3, r3, #16
    cb10:	8323      	strh	r3, [r4, #24]
			evt = EVT_COMPLETE;
    cb12:	2101      	movs	r1, #1
		state = mgr->flags & ONOFF_STATE_MASK;
    cb14:	f8b4 9018 	ldrh.w	r9, [r4, #24]
    cb18:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
    cb1c:	2900      	cmp	r1, #0
    cb1e:	f47f af5e 	bne.w	c9de <process_event+0x32>
out:
    cb22:	e754      	b.n	c9ce <process_event+0x22>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    cb24:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    cb26:	2900      	cmp	r1, #0
    cb28:	d0dc      	beq.n	cae4 <process_event+0x138>
	return node->next;
    cb2a:	f8d1 9000 	ldr.w	r9, [r1]
		mon->callback(mgr, mon, state, res);
    cb2e:	f8d1 b004 	ldr.w	fp, [r1, #4]
    cb32:	463b      	mov	r3, r7
    cb34:	4652      	mov	r2, sl
    cb36:	4620      	mov	r0, r4
    cb38:	47d8      	blx	fp
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    cb3a:	f1b9 0f00 	cmp.w	r9, #0
    cb3e:	d0d1      	beq.n	cae4 <process_event+0x138>
    cb40:	4649      	mov	r1, r9
    cb42:	f8d9 9000 	ldr.w	r9, [r9]
    cb46:	e7f2      	b.n	cb2e <process_event+0x182>
    cb48:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
    cb4a:	463b      	mov	r3, r7
    cb4c:	4652      	mov	r2, sl
    cb4e:	4620      	mov	r0, r4
    cb50:	682d      	ldr	r5, [r5, #0]
    cb52:	f004 fff3 	bl	11b3c <notify_one>
    cb56:	e7c5      	b.n	cae4 <process_event+0x138>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    cb58:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    cb5c:	bf1e      	ittt	ne
    cb5e:	f023 0320 	bicne.w	r3, r3, #32
    cb62:	8323      	strhne	r3, [r4, #24]
			evt = EVT_RECHECK;
    cb64:	2102      	movne	r1, #2
    cb66:	e7d5      	b.n	cb14 <process_event+0x168>
    cb68:	00011b69 	.word	0x00011b69

0000cb6c <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
    cb6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cb70:	b091      	sub	sp, #68	; 0x44
    cb72:	468b      	mov	fp, r1
    cb74:	9002      	str	r0, [sp, #8]
    cb76:	4692      	mov	sl, r2
    cb78:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    cb7a:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    cb7c:	f89a 0000 	ldrb.w	r0, [sl]
    cb80:	b908      	cbnz	r0, cb86 <cbvprintf+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
    cb82:	4628      	mov	r0, r5
    cb84:	e35f      	b.n	d246 <cbvprintf+0x6da>
		if (*fp != '%') {
    cb86:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
    cb88:	f10a 0701 	add.w	r7, sl, #1
		if (*fp != '%') {
    cb8c:	d007      	beq.n	cb9e <cbvprintf+0x32>
			OUTC('%');
    cb8e:	9b02      	ldr	r3, [sp, #8]
    cb90:	4659      	mov	r1, fp
    cb92:	4798      	blx	r3
    cb94:	2800      	cmp	r0, #0
    cb96:	f2c0 8356 	blt.w	d246 <cbvprintf+0x6da>
    cb9a:	3501      	adds	r5, #1
			break;
    cb9c:	e212      	b.n	cfc4 <cbvprintf+0x458>
		} state = {
    cb9e:	2218      	movs	r2, #24
    cba0:	2100      	movs	r1, #0
    cba2:	a80a      	add	r0, sp, #40	; 0x28
    cba4:	f005 fe08 	bl	127b8 <memset>
	if (*sp == '%') {
    cba8:	f89a 3001 	ldrb.w	r3, [sl, #1]
    cbac:	2b25      	cmp	r3, #37	; 0x25
    cbae:	d078      	beq.n	cca2 <cbvprintf+0x136>
    cbb0:	2200      	movs	r2, #0
    cbb2:	4610      	mov	r0, r2
    cbb4:	4696      	mov	lr, r2
    cbb6:	4694      	mov	ip, r2
    cbb8:	4616      	mov	r6, r2
    cbba:	4639      	mov	r1, r7
		switch (*sp) {
    cbbc:	f817 3b01 	ldrb.w	r3, [r7], #1
    cbc0:	2b2b      	cmp	r3, #43	; 0x2b
    cbc2:	f000 809d 	beq.w	cd00 <cbvprintf+0x194>
    cbc6:	f200 8094 	bhi.w	ccf2 <cbvprintf+0x186>
    cbca:	2b20      	cmp	r3, #32
    cbcc:	f000 809b 	beq.w	cd06 <cbvprintf+0x19a>
    cbd0:	2b23      	cmp	r3, #35	; 0x23
    cbd2:	f000 809b 	beq.w	cd0c <cbvprintf+0x1a0>
    cbd6:	b12e      	cbz	r6, cbe4 <cbvprintf+0x78>
    cbd8:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
    cbdc:	f046 0604 	orr.w	r6, r6, #4
    cbe0:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
    cbe4:	f1bc 0f00 	cmp.w	ip, #0
    cbe8:	d005      	beq.n	cbf6 <cbvprintf+0x8a>
    cbea:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
    cbee:	f046 0608 	orr.w	r6, r6, #8
    cbf2:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
    cbf6:	f1be 0f00 	cmp.w	lr, #0
    cbfa:	d005      	beq.n	cc08 <cbvprintf+0x9c>
    cbfc:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
    cc00:	f046 0610 	orr.w	r6, r6, #16
    cc04:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
    cc08:	b128      	cbz	r0, cc16 <cbvprintf+0xaa>
    cc0a:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
    cc0e:	f040 0020 	orr.w	r0, r0, #32
    cc12:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
    cc16:	b12a      	cbz	r2, cc24 <cbvprintf+0xb8>
    cc18:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    cc1c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    cc20:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (conv->flag_zero && conv->flag_dash) {
    cc24:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    cc28:	f002 0044 	and.w	r0, r2, #68	; 0x44
    cc2c:	2844      	cmp	r0, #68	; 0x44
    cc2e:	d103      	bne.n	cc38 <cbvprintf+0xcc>
		conv->flag_zero = false;
    cc30:	f36f 1286 	bfc	r2, #6, #1
    cc34:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	conv->width_present = true;
    cc38:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
    cc3c:	2b2a      	cmp	r3, #42	; 0x2a
	conv->width_present = true;
    cc3e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    cc42:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
    cc46:	d17b      	bne.n	cd40 <cbvprintf+0x1d4>
		conv->width_star = true;
    cc48:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    cc4c:	f042 0201 	orr.w	r2, r2, #1
			++sp;
    cc50:	1c4b      	adds	r3, r1, #1
		conv->width_star = true;
    cc52:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	conv->prec_present = (*sp == '.');
    cc56:	781a      	ldrb	r2, [r3, #0]
    cc58:	2a2e      	cmp	r2, #46	; 0x2e
    cc5a:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    cc5e:	bf0c      	ite	eq
    cc60:	2101      	moveq	r1, #1
    cc62:	2100      	movne	r1, #0
    cc64:	f361 0241 	bfi	r2, r1, #1, #1
    cc68:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	if (!conv->prec_present) {
    cc6c:	d174      	bne.n	cd58 <cbvprintf+0x1ec>
	if (*sp == '*') {
    cc6e:	785a      	ldrb	r2, [r3, #1]
    cc70:	2a2a      	cmp	r2, #42	; 0x2a
    cc72:	d06a      	beq.n	cd4a <cbvprintf+0x1de>
	++sp;
    cc74:	3301      	adds	r3, #1
	size_t val = 0;
    cc76:	2100      	movs	r1, #0
		val = 10U * val + *sp++ - '0';
    cc78:	260a      	movs	r6, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    cc7a:	4618      	mov	r0, r3
    cc7c:	f810 2b01 	ldrb.w	r2, [r0], #1
    cc80:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    cc84:	2f09      	cmp	r7, #9
    cc86:	f240 808e 	bls.w	cda6 <cbvprintf+0x23a>
	conv->unsupported |= ((conv->prec_value < 0)
    cc8a:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	conv->prec_value = prec;
    cc8e:	910e      	str	r1, [sp, #56]	; 0x38
	conv->unsupported |= ((conv->prec_value < 0)
    cc90:	f3c2 0040 	ubfx	r0, r2, #1, #1
    cc94:	ea40 71d1 	orr.w	r1, r0, r1, lsr #31
    cc98:	f361 0241 	bfi	r2, r1, #1, #1
    cc9c:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
    cca0:	e05a      	b.n	cd58 <cbvprintf+0x1ec>
		conv->specifier = *sp++;
    cca2:	f10a 0702 	add.w	r7, sl, #2
    cca6:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
		if (conv->width_star) {
    ccaa:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    ccae:	07d9      	lsls	r1, r3, #31
    ccb0:	f140 8149 	bpl.w	cf46 <cbvprintf+0x3da>
			width = va_arg(ap, int);
    ccb4:	f854 9b04 	ldr.w	r9, [r4], #4
			if (width < 0) {
    ccb8:	f1b9 0f00 	cmp.w	r9, #0
    ccbc:	da07      	bge.n	ccce <cbvprintf+0x162>
				conv->flag_dash = true;
    ccbe:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    ccc2:	f042 0204 	orr.w	r2, r2, #4
    ccc6:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				width = -width;
    ccca:	f1c9 0900 	rsb	r9, r9, #0
		if (conv->prec_star) {
    ccce:	075a      	lsls	r2, r3, #29
    ccd0:	f140 8142 	bpl.w	cf58 <cbvprintf+0x3ec>
			int arg = va_arg(ap, int);
    ccd4:	f854 8b04 	ldr.w	r8, [r4], #4
			if (arg < 0) {
    ccd8:	f1b8 0f00 	cmp.w	r8, #0
    ccdc:	f280 8141 	bge.w	cf62 <cbvprintf+0x3f6>
				conv->prec_present = false;
    cce0:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    cce4:	f36f 0341 	bfc	r3, #1, #1
    cce8:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		int precision = -1;
    ccec:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    ccf0:	e137      	b.n	cf62 <cbvprintf+0x3f6>
		switch (*sp) {
    ccf2:	2b2d      	cmp	r3, #45	; 0x2d
    ccf4:	d00c      	beq.n	cd10 <cbvprintf+0x1a4>
    ccf6:	2b30      	cmp	r3, #48	; 0x30
    ccf8:	f47f af6d 	bne.w	cbd6 <cbvprintf+0x6a>
			conv->flag_zero = true;
    ccfc:	2201      	movs	r2, #1
	} while (loop);
    ccfe:	e75c      	b.n	cbba <cbvprintf+0x4e>
			conv->flag_plus = true;
    cd00:	f04f 0c01 	mov.w	ip, #1
    cd04:	e759      	b.n	cbba <cbvprintf+0x4e>
			conv->flag_space = true;
    cd06:	f04f 0e01 	mov.w	lr, #1
    cd0a:	e756      	b.n	cbba <cbvprintf+0x4e>
			conv->flag_hash = true;
    cd0c:	2001      	movs	r0, #1
    cd0e:	e754      	b.n	cbba <cbvprintf+0x4e>
		switch (*sp) {
    cd10:	2601      	movs	r6, #1
    cd12:	e752      	b.n	cbba <cbvprintf+0x4e>
		val = 10U * val + *sp++ - '0';
    cd14:	fb0c 0202 	mla	r2, ip, r2, r0
    cd18:	3a30      	subs	r2, #48	; 0x30
    cd1a:	4633      	mov	r3, r6
    cd1c:	461e      	mov	r6, r3
    cd1e:	f816 0b01 	ldrb.w	r0, [r6], #1
    cd22:	f1a0 0730 	sub.w	r7, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    cd26:	2f09      	cmp	r7, #9
    cd28:	d9f4      	bls.n	cd14 <cbvprintf+0x1a8>
	if (sp != wp) {
    cd2a:	4299      	cmp	r1, r3
    cd2c:	d093      	beq.n	cc56 <cbvprintf+0xea>
		conv->unsupported |= ((conv->width_value < 0)
    cd2e:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
		conv->width_value = width;
    cd32:	920d      	str	r2, [sp, #52]	; 0x34
				      || (width != (size_t)conv->width_value));
    cd34:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
    cd36:	f362 0141 	bfi	r1, r2, #1, #1
    cd3a:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
    cd3e:	e78a      	b.n	cc56 <cbvprintf+0xea>
    cd40:	460b      	mov	r3, r1
	size_t val = 0;
    cd42:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
    cd44:	f04f 0c0a 	mov.w	ip, #10
    cd48:	e7e8      	b.n	cd1c <cbvprintf+0x1b0>
		conv->prec_star = true;
    cd4a:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    cd4e:	f042 0204 	orr.w	r2, r2, #4
    cd52:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
		return ++sp;
    cd56:	3302      	adds	r3, #2
	switch (*sp) {
    cd58:	461f      	mov	r7, r3
    cd5a:	f817 2b01 	ldrb.w	r2, [r7], #1
    cd5e:	2a6c      	cmp	r2, #108	; 0x6c
    cd60:	d041      	beq.n	cde6 <cbvprintf+0x27a>
    cd62:	d825      	bhi.n	cdb0 <cbvprintf+0x244>
    cd64:	2a68      	cmp	r2, #104	; 0x68
    cd66:	d02b      	beq.n	cdc0 <cbvprintf+0x254>
    cd68:	2a6a      	cmp	r2, #106	; 0x6a
    cd6a:	d046      	beq.n	cdfa <cbvprintf+0x28e>
    cd6c:	2a4c      	cmp	r2, #76	; 0x4c
    cd6e:	d04c      	beq.n	ce0a <cbvprintf+0x29e>
    cd70:	461f      	mov	r7, r3
	conv->specifier = *sp++;
    cd72:	f817 2b01 	ldrb.w	r2, [r7], #1
		if (conv->length_mod == LENGTH_UPPER_L) {
    cd76:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
	conv->specifier = *sp++;
    cd7a:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
	switch (conv->specifier) {
    cd7e:	2a78      	cmp	r2, #120	; 0x78
    cd80:	f200 80d9 	bhi.w	cf36 <cbvprintf+0x3ca>
    cd84:	2a57      	cmp	r2, #87	; 0x57
    cd86:	d84d      	bhi.n	ce24 <cbvprintf+0x2b8>
    cd88:	2a41      	cmp	r2, #65	; 0x41
    cd8a:	d003      	beq.n	cd94 <cbvprintf+0x228>
    cd8c:	3a45      	subs	r2, #69	; 0x45
    cd8e:	2a02      	cmp	r2, #2
    cd90:	f200 80d1 	bhi.w	cf36 <cbvprintf+0x3ca>
		conv->specifier_cat = SPECIFIER_FP;
    cd94:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    cd98:	2204      	movs	r2, #4
    cd9a:	f362 0302 	bfi	r3, r2, #0, #3
    cd9e:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
			unsupported = true;
    cda2:	2301      	movs	r3, #1
			break;
    cda4:	e09e      	b.n	cee4 <cbvprintf+0x378>
		val = 10U * val + *sp++ - '0';
    cda6:	fb06 2101 	mla	r1, r6, r1, r2
    cdaa:	3930      	subs	r1, #48	; 0x30
    cdac:	4603      	mov	r3, r0
    cdae:	e764      	b.n	cc7a <cbvprintf+0x10e>
	switch (*sp) {
    cdb0:	2a74      	cmp	r2, #116	; 0x74
    cdb2:	d026      	beq.n	ce02 <cbvprintf+0x296>
    cdb4:	2a7a      	cmp	r2, #122	; 0x7a
    cdb6:	d1db      	bne.n	cd70 <cbvprintf+0x204>
		conv->length_mod = LENGTH_Z;
    cdb8:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    cdbc:	2206      	movs	r2, #6
    cdbe:	e00d      	b.n	cddc <cbvprintf+0x270>
		if (*++sp == 'h') {
    cdc0:	785a      	ldrb	r2, [r3, #1]
    cdc2:	2a68      	cmp	r2, #104	; 0x68
    cdc4:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    cdc8:	d106      	bne.n	cdd8 <cbvprintf+0x26c>
			conv->length_mod = LENGTH_HH;
    cdca:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
    cdcc:	f361 02c6 	bfi	r2, r1, #3, #4
    cdd0:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
			++sp;
    cdd4:	1c9f      	adds	r7, r3, #2
    cdd6:	e7cc      	b.n	cd72 <cbvprintf+0x206>
			conv->length_mod = LENGTH_H;
    cdd8:	4613      	mov	r3, r2
    cdda:	2202      	movs	r2, #2
		conv->length_mod = LENGTH_T;
    cddc:	f362 03c6 	bfi	r3, r2, #3, #4
    cde0:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		break;
    cde4:	e7c5      	b.n	cd72 <cbvprintf+0x206>
		if (*++sp == 'l') {
    cde6:	785a      	ldrb	r2, [r3, #1]
    cde8:	2a6c      	cmp	r2, #108	; 0x6c
    cdea:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    cdee:	d101      	bne.n	cdf4 <cbvprintf+0x288>
			conv->length_mod = LENGTH_LL;
    cdf0:	2104      	movs	r1, #4
    cdf2:	e7eb      	b.n	cdcc <cbvprintf+0x260>
			conv->length_mod = LENGTH_L;
    cdf4:	4613      	mov	r3, r2
    cdf6:	2203      	movs	r2, #3
    cdf8:	e7f0      	b.n	cddc <cbvprintf+0x270>
		conv->length_mod = LENGTH_J;
    cdfa:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    cdfe:	2205      	movs	r2, #5
    ce00:	e7ec      	b.n	cddc <cbvprintf+0x270>
		conv->length_mod = LENGTH_T;
    ce02:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    ce06:	2207      	movs	r2, #7
    ce08:	e7e8      	b.n	cddc <cbvprintf+0x270>
		conv->unsupported = true;
    ce0a:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
    ce0e:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
    ce12:	f023 0302 	bic.w	r3, r3, #2
    ce16:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    ce1a:	f043 0302 	orr.w	r3, r3, #2
    ce1e:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
		break;
    ce22:	e7a6      	b.n	cd72 <cbvprintf+0x206>
	switch (conv->specifier) {
    ce24:	f1a2 0158 	sub.w	r1, r2, #88	; 0x58
    ce28:	2920      	cmp	r1, #32
    ce2a:	f200 8084 	bhi.w	cf36 <cbvprintf+0x3ca>
    ce2e:	a001      	add	r0, pc, #4	; (adr r0, ce34 <cbvprintf+0x2c8>)
    ce30:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
    ce34:	0000cef9 	.word	0x0000cef9
    ce38:	0000cf37 	.word	0x0000cf37
    ce3c:	0000cf37 	.word	0x0000cf37
    ce40:	0000cf37 	.word	0x0000cf37
    ce44:	0000cf37 	.word	0x0000cf37
    ce48:	0000cf37 	.word	0x0000cf37
    ce4c:	0000cf37 	.word	0x0000cf37
    ce50:	0000cf37 	.word	0x0000cf37
    ce54:	0000cf37 	.word	0x0000cf37
    ce58:	0000cd95 	.word	0x0000cd95
    ce5c:	0000cf37 	.word	0x0000cf37
    ce60:	0000cef9 	.word	0x0000cef9
    ce64:	0000ceb9 	.word	0x0000ceb9
    ce68:	0000cd95 	.word	0x0000cd95
    ce6c:	0000cd95 	.word	0x0000cd95
    ce70:	0000cd95 	.word	0x0000cd95
    ce74:	0000cf37 	.word	0x0000cf37
    ce78:	0000ceb9 	.word	0x0000ceb9
    ce7c:	0000cf37 	.word	0x0000cf37
    ce80:	0000cf37 	.word	0x0000cf37
    ce84:	0000cf37 	.word	0x0000cf37
    ce88:	0000cf37 	.word	0x0000cf37
    ce8c:	0000cf01 	.word	0x0000cf01
    ce90:	0000cef9 	.word	0x0000cef9
    ce94:	0000cf1d 	.word	0x0000cf1d
    ce98:	0000cf37 	.word	0x0000cf37
    ce9c:	0000cf37 	.word	0x0000cf37
    cea0:	0000cf1d 	.word	0x0000cf1d
    cea4:	0000cf37 	.word	0x0000cf37
    cea8:	0000cef9 	.word	0x0000cef9
    ceac:	0000cf37 	.word	0x0000cf37
    ceb0:	0000cf37 	.word	0x0000cf37
    ceb4:	0000cef9 	.word	0x0000cef9
		conv->specifier_cat = SPECIFIER_SINT;
    ceb8:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
    cebc:	2001      	movs	r0, #1
		if (conv->length_mod == LENGTH_UPPER_L) {
    cebe:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
    cec2:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    cec6:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
    cec8:	f88d 1032 	strb.w	r1, [sp, #50]	; 0x32
			conv->invalid = true;
    cecc:	bf02      	ittt	eq
    cece:	f89d 1030 	ldrbeq.w	r1, [sp, #48]	; 0x30
    ced2:	f041 0101 	orreq.w	r1, r1, #1
    ced6:	f88d 1030 	strbeq.w	r1, [sp, #48]	; 0x30
		if (conv->specifier == 'c') {
    ceda:	2a63      	cmp	r2, #99	; 0x63
    cedc:	d131      	bne.n	cf42 <cbvprintf+0x3d6>
			unsupported = (conv->length_mod != LENGTH_NONE);
    cede:	3b00      	subs	r3, #0
    cee0:	bf18      	it	ne
    cee2:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
    cee4:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    cee8:	f3c2 0140 	ubfx	r1, r2, #1, #1
    ceec:	430b      	orrs	r3, r1
    ceee:	f363 0241 	bfi	r2, r3, #1, #1
    cef2:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
    cef6:	e6d8      	b.n	ccaa <cbvprintf+0x13e>
		conv->specifier_cat = SPECIFIER_UINT;
    cef8:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
    cefc:	2002      	movs	r0, #2
    cefe:	e7de      	b.n	cebe <cbvprintf+0x352>
		conv->specifier_cat = SPECIFIER_PTR;
    cf00:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
    cf04:	f003 0378 	and.w	r3, r3, #120	; 0x78
    cf08:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_PTR;
    cf0c:	2103      	movs	r1, #3
    cf0e:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    cf12:	4243      	negs	r3, r0
		conv->specifier_cat = SPECIFIER_PTR;
    cf14:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
    cf18:	4143      	adcs	r3, r0
    cf1a:	e7e3      	b.n	cee4 <cbvprintf+0x378>
		conv->specifier_cat = SPECIFIER_PTR;
    cf1c:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
    cf20:	2103      	movs	r1, #3
		if (conv->length_mod != LENGTH_NONE) {
    cf22:	f013 0f78 	tst.w	r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
    cf26:	f361 0202 	bfi	r2, r1, #0, #3
    cf2a:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod != LENGTH_NONE) {
    cf2e:	bf14      	ite	ne
    cf30:	2301      	movne	r3, #1
    cf32:	2300      	moveq	r3, #0
    cf34:	e7d6      	b.n	cee4 <cbvprintf+0x378>
		conv->invalid = true;
    cf36:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    cf3a:	f043 0301 	orr.w	r3, r3, #1
    cf3e:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	bool unsupported = false;
    cf42:	2300      	movs	r3, #0
    cf44:	e7ce      	b.n	cee4 <cbvprintf+0x378>
		} else if (conv->width_present) {
    cf46:	f99d 2030 	ldrsb.w	r2, [sp, #48]	; 0x30
    cf4a:	2a00      	cmp	r2, #0
			width = conv->width_value;
    cf4c:	bfb4      	ite	lt
    cf4e:	f8dd 9034 	ldrlt.w	r9, [sp, #52]	; 0x34
		int width = -1;
    cf52:	f04f 39ff 	movge.w	r9, #4294967295	; 0xffffffff
    cf56:	e6ba      	b.n	ccce <cbvprintf+0x162>
		} else if (conv->prec_present) {
    cf58:	079b      	lsls	r3, r3, #30
    cf5a:	f57f aec7 	bpl.w	ccec <cbvprintf+0x180>
			precision = conv->prec_value;
    cf5e:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
			= (enum length_mod_enum)conv->length_mod;
    cf62:	f89d 1031 	ldrb.w	r1, [sp, #49]	; 0x31
		conv->pad0_value = 0;
    cf66:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
    cf68:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
			= (enum specifier_cat_enum)conv->specifier_cat;
    cf6c:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
		enum specifier_cat_enum specifier_cat
    cf70:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
    cf74:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
    cf76:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
    cf7a:	d138      	bne.n	cfee <cbvprintf+0x482>
			switch (length_mod) {
    cf7c:	1ecb      	subs	r3, r1, #3
    cf7e:	2b04      	cmp	r3, #4
    cf80:	d822      	bhi.n	cfc8 <cbvprintf+0x45c>
    cf82:	e8df f003 	tbb	[pc, r3]
    cf86:	0903      	.short	0x0903
    cf88:	2109      	.short	0x2109
    cf8a:	21          	.byte	0x21
    cf8b:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
    cf8c:	f854 3b04 	ldr.w	r3, [r4], #4
				value->sint = (short)value->sint;
    cf90:	17da      	asrs	r2, r3, #31
    cf92:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
    cf96:	e006      	b.n	cfa6 <cbvprintf+0x43a>
					(sint_value_type)va_arg(ap, intmax_t);
    cf98:	3407      	adds	r4, #7
    cf9a:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
    cf9e:	e8f4 2302 	ldrd	r2, r3, [r4], #8
    cfa2:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
		if (conv->invalid || conv->unsupported) {
    cfa6:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    cfaa:	f013 0603 	ands.w	r6, r3, #3
    cfae:	d056      	beq.n	d05e <cbvprintf+0x4f2>
			OUTS(sp, fp);
    cfb0:	9802      	ldr	r0, [sp, #8]
    cfb2:	463b      	mov	r3, r7
    cfb4:	4652      	mov	r2, sl
    cfb6:	4659      	mov	r1, fp
    cfb8:	f004 fe9f 	bl	11cfa <outs>
    cfbc:	2800      	cmp	r0, #0
    cfbe:	f2c0 8142 	blt.w	d246 <cbvprintf+0x6da>
    cfc2:	4405      	add	r5, r0
			continue;
    cfc4:	46ba      	mov	sl, r7
    cfc6:	e5d9      	b.n	cb7c <cbvprintf+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    cfc8:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
    cfcc:	2901      	cmp	r1, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
    cfce:	ea4f 72e3 	mov.w	r2, r3, asr #31
    cfd2:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
    cfd6:	d105      	bne.n	cfe4 <cbvprintf+0x478>
				value->uint = (unsigned char)value->uint;
    cfd8:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
				value->uint = (unsigned short)value->uint;
    cfdc:	930a      	str	r3, [sp, #40]	; 0x28
    cfde:	2300      	movs	r3, #0
    cfe0:	930b      	str	r3, [sp, #44]	; 0x2c
    cfe2:	e7e0      	b.n	cfa6 <cbvprintf+0x43a>
			} else if (length_mod == LENGTH_H) {
    cfe4:	2902      	cmp	r1, #2
    cfe6:	d1de      	bne.n	cfa6 <cbvprintf+0x43a>
				value->sint = (short)value->sint;
    cfe8:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
    cfec:	e7d0      	b.n	cf90 <cbvprintf+0x424>
		} else if (specifier_cat == SPECIFIER_UINT) {
    cfee:	2b02      	cmp	r3, #2
    cff0:	d123      	bne.n	d03a <cbvprintf+0x4ce>
			switch (length_mod) {
    cff2:	1ecb      	subs	r3, r1, #3
    cff4:	2b04      	cmp	r3, #4
    cff6:	d813      	bhi.n	d020 <cbvprintf+0x4b4>
    cff8:	e8df f003 	tbb	[pc, r3]
    cffc:	120a0a03 	.word	0x120a0a03
    d000:	12          	.byte	0x12
    d001:	00          	.byte	0x00
					value->uint = (wchar_t)va_arg(ap,
    d002:	6822      	ldr	r2, [r4, #0]
    d004:	920a      	str	r2, [sp, #40]	; 0x28
    d006:	2300      	movs	r3, #0
				value->sint = va_arg(ap, int);
    d008:	1d20      	adds	r0, r4, #4
					value->uint = (wchar_t)va_arg(ap,
    d00a:	930b      	str	r3, [sp, #44]	; 0x2c
					(uint_value_type)va_arg(ap, size_t);
    d00c:	4604      	mov	r4, r0
    d00e:	e7ca      	b.n	cfa6 <cbvprintf+0x43a>
					(uint_value_type)va_arg(ap,
    d010:	1de0      	adds	r0, r4, #7
    d012:	f020 0007 	bic.w	r0, r0, #7
				value->uint =
    d016:	e8f0 2302 	ldrd	r2, r3, [r0], #8
    d01a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				break;
    d01e:	e7f5      	b.n	d00c <cbvprintf+0x4a0>
					(uint_value_type)va_arg(ap, size_t);
    d020:	f854 3b04 	ldr.w	r3, [r4], #4
    d024:	930a      	str	r3, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
    d026:	2901      	cmp	r1, #1
					(uint_value_type)va_arg(ap, size_t);
    d028:	f04f 0300 	mov.w	r3, #0
    d02c:	930b      	str	r3, [sp, #44]	; 0x2c
			if (length_mod == LENGTH_HH) {
    d02e:	d0d3      	beq.n	cfd8 <cbvprintf+0x46c>
			} else if (length_mod == LENGTH_H) {
    d030:	2902      	cmp	r1, #2
    d032:	d1b8      	bne.n	cfa6 <cbvprintf+0x43a>
				value->uint = (unsigned short)value->uint;
    d034:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    d038:	e7d0      	b.n	cfdc <cbvprintf+0x470>
		} else if (specifier_cat == SPECIFIER_FP) {
    d03a:	2b04      	cmp	r3, #4
    d03c:	d109      	bne.n	d052 <cbvprintf+0x4e6>
					(sint_value_type)va_arg(ap, long long);
    d03e:	1de3      	adds	r3, r4, #7
    d040:	f023 0307 	bic.w	r3, r3, #7
    d044:	f103 0408 	add.w	r4, r3, #8
				value->ldbl = va_arg(ap, long double);
    d048:	e9d3 2300 	ldrd	r2, r3, [r3]
    d04c:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    d050:	e7a9      	b.n	cfa6 <cbvprintf+0x43a>
		} else if (specifier_cat == SPECIFIER_PTR) {
    d052:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
    d054:	bf04      	itt	eq
    d056:	f854 3b04 	ldreq.w	r3, [r4], #4
    d05a:	930a      	streq	r3, [sp, #40]	; 0x28
    d05c:	e7a3      	b.n	cfa6 <cbvprintf+0x43a>
		switch (conv->specifier) {
    d05e:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
    d062:	2878      	cmp	r0, #120	; 0x78
    d064:	d8ae      	bhi.n	cfc4 <cbvprintf+0x458>
    d066:	2862      	cmp	r0, #98	; 0x62
    d068:	d822      	bhi.n	d0b0 <cbvprintf+0x544>
    d06a:	2825      	cmp	r0, #37	; 0x25
    d06c:	f43f ad8f 	beq.w	cb8e <cbvprintf+0x22>
    d070:	2858      	cmp	r0, #88	; 0x58
    d072:	d1a7      	bne.n	cfc4 <cbvprintf+0x458>
			bps = encode_uint(value->uint, conv, buf, bpe);
    d074:	f10d 0326 	add.w	r3, sp, #38	; 0x26
    d078:	9300      	str	r3, [sp, #0]
    d07a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    d07e:	ab04      	add	r3, sp, #16
    d080:	aa0c      	add	r2, sp, #48	; 0x30
    d082:	f004 fdf4 	bl	11c6e <encode_uint>
    d086:	4682      	mov	sl, r0
			if (precision >= 0) {
    d088:	f1b8 0f00 	cmp.w	r8, #0
    d08c:	f10d 0026 	add.w	r0, sp, #38	; 0x26
    d090:	db0c      	blt.n	d0ac <cbvprintf+0x540>
				conv->flag_zero = false;
    d092:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
				size_t len = bpe - bps;
    d096:	eba0 030a 	sub.w	r3, r0, sl
				conv->flag_zero = false;
    d09a:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
    d09e:	4598      	cmp	r8, r3
				conv->flag_zero = false;
    d0a0:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				if (len < (size_t)precision) {
    d0a4:	d902      	bls.n	d0ac <cbvprintf+0x540>
					conv->pad0_value = precision - (int)len;
    d0a6:	eba8 0303 	sub.w	r3, r8, r3
    d0aa:	930d      	str	r3, [sp, #52]	; 0x34
		const char *bpe = buf + sizeof(buf);
    d0ac:	4680      	mov	r8, r0
    d0ae:	e03d      	b.n	d12c <cbvprintf+0x5c0>
		switch (conv->specifier) {
    d0b0:	3863      	subs	r0, #99	; 0x63
    d0b2:	2815      	cmp	r0, #21
    d0b4:	d886      	bhi.n	cfc4 <cbvprintf+0x458>
    d0b6:	a201      	add	r2, pc, #4	; (adr r2, d0bc <cbvprintf+0x550>)
    d0b8:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
    d0bc:	0000d13d 	.word	0x0000d13d
    d0c0:	0000d1a1 	.word	0x0000d1a1
    d0c4:	0000cfc5 	.word	0x0000cfc5
    d0c8:	0000cfc5 	.word	0x0000cfc5
    d0cc:	0000cfc5 	.word	0x0000cfc5
    d0d0:	0000cfc5 	.word	0x0000cfc5
    d0d4:	0000d1a1 	.word	0x0000d1a1
    d0d8:	0000cfc5 	.word	0x0000cfc5
    d0dc:	0000cfc5 	.word	0x0000cfc5
    d0e0:	0000cfc5 	.word	0x0000cfc5
    d0e4:	0000cfc5 	.word	0x0000cfc5
    d0e8:	0000d1fb 	.word	0x0000d1fb
    d0ec:	0000d1c9 	.word	0x0000d1c9
    d0f0:	0000d1cd 	.word	0x0000d1cd
    d0f4:	0000cfc5 	.word	0x0000cfc5
    d0f8:	0000cfc5 	.word	0x0000cfc5
    d0fc:	0000d115 	.word	0x0000d115
    d100:	0000cfc5 	.word	0x0000cfc5
    d104:	0000d1c9 	.word	0x0000d1c9
    d108:	0000cfc5 	.word	0x0000cfc5
    d10c:	0000cfc5 	.word	0x0000cfc5
    d110:	0000d1c9 	.word	0x0000d1c9
			if (precision >= 0) {
    d114:	f1b8 0f00 	cmp.w	r8, #0
			bps = (const char *)value->ptr;
    d118:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
			if (precision >= 0) {
    d11c:	db0a      	blt.n	d134 <cbvprintf+0x5c8>
				len = strnlen(bps, precision);
    d11e:	4641      	mov	r1, r8
    d120:	4650      	mov	r0, sl
    d122:	f005 fb18 	bl	12756 <strnlen>
			bpe = bps + len;
    d126:	eb0a 0800 	add.w	r8, sl, r0
		char sign = 0;
    d12a:	2600      	movs	r6, #0
		if (bps == NULL) {
    d12c:	f1ba 0f00 	cmp.w	sl, #0
    d130:	d10c      	bne.n	d14c <cbvprintf+0x5e0>
    d132:	e747      	b.n	cfc4 <cbvprintf+0x458>
				len = strlen(bps);
    d134:	4650      	mov	r0, sl
    d136:	f005 fb07 	bl	12748 <strlen>
    d13a:	e7f4      	b.n	d126 <cbvprintf+0x5ba>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    d13c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    d13e:	f88d 3010 	strb.w	r3, [sp, #16]
			break;
    d142:	2600      	movs	r6, #0
			bps = buf;
    d144:	f10d 0a10 	add.w	sl, sp, #16
			bpe = buf + 1;
    d148:	f10d 0811 	add.w	r8, sp, #17
		size_t nj_len = (bpe - bps);
    d14c:	eba8 030a 	sub.w	r3, r8, sl
		if (sign != 0) {
    d150:	b106      	cbz	r6, d154 <cbvprintf+0x5e8>
			nj_len += 1U;
    d152:	3301      	adds	r3, #1
		if (conv->altform_0c) {
    d154:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
    d158:	06d0      	lsls	r0, r2, #27
    d15a:	d568      	bpl.n	d22e <cbvprintf+0x6c2>
			nj_len += 2U;
    d15c:	3302      	adds	r3, #2
		if (conv->pad_fp) {
    d15e:	0652      	lsls	r2, r2, #25
		nj_len += conv->pad0_value;
    d160:	990d      	ldr	r1, [sp, #52]	; 0x34
			nj_len += conv->pad0_pre_exp;
    d162:	bf48      	it	mi
    d164:	9a0e      	ldrmi	r2, [sp, #56]	; 0x38
		nj_len += conv->pad0_value;
    d166:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
    d168:	bf48      	it	mi
    d16a:	189b      	addmi	r3, r3, r2
		if (width > 0) {
    d16c:	f1b9 0f00 	cmp.w	r9, #0
    d170:	dd76      	ble.n	d260 <cbvprintf+0x6f4>
			if (!conv->flag_dash) {
    d172:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
			width -= (int)nj_len;
    d176:	eba9 0903 	sub.w	r9, r9, r3
			if (!conv->flag_dash) {
    d17a:	f3c2 0380 	ubfx	r3, r2, #2, #1
    d17e:	9303      	str	r3, [sp, #12]
    d180:	0753      	lsls	r3, r2, #29
    d182:	d46d      	bmi.n	d260 <cbvprintf+0x6f4>
				if (conv->flag_zero) {
    d184:	0650      	lsls	r0, r2, #25
    d186:	d561      	bpl.n	d24c <cbvprintf+0x6e0>
					if (sign != 0) {
    d188:	b146      	cbz	r6, d19c <cbvprintf+0x630>
						OUTC(sign);
    d18a:	9b02      	ldr	r3, [sp, #8]
    d18c:	4659      	mov	r1, fp
    d18e:	4630      	mov	r0, r6
    d190:	4798      	blx	r3
    d192:	2800      	cmp	r0, #0
    d194:	db57      	blt.n	d246 <cbvprintf+0x6da>
						sign = 0;
    d196:	9b03      	ldr	r3, [sp, #12]
						OUTC(sign);
    d198:	3501      	adds	r5, #1
						sign = 0;
    d19a:	461e      	mov	r6, r3
					pad = '0';
    d19c:	2330      	movs	r3, #48	; 0x30
    d19e:	e056      	b.n	d24e <cbvprintf+0x6e2>
			if (conv->flag_plus) {
    d1a0:	071e      	lsls	r6, r3, #28
    d1a2:	d40f      	bmi.n	d1c4 <cbvprintf+0x658>
				sign = ' ';
    d1a4:	f013 0610 	ands.w	r6, r3, #16
    d1a8:	bf18      	it	ne
    d1aa:	2620      	movne	r6, #32
			sint = value->sint;
    d1ac:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
			if (sint < 0) {
    d1b0:	2b00      	cmp	r3, #0
    d1b2:	f6bf af5f 	bge.w	d074 <cbvprintf+0x508>
				value->uint = (uint_value_type)-sint;
    d1b6:	4252      	negs	r2, r2
    d1b8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    d1bc:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				sign = '-';
    d1c0:	262d      	movs	r6, #45	; 0x2d
    d1c2:	e757      	b.n	d074 <cbvprintf+0x508>
				sign = '+';
    d1c4:	262b      	movs	r6, #43	; 0x2b
    d1c6:	e7f1      	b.n	d1ac <cbvprintf+0x640>
		switch (conv->specifier) {
    d1c8:	2600      	movs	r6, #0
    d1ca:	e753      	b.n	d074 <cbvprintf+0x508>
			if (value->ptr != NULL) {
    d1cc:	980a      	ldr	r0, [sp, #40]	; 0x28
    d1ce:	b340      	cbz	r0, d222 <cbvprintf+0x6b6>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    d1d0:	f10d 0326 	add.w	r3, sp, #38	; 0x26
    d1d4:	9300      	str	r3, [sp, #0]
    d1d6:	aa0c      	add	r2, sp, #48	; 0x30
    d1d8:	ab04      	add	r3, sp, #16
    d1da:	2100      	movs	r1, #0
    d1dc:	f004 fd47 	bl	11c6e <encode_uint>
				conv->altform_0c = true;
    d1e0:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
    d1e4:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    d1e8:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
    d1ec:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
    d1f0:	4682      	mov	sl, r0
				conv->altform_0c = true;
    d1f2:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
		char sign = 0;
    d1f6:	2600      	movs	r6, #0
				goto prec_int_pad0;
    d1f8:	e746      	b.n	d088 <cbvprintf+0x51c>
				store_count(conv, value->ptr, count);
    d1fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	switch ((enum length_mod_enum)conv->length_mod) {
    d1fc:	2907      	cmp	r1, #7
    d1fe:	f63f aee1 	bhi.w	cfc4 <cbvprintf+0x458>
    d202:	e8df f001 	tbb	[pc, r1]
    d206:	040c      	.short	0x040c
    d208:	08080c06 	.word	0x08080c06
    d20c:	0c0c      	.short	0x0c0c
		*(signed char *)dp = (signed char)count;
    d20e:	701d      	strb	r5, [r3, #0]
		break;
    d210:	e6d8      	b.n	cfc4 <cbvprintf+0x458>
		*(short *)dp = (short)count;
    d212:	801d      	strh	r5, [r3, #0]
		break;
    d214:	e6d6      	b.n	cfc4 <cbvprintf+0x458>
		*(intmax_t *)dp = (intmax_t)count;
    d216:	17ea      	asrs	r2, r5, #31
    d218:	e9c3 5200 	strd	r5, r2, [r3]
		break;
    d21c:	e6d2      	b.n	cfc4 <cbvprintf+0x458>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    d21e:	601d      	str	r5, [r3, #0]
		break;
    d220:	e6d0      	b.n	cfc4 <cbvprintf+0x458>
			bps = "(nil)";
    d222:	f8df a0c8 	ldr.w	sl, [pc, #200]	; d2ec <cbvprintf+0x780>
    d226:	4606      	mov	r6, r0
			bpe = bps + 5;
    d228:	f10a 0805 	add.w	r8, sl, #5
    d22c:	e78e      	b.n	d14c <cbvprintf+0x5e0>
		} else if (conv->altform_0) {
    d22e:	0711      	lsls	r1, r2, #28
			nj_len += 1U;
    d230:	bf48      	it	mi
    d232:	3301      	addmi	r3, #1
    d234:	e793      	b.n	d15e <cbvprintf+0x5f2>
					OUTC(pad);
    d236:	4618      	mov	r0, r3
    d238:	9303      	str	r3, [sp, #12]
    d23a:	4659      	mov	r1, fp
    d23c:	9b02      	ldr	r3, [sp, #8]
    d23e:	4798      	blx	r3
    d240:	2800      	cmp	r0, #0
    d242:	9b03      	ldr	r3, [sp, #12]
    d244:	da04      	bge.n	d250 <cbvprintf+0x6e4>
#undef OUTS
#undef OUTC
}
    d246:	b011      	add	sp, #68	; 0x44
    d248:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
    d24c:	2320      	movs	r3, #32
    d24e:	444d      	add	r5, r9
    d250:	464a      	mov	r2, r9
				while (width-- > 0) {
    d252:	2a00      	cmp	r2, #0
    d254:	eba5 0109 	sub.w	r1, r5, r9
    d258:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
    d25c:	dceb      	bgt.n	d236 <cbvprintf+0x6ca>
    d25e:	460d      	mov	r5, r1
		if (sign != 0) {
    d260:	b136      	cbz	r6, d270 <cbvprintf+0x704>
			OUTC(sign);
    d262:	9b02      	ldr	r3, [sp, #8]
    d264:	4659      	mov	r1, fp
    d266:	4630      	mov	r0, r6
    d268:	4798      	blx	r3
    d26a:	2800      	cmp	r0, #0
    d26c:	dbeb      	blt.n	d246 <cbvprintf+0x6da>
    d26e:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
    d270:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    d274:	06d9      	lsls	r1, r3, #27
    d276:	d401      	bmi.n	d27c <cbvprintf+0x710>
    d278:	071a      	lsls	r2, r3, #28
    d27a:	d506      	bpl.n	d28a <cbvprintf+0x71e>
				OUTC('0');
    d27c:	9b02      	ldr	r3, [sp, #8]
    d27e:	4659      	mov	r1, fp
    d280:	2030      	movs	r0, #48	; 0x30
    d282:	4798      	blx	r3
    d284:	2800      	cmp	r0, #0
    d286:	dbde      	blt.n	d246 <cbvprintf+0x6da>
    d288:	3501      	adds	r5, #1
			if (conv->altform_0c) {
    d28a:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    d28e:	06db      	lsls	r3, r3, #27
    d290:	d507      	bpl.n	d2a2 <cbvprintf+0x736>
				OUTC(conv->specifier);
    d292:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
    d296:	9b02      	ldr	r3, [sp, #8]
    d298:	4659      	mov	r1, fp
    d29a:	4798      	blx	r3
    d29c:	2800      	cmp	r0, #0
    d29e:	dbd2      	blt.n	d246 <cbvprintf+0x6da>
    d2a0:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    d2a2:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    d2a4:	442e      	add	r6, r5
    d2a6:	1b73      	subs	r3, r6, r5
    d2a8:	2b00      	cmp	r3, #0
    d2aa:	dc16      	bgt.n	d2da <cbvprintf+0x76e>
			OUTS(bps, bpe);
    d2ac:	9802      	ldr	r0, [sp, #8]
    d2ae:	4643      	mov	r3, r8
    d2b0:	4652      	mov	r2, sl
    d2b2:	4659      	mov	r1, fp
    d2b4:	f004 fd21 	bl	11cfa <outs>
    d2b8:	2800      	cmp	r0, #0
    d2ba:	dbc4      	blt.n	d246 <cbvprintf+0x6da>
    d2bc:	4405      	add	r5, r0
		while (width > 0) {
    d2be:	44a9      	add	r9, r5
    d2c0:	eba9 0305 	sub.w	r3, r9, r5
    d2c4:	2b00      	cmp	r3, #0
    d2c6:	f77f ae7d 	ble.w	cfc4 <cbvprintf+0x458>
			OUTC(' ');
    d2ca:	9b02      	ldr	r3, [sp, #8]
    d2cc:	4659      	mov	r1, fp
    d2ce:	2020      	movs	r0, #32
    d2d0:	4798      	blx	r3
    d2d2:	2800      	cmp	r0, #0
    d2d4:	dbb7      	blt.n	d246 <cbvprintf+0x6da>
    d2d6:	3501      	adds	r5, #1
			--width;
    d2d8:	e7f2      	b.n	d2c0 <cbvprintf+0x754>
				OUTC('0');
    d2da:	9b02      	ldr	r3, [sp, #8]
    d2dc:	4659      	mov	r1, fp
    d2de:	2030      	movs	r0, #48	; 0x30
    d2e0:	4798      	blx	r3
    d2e2:	2800      	cmp	r0, #0
    d2e4:	dbaf      	blt.n	d246 <cbvprintf+0x6da>
    d2e6:	3501      	adds	r5, #1
    d2e8:	e7dd      	b.n	d2a6 <cbvprintf+0x73a>
    d2ea:	bf00      	nop
    d2ec:	0001349e 	.word	0x0001349e

0000d2f0 <sys_reboot>:

extern void sys_arch_reboot(int type);
extern void sys_clock_disable(void);

void sys_reboot(int type)
{
    d2f0:	b508      	push	{r3, lr}
    d2f2:	4604      	mov	r4, r0
    d2f4:	f04f 0220 	mov.w	r2, #32
    d2f8:	f3ef 8311 	mrs	r3, BASEPRI
    d2fc:	f382 8811 	msr	BASEPRI, r2
    d300:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
#ifdef CONFIG_SYS_CLOCK_EXISTS
	sys_clock_disable();
    d304:	f005 f9f4 	bl	126f0 <sys_clock_disable>
#endif

	sys_arch_reboot(type);
    d308:	4620      	mov	r0, r4
    d30a:	f002 faff 	bl	f90c <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
    d30e:	4803      	ldr	r0, [pc, #12]	; (d31c <sys_reboot+0x2c>)
    d310:	f004 fbde 	bl	11ad0 <printk>
 *
 * @return N/A
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
    d314:	f001 fea6 	bl	f064 <arch_cpu_idle>
    d318:	e7fc      	b.n	d314 <sys_reboot+0x24>
    d31a:	bf00      	nop
    d31c:	000134a4 	.word	0x000134a4

0000d320 <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
    d320:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
    d322:	4910      	ldr	r1, [pc, #64]	; (d364 <enable_logger+0x44>)
    d324:	4810      	ldr	r0, [pc, #64]	; (d368 <enable_logger+0x48>)
{
    d326:	b089      	sub	sp, #36	; 0x24
		k_timer_init(&log_process_thread_timer,
    d328:	2200      	movs	r2, #0
    d32a:	f005 fd44 	bl	12db6 <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    d32e:	4d0f      	ldr	r5, [pc, #60]	; (d36c <enable_logger+0x4c>)
    d330:	490f      	ldr	r1, [pc, #60]	; (d370 <enable_logger+0x50>)
    d332:	2200      	movs	r2, #0
    d334:	2300      	movs	r3, #0
    d336:	e9cd 2306 	strd	r2, r3, [sp, #24]
    d33a:	2400      	movs	r4, #0
    d33c:	230e      	movs	r3, #14
    d33e:	e9cd 3403 	strd	r3, r4, [sp, #12]
    d342:	e9cd 4401 	strd	r4, r4, [sp, #4]
    d346:	4b0b      	ldr	r3, [pc, #44]	; (d374 <enable_logger+0x54>)
    d348:	9400      	str	r4, [sp, #0]
    d34a:	f44f 7240 	mov.w	r2, #768	; 0x300
    d34e:	4628      	mov	r0, r5
    d350:	f003 fcc8 	bl	10ce4 <z_impl_k_thread_create>
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&thread, *(uintptr_t *)&str, K_SYSCALL_K_THREAD_NAME_SET);
	}
#endif
	compiler_barrier();
	return z_impl_k_thread_name_set(thread, str);
    d354:	4908      	ldr	r1, [pc, #32]	; (d378 <enable_logger+0x58>)
    d356:	4628      	mov	r0, r5
    d358:	f005 fbf7 	bl	12b4a <z_impl_k_thread_name_set>
	} else {
		log_init();
	}

	return 0;
}
    d35c:	4620      	mov	r0, r4
    d35e:	b009      	add	sp, #36	; 0x24
    d360:	bd30      	pop	{r4, r5, pc}
    d362:	bf00      	nop
    d364:	0000d37d 	.word	0x0000d37d
    d368:	20000058 	.word	0x20000058
    d36c:	20000090 	.word	0x20000090
    d370:	20000920 	.word	0x20000920
    d374:	0000d6fd 	.word	0x0000d6fd
    d378:	000134cd 	.word	0x000134cd

0000d37c <log_process_thread_timer_expiry_fn>:
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    d37c:	4801      	ldr	r0, [pc, #4]	; (d384 <log_process_thread_timer_expiry_fn+0x8>)
    d37e:	f003 be09 	b.w	10f94 <z_impl_k_sem_give>
    d382:	bf00      	nop
    d384:	20000044 	.word	0x20000044

0000d388 <log_core_init>:
{
    d388:	b510      	push	{r4, lr}
	panic_mode = false;
    d38a:	4b0b      	ldr	r3, [pc, #44]	; (d3b8 <log_core_init+0x30>)
    d38c:	2200      	movs	r2, #0
    d38e:	701a      	strb	r2, [r3, #0]
		timestamp_func = default_get_timestamp;
    d390:	4b0a      	ldr	r3, [pc, #40]	; (d3bc <log_core_init+0x34>)
    d392:	4a0b      	ldr	r2, [pc, #44]	; (d3c0 <log_core_init+0x38>)
    d394:	601a      	str	r2, [r3, #0]
	log_output_timestamp_freq_set(freq);
    d396:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    d39a:	f000 fcbf 	bl	dd1c <log_output_timestamp_freq_set>
		log_msg_pool_init();
    d39e:	f000 fa71 	bl	d884 <log_msg_pool_init>
		log_list_init(&list);
    d3a2:	4808      	ldr	r0, [pc, #32]	; (d3c4 <log_core_init+0x3c>)
    d3a4:	f004 fcc0 	bl	11d28 <log_list_init>
}
    d3a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		k_mem_slab_init(&log_strdup_pool, log_strdup_pool_buf,
    d3ac:	4906      	ldr	r1, [pc, #24]	; (d3c8 <log_core_init+0x40>)
    d3ae:	4807      	ldr	r0, [pc, #28]	; (d3cc <log_core_init+0x44>)
    d3b0:	2304      	movs	r3, #4
    d3b2:	2228      	movs	r2, #40	; 0x28
    d3b4:	f005 bb7f 	b.w	12ab6 <k_mem_slab_init>
    d3b8:	200004f5 	.word	0x200004f5
    d3bc:	20000004 	.word	0x20000004
    d3c0:	00011d67 	.word	0x00011d67
    d3c4:	20000254 	.word	0x20000254
    d3c8:	200019e0 	.word	0x200019e0
    d3cc:	2000025c 	.word	0x2000025c

0000d3d0 <get_msg>:
{
    d3d0:	b510      	push	{r4, lr}
    d3d2:	f04f 0320 	mov.w	r3, #32
    d3d6:	f3ef 8411 	mrs	r4, BASEPRI
    d3da:	f383 8811 	msr	BASEPRI, r3
    d3de:	f3bf 8f6f 	isb	sy
	msg.msg = log_list_head_get(&list);
    d3e2:	4804      	ldr	r0, [pc, #16]	; (d3f4 <get_msg+0x24>)
    d3e4:	f004 fcb0 	bl	11d48 <log_list_head_get>
	__asm__ volatile(
    d3e8:	f384 8811 	msr	BASEPRI, r4
    d3ec:	f3bf 8f6f 	isb	sy
}
    d3f0:	bd10      	pop	{r4, pc}
    d3f2:	bf00      	nop
    d3f4:	20000254 	.word	0x20000254

0000d3f8 <z_log_dropped>:
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_add(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    d3f8:	4b06      	ldr	r3, [pc, #24]	; (d414 <z_log_dropped+0x1c>)
    d3fa:	f3bf 8f5b 	dmb	ish
    d3fe:	e853 2f00 	ldrex	r2, [r3]
    d402:	3201      	adds	r2, #1
    d404:	e843 2100 	strex	r1, r2, [r3]
    d408:	2900      	cmp	r1, #0
    d40a:	d1f8      	bne.n	d3fe <z_log_dropped+0x6>
    d40c:	f3bf 8f5b 	dmb	ish
}
    d410:	4770      	bx	lr
    d412:	bf00      	nop
    d414:	2000024c 	.word	0x2000024c

0000d418 <z_log_dropped_read_and_clear>:
}
    d418:	2000      	movs	r0, #0
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    d41a:	4b06      	ldr	r3, [pc, #24]	; (d434 <z_log_dropped_read_and_clear+0x1c>)
    d41c:	f3bf 8f5b 	dmb	ish
    d420:	4602      	mov	r2, r0
    d422:	e853 0f00 	ldrex	r0, [r3]
    d426:	e843 2100 	strex	r1, r2, [r3]
    d42a:	2900      	cmp	r1, #0
    d42c:	d1f9      	bne.n	d422 <z_log_dropped_read_and_clear+0xa>
    d42e:	f3bf 8f5b 	dmb	ish
    d432:	4770      	bx	lr
    d434:	2000024c 	.word	0x2000024c

0000d438 <dropped_notify>:
{
    d438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t dropped = z_log_dropped_read_and_clear();
    d43a:	f7ff ffed 	bl	d418 <z_log_dropped_read_and_clear>
 *
 * @return Number of backends.
 */
static inline int log_backend_count_get(void)
{
	return __log_backends_end - __log_backends_start;
    d43e:	4c0a      	ldr	r4, [pc, #40]	; (d468 <dropped_notify+0x30>)
    d440:	4d0a      	ldr	r5, [pc, #40]	; (d46c <dropped_notify+0x34>)
    d442:	1b2d      	subs	r5, r5, r4
    d444:	4607      	mov	r7, r0
    d446:	112d      	asrs	r5, r5, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
    d448:	2600      	movs	r6, #0
    d44a:	42ae      	cmp	r6, r5
    d44c:	db00      	blt.n	d450 <dropped_notify+0x18>
}
    d44e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
    d450:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    d452:	795b      	ldrb	r3, [r3, #5]
    d454:	b12b      	cbz	r3, d462 <dropped_notify+0x2a>
	if (backend->api->dropped != NULL) {
    d456:	6823      	ldr	r3, [r4, #0]
    d458:	691b      	ldr	r3, [r3, #16]
    d45a:	b113      	cbz	r3, d462 <dropped_notify+0x2a>
		backend->api->dropped(backend, cnt);
    d45c:	4639      	mov	r1, r7
    d45e:	4620      	mov	r0, r4
    d460:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
    d462:	3601      	adds	r6, #1
    d464:	3410      	adds	r4, #16
    d466:	e7f0      	b.n	d44a <dropped_notify+0x12>
    d468:	00013064 	.word	0x00013064
    d46c:	00013084 	.word	0x00013084

0000d470 <log_source_name_get>:
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
    d470:	4a04      	ldr	r2, [pc, #16]	; (d484 <log_source_name_get+0x14>)
    d472:	4b05      	ldr	r3, [pc, #20]	; (d488 <log_source_name_get+0x18>)
    d474:	1a9b      	subs	r3, r3, r2
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
    d476:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
	return __log_const_start[source_id].name;
    d47a:	bf34      	ite	cc
    d47c:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
    d480:	2000      	movcs	r0, #0
}
    d482:	4770      	bx	lr
    d484:	00013014 	.word	0x00013014
    d488:	00013064 	.word	0x00013064

0000d48c <log_backend_enable>:
	id += backend - log_backend_get(0);
    d48c:	4a09      	ldr	r2, [pc, #36]	; (d4b4 <log_backend_enable+0x28>)
	backend->cb->id = id;
    d48e:	6843      	ldr	r3, [r0, #4]
    d490:	1a80      	subs	r0, r0, r2
{
    d492:	b510      	push	{r4, lr}
	id += backend - log_backend_get(0);
    d494:	1100      	asrs	r0, r0, #4
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
    d496:	4c08      	ldr	r4, [pc, #32]	; (d4b8 <log_backend_enable+0x2c>)
	backend->cb->ctx = ctx;
    d498:	6019      	str	r1, [r3, #0]
	id += backend - log_backend_get(0);
    d49a:	3001      	adds	r0, #1
	backend->cb->active = true;
    d49c:	2201      	movs	r2, #1
	log_backend_id_set(backend, id);
    d49e:	7118      	strb	r0, [r3, #4]
    d4a0:	715a      	strb	r2, [r3, #5]
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
    d4a2:	7823      	ldrb	r3, [r4, #0]
    d4a4:	b913      	cbnz	r3, d4ac <log_backend_enable+0x20>
    d4a6:	4805      	ldr	r0, [pc, #20]	; (d4bc <log_backend_enable+0x30>)
    d4a8:	f003 fd74 	bl	10f94 <z_impl_k_sem_give>
	backend_attached = true;
    d4ac:	2301      	movs	r3, #1
    d4ae:	7023      	strb	r3, [r4, #0]
}
    d4b0:	bd10      	pop	{r4, pc}
    d4b2:	bf00      	nop
    d4b4:	00013064 	.word	0x00013064
    d4b8:	200004f4 	.word	0x200004f4
    d4bc:	20000044 	.word	0x20000044

0000d4c0 <log_init>:
{
    d4c0:	b570      	push	{r4, r5, r6, lr}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    d4c2:	4b12      	ldr	r3, [pc, #72]	; (d50c <log_init+0x4c>)
    d4c4:	f3bf 8f5b 	dmb	ish
    d4c8:	e853 5f00 	ldrex	r5, [r3]
    d4cc:	1c6a      	adds	r2, r5, #1
    d4ce:	e843 2100 	strex	r1, r2, [r3]
    d4d2:	2900      	cmp	r1, #0
    d4d4:	d1f8      	bne.n	d4c8 <log_init+0x8>
    d4d6:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&initialized) != 0) {
    d4da:	b92d      	cbnz	r5, d4e8 <log_init+0x28>
	return __log_backends_end - __log_backends_start;
    d4dc:	4c0c      	ldr	r4, [pc, #48]	; (d510 <log_init+0x50>)
    d4de:	4e0d      	ldr	r6, [pc, #52]	; (d514 <log_init+0x54>)
    d4e0:	1b36      	subs	r6, r6, r4
    d4e2:	1136      	asrs	r6, r6, #4
	for (i = 0; i < log_backend_count_get(); i++) {
    d4e4:	42b5      	cmp	r5, r6
    d4e6:	db00      	blt.n	d4ea <log_init+0x2a>
}
    d4e8:	bd70      	pop	{r4, r5, r6, pc}
		if (backend->autostart) {
    d4ea:	7b23      	ldrb	r3, [r4, #12]
    d4ec:	b153      	cbz	r3, d504 <log_init+0x44>
			if (backend->api->init != NULL) {
    d4ee:	6823      	ldr	r3, [r4, #0]
    d4f0:	699b      	ldr	r3, [r3, #24]
    d4f2:	b10b      	cbz	r3, d4f8 <log_init+0x38>
				backend->api->init(backend);
    d4f4:	4620      	mov	r0, r4
    d4f6:	4798      	blx	r3
			log_backend_enable(backend,
    d4f8:	6863      	ldr	r3, [r4, #4]
    d4fa:	2204      	movs	r2, #4
    d4fc:	6819      	ldr	r1, [r3, #0]
    d4fe:	4620      	mov	r0, r4
    d500:	f7ff ffc4 	bl	d48c <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
    d504:	3501      	adds	r5, #1
    d506:	3410      	adds	r4, #16
    d508:	e7ec      	b.n	d4e4 <log_init+0x24>
    d50a:	bf00      	nop
    d50c:	20000250 	.word	0x20000250
    d510:	00013064 	.word	0x00013064
    d514:	00013084 	.word	0x00013084

0000d518 <z_log_strdup>:
	return (((const char *)addr >= (const char *)RO_START) &&
    d518:	4b16      	ldr	r3, [pc, #88]	; (d574 <z_log_strdup+0x5c>)
    d51a:	4298      	cmp	r0, r3
{
    d51c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    d51e:	4604      	mov	r4, r0
	return (((const char *)addr >= (const char *)RO_START) &&
    d520:	d302      	bcc.n	d528 <z_log_strdup+0x10>
	if (IS_ENABLED(CONFIG_LOG_IMMEDIATE) ||
    d522:	4b15      	ldr	r3, [pc, #84]	; (d578 <z_log_strdup+0x60>)
    d524:	4298      	cmp	r0, r3
    d526:	d320      	bcc.n	d56a <z_log_strdup+0x52>
	err = k_mem_slab_alloc(&log_strdup_pool, (void **)&dup, K_NO_WAIT);
    d528:	4814      	ldr	r0, [pc, #80]	; (d57c <z_log_strdup+0x64>)
    d52a:	2200      	movs	r2, #0
    d52c:	2300      	movs	r3, #0
    d52e:	a901      	add	r1, sp, #4
    d530:	f003 fb78 	bl	10c24 <k_mem_slab_alloc>
	if (err != 0) {
    d534:	4605      	mov	r5, r0
    d536:	b9d8      	cbnz	r0, d570 <z_log_strdup+0x58>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    d538:	2201      	movs	r2, #1
    d53a:	9b01      	ldr	r3, [sp, #4]
    d53c:	f3bf 8f5b 	dmb	ish
    d540:	e853 1f00 	ldrex	r1, [r3]
    d544:	e843 2000 	strex	r0, r2, [r3]
    d548:	2800      	cmp	r0, #0
    d54a:	d1f9      	bne.n	d540 <z_log_strdup+0x28>
    d54c:	f3bf 8f5b 	dmb	ish
	strncpy(dup->buf, str, sizeof(dup->buf) - 2);
    d550:	9801      	ldr	r0, [sp, #4]
    d552:	4621      	mov	r1, r4
    d554:	221f      	movs	r2, #31
    d556:	3004      	adds	r0, #4
    d558:	f005 f8e4 	bl	12724 <strncpy>
	dup->buf[sizeof(dup->buf) - 2] = '~';
    d55c:	9c01      	ldr	r4, [sp, #4]
    d55e:	237e      	movs	r3, #126	; 0x7e
    d560:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	dup->buf[sizeof(dup->buf) - 1] = '\0';
    d564:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
	return dup->buf;
    d568:	3404      	adds	r4, #4
}
    d56a:	4620      	mov	r0, r4
    d56c:	b003      	add	sp, #12
    d56e:	bd30      	pop	{r4, r5, pc}
		return (char *)log_strdup_fail_msg;
    d570:	4c03      	ldr	r4, [pc, #12]	; (d580 <z_log_strdup+0x68>)
    d572:	e7fa      	b.n	d56a <z_log_strdup+0x52>
    d574:	00012e14 	.word	0x00012e14
    d578:	00013e20 	.word	0x00013e20
    d57c:	2000025c 	.word	0x2000025c
    d580:	000134d5 	.word	0x000134d5

0000d584 <log_is_strdup>:
	return PART_OF_ARRAY(log_strdup_pool_buf, (uint8_t *)buf);
    d584:	b148      	cbz	r0, d59a <log_is_strdup+0x16>
    d586:	4b05      	ldr	r3, [pc, #20]	; (d59c <log_is_strdup+0x18>)
    d588:	4298      	cmp	r0, r3
    d58a:	d305      	bcc.n	d598 <log_is_strdup+0x14>
    d58c:	33a0      	adds	r3, #160	; 0xa0
    d58e:	4298      	cmp	r0, r3
    d590:	bf2c      	ite	cs
    d592:	2000      	movcs	r0, #0
    d594:	2001      	movcc	r0, #1
    d596:	4770      	bx	lr
    d598:	2000      	movs	r0, #0
}
    d59a:	4770      	bx	lr
    d59c:	200019e0 	.word	0x200019e0

0000d5a0 <z_impl_log_process>:
{
    d5a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!backend_attached && !bypass) {
    d5a4:	4b47      	ldr	r3, [pc, #284]	; (d6c4 <z_impl_log_process+0x124>)
    d5a6:	781b      	ldrb	r3, [r3, #0]
{
    d5a8:	b085      	sub	sp, #20
    d5aa:	4604      	mov	r4, r0
	if (!backend_attached && !bypass) {
    d5ac:	b903      	cbnz	r3, d5b0 <z_impl_log_process+0x10>
    d5ae:	b300      	cbz	r0, d5f2 <z_impl_log_process+0x52>
	msg = get_msg();
    d5b0:	f7ff ff0e 	bl	d3d0 <get_msg>
	if (msg.msg) {
    d5b4:	4605      	mov	r5, r0
    d5b6:	b178      	cbz	r0, d5d8 <z_impl_log_process+0x38>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    d5b8:	f3bf 8f5b 	dmb	ish
    d5bc:	4b42      	ldr	r3, [pc, #264]	; (d6c8 <z_impl_log_process+0x128>)
    d5be:	e853 2f00 	ldrex	r2, [r3]
    d5c2:	3a01      	subs	r2, #1
    d5c4:	e843 2100 	strex	r1, r2, [r3]
    d5c8:	2900      	cmp	r1, #0
    d5ca:	d1f8      	bne.n	d5be <z_impl_log_process+0x1e>
    d5cc:	f3bf 8f5b 	dmb	ish
	if (!bypass) {
    d5d0:	b19c      	cbz	r4, d5fa <z_impl_log_process+0x5a>
			log_msg_put(msg.msg);
    d5d2:	4628      	mov	r0, r5
    d5d4:	f004 fcc6 	bl	11f64 <log_msg_put>
	if (!bypass && z_log_dropped_pending()) {
    d5d8:	b92c      	cbnz	r4, d5e6 <z_impl_log_process+0x46>
	return dropped_cnt > 0;
    d5da:	4b3c      	ldr	r3, [pc, #240]	; (d6cc <z_impl_log_process+0x12c>)
	if (!bypass && z_log_dropped_pending()) {
    d5dc:	681b      	ldr	r3, [r3, #0]
    d5de:	2b00      	cmp	r3, #0
    d5e0:	dd01      	ble.n	d5e6 <z_impl_log_process+0x46>
		dropped_notify();
    d5e2:	f7ff ff29 	bl	d438 <dropped_notify>
	return (log_list_head_peek(&list) != NULL);
    d5e6:	483a      	ldr	r0, [pc, #232]	; (d6d0 <z_impl_log_process+0x130>)
    d5e8:	f004 fbac 	bl	11d44 <log_list_head_peek>
    d5ec:	1e04      	subs	r4, r0, #0
    d5ee:	bf18      	it	ne
    d5f0:	2401      	movne	r4, #1
}
    d5f2:	4620      	mov	r0, r4
    d5f4:	b005      	add	sp, #20
    d5f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    !panic_mode) {
    d5fa:	4b36      	ldr	r3, [pc, #216]	; (d6d4 <z_impl_log_process+0x134>)
		if (!IS_ENABLED(CONFIG_LOG2) &&
    d5fc:	781b      	ldrb	r3, [r3, #0]
    d5fe:	b9e3      	cbnz	r3, d63a <z_impl_log_process+0x9a>
 * @retval true  Standard message.
 * @retval false Hexdump message.
 */
static inline bool log_msg_is_std(struct log_msg *msg)
{
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    d600:	7a2b      	ldrb	r3, [r5, #8]
	if (!log_msg_is_std(msg)) {
    d602:	07db      	lsls	r3, r3, #31
    d604:	d419      	bmi.n	d63a <z_impl_log_process+0x9a>
	msg_str = log_msg_str_get(msg);
    d606:	f004 fcc0 	bl	11f8a <log_msg_str_get>
    d60a:	4607      	mov	r7, r0
	mask = z_log_get_s_mask(msg_str, log_msg_nargs_get(msg));
    d60c:	4628      	mov	r0, r5
    d60e:	f004 fc87 	bl	11f20 <log_msg_nargs_get>
    d612:	4601      	mov	r1, r0
    d614:	4638      	mov	r0, r7
    d616:	f004 fbaa 	bl	11d6e <z_log_get_s_mask>
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
    d61a:	f8df 80bc 	ldr.w	r8, [pc, #188]	; d6d8 <z_impl_log_process+0x138>
    d61e:	4b2f      	ldr	r3, [pc, #188]	; (d6dc <z_impl_log_process+0x13c>)
				LOG_ERR(ERR_MSG, idx, src_name, msg_str);
    d620:	f8df b0bc 	ldr.w	fp, [pc, #188]	; d6e0 <z_impl_log_process+0x140>
    d624:	eba3 0308 	sub.w	r3, r3, r8
    d628:	08db      	lsrs	r3, r3, #3
    d62a:	9303      	str	r3, [sp, #12]
    d62c:	4b2d      	ldr	r3, [pc, #180]	; (d6e4 <z_impl_log_process+0x144>)
    d62e:	eba3 0308 	sub.w	r3, r3, r8
	mask = z_log_get_s_mask(msg_str, log_msg_nargs_get(msg));
    d632:	4606      	mov	r6, r0
    d634:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
	while (mask) {
    d638:	b936      	cbnz	r6, d648 <z_impl_log_process+0xa8>
    d63a:	4e2b      	ldr	r6, [pc, #172]	; (d6e8 <z_impl_log_process+0x148>)
    d63c:	4f2b      	ldr	r7, [pc, #172]	; (d6ec <z_impl_log_process+0x14c>)
    d63e:	1bbf      	subs	r7, r7, r6
    d640:	113f      	asrs	r7, r7, #4
    d642:	f04f 0800 	mov.w	r8, #0
    d646:	e03a      	b.n	d6be <z_impl_log_process+0x11e>
		idx = 31 - __builtin_clz(mask);
    d648:	fab6 f186 	clz	r1, r6
    d64c:	f1c1 091f 	rsb	r9, r1, #31
		str = (const char *)log_msg_arg_get(msg, idx);
    d650:	4649      	mov	r1, r9
    d652:	4628      	mov	r0, r5
    d654:	f004 fc67 	bl	11f26 <log_msg_arg_get>
	return (((const char *)addr >= (const char *)RO_START) &&
    d658:	4b25      	ldr	r3, [pc, #148]	; (d6f0 <z_impl_log_process+0x150>)
    d65a:	4298      	cmp	r0, r3
		str = (const char *)log_msg_arg_get(msg, idx);
    d65c:	4601      	mov	r1, r0
	return (((const char *)addr >= (const char *)RO_START) &&
    d65e:	d302      	bcc.n	d666 <z_impl_log_process+0xc6>
		if (!is_rodata(str) && !log_is_strdup(str) &&
    d660:	4a24      	ldr	r2, [pc, #144]	; (d6f4 <z_impl_log_process+0x154>)
    d662:	4290      	cmp	r0, r2
    d664:	d31a      	bcc.n	d69c <z_impl_log_process+0xfc>
    d666:	4608      	mov	r0, r1
    d668:	f7ff ff8c 	bl	d584 <log_is_strdup>
    d66c:	4602      	mov	r2, r0
    d66e:	b9a8      	cbnz	r0, d69c <z_impl_log_process+0xfc>
    d670:	4b21      	ldr	r3, [pc, #132]	; (d6f8 <z_impl_log_process+0x158>)
    d672:	4299      	cmp	r1, r3
    d674:	d012      	beq.n	d69c <z_impl_log_process+0xfc>
	return msg->hdr.ids.source_id;
    d676:	896b      	ldrh	r3, [r5, #10]
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
    d678:	9903      	ldr	r1, [sp, #12]
    d67a:	f3c3 1389 	ubfx	r3, r3, #6, #10
    d67e:	428b      	cmp	r3, r1
	return __log_const_start[source_id].name;
    d680:	bf38      	it	cc
    d682:	f858 2033 	ldrcc.w	r2, [r8, r3, lsl #3]
				LOG_ERR(ERR_MSG, idx, src_name, msg_str);
    d686:	ea4f 138a 	mov.w	r3, sl, lsl #6
    d68a:	f043 0301 	orr.w	r3, r3, #1
    d68e:	f8ad 3000 	strh.w	r3, [sp]
    d692:	4649      	mov	r1, r9
    d694:	463b      	mov	r3, r7
    d696:	4658      	mov	r0, fp
    d698:	f004 fbc3 	bl	11e22 <log_3>
		mask &= ~BIT(idx);
    d69c:	2301      	movs	r3, #1
    d69e:	fa03 f109 	lsl.w	r1, r3, r9
    d6a2:	ea26 0601 	bic.w	r6, r6, r1
    d6a6:	e7c7      	b.n	d638 <z_impl_log_process+0x98>
	return backend->cb->active;
    d6a8:	6873      	ldr	r3, [r6, #4]
			if (log_backend_is_active(backend) &&
    d6aa:	795b      	ldrb	r3, [r3, #5]
    d6ac:	b123      	cbz	r3, d6b8 <z_impl_log_process+0x118>
	backend->api->put(backend, msg);
    d6ae:	6833      	ldr	r3, [r6, #0]
    d6b0:	4629      	mov	r1, r5
    d6b2:	685b      	ldr	r3, [r3, #4]
    d6b4:	4630      	mov	r0, r6
    d6b6:	4798      	blx	r3
		for (int i = 0; i < log_backend_count_get(); i++) {
    d6b8:	f108 0801 	add.w	r8, r8, #1
    d6bc:	3610      	adds	r6, #16
    d6be:	45b8      	cmp	r8, r7
    d6c0:	dbf2      	blt.n	d6a8 <z_impl_log_process+0x108>
    d6c2:	e786      	b.n	d5d2 <z_impl_log_process+0x32>
    d6c4:	200004f4 	.word	0x200004f4
    d6c8:	20000248 	.word	0x20000248
    d6cc:	2000024c 	.word	0x2000024c
    d6d0:	20000254 	.word	0x20000254
    d6d4:	200004f5 	.word	0x200004f5
    d6d8:	00013014 	.word	0x00013014
    d6dc:	00013064 	.word	0x00013064
    d6e0:	000134ef 	.word	0x000134ef
    d6e4:	00013034 	.word	0x00013034
    d6e8:	00013064 	.word	0x00013064
    d6ec:	00013084 	.word	0x00013084
    d6f0:	00012e14 	.word	0x00012e14
    d6f4:	00013e20 	.word	0x00013e20
    d6f8:	000134d5 	.word	0x000134d5

0000d6fc <log_process_thread_func>:
{
    d6fc:	b510      	push	{r4, lr}
	log_init();
    d6fe:	f7ff fedf 	bl	d4c0 <log_init>
	return z_impl_k_current_get();
    d702:	f003 ff7f 	bl	11604 <z_impl_k_current_get>
	proc_tid = process_tid;
    d706:	4b0c      	ldr	r3, [pc, #48]	; (d738 <log_process_thread_func+0x3c>)
    d708:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
    d70a:	b130      	cbz	r0, d71a <log_process_thread_func+0x1e>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
    d70c:	4b0b      	ldr	r3, [pc, #44]	; (d73c <log_process_thread_func+0x40>)
	    process_tid &&
    d70e:	681b      	ldr	r3, [r3, #0]
    d710:	2b09      	cmp	r3, #9
    d712:	dd02      	ble.n	d71a <log_process_thread_func+0x1e>
	z_impl_k_sem_give(sem);
    d714:	480a      	ldr	r0, [pc, #40]	; (d740 <log_process_thread_func+0x44>)
    d716:	f003 fc3d 	bl	10f94 <z_impl_k_sem_give>
	return z_impl_k_sem_take(sem, timeout);
    d71a:	4c09      	ldr	r4, [pc, #36]	; (d740 <log_process_thread_func+0x44>)
		/* coverity[OVERRUN] */
		return (bool) arch_syscall_invoke1(*(uintptr_t *)&bypass, K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process(bypass);
    d71c:	2000      	movs	r0, #0
    d71e:	f7ff ff3f 	bl	d5a0 <z_impl_log_process>
		if (log_process(false) == false) {
    d722:	2800      	cmp	r0, #0
    d724:	d1fa      	bne.n	d71c <log_process_thread_func+0x20>
    d726:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    d72a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    d72e:	4620      	mov	r0, r4
    d730:	f003 fc50 	bl	10fd4 <z_impl_k_sem_take>
    d734:	e7f2      	b.n	d71c <log_process_thread_func+0x20>
    d736:	bf00      	nop
    d738:	20000278 	.word	0x20000278
    d73c:	20000248 	.word	0x20000248
    d740:	20000044 	.word	0x20000044

0000d744 <msg_finalize>:
	msg->hdr.timestamp = timestamp_func();
    d744:	4b29      	ldr	r3, [pc, #164]	; (d7ec <msg_finalize+0xa8>)
{
    d746:	b537      	push	{r0, r1, r2, r4, r5, lr}
	msg->hdr.timestamp = timestamp_func();
    d748:	681b      	ldr	r3, [r3, #0]
	msg->hdr.ids = src_level;
    d74a:	8141      	strh	r1, [r0, #10]
{
    d74c:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
    d74e:	4798      	blx	r3
    d750:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    d752:	f04f 0320 	mov.w	r3, #32
    d756:	f3ef 8511 	mrs	r5, BASEPRI
    d75a:	f383 8811 	msr	BASEPRI, r3
    d75e:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
    d762:	4823      	ldr	r0, [pc, #140]	; (d7f0 <msg_finalize+0xac>)
    d764:	4621      	mov	r1, r4
    d766:	f004 fae3 	bl	11d30 <log_list_add_tail>
	__asm__ volatile(
    d76a:	f385 8811 	msr	BASEPRI, r5
    d76e:	f3bf 8f6f 	isb	sy
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    d772:	f3bf 8f5b 	dmb	ish
    d776:	4b1f      	ldr	r3, [pc, #124]	; (d7f4 <msg_finalize+0xb0>)
    d778:	e853 2f00 	ldrex	r2, [r3]
    d77c:	3201      	adds	r2, #1
    d77e:	e843 2100 	strex	r1, r2, [r3]
    d782:	2900      	cmp	r1, #0
    d784:	d1f8      	bne.n	d778 <msg_finalize+0x34>
    d786:	f3bf 8f5b 	dmb	ish
	if (panic_mode) {
    d78a:	4a1b      	ldr	r2, [pc, #108]	; (d7f8 <msg_finalize+0xb4>)
    d78c:	7812      	ldrb	r2, [r2, #0]
    d78e:	b182      	cbz	r2, d7b2 <msg_finalize+0x6e>
	__asm__ volatile(
    d790:	f04f 0320 	mov.w	r3, #32
    d794:	f3ef 8411 	mrs	r4, BASEPRI
    d798:	f383 8811 	msr	BASEPRI, r3
    d79c:	f3bf 8f6f 	isb	sy
    d7a0:	2000      	movs	r0, #0
    d7a2:	f7ff fefd 	bl	d5a0 <z_impl_log_process>
	__asm__ volatile(
    d7a6:	f384 8811 	msr	BASEPRI, r4
    d7aa:	f3bf 8f6f 	isb	sy
}
    d7ae:	b003      	add	sp, #12
    d7b0:	bd30      	pop	{r4, r5, pc}
	} else if (proc_tid != NULL && buffered_cnt == 1) {
    d7b2:	4a12      	ldr	r2, [pc, #72]	; (d7fc <msg_finalize+0xb8>)
    d7b4:	681b      	ldr	r3, [r3, #0]
    d7b6:	6812      	ldr	r2, [r2, #0]
    d7b8:	2a00      	cmp	r2, #0
    d7ba:	d0f8      	beq.n	d7ae <msg_finalize+0x6a>
    d7bc:	2b01      	cmp	r3, #1
    d7be:	d10a      	bne.n	d7d6 <msg_finalize+0x92>
	z_impl_k_timer_start(timer, duration, period);
    d7c0:	2200      	movs	r2, #0
    d7c2:	2300      	movs	r3, #0
    d7c4:	e9cd 2300 	strd	r2, r3, [sp]
    d7c8:	480d      	ldr	r0, [pc, #52]	; (d800 <msg_finalize+0xbc>)
    d7ca:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    d7ce:	2300      	movs	r3, #0
    d7d0:	f004 f8ee 	bl	119b0 <z_impl_k_timer_start>
    d7d4:	e7eb      	b.n	d7ae <msg_finalize+0x6a>
		if ((buffered_cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
    d7d6:	2b0a      	cmp	r3, #10
    d7d8:	d1e9      	bne.n	d7ae <msg_finalize+0x6a>
	z_impl_k_timer_stop(timer);
    d7da:	4809      	ldr	r0, [pc, #36]	; (d800 <msg_finalize+0xbc>)
    d7dc:	f005 faf7 	bl	12dce <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
    d7e0:	4808      	ldr	r0, [pc, #32]	; (d804 <msg_finalize+0xc0>)
}
    d7e2:	b003      	add	sp, #12
    d7e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    d7e8:	f003 bbd4 	b.w	10f94 <z_impl_k_sem_give>
    d7ec:	20000004 	.word	0x20000004
    d7f0:	20000254 	.word	0x20000254
    d7f4:	20000248 	.word	0x20000248
    d7f8:	200004f5 	.word	0x200004f5
    d7fc:	20000278 	.word	0x20000278
    d800:	20000058 	.word	0x20000058
    d804:	20000044 	.word	0x20000044

0000d808 <z_impl_log_panic>:
{
    d808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (panic_mode) {
    d80a:	4f0e      	ldr	r7, [pc, #56]	; (d844 <z_impl_log_panic+0x3c>)
    d80c:	783d      	ldrb	r5, [r7, #0]
    d80e:	b975      	cbnz	r5, d82e <z_impl_log_panic+0x26>
	return __log_backends_end - __log_backends_start;
    d810:	4c0d      	ldr	r4, [pc, #52]	; (d848 <z_impl_log_panic+0x40>)
    d812:	4e0e      	ldr	r6, [pc, #56]	; (d84c <z_impl_log_panic+0x44>)
	log_init();
    d814:	f7ff fe54 	bl	d4c0 <log_init>
    d818:	1b36      	subs	r6, r6, r4
    d81a:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
    d81c:	42b5      	cmp	r5, r6
    d81e:	db07      	blt.n	d830 <z_impl_log_panic+0x28>
    d820:	2000      	movs	r0, #0
    d822:	f7ff febd 	bl	d5a0 <z_impl_log_process>
		while (log_process(false) == true) {
    d826:	2800      	cmp	r0, #0
    d828:	d1fa      	bne.n	d820 <z_impl_log_panic+0x18>
	panic_mode = true;
    d82a:	2301      	movs	r3, #1
    d82c:	703b      	strb	r3, [r7, #0]
}
    d82e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return backend->cb->active;
    d830:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    d832:	795b      	ldrb	r3, [r3, #5]
    d834:	b11b      	cbz	r3, d83e <z_impl_log_panic+0x36>
	backend->api->panic(backend);
    d836:	6823      	ldr	r3, [r4, #0]
    d838:	4620      	mov	r0, r4
    d83a:	695b      	ldr	r3, [r3, #20]
    d83c:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
    d83e:	3501      	adds	r5, #1
    d840:	3410      	adds	r4, #16
    d842:	e7eb      	b.n	d81c <z_impl_log_panic+0x14>
    d844:	200004f5 	.word	0x200004f5
    d848:	00013064 	.word	0x00013064
    d84c:	00013084 	.word	0x00013084

0000d850 <log_free>:
{
    d850:	b507      	push	{r0, r1, r2, lr}
	struct log_strdup_buf *dup = CONTAINER_OF(str, struct log_strdup_buf,
    d852:	3804      	subs	r0, #4
    d854:	9001      	str	r0, [sp, #4]
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    d856:	f3bf 8f5b 	dmb	ish
    d85a:	e850 3f00 	ldrex	r3, [r0]
    d85e:	1e5a      	subs	r2, r3, #1
    d860:	e840 2100 	strex	r1, r2, [r0]
    d864:	2900      	cmp	r1, #0
    d866:	d1f8      	bne.n	d85a <log_free+0xa>
    d868:	f3bf 8f5b 	dmb	ish
	if (atomic_dec(&dup->refcount) == 1) {
    d86c:	2b01      	cmp	r3, #1
    d86e:	d103      	bne.n	d878 <log_free+0x28>
		k_mem_slab_free(&log_strdup_pool, (void **)&dup);
    d870:	4803      	ldr	r0, [pc, #12]	; (d880 <log_free+0x30>)
    d872:	a901      	add	r1, sp, #4
    d874:	f005 f93a 	bl	12aec <k_mem_slab_free>
}
    d878:	b003      	add	sp, #12
    d87a:	f85d fb04 	ldr.w	pc, [sp], #4
    d87e:	bf00      	nop
    d880:	2000025c 	.word	0x2000025c

0000d884 <log_msg_pool_init>:
static uint8_t __noinit __aligned(sizeof(void *))
		log_msg_pool_buf[CONFIG_LOG_BUFFER_SIZE];

void log_msg_pool_init(void)
{
	k_mem_slab_init(&log_msg_pool, log_msg_pool_buf, MSG_SIZE, NUM_OF_MSGS);
    d884:	2320      	movs	r3, #32
    d886:	4902      	ldr	r1, [pc, #8]	; (d890 <log_msg_pool_init+0xc>)
    d888:	4802      	ldr	r0, [pc, #8]	; (d894 <log_msg_pool_init+0x10>)
    d88a:	461a      	mov	r2, r3
    d88c:	f005 b913 	b.w	12ab6 <k_mem_slab_init>
    d890:	20001a80 	.word	0x20001a80
    d894:	2000027c 	.word	0x2000027c

0000d898 <log_msg_no_space_handle>:

	k_mem_slab_free(&log_msg_pool, (void **)&msg);
}

union log_msg_chunk *log_msg_no_space_handle(void)
{
    d898:	b537      	push	{r0, r1, r2, r4, r5, lr}
	union log_msg_chunk *msg = NULL;
    d89a:	2300      	movs	r3, #0

	if (IS_ENABLED(CONFIG_LOG_MODE_OVERFLOW)) {
		do {
			more = log_process(true);
			z_log_dropped();
			err = k_mem_slab_alloc(&log_msg_pool,
    d89c:	4d09      	ldr	r5, [pc, #36]	; (d8c4 <log_msg_no_space_handle+0x2c>)
	union log_msg_chunk *msg = NULL;
    d89e:	9301      	str	r3, [sp, #4]
    d8a0:	2001      	movs	r0, #1
    d8a2:	f7ff fe7d 	bl	d5a0 <z_impl_log_process>
    d8a6:	4604      	mov	r4, r0
			z_log_dropped();
    d8a8:	f7ff fda6 	bl	d3f8 <z_log_dropped>
			err = k_mem_slab_alloc(&log_msg_pool,
    d8ac:	2200      	movs	r2, #0
    d8ae:	2300      	movs	r3, #0
    d8b0:	a901      	add	r1, sp, #4
    d8b2:	4628      	mov	r0, r5
    d8b4:	f003 f9b6 	bl	10c24 <k_mem_slab_alloc>
					       (void **)&msg,
					       K_NO_WAIT);
		} while ((err != 0) && more);
    d8b8:	b108      	cbz	r0, d8be <log_msg_no_space_handle+0x26>
    d8ba:	2c00      	cmp	r4, #0
    d8bc:	d1f0      	bne.n	d8a0 <log_msg_no_space_handle+0x8>
	} else {
		z_log_dropped();
	}
	return msg;

}
    d8be:	9801      	ldr	r0, [sp, #4]
    d8c0:	b003      	add	sp, #12
    d8c2:	bd30      	pop	{r4, r5, pc}
    d8c4:	2000027c 	.word	0x2000027c

0000d8c8 <log_msg_chunk_alloc>:
{
    d8c8:	b507      	push	{r0, r1, r2, lr}
	union log_msg_chunk *msg = NULL;
    d8ca:	2300      	movs	r3, #0
    d8cc:	9301      	str	r3, [sp, #4]
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
    d8ce:	4807      	ldr	r0, [pc, #28]	; (d8ec <log_msg_chunk_alloc+0x24>)
    d8d0:	2200      	movs	r2, #0
    d8d2:	2300      	movs	r3, #0
    d8d4:	a901      	add	r1, sp, #4
    d8d6:	f003 f9a5 	bl	10c24 <k_mem_slab_alloc>
	if (err != 0) {
    d8da:	b110      	cbz	r0, d8e2 <log_msg_chunk_alloc+0x1a>
		msg = log_msg_no_space_handle();
    d8dc:	f7ff ffdc 	bl	d898 <log_msg_no_space_handle>
    d8e0:	9001      	str	r0, [sp, #4]
}
    d8e2:	9801      	ldr	r0, [sp, #4]
    d8e4:	b003      	add	sp, #12
    d8e6:	f85d fb04 	ldr.w	pc, [sp], #4
    d8ea:	bf00      	nop
    d8ec:	2000027c 	.word	0x2000027c

0000d8f0 <msg_free>:
{
    d8f0:	b5f0      	push	{r4, r5, r6, r7, lr}
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    d8f2:	7a03      	ldrb	r3, [r0, #8]
    d8f4:	b085      	sub	sp, #20
	if (log_msg_is_std(msg) && nargs) {
    d8f6:	07dc      	lsls	r4, r3, #31
{
    d8f8:	9001      	str	r0, [sp, #4]
	if (log_msg_is_std(msg) && nargs) {
    d8fa:	d41e      	bmi.n	d93a <msg_free+0x4a>
	}
}

uint32_t log_msg_nargs_get(struct log_msg *msg)
{
	return msg->hdr.params.std.nargs;
    d8fc:	7a45      	ldrb	r5, [r0, #9]
	if (log_msg_is_std(msg) && nargs) {
    d8fe:	092d      	lsrs	r5, r5, #4
    d900:	d01b      	beq.n	d93a <msg_free+0x4a>
		uint32_t smask = 0U;
    d902:	2400      	movs	r4, #0
		for (i = 0U; i < nargs; i++) {
    d904:	4626      	mov	r6, r4
			void *buf = (void *)log_msg_arg_get(msg, i);
    d906:	9801      	ldr	r0, [sp, #4]
    d908:	4631      	mov	r1, r6
    d90a:	f004 fb0c 	bl	11f26 <log_msg_arg_get>
    d90e:	4607      	mov	r7, r0
			if (log_is_strdup(buf)) {
    d910:	f7ff fe38 	bl	d584 <log_is_strdup>
    d914:	b170      	cbz	r0, d934 <msg_free+0x44>
				if (smask == 0U) {
    d916:	b934      	cbnz	r4, d926 <msg_free+0x36>
					smask = z_log_get_s_mask(
    d918:	9b01      	ldr	r3, [sp, #4]
    d91a:	4629      	mov	r1, r5
    d91c:	6918      	ldr	r0, [r3, #16]
    d91e:	f004 fa26 	bl	11d6e <z_log_get_s_mask>
					if (smask == 0U) {
    d922:	4604      	mov	r4, r0
    d924:	b148      	cbz	r0, d93a <msg_free+0x4a>
				if (smask & BIT(i)) {
    d926:	fa24 f306 	lsr.w	r3, r4, r6
    d92a:	07d9      	lsls	r1, r3, #31
    d92c:	d502      	bpl.n	d934 <msg_free+0x44>
					log_free(buf);
    d92e:	4638      	mov	r0, r7
    d930:	f7ff ff8e 	bl	d850 <log_free>
		for (i = 0U; i < nargs; i++) {
    d934:	3601      	adds	r6, #1
    d936:	42ae      	cmp	r6, r5
    d938:	d3e5      	bcc.n	d906 <msg_free+0x16>
	if (msg->hdr.params.generic.ext == 1) {
    d93a:	9b01      	ldr	r3, [sp, #4]
    d93c:	7a1a      	ldrb	r2, [r3, #8]
    d93e:	0792      	lsls	r2, r2, #30
    d940:	d504      	bpl.n	d94c <msg_free+0x5c>
		cont_free(msg->payload.ext.next);
    d942:	695b      	ldr	r3, [r3, #20]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
    d944:	4c08      	ldr	r4, [pc, #32]	; (d968 <msg_free+0x78>)
    d946:	9303      	str	r3, [sp, #12]
	while (cont != NULL) {
    d948:	9b03      	ldr	r3, [sp, #12]
    d94a:	b92b      	cbnz	r3, d958 <msg_free+0x68>
	k_mem_slab_free(&log_msg_pool, (void **)&msg);
    d94c:	4806      	ldr	r0, [pc, #24]	; (d968 <msg_free+0x78>)
    d94e:	a901      	add	r1, sp, #4
    d950:	f005 f8cc 	bl	12aec <k_mem_slab_free>
}
    d954:	b005      	add	sp, #20
    d956:	bdf0      	pop	{r4, r5, r6, r7, pc}
		next = cont->next;
    d958:	681d      	ldr	r5, [r3, #0]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
    d95a:	a903      	add	r1, sp, #12
    d95c:	4620      	mov	r0, r4
    d95e:	f005 f8c5 	bl	12aec <k_mem_slab_free>
		cont = next;
    d962:	9503      	str	r5, [sp, #12]
    d964:	e7f0      	b.n	d948 <msg_free+0x58>
    d966:	bf00      	nop
    d968:	2000027c 	.word	0x2000027c

0000d96c <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
    d96c:	b40e      	push	{r1, r2, r3}
    d96e:	b503      	push	{r0, r1, lr}
    d970:	ab03      	add	r3, sp, #12
    d972:	4601      	mov	r1, r0
    d974:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list args;
	int length = 0;

	va_start(args, fmt);
	length = cbvprintf(out_func, (void *)output, fmt, args);
    d978:	4804      	ldr	r0, [pc, #16]	; (d98c <print_formatted+0x20>)
	va_start(args, fmt);
    d97a:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
    d97c:	f7ff f8f6 	bl	cb6c <cbvprintf>
	va_end(args);

	return length;
}
    d980:	b002      	add	sp, #8
    d982:	f85d eb04 	ldr.w	lr, [sp], #4
    d986:	b003      	add	sp, #12
    d988:	4770      	bx	lr
    d98a:	bf00      	nop
    d98c:	0001228b 	.word	0x0001228b

0000d990 <hexdump_line_print>:
}

static void hexdump_line_print(const struct log_output *output,
			       const uint8_t *data, uint32_t length,
			       int prefix_offset, uint32_t flags)
{
    d990:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d994:	461d      	mov	r5, r3
    d996:	9b08      	ldr	r3, [sp, #32]
    d998:	4617      	mov	r7, r2
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    d99a:	06da      	lsls	r2, r3, #27
{
    d99c:	4604      	mov	r4, r0
    d99e:	460e      	mov	r6, r1
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    d9a0:	d405      	bmi.n	d9ae <hexdump_line_print+0x1e>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    d9a2:	0699      	lsls	r1, r3, #26
		print_formatted(ctx, "\n");
    d9a4:	bf4c      	ite	mi
    d9a6:	492a      	ldrmi	r1, [pc, #168]	; (da50 <hexdump_line_print+0xc0>)
		print_formatted(ctx, "\r\n");
    d9a8:	492a      	ldrpl	r1, [pc, #168]	; (da54 <hexdump_line_print+0xc4>)
    d9aa:	f7ff ffdf 	bl	d96c <print_formatted>
	newline_print(output, flags);

	for (int i = 0; i < prefix_offset; i++) {
		print_formatted(output, " ");
    d9ae:	f8df 90a8 	ldr.w	r9, [pc, #168]	; da58 <hexdump_line_print+0xc8>
{
    d9b2:	f04f 0800 	mov.w	r8, #0
	for (int i = 0; i < prefix_offset; i++) {
    d9b6:	45a8      	cmp	r8, r5
    d9b8:	db2a      	blt.n	da10 <hexdump_line_print+0x80>
		}

		if (i < length) {
			print_formatted(output, "%02x ", data[i]);
		} else {
			print_formatted(output, "   ");
    d9ba:	f8df 80a0 	ldr.w	r8, [pc, #160]	; da5c <hexdump_line_print+0xcc>
			print_formatted(output, "%02x ", data[i]);
    d9be:	f8df 90a0 	ldr.w	r9, [pc, #160]	; da60 <hexdump_line_print+0xd0>
			print_formatted(output, " ");
    d9c2:	f8df a094 	ldr.w	sl, [pc, #148]	; da58 <hexdump_line_print+0xc8>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    d9c6:	2500      	movs	r5, #0
		if (i < length) {
    d9c8:	42bd      	cmp	r5, r7
    d9ca:	d22f      	bcs.n	da2c <hexdump_line_print+0x9c>
			print_formatted(output, "%02x ", data[i]);
    d9cc:	5d72      	ldrb	r2, [r6, r5]
    d9ce:	4649      	mov	r1, r9
    d9d0:	4620      	mov	r0, r4
    d9d2:	f7ff ffcb 	bl	d96c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    d9d6:	3501      	adds	r5, #1
    d9d8:	2d10      	cmp	r5, #16
    d9da:	d120      	bne.n	da1e <hexdump_line_print+0x8e>
		}
	}

	print_formatted(output, "|");
    d9dc:	4921      	ldr	r1, [pc, #132]	; (da64 <hexdump_line_print+0xd4>)
			char c = (char)data[i];

			print_formatted(output, "%c",
			      isprint((int)c) ? c : '.');
		} else {
			print_formatted(output, " ");
    d9de:	f8df 8078 	ldr.w	r8, [pc, #120]	; da58 <hexdump_line_print+0xc8>
			print_formatted(output, "%c",
    d9e2:	f8df 9084 	ldr.w	r9, [pc, #132]	; da68 <hexdump_line_print+0xd8>
	print_formatted(output, "|");
    d9e6:	4620      	mov	r0, r4
    d9e8:	f7ff ffc0 	bl	d96c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    d9ec:	2500      	movs	r5, #0
		if (i < length) {
    d9ee:	42af      	cmp	r7, r5
    d9f0:	d928      	bls.n	da44 <hexdump_line_print+0xb4>
			char c = (char)data[i];
    d9f2:	5d72      	ldrb	r2, [r6, r5]
	return (int)((((unsigned)c) >= ' ') &&
    d9f4:	f1a2 0320 	sub.w	r3, r2, #32
    d9f8:	2b5f      	cmp	r3, #95	; 0x5f
			print_formatted(output, "%c",
    d9fa:	bf28      	it	cs
    d9fc:	222e      	movcs	r2, #46	; 0x2e
    d9fe:	4649      	mov	r1, r9
    da00:	4620      	mov	r0, r4
    da02:	f7ff ffb3 	bl	d96c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    da06:	3501      	adds	r5, #1
    da08:	2d10      	cmp	r5, #16
    da0a:	d114      	bne.n	da36 <hexdump_line_print+0xa6>
		}
	}
}
    da0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(output, " ");
    da10:	4649      	mov	r1, r9
    da12:	4620      	mov	r0, r4
    da14:	f7ff ffaa 	bl	d96c <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
    da18:	f108 0801 	add.w	r8, r8, #1
    da1c:	e7cb      	b.n	d9b6 <hexdump_line_print+0x26>
		if (i > 0 && !(i % 8)) {
    da1e:	076a      	lsls	r2, r5, #29
    da20:	d1d2      	bne.n	d9c8 <hexdump_line_print+0x38>
			print_formatted(output, " ");
    da22:	4651      	mov	r1, sl
    da24:	4620      	mov	r0, r4
    da26:	f7ff ffa1 	bl	d96c <print_formatted>
    da2a:	e7cd      	b.n	d9c8 <hexdump_line_print+0x38>
			print_formatted(output, "   ");
    da2c:	4641      	mov	r1, r8
    da2e:	4620      	mov	r0, r4
    da30:	f7ff ff9c 	bl	d96c <print_formatted>
    da34:	e7cf      	b.n	d9d6 <hexdump_line_print+0x46>
		if (i > 0 && !(i % 8)) {
    da36:	076b      	lsls	r3, r5, #29
    da38:	d1d9      	bne.n	d9ee <hexdump_line_print+0x5e>
			print_formatted(output, " ");
    da3a:	4641      	mov	r1, r8
    da3c:	4620      	mov	r0, r4
    da3e:	f7ff ff95 	bl	d96c <print_formatted>
    da42:	e7d4      	b.n	d9ee <hexdump_line_print+0x5e>
			print_formatted(output, " ");
    da44:	4641      	mov	r1, r8
    da46:	4620      	mov	r0, r4
    da48:	f7ff ff90 	bl	d96c <print_formatted>
    da4c:	e7db      	b.n	da06 <hexdump_line_print+0x76>
    da4e:	bf00      	nop
    da50:	00013533 	.word	0x00013533
    da54:	00013532 	.word	0x00013532
    da58:	0001353d 	.word	0x0001353d
    da5c:	0001353b 	.word	0x0001353b
    da60:	00013535 	.word	0x00013535
    da64:	0001353f 	.word	0x0001353f
    da68:	00013541 	.word	0x00013541

0000da6c <prefix_print>:
}

static uint32_t prefix_print(const struct log_output *output,
			 uint32_t flags, bool func_on, uint32_t timestamp, uint8_t level,
			 uint8_t domain_id, int16_t source_id)
{
    da6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    da70:	b087      	sub	sp, #28
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (stamp) {
    da72:	f011 0602 	ands.w	r6, r1, #2
{
    da76:	9205      	str	r2, [sp, #20]
    da78:	f89d 8040 	ldrb.w	r8, [sp, #64]	; 0x40
    da7c:	f9bd 9048 	ldrsh.w	r9, [sp, #72]	; 0x48
    da80:	4607      	mov	r7, r0
    da82:	461a      	mov	r2, r3
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
    da84:	f001 0a01 	and.w	sl, r1, #1
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
    da88:	f001 0508 	and.w	r5, r1, #8
	if (stamp) {
    da8c:	d006      	beq.n	da9c <prefix_print+0x30>
	if (!format) {
    da8e:	f011 0f44 	tst.w	r1, #68	; 0x44
    da92:	d138      	bne.n	db06 <prefix_print+0x9a>
		length = print_formatted(output, "[%08lu] ", timestamp);
    da94:	4933      	ldr	r1, [pc, #204]	; (db64 <prefix_print+0xf8>)
    da96:	f7ff ff69 	bl	d96c <print_formatted>
		length += timestamp_print(output, flags, timestamp);
    da9a:	4606      	mov	r6, r0
	if (color) {
    da9c:	f1ba 0f00 	cmp.w	sl, #0
    daa0:	d00a      	beq.n	dab8 <prefix_print+0x4c>
		const char *log_color = start && (colors[level] != NULL) ?
    daa2:	4b31      	ldr	r3, [pc, #196]	; (db68 <prefix_print+0xfc>)
		print_formatted(output, "%s", log_color);
    daa4:	4931      	ldr	r1, [pc, #196]	; (db6c <prefix_print+0x100>)
		const char *log_color = start && (colors[level] != NULL) ?
    daa6:	f853 2028 	ldr.w	r2, [r3, r8, lsl #2]
		print_formatted(output, "%s", log_color);
    daaa:	4b31      	ldr	r3, [pc, #196]	; (db70 <prefix_print+0x104>)
    daac:	4638      	mov	r0, r7
    daae:	2a00      	cmp	r2, #0
    dab0:	bf08      	it	eq
    dab2:	461a      	moveq	r2, r3
    dab4:	f7ff ff5a 	bl	d96c <print_formatted>
	if (level_on) {
    dab8:	b13d      	cbz	r5, daca <prefix_print+0x5e>
		total += print_formatted(output, "<%s> ", severity[level]);
    daba:	4b2e      	ldr	r3, [pc, #184]	; (db74 <prefix_print+0x108>)
    dabc:	492e      	ldr	r1, [pc, #184]	; (db78 <prefix_print+0x10c>)
    dabe:	f853 2028 	ldr.w	r2, [r3, r8, lsl #2]
    dac2:	4638      	mov	r0, r7
    dac4:	f7ff ff52 	bl	d96c <print_formatted>
    dac8:	4605      	mov	r5, r0
	if (source_id >= 0) {
    daca:	f1b9 0f00 	cmp.w	r9, #0
    dace:	db16      	blt.n	dafe <prefix_print+0x92>
		total += print_formatted(output,
    dad0:	9b05      	ldr	r3, [sp, #20]
    dad2:	2b00      	cmp	r3, #0
    dad4:	d043      	beq.n	db5e <prefix_print+0xf2>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
    dad6:	2301      	movs	r3, #1
    dad8:	fa03 f808 	lsl.w	r8, r3, r8
		total += print_formatted(output,
    dadc:	4b27      	ldr	r3, [pc, #156]	; (db7c <prefix_print+0x110>)
    dade:	4c28      	ldr	r4, [pc, #160]	; (db80 <prefix_print+0x114>)
    dae0:	f018 0f10 	tst.w	r8, #16
    dae4:	bf18      	it	ne
    dae6:	461c      	movne	r4, r3
    dae8:	4649      	mov	r1, r9
    daea:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
    daee:	f7ff fcbf 	bl	d470 <log_source_name_get>
    daf2:	4621      	mov	r1, r4
    daf4:	4602      	mov	r2, r0
    daf6:	4638      	mov	r0, r7
    daf8:	f7ff ff38 	bl	d96c <print_formatted>
    dafc:	4405      	add	r5, r0
	length += ids_print(output, level_on, func_on,
			domain_id, source_id, level);


	return length;
}
    dafe:	19a8      	adds	r0, r5, r6
    db00:	b007      	add	sp, #28
    db02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if (freq != 0U) {
    db06:	4b1f      	ldr	r3, [pc, #124]	; (db84 <prefix_print+0x118>)
    db08:	6819      	ldr	r1, [r3, #0]
    db0a:	b331      	cbz	r1, db5a <prefix_print+0xee>
		timestamp /= timestamp_div;
    db0c:	4b1e      	ldr	r3, [pc, #120]	; (db88 <prefix_print+0x11c>)
    db0e:	f44f 6661 	mov.w	r6, #3600	; 0xe10
    db12:	681b      	ldr	r3, [r3, #0]
    db14:	fbb2 f3f3 	udiv	r3, r2, r3
		ms = (remainder * 1000U) / freq;
    db18:	f44f 7b7a 	mov.w	fp, #1000	; 0x3e8
		total_seconds = timestamp / freq;
    db1c:	fbb3 f4f1 	udiv	r4, r3, r1
		seconds -= hours * 3600U;
    db20:	fbb4 f2f6 	udiv	r2, r4, r6
    db24:	fb06 4612 	mls	r6, r6, r2, r4
		remainder = timestamp % freq;
    db28:	fb01 3414 	mls	r4, r1, r4, r3
		ms = (remainder * 1000U) / freq;
    db2c:	fb0b f404 	mul.w	r4, fp, r4
		mins = seconds / 60U;
    db30:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    db34:	fbb4 fef1 	udiv	lr, r4, r1
		mins = seconds / 60U;
    db38:	fbb6 f3fc 	udiv	r3, r6, ip
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    db3c:	fb01 441e 	mls	r4, r1, lr, r4
			length = print_formatted(output,
    db40:	fb0c 6613 	mls	r6, ip, r3, r6
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    db44:	fb0b f404 	mul.w	r4, fp, r4
			length = print_formatted(output,
    db48:	9600      	str	r6, [sp, #0]
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    db4a:	fbb4 f1f1 	udiv	r1, r4, r1
			length = print_formatted(output,
    db4e:	e9cd e101 	strd	lr, r1, [sp, #4]
    db52:	490e      	ldr	r1, [pc, #56]	; (db8c <prefix_print+0x120>)
    db54:	f7ff ff0a 	bl	d96c <print_formatted>
    db58:	e79f      	b.n	da9a <prefix_print+0x2e>
		length = 0;
    db5a:	4608      	mov	r0, r1
    db5c:	e79d      	b.n	da9a <prefix_print+0x2e>
		total += print_formatted(output,
    db5e:	4c08      	ldr	r4, [pc, #32]	; (db80 <prefix_print+0x114>)
    db60:	e7c2      	b.n	dae8 <prefix_print+0x7c>
    db62:	bf00      	nop
    db64:	00013552 	.word	0x00013552
    db68:	000130b8 	.word	0x000130b8
    db6c:	00013577 	.word	0x00013577
    db70:	00013544 	.word	0x00013544
    db74:	000130cc 	.word	0x000130cc
    db78:	0001357a 	.word	0x0001357a
    db7c:	0001354e 	.word	0x0001354e
    db80:	00013549 	.word	0x00013549
    db84:	20000298 	.word	0x20000298
    db88:	2000029c 	.word	0x2000029c
    db8c:	0001355b 	.word	0x0001355b

0000db90 <postfix_print>:

static void postfix_print(const struct log_output *output,
			  uint32_t flags, uint8_t level)
{
    db90:	b538      	push	{r3, r4, r5, lr}
    db92:	460c      	mov	r4, r1
	if (color) {
    db94:	07e1      	lsls	r1, r4, #31
{
    db96:	4605      	mov	r5, r0
	if (color) {
    db98:	d503      	bpl.n	dba2 <postfix_print+0x12>
		print_formatted(output, "%s", log_color);
    db9a:	4a08      	ldr	r2, [pc, #32]	; (dbbc <postfix_print+0x2c>)
    db9c:	4908      	ldr	r1, [pc, #32]	; (dbc0 <postfix_print+0x30>)
    db9e:	f7ff fee5 	bl	d96c <print_formatted>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    dba2:	06e2      	lsls	r2, r4, #27
    dba4:	d408      	bmi.n	dbb8 <postfix_print+0x28>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    dba6:	06a3      	lsls	r3, r4, #26
		print_formatted(ctx, "\r\n");
    dba8:	4628      	mov	r0, r5
		print_formatted(ctx, "\n");
    dbaa:	bf4c      	ite	mi
    dbac:	4905      	ldrmi	r1, [pc, #20]	; (dbc4 <postfix_print+0x34>)
		print_formatted(ctx, "\r\n");
    dbae:	4906      	ldrpl	r1, [pc, #24]	; (dbc8 <postfix_print+0x38>)
	color_postfix(output, (flags & LOG_OUTPUT_FLAG_COLORS),
			      level);
	newline_print(output, flags);
}
    dbb0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		print_formatted(ctx, "\r\n");
    dbb4:	f7ff beda 	b.w	d96c <print_formatted>
}
    dbb8:	bd38      	pop	{r3, r4, r5, pc}
    dbba:	bf00      	nop
    dbbc:	00013544 	.word	0x00013544
    dbc0:	00013577 	.word	0x00013577
    dbc4:	00013533 	.word	0x00013533
    dbc8:	00013532 	.word	0x00013532

0000dbcc <log_output_msg_process>:

void log_output_msg_process(const struct log_output *output,
			    struct log_msg *msg,
			    uint32_t flags)
{
    dbcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return msg->hdr.ids.level;
    dbd0:	7a8b      	ldrb	r3, [r1, #10]
		log_output_msg_syst_process(output, msg, flags);
		return;
	}

	prefix_offset = raw_string ?
			0 : prefix_print(output, flags, std_msg, timestamp,
    dbd2:	f013 0807 	ands.w	r8, r3, #7
{
    dbd6:	b08a      	sub	sp, #40	; 0x28
    dbd8:	4605      	mov	r5, r0
    dbda:	460e      	mov	r6, r1
    dbdc:	4617      	mov	r7, r2
			0 : prefix_print(output, flags, std_msg, timestamp,
    dbde:	d022      	beq.n	dc26 <log_output_msg_process+0x5a>
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    dbe0:	7a0a      	ldrb	r2, [r1, #8]
	return msg->hdr.ids.source_id;
    dbe2:	8949      	ldrh	r1, [r1, #10]
    dbe4:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    dbe8:	f3c1 1189 	ubfx	r1, r1, #6, #10
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    dbec:	43d2      	mvns	r2, r2
    dbee:	e9cd 8300 	strd	r8, r3, [sp]
    dbf2:	9102      	str	r1, [sp, #8]
    dbf4:	68f3      	ldr	r3, [r6, #12]
    dbf6:	f002 0201 	and.w	r2, r2, #1
    dbfa:	4639      	mov	r1, r7
    dbfc:	f7ff ff36 	bl	da6c <prefix_print>
    dc00:	4681      	mov	r9, r0
    dc02:	7a34      	ldrb	r4, [r6, #8]
    dc04:	43e4      	mvns	r4, r4
					 level, domain_id, source_id);

	if (log_msg_is_std(msg)) {
    dc06:	f014 0401 	ands.w	r4, r4, #1
    dc0a:	d00e      	beq.n	dc2a <log_output_msg_process+0x5e>
		std_print(msg, output);
    dc0c:	4629      	mov	r1, r5
    dc0e:	4630      	mov	r0, r6
    dc10:	f004 f9d1 	bl	11fb6 <std_print>
		raw_string_print(msg, output);
	} else {
		hexdump_print(msg, output, prefix_offset, flags);
	}

	if (!raw_string) {
    dc14:	f1b8 0f00 	cmp.w	r8, #0
    dc18:	d02b      	beq.n	dc72 <log_output_msg_process+0xa6>
		postfix_print(output, flags, level);
    dc1a:	4642      	mov	r2, r8
    dc1c:	4639      	mov	r1, r7
    dc1e:	4628      	mov	r0, r5
    dc20:	f7ff ffb6 	bl	db90 <postfix_print>
    dc24:	e025      	b.n	dc72 <log_output_msg_process+0xa6>
			0 : prefix_print(output, flags, std_msg, timestamp,
    dc26:	46c1      	mov	r9, r8
    dc28:	e7eb      	b.n	dc02 <log_output_msg_process+0x36>
	} else if (raw_string) {
    dc2a:	f1b8 0f00 	cmp.w	r8, #0
    dc2e:	d126      	bne.n	dc7e <log_output_msg_process+0xb2>
	size_t offset = 0;
    dc30:	4627      	mov	r7, r4
		length = output->size;
    dc32:	68eb      	ldr	r3, [r5, #12]
    dc34:	9306      	str	r3, [sp, #24]
		log_msg_hexdump_data_get(msg, output->buf, &length, offset);
    dc36:	aa06      	add	r2, sp, #24
    dc38:	463b      	mov	r3, r7
    dc3a:	68a9      	ldr	r1, [r5, #8]
    dc3c:	4630      	mov	r0, r6
    dc3e:	f004 f9a6 	bl	11f8e <log_msg_hexdump_data_get>
		output->control_block->offset = length;
    dc42:	9a06      	ldr	r2, [sp, #24]
    dc44:	686b      	ldr	r3, [r5, #4]
    dc46:	601a      	str	r2, [r3, #0]
		if (length != 0) {
    dc48:	b13a      	cbz	r2, dc5a <log_output_msg_process+0x8e>
			eol = (output->buf[length - 1] == '\n');
    dc4a:	68ab      	ldr	r3, [r5, #8]
    dc4c:	4413      	add	r3, r2
    dc4e:	f813 4c01 	ldrb.w	r4, [r3, #-1]
    dc52:	f1a4 030a 	sub.w	r3, r4, #10
    dc56:	425c      	negs	r4, r3
    dc58:	415c      	adcs	r4, r3
		log_output_flush(output);
    dc5a:	4628      	mov	r0, r5
    dc5c:	f004 fb08 	bl	12270 <log_output_flush>
		offset += length;
    dc60:	9b06      	ldr	r3, [sp, #24]
    dc62:	441f      	add	r7, r3
	} while (length > 0);
    dc64:	2b00      	cmp	r3, #0
    dc66:	d1e4      	bne.n	dc32 <log_output_msg_process+0x66>
	if (eol) {
    dc68:	b11c      	cbz	r4, dc72 <log_output_msg_process+0xa6>
		print_formatted(output, "\r");
    dc6a:	4914      	ldr	r1, [pc, #80]	; (dcbc <log_output_msg_process+0xf0>)
    dc6c:	4628      	mov	r0, r5
    dc6e:	f7ff fe7d 	bl	d96c <print_formatted>
	}

	log_output_flush(output);
    dc72:	4628      	mov	r0, r5
}
    dc74:	b00a      	add	sp, #40	; 0x28
    dc76:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	log_output_flush(output);
    dc7a:	f004 baf9 	b.w	12270 <log_output_flush>
	print_formatted(output, "%s", log_msg_str_get(msg));
    dc7e:	4630      	mov	r0, r6
    dc80:	f004 f983 	bl	11f8a <log_msg_str_get>
    dc84:	490e      	ldr	r1, [pc, #56]	; (dcc0 <log_output_msg_process+0xf4>)
    dc86:	4602      	mov	r2, r0
    dc88:	4628      	mov	r0, r5
    dc8a:	f7ff fe6f 	bl	d96c <print_formatted>
		length = sizeof(buf);
    dc8e:	f04f 0a10 	mov.w	sl, #16
		log_msg_hexdump_data_get(msg, buf, &length, offset);
    dc92:	aa05      	add	r2, sp, #20
    dc94:	4623      	mov	r3, r4
    dc96:	a906      	add	r1, sp, #24
    dc98:	4630      	mov	r0, r6
		length = sizeof(buf);
    dc9a:	f8cd a014 	str.w	sl, [sp, #20]
		log_msg_hexdump_data_get(msg, buf, &length, offset);
    dc9e:	f004 f976 	bl	11f8e <log_msg_hexdump_data_get>
		if (length) {
    dca2:	9a05      	ldr	r2, [sp, #20]
    dca4:	2a00      	cmp	r2, #0
    dca6:	d0b8      	beq.n	dc1a <log_output_msg_process+0x4e>
			hexdump_line_print(output, buf, length,
    dca8:	464b      	mov	r3, r9
    dcaa:	9700      	str	r7, [sp, #0]
    dcac:	a906      	add	r1, sp, #24
    dcae:	4628      	mov	r0, r5
    dcb0:	f7ff fe6e 	bl	d990 <hexdump_line_print>
			offset += length;
    dcb4:	9b05      	ldr	r3, [sp, #20]
    dcb6:	441c      	add	r4, r3
		length = sizeof(buf);
    dcb8:	e7eb      	b.n	dc92 <log_output_msg_process+0xc6>
    dcba:	bf00      	nop
    dcbc:	00013580 	.word	0x00013580
    dcc0:	00013577 	.word	0x00013577

0000dcc4 <log_output_dropped_process>:
	postfix_print(output, flags, level);
	log_output_flush(output);
}

void log_output_dropped_process(const struct log_output *output, uint32_t cnt)
{
    dcc4:	b573      	push	{r0, r1, r4, r5, r6, lr}
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = output->func;

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    dcc6:	f242 730f 	movw	r3, #9999	; 0x270f
    dcca:	428b      	cmp	r3, r1
    dccc:	bf28      	it	cs
    dcce:	460b      	movcs	r3, r1
	log_output_func_t outf = output->func;
    dcd0:	6805      	ldr	r5, [r0, #0]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    dcd2:	4a0f      	ldr	r2, [pc, #60]	; (dd10 <log_output_dropped_process+0x4c>)
{
    dcd4:	4604      	mov	r4, r0
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    dcd6:	2105      	movs	r1, #5
    dcd8:	4668      	mov	r0, sp
    dcda:	f003 ff06 	bl	11aea <snprintk>

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
    dcde:	6863      	ldr	r3, [r4, #4]
    dce0:	490c      	ldr	r1, [pc, #48]	; (dd14 <log_output_dropped_process+0x50>)
    dce2:	685b      	ldr	r3, [r3, #4]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    dce4:	4606      	mov	r6, r0
	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
    dce6:	220b      	movs	r2, #11
    dce8:	4628      	mov	r0, r5
    dcea:	f004 f957 	bl	11f9c <buffer_write>
		     output->control_block->ctx);
	buffer_write(outf, buf, len, output->control_block->ctx);
    dcee:	6863      	ldr	r3, [r4, #4]
    dcf0:	4632      	mov	r2, r6
    dcf2:	4669      	mov	r1, sp
    dcf4:	4628      	mov	r0, r5
    dcf6:	685b      	ldr	r3, [r3, #4]
    dcf8:	f004 f950 	bl	11f9c <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
    dcfc:	6863      	ldr	r3, [r4, #4]
    dcfe:	4906      	ldr	r1, [pc, #24]	; (dd18 <log_output_dropped_process+0x54>)
    dd00:	685b      	ldr	r3, [r3, #4]
    dd02:	221b      	movs	r2, #27
    dd04:	4628      	mov	r0, r5
    dd06:	f004 f949 	bl	11f9c <buffer_write>
		     output->control_block->ctx);
}
    dd0a:	b002      	add	sp, #8
    dd0c:	bd70      	pop	{r4, r5, r6, pc}
    dd0e:	bf00      	nop
    dd10:	00013428 	.word	0x00013428
    dd14:	000135be 	.word	0x000135be
    dd18:	000135a2 	.word	0x000135a2

0000dd1c <log_output_timestamp_freq_set>:

void log_output_timestamp_freq_set(uint32_t frequency)
{
	timestamp_div = 1U;
    dd1c:	4a08      	ldr	r2, [pc, #32]	; (dd40 <log_output_timestamp_freq_set+0x24>)
{
    dd1e:	b510      	push	{r4, lr}
	timestamp_div = 1U;
    dd20:	2301      	movs	r3, #1
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
    dd22:	4c08      	ldr	r4, [pc, #32]	; (dd44 <log_output_timestamp_freq_set+0x28>)
	timestamp_div = 1U;
    dd24:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
    dd26:	2100      	movs	r1, #0
    dd28:	42a0      	cmp	r0, r4
    dd2a:	d804      	bhi.n	dd36 <log_output_timestamp_freq_set+0x1a>
    dd2c:	b101      	cbz	r1, dd30 <log_output_timestamp_freq_set+0x14>
    dd2e:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
    dd30:	4b05      	ldr	r3, [pc, #20]	; (dd48 <log_output_timestamp_freq_set+0x2c>)
    dd32:	6018      	str	r0, [r3, #0]
}
    dd34:	bd10      	pop	{r4, pc}
		frequency /= 2U;
    dd36:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
    dd38:	005b      	lsls	r3, r3, #1
    dd3a:	2101      	movs	r1, #1
    dd3c:	e7f4      	b.n	dd28 <log_output_timestamp_freq_set+0xc>
    dd3e:	bf00      	nop
    dd40:	2000029c 	.word	0x2000029c
    dd44:	000f4240 	.word	0x000f4240
    dd48:	20000298 	.word	0x20000298

0000dd4c <char_out>:
static const char LOG_HEX_SEP[10] = "##ZLOGV1##";

static const struct device *uart_dev;

static int char_out(uint8_t *data, size_t length, void *ctx)
{
    dd4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		/* lower 8-bit */
		x = data[i] & 0x0FU;
		(void)hex2char(x, &c);
		uart_poll_out(uart_dev, c);
#else
		uart_poll_out(uart_dev, data[i]);
    dd4e:	4f07      	ldr	r7, [pc, #28]	; (dd6c <char_out+0x20>)
{
    dd50:	460d      	mov	r5, r1
    dd52:	4604      	mov	r4, r0
    dd54:	1846      	adds	r6, r0, r1
	for (size_t i = 0; i < length; i++) {
    dd56:	42b4      	cmp	r4, r6
    dd58:	d101      	bne.n	dd5e <char_out+0x12>
#endif
	}

	return length;
}
    dd5a:	4628      	mov	r0, r5
    dd5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		uart_poll_out(uart_dev, data[i]);
    dd5e:	6838      	ldr	r0, [r7, #0]
    dd60:	f814 1b01 	ldrb.w	r1, [r4], #1
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
    dd64:	6883      	ldr	r3, [r0, #8]
    dd66:	685b      	ldr	r3, [r3, #4]
    dd68:	4798      	blx	r3
	for (size_t i = 0; i < length; i++) {
    dd6a:	e7f4      	b.n	dd56 <char_out+0xa>
    dd6c:	200002b4 	.word	0x200002b4

0000dd70 <panic>:
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
    dd70:	4801      	ldr	r0, [pc, #4]	; (dd78 <panic+0x8>)
    dd72:	f004 ba7d 	b.w	12270 <log_output_flush>
    dd76:	bf00      	nop
    dd78:	000130fc 	.word	0x000130fc

0000dd7c <dropped>:
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const output, uint32_t cnt)
{
	log_output_dropped_process(output, cnt);
    dd7c:	4801      	ldr	r0, [pc, #4]	; (dd84 <dropped+0x8>)
    dd7e:	f7ff bfa1 	b.w	dcc4 <log_output_dropped_process>
    dd82:	bf00      	nop
    dd84:	000130fc 	.word	0x000130fc

0000dd88 <log_backend_uart_init>:
		log_output_msg2_process(&log_output_uart, &msg->log, flags);
	}
}

static void log_backend_uart_init(struct log_backend const *const backend)
{
    dd88:	b508      	push	{r3, lr}
		/* coverity[OVERRUN] */
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
    dd8a:	4803      	ldr	r0, [pc, #12]	; (dd98 <log_backend_uart_init+0x10>)
    dd8c:	f002 fdf2 	bl	10974 <z_impl_device_get_binding>
	uart_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
    dd90:	4b02      	ldr	r3, [pc, #8]	; (dd9c <log_backend_uart_init+0x14>)
    dd92:	6018      	str	r0, [r3, #0]
		 */
		for (int i = 0; i < sizeof(LOG_HEX_SEP); i++) {
			uart_poll_out(uart_dev, LOG_HEX_SEP[i]);
		}
	}
}
    dd94:	bd08      	pop	{r3, pc}
    dd96:	bf00      	nop
    dd98:	000135ca 	.word	0x000135ca
    dd9c:	200002b4 	.word	0x200002b4

0000dda0 <put>:
{
    dda0:	b510      	push	{r4, lr}
	log_msg_get(msg);
    dda2:	4608      	mov	r0, r1
    dda4:	460c      	mov	r4, r1
    dda6:	f004 f8ae 	bl	11f06 <log_msg_get>
	log_output_msg_process(output, msg, flags);
    ddaa:	4805      	ldr	r0, [pc, #20]	; (ddc0 <put+0x20>)
    ddac:	4621      	mov	r1, r4
    ddae:	220f      	movs	r2, #15
    ddb0:	f7ff ff0c 	bl	dbcc <log_output_msg_process>
	log_msg_put(msg);
    ddb4:	4620      	mov	r0, r4
}
    ddb6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ddba:	f004 b8d3 	b.w	11f64 <log_msg_put>
    ddbe:	bf00      	nop
    ddc0:	000130fc 	.word	0x000130fc

0000ddc4 <log_backend_rtt_init>:
{
	if (CONFIG_LOG_BACKEND_RTT_BUFFER > 0) {
		log_backend_rtt_cfg();
	}

	host_present = true;
    ddc4:	4b01      	ldr	r3, [pc, #4]	; (ddcc <log_backend_rtt_init+0x8>)
    ddc6:	2201      	movs	r2, #1
    ddc8:	701a      	strb	r2, [r3, #0]
	line_pos = line_buf;
}
    ddca:	4770      	bx	lr
    ddcc:	20000507 	.word	0x20000507

0000ddd0 <panic>:

static void panic(struct log_backend const *const backend)
{
	panic_mode = true;
    ddd0:	4b02      	ldr	r3, [pc, #8]	; (dddc <panic+0xc>)
	log_output_flush(output);
    ddd2:	4803      	ldr	r0, [pc, #12]	; (dde0 <panic+0x10>)
    ddd4:	2201      	movs	r2, #1
    ddd6:	701a      	strb	r2, [r3, #0]
    ddd8:	f004 ba4a 	b.w	12270 <log_output_flush>
    dddc:	20000508 	.word	0x20000508
    dde0:	00013128 	.word	0x00013128

0000dde4 <dropped>:
	log_output_dropped_process(output, cnt);
    dde4:	4801      	ldr	r0, [pc, #4]	; (ddec <dropped+0x8>)
    dde6:	f7ff bf6d 	b.w	dcc4 <log_output_dropped_process>
    ddea:	bf00      	nop
    ddec:	00013128 	.word	0x00013128

0000ddf0 <put>:
{
    ddf0:	b510      	push	{r4, lr}
	log_msg_get(msg);
    ddf2:	4608      	mov	r0, r1
    ddf4:	460c      	mov	r4, r1
    ddf6:	f004 f886 	bl	11f06 <log_msg_get>
	log_output_msg_process(output, msg, flags);
    ddfa:	4805      	ldr	r0, [pc, #20]	; (de10 <put+0x20>)
    ddfc:	4621      	mov	r1, r4
    ddfe:	220f      	movs	r2, #15
    de00:	f7ff fee4 	bl	dbcc <log_output_msg_process>
	log_msg_put(msg);
    de04:	4620      	mov	r0, r4
}
    de06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    de0a:	f004 b8ab 	b.w	11f64 <log_msg_put>
    de0e:	bf00      	nop
    de10:	00013128 	.word	0x00013128

0000de14 <on_failed_write.part.0>:
	return IS_ENABLED(CONFIG_LOG_IMMEDIATE) || panic_mode;
    de14:	4b05      	ldr	r3, [pc, #20]	; (de2c <on_failed_write.part.0+0x18>)
	} else if (is_sync_mode()) {
    de16:	781b      	ldrb	r3, [r3, #0]
    de18:	b11b      	cbz	r3, de22 <on_failed_write.part.0+0xe>
	z_impl_k_busy_wait(usec_to_wait);
    de1a:	f241 3088 	movw	r0, #5000	; 0x1388
    de1e:	f004 bfc6 	b.w	12dae <z_impl_k_busy_wait>
	return z_impl_k_sleep(timeout);
    de22:	20a4      	movs	r0, #164	; 0xa4
    de24:	2100      	movs	r1, #0
    de26:	f003 bbd3 	b.w	115d0 <z_impl_k_sleep>
    de2a:	bf00      	nop
    de2c:	20000508 	.word	0x20000508

0000de30 <data_out_block_mode>:
{
    de30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return IS_ENABLED(CONFIG_LOG_IMMEDIATE) || panic_mode;
    de34:	f8df 908c 	ldr.w	r9, [pc, #140]	; dec4 <data_out_block_mode+0x94>
	return z_impl_k_mutex_lock(mutex, timeout);
    de38:	f8df a08c 	ldr.w	sl, [pc, #140]	; dec8 <data_out_block_mode+0x98>
{
    de3c:	4680      	mov	r8, r0
    de3e:	460f      	mov	r7, r1
	int retry_cnt = IS_ENABLED(CONFIG_LOG_BACKEND_RTT_MODE_BLOCK) ?
    de40:	2404      	movs	r4, #4
		if (!is_sync_mode()) {
    de42:	f899 5000 	ldrb.w	r5, [r9]
    de46:	b9cd      	cbnz	r5, de7c <data_out_block_mode+0x4c>
    de48:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    de4c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    de50:	4650      	mov	r0, sl
    de52:	f002 ffe5 	bl	10e20 <z_impl_k_mutex_lock>
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    de56:	463a      	mov	r2, r7
    de58:	4641      	mov	r1, r8
    de5a:	4628      	mov	r0, r5
    de5c:	f002 fd14 	bl	10888 <SEGGER_RTT_WriteSkipNoLock>
    de60:	4606      	mov	r6, r0
	return z_impl_k_mutex_unlock(mutex);
    de62:	4650      	mov	r0, sl
    de64:	f003 f854 	bl	10f10 <z_impl_k_mutex_unlock>
		if (ret) {
    de68:	4d18      	ldr	r5, [pc, #96]	; (decc <data_out_block_mode+0x9c>)
    de6a:	b1fe      	cbz	r6, deac <data_out_block_mode+0x7c>
	host_present = true;
    de6c:	2301      	movs	r3, #1
    de6e:	702b      	strb	r3, [r5, #0]
	if (is_panic_mode()) {
    de70:	f899 3000 	ldrb.w	r3, [r9]
    de74:	b96b      	cbnz	r3, de92 <data_out_block_mode+0x62>
}
    de76:	4638      	mov	r0, r7
    de78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    de7c:	463a      	mov	r2, r7
    de7e:	4641      	mov	r1, r8
    de80:	2000      	movs	r0, #0
    de82:	f002 fd01 	bl	10888 <SEGGER_RTT_WriteSkipNoLock>
    de86:	4606      	mov	r6, r0
    de88:	e7ee      	b.n	de68 <data_out_block_mode+0x38>
	if (retry_cnt == 0) {
    de8a:	b95c      	cbnz	r4, dea4 <data_out_block_mode+0x74>
		host_present = false;
    de8c:	702c      	strb	r4, [r5, #0]
    de8e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
		while (SEGGER_RTT_HasDataUp(CONFIG_LOG_BACKEND_RTT_BUFFER) &&
    de92:	2000      	movs	r0, #0
    de94:	f002 fd44 	bl	10920 <SEGGER_RTT_HasDataUp>
    de98:	2800      	cmp	r0, #0
    de9a:	d0ec      	beq.n	de76 <data_out_block_mode+0x46>
    de9c:	782b      	ldrb	r3, [r5, #0]
    de9e:	2b00      	cmp	r3, #0
    dea0:	d1f3      	bne.n	de8a <data_out_block_mode+0x5a>
    dea2:	e7e8      	b.n	de76 <data_out_block_mode+0x46>
			on_failed_write(retry_cnt--);
    dea4:	3c01      	subs	r4, #1
    dea6:	f7ff ffb5 	bl	de14 <on_failed_write.part.0>
    deaa:	e7f2      	b.n	de92 <data_out_block_mode+0x62>
		} else if (host_present) {
    deac:	782b      	ldrb	r3, [r5, #0]
    deae:	b113      	cbz	r3, deb6 <data_out_block_mode+0x86>
	if (retry_cnt == 0) {
    deb0:	3c01      	subs	r4, #1
    deb2:	d104      	bne.n	debe <data_out_block_mode+0x8e>
		host_present = false;
    deb4:	702c      	strb	r4, [r5, #0]
	} while ((ret == 0) && host_present);
    deb6:	782b      	ldrb	r3, [r5, #0]
    deb8:	2b00      	cmp	r3, #0
    deba:	d1c2      	bne.n	de42 <data_out_block_mode+0x12>
    debc:	e7db      	b.n	de76 <data_out_block_mode+0x46>
    debe:	f7ff ffa9 	bl	de14 <on_failed_write.part.0>
    dec2:	e7f8      	b.n	deb6 <data_out_block_mode+0x86>
    dec4:	20000508 	.word	0x20000508
    dec8:	20000030 	.word	0x20000030
    decc:	20000507 	.word	0x20000507

0000ded0 <nvs_flash_erase_sector>:

/* erase a sector and verify erase was OK.
 * return 0 if OK, errorcode on error.
 */
static int nvs_flash_erase_sector(struct nvs_fs *fs, uint32_t addr)
{
    ded0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	off_t offset;

	addr &= ADDR_SECT_MASK;

	offset = fs->offset;
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
    ded4:	8983      	ldrh	r3, [r0, #12]
    ded6:	6807      	ldr	r7, [r0, #0]
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
    ded8:	4a20      	ldr	r2, [pc, #128]	; (df5c <nvs_flash_erase_sector+0x8c>)
	addr &= ADDR_SECT_MASK;
    deda:	0c0e      	lsrs	r6, r1, #16
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
    dedc:	0c09      	lsrs	r1, r1, #16
    dede:	fb03 7701 	mla	r7, r3, r1, r7
    dee2:	491f      	ldr	r1, [pc, #124]	; (df60 <nvs_flash_erase_sector+0x90>)
    dee4:	1a52      	subs	r2, r2, r1
    dee6:	08d2      	lsrs	r2, r2, #3

	LOG_DBG("Erasing flash at %lx, len %d", (long int) offset,
    dee8:	0192      	lsls	r2, r2, #6
{
    deea:	4605      	mov	r5, r0
	LOG_DBG("Erasing flash at %lx, len %d", (long int) offset,
    deec:	f042 0204 	orr.w	r2, r2, #4
    def0:	f8ad 2000 	strh.w	r2, [sp]
    def4:	491b      	ldr	r1, [pc, #108]	; (df64 <nvs_flash_erase_sector+0x94>)
    def6:	481c      	ldr	r0, [pc, #112]	; (df68 <nvs_flash_erase_sector+0x98>)
    def8:	463a      	mov	r2, r7
    defa:	f003 ff92 	bl	11e22 <log_3>
	addr &= ADDR_SECT_MASK;
    defe:	0436      	lsls	r6, r6, #16
		fs->sector_size);
	rc = flash_erase(fs->flash_device, offset, fs->sector_size);
    df00:	f8d5 8028 	ldr.w	r8, [r5, #40]	; 0x28
    df04:	f8b5 a00c 	ldrh.w	sl, [r5, #12]
__syscall int flash_erase(const struct device *dev, off_t offset, size_t size);

static inline int z_impl_flash_erase(const struct device *dev, off_t offset,
				     size_t size)
{
	const struct flash_driver_api *api =
    df08:	f8d8 9008 	ldr.w	r9, [r8, #8]
	/* write protection management in this function exists for keeping
	 * compatibility with out-of-tree drivers which are not aligned jet
	 * with write-protection API depreciation.
	 * This will be removed with flash_api_write_protection handler type.
	 */
	if (api->write_protection != NULL) {
    df0c:	f8d9 300c 	ldr.w	r3, [r9, #12]
    df10:	b9b3      	cbnz	r3, df40 <nvs_flash_erase_sector+0x70>
		if (rc) {
			return rc;
		}
	}

	rc = api->erase(dev, offset, size);
    df12:	f8d9 3008 	ldr.w	r3, [r9, #8]
    df16:	4652      	mov	r2, sl
    df18:	4639      	mov	r1, r7
    df1a:	4640      	mov	r0, r8
    df1c:	4798      	blx	r3

	if (api->write_protection != NULL) {
    df1e:	f8d9 300c 	ldr.w	r3, [r9, #12]
	rc = api->erase(dev, offset, size);
    df22:	4604      	mov	r4, r0
	if (api->write_protection != NULL) {
    df24:	b9b3      	cbnz	r3, df54 <nvs_flash_erase_sector+0x84>

	if (rc) {
    df26:	b98c      	cbnz	r4, df4c <nvs_flash_erase_sector+0x7c>
		return rc;
	}

	if (nvs_flash_cmp_const(fs, addr, fs->flash_parameters->erase_value,
    df28:	6aea      	ldr	r2, [r5, #44]	; 0x2c
    df2a:	89ab      	ldrh	r3, [r5, #12]
    df2c:	7912      	ldrb	r2, [r2, #4]
    df2e:	4631      	mov	r1, r6
    df30:	4628      	mov	r0, r5
    df32:	f004 fa1c 	bl	1236e <nvs_flash_cmp_const>
			fs->sector_size)) {
		rc = -ENXIO;
    df36:	1e04      	subs	r4, r0, #0
    df38:	bf18      	it	ne
    df3a:	f06f 0405 	mvnne.w	r4, #5
    df3e:	e005      	b.n	df4c <nvs_flash_erase_sector+0x7c>
		rc = api->write_protection(dev, false);
    df40:	2100      	movs	r1, #0
    df42:	4640      	mov	r0, r8
    df44:	4798      	blx	r3
		if (rc) {
    df46:	4604      	mov	r4, r0
    df48:	2800      	cmp	r0, #0
    df4a:	d0e2      	beq.n	df12 <nvs_flash_erase_sector+0x42>
	}

	return rc;
}
    df4c:	4620      	mov	r0, r4
    df4e:	b002      	add	sp, #8
    df50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		(void) api->write_protection(dev, true);
    df54:	2101      	movs	r1, #1
    df56:	4640      	mov	r0, r8
    df58:	4798      	blx	r3
    df5a:	e7e4      	b.n	df26 <nvs_flash_erase_sector+0x56>
    df5c:	0001302c 	.word	0x0001302c
    df60:	00013014 	.word	0x00013014
    df64:	000137d8 	.word	0x000137d8
    df68:	000135f2 	.word	0x000135f2

0000df6c <nvs_recover_last_ate>:
 *
 * addr should point to the faulty closing ate and will be updated to the last
 * valid ate. If no valid ate is found it will be left untouched.
 */
static int nvs_recover_last_ate(struct nvs_fs *fs, uint32_t *addr)
{
    df6c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    df70:	4b1c      	ldr	r3, [pc, #112]	; (dfe4 <nvs_recover_last_ate+0x78>)
    df72:	4a1d      	ldr	r2, [pc, #116]	; (dfe8 <nvs_recover_last_ate+0x7c>)

	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));

	*addr -= ate_size;
	ate_end_addr = *addr;
	data_end_addr = *addr & ADDR_SECT_MASK;
    df74:	f8df 9074 	ldr.w	r9, [pc, #116]	; dfec <nvs_recover_last_ate+0x80>
    df78:	1a9b      	subs	r3, r3, r2
    df7a:	08db      	lsrs	r3, r3, #3
{
    df7c:	4606      	mov	r6, r0
	LOG_DBG("Recovering last ate from sector %d",
    df7e:	019b      	lsls	r3, r3, #6
{
    df80:	460d      	mov	r5, r1
	LOG_DBG("Recovering last ate from sector %d",
    df82:	884a      	ldrh	r2, [r1, #2]
    df84:	481a      	ldr	r0, [pc, #104]	; (dff0 <nvs_recover_last_ate+0x84>)
    df86:	491b      	ldr	r1, [pc, #108]	; (dff4 <nvs_recover_last_ate+0x88>)
    df88:	f043 0304 	orr.w	r3, r3, #4
    df8c:	f003 ff30 	bl	11df0 <log_2>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    df90:	6af0      	ldr	r0, [r6, #44]	; 0x2c
    df92:	2108      	movs	r1, #8
    df94:	f004 fa24 	bl	123e0 <nvs_al_size.isra.0>
	*addr -= ate_size;
    df98:	682c      	ldr	r4, [r5, #0]
    df9a:	1a24      	subs	r4, r4, r0
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    df9c:	4680      	mov	r8, r0
	*addr -= ate_size;
    df9e:	602c      	str	r4, [r5, #0]
	data_end_addr = *addr & ADDR_SECT_MASK;
    dfa0:	ea04 0709 	and.w	r7, r4, r9
	while (ate_end_addr > data_end_addr) {
    dfa4:	42bc      	cmp	r4, r7
    dfa6:	d803      	bhi.n	dfb0 <nvs_recover_last_ate+0x44>
			*addr = ate_end_addr;
		}
		ate_end_addr -= ate_size;
	}

	return 0;
    dfa8:	2000      	movs	r0, #0
}
    dfaa:	b003      	add	sp, #12
    dfac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
    dfb0:	2308      	movs	r3, #8
    dfb2:	466a      	mov	r2, sp
    dfb4:	4621      	mov	r1, r4
    dfb6:	4630      	mov	r0, r6
    dfb8:	f004 f9a1 	bl	122fe <nvs_flash_rd>
		if (rc) {
    dfbc:	2800      	cmp	r0, #0
    dfbe:	d1f4      	bne.n	dfaa <nvs_recover_last_ate+0x3e>
		if (nvs_ate_valid(fs, &end_ate)) {
    dfc0:	4669      	mov	r1, sp
    dfc2:	4630      	mov	r0, r6
    dfc4:	f004 fa16 	bl	123f4 <nvs_ate_valid>
    dfc8:	b140      	cbz	r0, dfdc <nvs_recover_last_ate+0x70>
			data_end_addr += end_ate.offset + end_ate.len;
    dfca:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    dfce:	f8bd 2004 	ldrh.w	r2, [sp, #4]
			*addr = ate_end_addr;
    dfd2:	602c      	str	r4, [r5, #0]
			data_end_addr &= ADDR_SECT_MASK;
    dfd4:	ea07 0709 	and.w	r7, r7, r9
			data_end_addr += end_ate.offset + end_ate.len;
    dfd8:	4413      	add	r3, r2
    dfda:	441f      	add	r7, r3
		ate_end_addr -= ate_size;
    dfdc:	eba4 0408 	sub.w	r4, r4, r8
    dfe0:	e7e0      	b.n	dfa4 <nvs_recover_last_ate+0x38>
    dfe2:	bf00      	nop
    dfe4:	0001302c 	.word	0x0001302c
    dfe8:	00013014 	.word	0x00013014
    dfec:	ffff0000 	.word	0xffff0000
    dff0:	00013613 	.word	0x00013613
    dff4:	000137c3 	.word	0x000137c3

0000dff8 <nvs_add_gc_done_ate>:
    dff8:	4a10      	ldr	r2, [pc, #64]	; (e03c <nvs_add_gc_done_ate+0x44>)
    dffa:	4b11      	ldr	r3, [pc, #68]	; (e040 <nvs_add_gc_done_ate+0x48>)

	return 0;
}

static int nvs_add_gc_done_ate(struct nvs_fs *fs)
{
    dffc:	b513      	push	{r0, r1, r4, lr}
    dffe:	1a9b      	subs	r3, r3, r2
    e000:	08db      	lsrs	r3, r3, #3
	struct nvs_ate gc_done_ate;

	LOG_DBG("Adding gc done ate at %x", fs->ate_wra & ADDR_OFFS_MASK);
    e002:	019b      	lsls	r3, r3, #6
    e004:	8882      	ldrh	r2, [r0, #4]
    e006:	490f      	ldr	r1, [pc, #60]	; (e044 <nvs_add_gc_done_ate+0x4c>)
{
    e008:	4604      	mov	r4, r0
	LOG_DBG("Adding gc done ate at %x", fs->ate_wra & ADDR_OFFS_MASK);
    e00a:	f043 0304 	orr.w	r3, r3, #4
    e00e:	480e      	ldr	r0, [pc, #56]	; (e048 <nvs_add_gc_done_ate+0x50>)
    e010:	f003 feee 	bl	11df0 <log_2>
	gc_done_ate.id = 0xffff;
    e014:	f64f 73ff 	movw	r3, #65535	; 0xffff
    e018:	f8ad 3000 	strh.w	r3, [sp]
	gc_done_ate.len = 0U;
    e01c:	2300      	movs	r3, #0
    e01e:	f8ad 3004 	strh.w	r3, [sp, #4]
	gc_done_ate.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
	nvs_ate_crc8_update(&gc_done_ate);
    e022:	4668      	mov	r0, sp
	gc_done_ate.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
    e024:	68a3      	ldr	r3, [r4, #8]
    e026:	f8ad 3002 	strh.w	r3, [sp, #2]
	nvs_ate_crc8_update(&gc_done_ate);
    e02a:	f004 f9c5 	bl	123b8 <nvs_ate_crc8_update>

	return nvs_flash_ate_wrt(fs, &gc_done_ate);
    e02e:	4669      	mov	r1, sp
    e030:	4620      	mov	r0, r4
    e032:	f004 fa5f 	bl	124f4 <nvs_flash_ate_wrt>
}
    e036:	b002      	add	sp, #8
    e038:	bd10      	pop	{r4, pc}
    e03a:	bf00      	nop
    e03c:	00013014 	.word	0x00013014
    e040:	0001302c 	.word	0x0001302c
    e044:	000137a8 	.word	0x000137a8
    e048:	0001363a 	.word	0x0001363a

0000e04c <nvs_gc>:
/* garbage collection: the address ate_wra has been updated to the new sector
 * that has just been started. The data to gc is in the sector after this new
 * sector.
 */
static int nvs_gc(struct nvs_fs *fs)
{
    e04c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e050:	4604      	mov	r4, r0
    e052:	b097      	sub	sp, #92	; 0x5c
	struct nvs_ate close_ate, gc_ate, wlk_ate;
	uint32_t sec_addr, gc_addr, gc_prev_addr, wlk_addr, wlk_prev_addr,
	      data_addr, stop_addr;
	size_t ate_size;

	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    e054:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    e056:	2108      	movs	r1, #8
    e058:	f004 f9c2 	bl	123e0 <nvs_al_size.isra.0>

	sec_addr = (fs->ate_wra & ADDR_SECT_MASK);
    e05c:	6863      	ldr	r3, [r4, #4]
    e05e:	0c1b      	lsrs	r3, r3, #16
    e060:	041b      	lsls	r3, r3, #16
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    e062:	4606      	mov	r6, r0
	nvs_sector_advance(fs, &sec_addr);
    e064:	a905      	add	r1, sp, #20
    e066:	89e0      	ldrh	r0, [r4, #14]
	sec_addr = (fs->ate_wra & ADDR_SECT_MASK);
    e068:	9305      	str	r3, [sp, #20]
	nvs_sector_advance(fs, &sec_addr);
    e06a:	f004 f9ae 	bl	123ca <nvs_sector_advance.isra.0>
	gc_addr = sec_addr + fs->sector_size - ate_size;
    e06e:	9b05      	ldr	r3, [sp, #20]
    e070:	89a1      	ldrh	r1, [r4, #12]
    e072:	4419      	add	r1, r3
    e074:	1b89      	subs	r1, r1, r6
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
    e076:	2308      	movs	r3, #8
    e078:	aa08      	add	r2, sp, #32
    e07a:	4620      	mov	r0, r4
	gc_addr = sec_addr + fs->sector_size - ate_size;
    e07c:	9106      	str	r1, [sp, #24]
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
    e07e:	f004 f93e 	bl	122fe <nvs_flash_rd>

	/* if the sector is not closed don't do gc */
	rc = nvs_flash_ate_rd(fs, gc_addr, &close_ate);
	if (rc < 0) {
    e082:	2800      	cmp	r0, #0
    e084:	f2c0 80ad 	blt.w	e1e2 <nvs_gc+0x196>
		/* flash error */
		return rc;
	}

	rc = nvs_ate_cmp_const(&close_ate, fs->flash_parameters->erase_value);
    e088:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    e08a:	aa08      	add	r2, sp, #32
    e08c:	7919      	ldrb	r1, [r3, #4]
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
    e08e:	2300      	movs	r3, #0
		if (data8[i] != value) {
    e090:	f812 0b01 	ldrb.w	r0, [r2], #1
    e094:	4281      	cmp	r1, r0
    e096:	f040 8093 	bne.w	e1c0 <nvs_gc+0x174>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
    e09a:	3301      	adds	r3, #1
    e09c:	2b08      	cmp	r3, #8
    e09e:	d1f7      	bne.n	e090 <nvs_gc+0x44>
	 * gc done ate to the sector. In the field we might have nvs systems
	 * that do not have sufficient space to add this ate, so for these
	 * situations avoid adding the gc done ate.
	 */

	if (fs->ate_wra >= (fs->data_wra + ate_size)) {
    e0a0:	68a0      	ldr	r0, [r4, #8]
    e0a2:	6863      	ldr	r3, [r4, #4]
    e0a4:	4430      	add	r0, r6
    e0a6:	4283      	cmp	r3, r0
    e0a8:	f080 8083 	bcs.w	e1b2 <nvs_gc+0x166>
			return rc;
		}
	}

	/* Erase the gc'ed sector */
	rc = nvs_flash_erase_sector(fs, sec_addr);
    e0ac:	9905      	ldr	r1, [sp, #20]
    e0ae:	4620      	mov	r0, r4
    e0b0:	f7ff ff0e 	bl	ded0 <nvs_flash_erase_sector>
	if (rc) {
    e0b4:	e095      	b.n	e1e2 <nvs_gc+0x196>
		gc_addr &= ADDR_SECT_MASK;
    e0b6:	9b06      	ldr	r3, [sp, #24]
		gc_addr += close_ate.offset;
    e0b8:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
		gc_addr &= ADDR_SECT_MASK;
    e0bc:	0c1b      	lsrs	r3, r3, #16
    e0be:	041b      	lsls	r3, r3, #16
		gc_addr += close_ate.offset;
    e0c0:	4413      	add	r3, r2
    e0c2:	9306      	str	r3, [sp, #24]
    e0c4:	4b48      	ldr	r3, [pc, #288]	; (e1e8 <nvs_gc+0x19c>)
    e0c6:	4d49      	ldr	r5, [pc, #292]	; (e1ec <nvs_gc+0x1a0>)
			LOG_DBG("Moving %d, len %d", gc_ate.id, gc_ate.len);
    e0c8:	f8df b124 	ldr.w	fp, [pc, #292]	; e1f0 <nvs_gc+0x1a4>
    e0cc:	1aed      	subs	r5, r5, r3
    e0ce:	08ed      	lsrs	r5, r5, #3
    e0d0:	01ad      	lsls	r5, r5, #6
    e0d2:	f045 0304 	orr.w	r3, r5, #4
    e0d6:	9303      	str	r3, [sp, #12]
		rc = nvs_prev_ate(fs, &gc_addr, &gc_ate);
    e0d8:	aa0a      	add	r2, sp, #40	; 0x28
    e0da:	a906      	add	r1, sp, #24
    e0dc:	4620      	mov	r0, r4
		gc_prev_addr = gc_addr;
    e0de:	f8dd a018 	ldr.w	sl, [sp, #24]
		rc = nvs_prev_ate(fs, &gc_addr, &gc_ate);
    e0e2:	f004 fa18 	bl	12516 <nvs_prev_ate>
		if (rc) {
    e0e6:	2800      	cmp	r0, #0
    e0e8:	d17b      	bne.n	e1e2 <nvs_gc+0x196>
		if (!nvs_ate_valid(fs, &gc_ate)) {
    e0ea:	a90a      	add	r1, sp, #40	; 0x28
    e0ec:	4620      	mov	r0, r4
    e0ee:	f004 f981 	bl	123f4 <nvs_ate_valid>
    e0f2:	2800      	cmp	r0, #0
    e0f4:	d03d      	beq.n	e172 <nvs_gc+0x126>
		wlk_addr = fs->ate_wra;
    e0f6:	6863      	ldr	r3, [r4, #4]
    e0f8:	9307      	str	r3, [sp, #28]
			rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
    e0fa:	aa0c      	add	r2, sp, #48	; 0x30
    e0fc:	a907      	add	r1, sp, #28
    e0fe:	4620      	mov	r0, r4
			wlk_prev_addr = wlk_addr;
    e100:	9f07      	ldr	r7, [sp, #28]
			rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
    e102:	f004 fa08 	bl	12516 <nvs_prev_ate>
			if (rc) {
    e106:	2800      	cmp	r0, #0
    e108:	d16b      	bne.n	e1e2 <nvs_gc+0x196>
			if ((wlk_ate.id == gc_ate.id) &&
    e10a:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
    e10e:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    e112:	429a      	cmp	r2, r3
    e114:	d031      	beq.n	e17a <nvs_gc+0x12e>
		} while (wlk_addr != fs->ate_wra);
    e116:	6862      	ldr	r2, [r4, #4]
    e118:	9b07      	ldr	r3, [sp, #28]
    e11a:	429a      	cmp	r2, r3
    e11c:	d1ed      	bne.n	e0fa <nvs_gc+0xae>
		if ((wlk_prev_addr == gc_prev_addr) && gc_ate.len) {
    e11e:	4557      	cmp	r7, sl
    e120:	d127      	bne.n	e172 <nvs_gc+0x126>
    e122:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
    e126:	b323      	cbz	r3, e172 <nvs_gc+0x126>
			LOG_DBG("Moving %d, len %d", gc_ate.id, gc_ate.len);
    e128:	9a03      	ldr	r2, [sp, #12]
    e12a:	4832      	ldr	r0, [pc, #200]	; (e1f4 <nvs_gc+0x1a8>)
    e12c:	f8ad 2000 	strh.w	r2, [sp]
    e130:	4659      	mov	r1, fp
    e132:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
    e136:	f003 fe74 	bl	11e22 <log_3>
			data_addr += gc_ate.offset;
    e13a:	f8bd 802a 	ldrh.w	r8, [sp, #42]	; 0x2a
			data_addr = (gc_prev_addr & ADDR_SECT_MASK);
    e13e:	ea4f 431a 	mov.w	r3, sl, lsr #16
    e142:	041b      	lsls	r3, r3, #16
			data_addr += gc_ate.offset;
    e144:	4498      	add	r8, r3
			nvs_ate_crc8_update(&gc_ate);
    e146:	a80a      	add	r0, sp, #40	; 0x28
			gc_ate.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
    e148:	68a3      	ldr	r3, [r4, #8]
    e14a:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
			nvs_ate_crc8_update(&gc_ate);
    e14e:	f004 f933 	bl	123b8 <nvs_ate_crc8_update>
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
    e152:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
			rc = nvs_flash_block_move(fs, data_addr, gc_ate.len);
    e154:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
    e158:	681f      	ldr	r7, [r3, #0]
    e15a:	427f      	negs	r7, r7
	block_size =
    e15c:	f007 0720 	and.w	r7, r7, #32
	while (len) {
    e160:	f1b9 0f00 	cmp.w	r9, #0
    e164:	d110      	bne.n	e188 <nvs_gc+0x13c>
			rc = nvs_flash_ate_wrt(fs, &gc_ate);
    e166:	a90a      	add	r1, sp, #40	; 0x28
    e168:	4620      	mov	r0, r4
    e16a:	f004 f9c3 	bl	124f4 <nvs_flash_ate_wrt>
			if (rc) {
    e16e:	2800      	cmp	r0, #0
    e170:	d137      	bne.n	e1e2 <nvs_gc+0x196>
	} while (gc_prev_addr != stop_addr);
    e172:	9b02      	ldr	r3, [sp, #8]
    e174:	459a      	cmp	sl, r3
    e176:	d1af      	bne.n	e0d8 <nvs_gc+0x8c>
gc_done:
    e178:	e792      	b.n	e0a0 <nvs_gc+0x54>
			    (nvs_ate_valid(fs, &wlk_ate))) {
    e17a:	a90c      	add	r1, sp, #48	; 0x30
    e17c:	4620      	mov	r0, r4
    e17e:	f004 f939 	bl	123f4 <nvs_ate_valid>
			if ((wlk_ate.id == gc_ate.id) &&
    e182:	2800      	cmp	r0, #0
    e184:	d0c7      	beq.n	e116 <nvs_gc+0xca>
    e186:	e7ca      	b.n	e11e <nvs_gc+0xd2>
		bytes_to_copy = MIN(block_size, len);
    e188:	454f      	cmp	r7, r9
    e18a:	463d      	mov	r5, r7
    e18c:	bf28      	it	cs
    e18e:	464d      	movcs	r5, r9
		rc = nvs_flash_rd(fs, addr, buf, bytes_to_copy);
    e190:	462b      	mov	r3, r5
    e192:	aa0e      	add	r2, sp, #56	; 0x38
    e194:	4641      	mov	r1, r8
    e196:	4620      	mov	r0, r4
    e198:	f004 f8b1 	bl	122fe <nvs_flash_rd>
		if (rc) {
    e19c:	bb08      	cbnz	r0, e1e2 <nvs_gc+0x196>
		rc = nvs_flash_data_wrt(fs, buf, bytes_to_copy);
    e19e:	462a      	mov	r2, r5
    e1a0:	a90e      	add	r1, sp, #56	; 0x38
    e1a2:	4620      	mov	r0, r4
    e1a4:	f004 f993 	bl	124ce <nvs_flash_data_wrt>
		if (rc) {
    e1a8:	b9d8      	cbnz	r0, e1e2 <nvs_gc+0x196>
		len -= bytes_to_copy;
    e1aa:	eba9 0905 	sub.w	r9, r9, r5
		addr += bytes_to_copy;
    e1ae:	44a8      	add	r8, r5
    e1b0:	e7d6      	b.n	e160 <nvs_gc+0x114>
		rc = nvs_add_gc_done_ate(fs);
    e1b2:	4620      	mov	r0, r4
    e1b4:	f7ff ff20 	bl	dff8 <nvs_add_gc_done_ate>
		if (rc) {
    e1b8:	2800      	cmp	r0, #0
    e1ba:	f43f af77 	beq.w	e0ac <nvs_gc+0x60>
    e1be:	e010      	b.n	e1e2 <nvs_gc+0x196>
	stop_addr = gc_addr - ate_size;
    e1c0:	9b06      	ldr	r3, [sp, #24]
	if (nvs_close_ate_valid(fs, &close_ate)) {
    e1c2:	a908      	add	r1, sp, #32
	stop_addr = gc_addr - ate_size;
    e1c4:	1b9b      	subs	r3, r3, r6
	if (nvs_close_ate_valid(fs, &close_ate)) {
    e1c6:	4620      	mov	r0, r4
	stop_addr = gc_addr - ate_size;
    e1c8:	9302      	str	r3, [sp, #8]
	if (nvs_close_ate_valid(fs, &close_ate)) {
    e1ca:	f004 f92d 	bl	12428 <nvs_close_ate_valid>
    e1ce:	2800      	cmp	r0, #0
    e1d0:	f47f af71 	bne.w	e0b6 <nvs_gc+0x6a>
		rc = nvs_recover_last_ate(fs, &gc_addr);
    e1d4:	a906      	add	r1, sp, #24
    e1d6:	4620      	mov	r0, r4
    e1d8:	f7ff fec8 	bl	df6c <nvs_recover_last_ate>
		if (rc) {
    e1dc:	2800      	cmp	r0, #0
    e1de:	f43f af71 	beq.w	e0c4 <nvs_gc+0x78>
		return rc;
	}
	return 0;
}
    e1e2:	b017      	add	sp, #92	; 0x5c
    e1e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e1e8:	00013014 	.word	0x00013014
    e1ec:	0001302c 	.word	0x0001302c
    e1f0:	000137bc 	.word	0x000137bc
    e1f4:	00013657 	.word	0x00013657

0000e1f8 <nvs_init>:

	return 0;
}

int nvs_init(struct nvs_fs *fs, const char *dev_name)
{
    e1f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e1fc:	4604      	mov	r4, r0
    e1fe:	b089      	sub	sp, #36	; 0x24
    e200:	460d      	mov	r5, r1

	int rc;
	struct flash_pages_info info;
	size_t write_block_size;

	k_mutex_init(&fs->nvs_lock);
    e202:	f100 0714 	add.w	r7, r0, #20
	return z_impl_k_mutex_init(mutex);
    e206:	4638      	mov	r0, r7
    e208:	f004 fcb3 	bl	12b72 <z_impl_k_mutex_init>
    e20c:	4628      	mov	r0, r5
    e20e:	f002 fbb1 	bl	10974 <z_impl_device_get_binding>

	fs->flash_device = device_get_binding(dev_name);
    e212:	62a0      	str	r0, [r4, #40]	; 0x28
	if (!fs->flash_device) {
    e214:	b978      	cbnz	r0, e236 <nvs_init+0x3e>
    e216:	4bab      	ldr	r3, [pc, #684]	; (e4c4 <nvs_init+0x2cc>)
    e218:	49ab      	ldr	r1, [pc, #684]	; (e4c8 <nvs_init+0x2d0>)
		LOG_ERR("No valid flash device found");
    e21a:	48ac      	ldr	r0, [pc, #688]	; (e4cc <nvs_init+0x2d4>)
    e21c:	1ac9      	subs	r1, r1, r3
    e21e:	08c9      	lsrs	r1, r1, #3
    e220:	0189      	lsls	r1, r1, #6
    e222:	f041 0101 	orr.w	r1, r1, #1
    e226:	f003 fdc2 	bl	11dae <log_0>
		return -ENXIO;
    e22a:	f06f 0505 	mvn.w	r5, #5
	LOG_INF("data wra: %d, %x",
		(fs->data_wra >> ADDR_SECT_SHIFT),
		(fs->data_wra & ADDR_OFFS_MASK));

	return 0;
}
    e22e:	4628      	mov	r0, r5
    e230:	b009      	add	sp, #36	; 0x24
    e232:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
static inline const struct flash_parameters *z_impl_flash_get_parameters(const struct device *dev)
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;

	return api->get_parameters(dev);
    e236:	6883      	ldr	r3, [r0, #8]
    e238:	691b      	ldr	r3, [r3, #16]
    e23a:	4798      	blx	r3
	fs->flash_parameters = flash_get_parameters(fs->flash_device);
    e23c:	62e0      	str	r0, [r4, #44]	; 0x2c
	if (fs->flash_parameters == NULL) {
    e23e:	b960      	cbnz	r0, e25a <nvs_init+0x62>
    e240:	49a1      	ldr	r1, [pc, #644]	; (e4c8 <nvs_init+0x2d0>)
    e242:	4ba0      	ldr	r3, [pc, #640]	; (e4c4 <nvs_init+0x2cc>)
		LOG_ERR("Could not obtain flash parameters");
    e244:	48a2      	ldr	r0, [pc, #648]	; (e4d0 <nvs_init+0x2d8>)
    e246:	1ac9      	subs	r1, r1, r3
    e248:	08c9      	lsrs	r1, r1, #3
    e24a:	0189      	lsls	r1, r1, #6
    e24c:	f041 0101 	orr.w	r1, r1, #1
		LOG_ERR("Configuration error - sector count");
    e250:	f003 fdad 	bl	11dae <log_0>
		return -EINVAL;
    e254:	f06f 0515 	mvn.w	r5, #21
    e258:	e7e9      	b.n	e22e <nvs_init+0x36>
	write_block_size = flash_get_write_block_size(fs->flash_device);
    e25a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	return api->get_parameters(dev)->write_block_size;
    e25c:	6883      	ldr	r3, [r0, #8]
    e25e:	691b      	ldr	r3, [r3, #16]
    e260:	4798      	blx	r3
	if (write_block_size > NVS_BLOCK_SIZE || write_block_size == 0) {
    e262:	6803      	ldr	r3, [r0, #0]
    e264:	3b01      	subs	r3, #1
    e266:	2b1f      	cmp	r3, #31
    e268:	d908      	bls.n	e27c <nvs_init+0x84>
    e26a:	4997      	ldr	r1, [pc, #604]	; (e4c8 <nvs_init+0x2d0>)
    e26c:	4b95      	ldr	r3, [pc, #596]	; (e4c4 <nvs_init+0x2cc>)
		LOG_ERR("Unsupported write block size");
    e26e:	4899      	ldr	r0, [pc, #612]	; (e4d4 <nvs_init+0x2dc>)
    e270:	1ac9      	subs	r1, r1, r3
    e272:	08c9      	lsrs	r1, r1, #3
    e274:	0189      	lsls	r1, r1, #6
    e276:	f041 0101 	orr.w	r1, r1, #1
    e27a:	e7e9      	b.n	e250 <nvs_init+0x58>
	rc = flash_get_page_info_by_offs(fs->flash_device, fs->offset, &info);
    e27c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    e27e:	6821      	ldr	r1, [r4, #0]
    e280:	aa05      	add	r2, sp, #20
    e282:	f004 fb6d 	bl	12960 <z_impl_flash_get_page_info_by_offs>
	if (rc) {
    e286:	b140      	cbz	r0, e29a <nvs_init+0xa2>
    e288:	498f      	ldr	r1, [pc, #572]	; (e4c8 <nvs_init+0x2d0>)
    e28a:	4b8e      	ldr	r3, [pc, #568]	; (e4c4 <nvs_init+0x2cc>)
		LOG_ERR("Unable to get page info");
    e28c:	4892      	ldr	r0, [pc, #584]	; (e4d8 <nvs_init+0x2e0>)
    e28e:	1ac9      	subs	r1, r1, r3
    e290:	08c9      	lsrs	r1, r1, #3
    e292:	0189      	lsls	r1, r1, #6
    e294:	f041 0101 	orr.w	r1, r1, #1
    e298:	e7da      	b.n	e250 <nvs_init+0x58>
	if (!fs->sector_size || fs->sector_size % info.size) {
    e29a:	89a5      	ldrh	r5, [r4, #12]
    e29c:	b12d      	cbz	r5, e2aa <nvs_init+0xb2>
    e29e:	9b06      	ldr	r3, [sp, #24]
    e2a0:	fbb5 f2f3 	udiv	r2, r5, r3
    e2a4:	fb03 5512 	mls	r5, r3, r2, r5
    e2a8:	b145      	cbz	r5, e2bc <nvs_init+0xc4>
    e2aa:	4987      	ldr	r1, [pc, #540]	; (e4c8 <nvs_init+0x2d0>)
    e2ac:	4b85      	ldr	r3, [pc, #532]	; (e4c4 <nvs_init+0x2cc>)
		LOG_ERR("Invalid sector size");
    e2ae:	488b      	ldr	r0, [pc, #556]	; (e4dc <nvs_init+0x2e4>)
    e2b0:	1ac9      	subs	r1, r1, r3
    e2b2:	08c9      	lsrs	r1, r1, #3
    e2b4:	0189      	lsls	r1, r1, #6
    e2b6:	f041 0101 	orr.w	r1, r1, #1
    e2ba:	e7c9      	b.n	e250 <nvs_init+0x58>
	if (fs->sector_count < 2) {
    e2bc:	89e3      	ldrh	r3, [r4, #14]
    e2be:	2b01      	cmp	r3, #1
    e2c0:	d808      	bhi.n	e2d4 <nvs_init+0xdc>
    e2c2:	4981      	ldr	r1, [pc, #516]	; (e4c8 <nvs_init+0x2d0>)
    e2c4:	4b7f      	ldr	r3, [pc, #508]	; (e4c4 <nvs_init+0x2cc>)
		LOG_ERR("Configuration error - sector count");
    e2c6:	4886      	ldr	r0, [pc, #536]	; (e4e0 <nvs_init+0x2e8>)
    e2c8:	1ac9      	subs	r1, r1, r3
    e2ca:	08c9      	lsrs	r1, r1, #3
    e2cc:	0189      	lsls	r1, r1, #6
    e2ce:	f041 0101 	orr.w	r1, r1, #1
    e2d2:	e7bd      	b.n	e250 <nvs_init+0x58>
	uint8_t erase_value = fs->flash_parameters->erase_value;
    e2d4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	uint32_t addr = 0U;
    e2d6:	9500      	str	r5, [sp, #0]
	uint8_t erase_value = fs->flash_parameters->erase_value;
    e2d8:	f893 8004 	ldrb.w	r8, [r3, #4]
	return z_impl_k_mutex_lock(mutex, timeout);
    e2dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    e2e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    e2e4:	4638      	mov	r0, r7
    e2e6:	f002 fd9b 	bl	10e20 <z_impl_k_mutex_lock>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    e2ea:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    e2ec:	2108      	movs	r1, #8
    e2ee:	f004 f877 	bl	123e0 <nvs_al_size.isra.0>
	uint16_t i, closed_sectors = 0;
    e2f2:	46a9      	mov	r9, r5
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    e2f4:	4606      	mov	r6, r0
	for (i = 0; i < fs->sector_count; i++) {
    e2f6:	89e3      	ldrh	r3, [r4, #14]
    e2f8:	fa1f fa85 	uxth.w	sl, r5
    e2fc:	4553      	cmp	r3, sl
    e2fe:	d845      	bhi.n	e38c <nvs_init+0x194>
	if (closed_sectors == fs->sector_count) {
    e300:	89e3      	ldrh	r3, [r4, #14]
    e302:	454b      	cmp	r3, r9
    e304:	f000 80f2 	beq.w	e4ec <nvs_init+0x2f4>
	if (i == fs->sector_count) {
    e308:	459a      	cmp	sl, r3
    e30a:	d10b      	bne.n	e324 <nvs_init+0x12c>
		rc = nvs_flash_cmp_const(fs, addr - ate_size, erase_value,
    e30c:	9900      	ldr	r1, [sp, #0]
    e30e:	2308      	movs	r3, #8
    e310:	4642      	mov	r2, r8
    e312:	1b89      	subs	r1, r1, r6
    e314:	4620      	mov	r0, r4
    e316:	f004 f82a 	bl	1236e <nvs_flash_cmp_const>
		if (!rc) {
    e31a:	b918      	cbnz	r0, e324 <nvs_init+0x12c>
			nvs_sector_advance(fs, &addr);
    e31c:	89e0      	ldrh	r0, [r4, #14]
    e31e:	4669      	mov	r1, sp
    e320:	f004 f853 	bl	123ca <nvs_sector_advance.isra.0>
	rc = nvs_recover_last_ate(fs, &addr);
    e324:	4669      	mov	r1, sp
    e326:	4620      	mov	r0, r4
    e328:	f7ff fe20 	bl	df6c <nvs_recover_last_ate>
	if (rc) {
    e32c:	4605      	mov	r5, r0
    e32e:	2800      	cmp	r0, #0
    e330:	f040 80de 	bne.w	e4f0 <nvs_init+0x2f8>
	fs->ate_wra = addr;
    e334:	9b00      	ldr	r3, [sp, #0]
	fs->data_wra = addr & ADDR_SECT_MASK;
    e336:	f8df 91ac 	ldr.w	r9, [pc, #428]	; e4e4 <nvs_init+0x2ec>
	fs->ate_wra = addr;
    e33a:	6063      	str	r3, [r4, #4]
	fs->data_wra = addr & ADDR_SECT_MASK;
    e33c:	ea03 0309 	and.w	r3, r3, r9
    e340:	60a3      	str	r3, [r4, #8]
	while (fs->ate_wra >= fs->data_wra) {
    e342:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
    e346:	4299      	cmp	r1, r3
    e348:	d30e      	bcc.n	e368 <nvs_init+0x170>
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
    e34a:	2308      	movs	r3, #8
    e34c:	aa01      	add	r2, sp, #4
    e34e:	4620      	mov	r0, r4
    e350:	f003 ffd5 	bl	122fe <nvs_flash_rd>
		if (rc) {
    e354:	b9c0      	cbnz	r0, e388 <nvs_init+0x190>
    e356:	ab01      	add	r3, sp, #4
		if (data8[i] != value) {
    e358:	f813 2b01 	ldrb.w	r2, [r3], #1
    e35c:	4590      	cmp	r8, r2
    e35e:	f040 8102 	bne.w	e566 <nvs_init+0x36e>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
    e362:	3001      	adds	r0, #1
    e364:	2808      	cmp	r0, #8
    e366:	d1f7      	bne.n	e358 <nvs_init+0x160>
	addr = fs->ate_wra & ADDR_SECT_MASK;
    e368:	6863      	ldr	r3, [r4, #4]
	nvs_sector_advance(fs, &addr);
    e36a:	89e0      	ldrh	r0, [r4, #14]
	addr = fs->ate_wra & ADDR_SECT_MASK;
    e36c:	0c1b      	lsrs	r3, r3, #16
    e36e:	041b      	lsls	r3, r3, #16
	nvs_sector_advance(fs, &addr);
    e370:	4669      	mov	r1, sp
	addr = fs->ate_wra & ADDR_SECT_MASK;
    e372:	9300      	str	r3, [sp, #0]
	nvs_sector_advance(fs, &addr);
    e374:	f004 f829 	bl	123ca <nvs_sector_advance.isra.0>
	rc = nvs_flash_cmp_const(fs, addr, erase_value, fs->sector_size);
    e378:	89a3      	ldrh	r3, [r4, #12]
    e37a:	9900      	ldr	r1, [sp, #0]
    e37c:	4642      	mov	r2, r8
    e37e:	4620      	mov	r0, r4
    e380:	f003 fff5 	bl	1236e <nvs_flash_cmp_const>
	if (rc < 0) {
    e384:	2800      	cmp	r0, #0
    e386:	da26      	bge.n	e3d6 <nvs_init+0x1de>
    e388:	4605      	mov	r5, r0
    e38a:	e0b1      	b.n	e4f0 <nvs_init+0x2f8>
		       (uint16_t)(fs->sector_size - ate_size);
    e38c:	89a1      	ldrh	r1, [r4, #12]
		addr = (i << ADDR_SECT_SHIFT) +
    e38e:	042b      	lsls	r3, r5, #16
		       (uint16_t)(fs->sector_size - ate_size);
    e390:	1b89      	subs	r1, r1, r6
		addr = (i << ADDR_SECT_SHIFT) +
    e392:	fa13 f181 	uxtah	r1, r3, r1
		rc = nvs_flash_cmp_const(fs, addr, erase_value,
    e396:	4642      	mov	r2, r8
    e398:	2308      	movs	r3, #8
    e39a:	4620      	mov	r0, r4
		addr = (i << ADDR_SECT_SHIFT) +
    e39c:	9100      	str	r1, [sp, #0]
		rc = nvs_flash_cmp_const(fs, addr, erase_value,
    e39e:	f003 ffe6 	bl	1236e <nvs_flash_cmp_const>
		if (rc) {
    e3a2:	b178      	cbz	r0, e3c4 <nvs_init+0x1cc>
			nvs_sector_advance(fs, &addr);
    e3a4:	89e0      	ldrh	r0, [r4, #14]
    e3a6:	4669      	mov	r1, sp
    e3a8:	f004 f80f 	bl	123ca <nvs_sector_advance.isra.0>
			closed_sectors++;
    e3ac:	f109 0901 	add.w	r9, r9, #1
			rc = nvs_flash_cmp_const(fs, addr, erase_value,
    e3b0:	9900      	ldr	r1, [sp, #0]
    e3b2:	2308      	movs	r3, #8
    e3b4:	4642      	mov	r2, r8
    e3b6:	4620      	mov	r0, r4
			closed_sectors++;
    e3b8:	fa1f f989 	uxth.w	r9, r9
			rc = nvs_flash_cmp_const(fs, addr, erase_value,
    e3bc:	f003 ffd7 	bl	1236e <nvs_flash_cmp_const>
			if (!rc) {
    e3c0:	2800      	cmp	r0, #0
    e3c2:	d09d      	beq.n	e300 <nvs_init+0x108>
	for (i = 0; i < fs->sector_count; i++) {
    e3c4:	3501      	adds	r5, #1
    e3c6:	e796      	b.n	e2f6 <nvs_init+0xfe>
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
    e3c8:	f1ba 0f00 	cmp.w	sl, #0
    e3cc:	f000 80e3 	beq.w	e596 <nvs_init+0x39e>
				rc = -ESPIPE;
    e3d0:	f06f 051c 	mvn.w	r5, #28
    e3d4:	e08c      	b.n	e4f0 <nvs_init+0x2f8>
	if (rc) {
    e3d6:	d04f      	beq.n	e478 <nvs_init+0x280>
		addr = fs->ate_wra + ate_size;
    e3d8:	6863      	ldr	r3, [r4, #4]
    e3da:	4433      	add	r3, r6
    e3dc:	9300      	str	r3, [sp, #0]
		while ((addr & ADDR_OFFS_MASK) < (fs->sector_size - ate_size)) {
    e3de:	f64f 78ff 	movw	r8, #65535	; 0xffff
    e3e2:	9900      	ldr	r1, [sp, #0]
    e3e4:	89a3      	ldrh	r3, [r4, #12]
    e3e6:	b28a      	uxth	r2, r1
    e3e8:	1b9b      	subs	r3, r3, r6
    e3ea:	429a      	cmp	r2, r3
    e3ec:	d31f      	bcc.n	e42e <nvs_init+0x236>
    e3ee:	4b35      	ldr	r3, [pc, #212]	; (e4c4 <nvs_init+0x2cc>)
    e3f0:	4935      	ldr	r1, [pc, #212]	; (e4c8 <nvs_init+0x2d0>)
		LOG_INF("No GC Done marker found: restarting gc");
    e3f2:	483d      	ldr	r0, [pc, #244]	; (e4e8 <nvs_init+0x2f0>)
    e3f4:	1ac9      	subs	r1, r1, r3
    e3f6:	08c9      	lsrs	r1, r1, #3
    e3f8:	0189      	lsls	r1, r1, #6
    e3fa:	f041 0103 	orr.w	r1, r1, #3
    e3fe:	f003 fcd6 	bl	11dae <log_0>
		rc = nvs_flash_erase_sector(fs, fs->ate_wra);
    e402:	6861      	ldr	r1, [r4, #4]
    e404:	4620      	mov	r0, r4
    e406:	f7ff fd63 	bl	ded0 <nvs_flash_erase_sector>
		if (rc) {
    e40a:	2800      	cmp	r0, #0
    e40c:	d1bc      	bne.n	e388 <nvs_init+0x190>
		fs->ate_wra &= ADDR_SECT_MASK;
    e40e:	6863      	ldr	r3, [r4, #4]
    e410:	4a34      	ldr	r2, [pc, #208]	; (e4e4 <nvs_init+0x2ec>)
		fs->ate_wra += (fs->sector_size - 2 * ate_size);
    e412:	89a1      	ldrh	r1, [r4, #12]
		fs->ate_wra &= ADDR_SECT_MASK;
    e414:	4013      	ands	r3, r2
		fs->ate_wra += (fs->sector_size - 2 * ate_size);
    e416:	440b      	add	r3, r1
    e418:	eba3 0346 	sub.w	r3, r3, r6, lsl #1
    e41c:	6063      	str	r3, [r4, #4]
		fs->data_wra = (fs->ate_wra & ADDR_SECT_MASK);
    e41e:	4013      	ands	r3, r2
    e420:	60a3      	str	r3, [r4, #8]
		rc = nvs_gc(fs);
    e422:	4620      	mov	r0, r4
    e424:	f7ff fe12 	bl	e04c <nvs_gc>
	if ((!rc) && ((fs->ate_wra & ADDR_OFFS_MASK) ==
    e428:	2800      	cmp	r0, #0
    e42a:	d040      	beq.n	e4ae <nvs_init+0x2b6>
    e42c:	e7ac      	b.n	e388 <nvs_init+0x190>
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
    e42e:	2308      	movs	r3, #8
    e430:	aa03      	add	r2, sp, #12
    e432:	4620      	mov	r0, r4
    e434:	f003 ff63 	bl	122fe <nvs_flash_rd>
			if (rc) {
    e438:	2800      	cmp	r0, #0
    e43a:	d1a5      	bne.n	e388 <nvs_init+0x190>
			if (nvs_ate_valid(fs, &gc_done_ate) &&
    e43c:	a903      	add	r1, sp, #12
    e43e:	4620      	mov	r0, r4
    e440:	f003 ffd8 	bl	123f4 <nvs_ate_valid>
    e444:	b138      	cbz	r0, e456 <nvs_init+0x25e>
    e446:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    e44a:	4543      	cmp	r3, r8
    e44c:	d103      	bne.n	e456 <nvs_init+0x25e>
			    (gc_done_ate.id == 0xffff) &&
    e44e:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    e452:	2b00      	cmp	r3, #0
    e454:	d070      	beq.n	e538 <nvs_init+0x340>
			addr += ate_size;
    e456:	9b00      	ldr	r3, [sp, #0]
    e458:	4433      	add	r3, r6
    e45a:	9300      	str	r3, [sp, #0]
    e45c:	e7c1      	b.n	e3e2 <nvs_init+0x1ea>
		rc = nvs_flash_cmp_const(fs, fs->data_wra, erase_value,
    e45e:	1a5b      	subs	r3, r3, r1
    e460:	4642      	mov	r2, r8
    e462:	4620      	mov	r0, r4
    e464:	f003 ff83 	bl	1236e <nvs_flash_cmp_const>
		if (rc < 0) {
    e468:	2800      	cmp	r0, #0
    e46a:	db8d      	blt.n	e388 <nvs_init+0x190>
		if (!rc) {
    e46c:	d008      	beq.n	e480 <nvs_init+0x288>
		fs->data_wra += fs->flash_parameters->write_block_size;
    e46e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    e470:	68a3      	ldr	r3, [r4, #8]
    e472:	6812      	ldr	r2, [r2, #0]
    e474:	4413      	add	r3, r2
    e476:	60a3      	str	r3, [r4, #8]
	while (fs->ate_wra > fs->data_wra) {
    e478:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
    e47c:	428b      	cmp	r3, r1
    e47e:	d8ee      	bhi.n	e45e <nvs_init+0x266>
	if (((fs->ate_wra + 2 * ate_size) == fs->sector_size) &&
    e480:	6861      	ldr	r1, [r4, #4]
    e482:	89a3      	ldrh	r3, [r4, #12]
    e484:	eb01 0246 	add.w	r2, r1, r6, lsl #1
    e488:	429a      	cmp	r2, r3
    e48a:	d1cd      	bne.n	e428 <nvs_init+0x230>
	    (fs->data_wra != (fs->ate_wra & ADDR_SECT_MASK))) {
    e48c:	f8df 8054 	ldr.w	r8, [pc, #84]	; e4e4 <nvs_init+0x2ec>
	if (((fs->ate_wra + 2 * ate_size) == fs->sector_size) &&
    e490:	68a3      	ldr	r3, [r4, #8]
	    (fs->data_wra != (fs->ate_wra & ADDR_SECT_MASK))) {
    e492:	ea01 0208 	and.w	r2, r1, r8
	if (((fs->ate_wra + 2 * ate_size) == fs->sector_size) &&
    e496:	4293      	cmp	r3, r2
    e498:	d0c6      	beq.n	e428 <nvs_init+0x230>
		rc = nvs_flash_erase_sector(fs, fs->ate_wra);
    e49a:	4620      	mov	r0, r4
    e49c:	f7ff fd18 	bl	ded0 <nvs_flash_erase_sector>
		if (rc) {
    e4a0:	2800      	cmp	r0, #0
    e4a2:	f47f af71 	bne.w	e388 <nvs_init+0x190>
		fs->data_wra = fs->ate_wra & ADDR_SECT_MASK;
    e4a6:	6863      	ldr	r3, [r4, #4]
    e4a8:	ea03 0308 	and.w	r3, r3, r8
    e4ac:	60a3      	str	r3, [r4, #8]
		      (fs->sector_size - 2 * ate_size))) {
    e4ae:	89a0      	ldrh	r0, [r4, #12]
	if ((!rc) && ((fs->ate_wra & ADDR_OFFS_MASK) ==
    e4b0:	88a3      	ldrh	r3, [r4, #4]
		      (fs->sector_size - 2 * ate_size))) {
    e4b2:	eba0 0646 	sub.w	r6, r0, r6, lsl #1
	if ((!rc) && ((fs->ate_wra & ADDR_OFFS_MASK) ==
    e4b6:	42b3      	cmp	r3, r6
    e4b8:	d11a      	bne.n	e4f0 <nvs_init+0x2f8>
		rc = nvs_add_gc_done_ate(fs);
    e4ba:	4620      	mov	r0, r4
    e4bc:	f7ff fd9c 	bl	dff8 <nvs_add_gc_done_ate>
    e4c0:	e762      	b.n	e388 <nvs_init+0x190>
    e4c2:	bf00      	nop
    e4c4:	00013014 	.word	0x00013014
    e4c8:	0001302c 	.word	0x0001302c
    e4cc:	00013681 	.word	0x00013681
    e4d0:	0001369d 	.word	0x0001369d
    e4d4:	000136bf 	.word	0x000136bf
    e4d8:	000136dc 	.word	0x000136dc
    e4dc:	000136f4 	.word	0x000136f4
    e4e0:	00013708 	.word	0x00013708
    e4e4:	ffff0000 	.word	0xffff0000
    e4e8:	0001377a 	.word	0x0001377a
		rc = -EDEADLK;
    e4ec:	f06f 052c 	mvn.w	r5, #44	; 0x2c
	return z_impl_k_mutex_unlock(mutex);
    e4f0:	4638      	mov	r0, r7
    e4f2:	f002 fd0d 	bl	10f10 <z_impl_k_mutex_unlock>
	if (rc) {
    e4f6:	2d00      	cmp	r5, #0
    e4f8:	f47f ae99 	bne.w	e22e <nvs_init+0x36>
	fs->ready = true;
    e4fc:	2301      	movs	r3, #1
    e4fe:	7423      	strb	r3, [r4, #16]
    e500:	4e27      	ldr	r6, [pc, #156]	; (e5a0 <nvs_init+0x3a8>)
    e502:	4b28      	ldr	r3, [pc, #160]	; (e5a4 <nvs_init+0x3ac>)
	LOG_INF("%d Sectors of %d bytes", fs->sector_count, fs->sector_size);
    e504:	89a2      	ldrh	r2, [r4, #12]
    e506:	89e1      	ldrh	r1, [r4, #14]
    e508:	4827      	ldr	r0, [pc, #156]	; (e5a8 <nvs_init+0x3b0>)
    e50a:	1af6      	subs	r6, r6, r3
    e50c:	08f6      	lsrs	r6, r6, #3
    e50e:	01b6      	lsls	r6, r6, #6
    e510:	f046 0603 	orr.w	r6, r6, #3
    e514:	4633      	mov	r3, r6
    e516:	f003 fc6b 	bl	11df0 <log_2>
	LOG_INF("alloc wra: %d, %x",
    e51a:	6861      	ldr	r1, [r4, #4]
    e51c:	4823      	ldr	r0, [pc, #140]	; (e5ac <nvs_init+0x3b4>)
    e51e:	4633      	mov	r3, r6
    e520:	b28a      	uxth	r2, r1
    e522:	0c09      	lsrs	r1, r1, #16
    e524:	f003 fc64 	bl	11df0 <log_2>
	LOG_INF("data wra: %d, %x",
    e528:	68a1      	ldr	r1, [r4, #8]
    e52a:	4821      	ldr	r0, [pc, #132]	; (e5b0 <nvs_init+0x3b8>)
    e52c:	b28a      	uxth	r2, r1
    e52e:	4633      	mov	r3, r6
    e530:	0c09      	lsrs	r1, r1, #16
    e532:	f003 fc5d 	bl	11df0 <log_2>
	return 0;
    e536:	e67a      	b.n	e22e <nvs_init+0x36>
    e538:	4b1a      	ldr	r3, [pc, #104]	; (e5a4 <nvs_init+0x3ac>)
    e53a:	4919      	ldr	r1, [pc, #100]	; (e5a0 <nvs_init+0x3a8>)
			LOG_INF("GC Done marker found");
    e53c:	481d      	ldr	r0, [pc, #116]	; (e5b4 <nvs_init+0x3bc>)
    e53e:	1ac9      	subs	r1, r1, r3
    e540:	08c9      	lsrs	r1, r1, #3
    e542:	0189      	lsls	r1, r1, #6
    e544:	f041 0103 	orr.w	r1, r1, #3
    e548:	f003 fc31 	bl	11dae <log_0>
			addr = fs->ate_wra & ADDR_SECT_MASK;
    e54c:	6863      	ldr	r3, [r4, #4]
			nvs_sector_advance(fs, &addr);
    e54e:	89e0      	ldrh	r0, [r4, #14]
			addr = fs->ate_wra & ADDR_SECT_MASK;
    e550:	0c1b      	lsrs	r3, r3, #16
    e552:	041b      	lsls	r3, r3, #16
			nvs_sector_advance(fs, &addr);
    e554:	4669      	mov	r1, sp
			addr = fs->ate_wra & ADDR_SECT_MASK;
    e556:	9300      	str	r3, [sp, #0]
			nvs_sector_advance(fs, &addr);
    e558:	f003 ff37 	bl	123ca <nvs_sector_advance.isra.0>
			rc = nvs_flash_erase_sector(fs, addr);
    e55c:	9900      	ldr	r1, [sp, #0]
    e55e:	4620      	mov	r0, r4
    e560:	f7ff fcb6 	bl	ded0 <nvs_flash_erase_sector>
			goto end;
    e564:	e760      	b.n	e428 <nvs_init+0x230>
		if (nvs_ate_valid(fs, &last_ate)) {
    e566:	a901      	add	r1, sp, #4
    e568:	4620      	mov	r0, r4
    e56a:	f003 ff43 	bl	123f4 <nvs_ate_valid>
    e56e:	f8d4 b004 	ldr.w	fp, [r4, #4]
    e572:	b180      	cbz	r0, e596 <nvs_init+0x39e>
			fs->data_wra = addr & ADDR_SECT_MASK;
    e574:	9a00      	ldr	r2, [sp, #0]
			fs->data_wra += nvs_al_size(fs, last_ate.offset + last_ate.len);
    e576:	f8bd a008 	ldrh.w	sl, [sp, #8]
    e57a:	f8bd 1006 	ldrh.w	r1, [sp, #6]
    e57e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
			fs->data_wra = addr & ADDR_SECT_MASK;
    e580:	ea02 0209 	and.w	r2, r2, r9
    e584:	60a2      	str	r2, [r4, #8]
			fs->data_wra += nvs_al_size(fs, last_ate.offset + last_ate.len);
    e586:	4451      	add	r1, sl
    e588:	f003 ff2a 	bl	123e0 <nvs_al_size.isra.0>
    e58c:	4402      	add	r2, r0
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
    e58e:	455a      	cmp	r2, fp
			fs->data_wra += nvs_al_size(fs, last_ate.offset + last_ate.len);
    e590:	60a2      	str	r2, [r4, #8]
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
    e592:	f43f af19 	beq.w	e3c8 <nvs_init+0x1d0>
		fs->ate_wra -= ate_size;
    e596:	ebab 0306 	sub.w	r3, fp, r6
    e59a:	6063      	str	r3, [r4, #4]
    e59c:	e6d1      	b.n	e342 <nvs_init+0x14a>
    e59e:	bf00      	nop
    e5a0:	0001302c 	.word	0x0001302c
    e5a4:	00013014 	.word	0x00013014
    e5a8:	0001372b 	.word	0x0001372b
    e5ac:	00013742 	.word	0x00013742
    e5b0:	00013754 	.word	0x00013754
    e5b4:	00013765 	.word	0x00013765

0000e5b8 <nvs_write>:

ssize_t nvs_write(struct nvs_fs *fs, uint16_t id, const void *data, size_t len)
{
    e5b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e5bc:	461e      	mov	r6, r3
	struct nvs_ate wlk_ate;
	uint32_t wlk_addr, rd_addr;
	uint16_t required_space = 0U; /* no space, appropriate for delete ate */
	bool prev_found = false;

	if (!fs->ready) {
    e5be:	7c03      	ldrb	r3, [r0, #16]
{
    e5c0:	b089      	sub	sp, #36	; 0x24
    e5c2:	4604      	mov	r4, r0
    e5c4:	4689      	mov	r9, r1
    e5c6:	4690      	mov	r8, r2
	if (!fs->ready) {
    e5c8:	b97b      	cbnz	r3, e5ea <nvs_write+0x32>
    e5ca:	4b61      	ldr	r3, [pc, #388]	; (e750 <nvs_write+0x198>)
    e5cc:	4961      	ldr	r1, [pc, #388]	; (e754 <nvs_write+0x19c>)
		LOG_ERR("NVS not initialized");
    e5ce:	4862      	ldr	r0, [pc, #392]	; (e758 <nvs_write+0x1a0>)
    e5d0:	1ac9      	subs	r1, r1, r3
    e5d2:	08c9      	lsrs	r1, r1, #3
    e5d4:	0189      	lsls	r1, r1, #6
    e5d6:	f041 0101 	orr.w	r1, r1, #1
    e5da:	f003 fbe8 	bl	11dae <log_0>
		return -EACCES;
    e5de:	f06f 050c 	mvn.w	r5, #12
	}
	rc = len;
end:
	k_mutex_unlock(&fs->nvs_lock);
	return rc;
}
    e5e2:	4628      	mov	r0, r5
    e5e4:	b009      	add	sp, #36	; 0x24
    e5e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    e5ea:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    e5ec:	2108      	movs	r1, #8
    e5ee:	4610      	mov	r0, r2
    e5f0:	f003 fef6 	bl	123e0 <nvs_al_size.isra.0>
	data_size = nvs_al_size(fs, len);
    e5f4:	4631      	mov	r1, r6
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    e5f6:	4682      	mov	sl, r0
	data_size = nvs_al_size(fs, len);
    e5f8:	4610      	mov	r0, r2
    e5fa:	f003 fef1 	bl	123e0 <nvs_al_size.isra.0>
	if ((len > (fs->sector_size - 4 * ate_size)) ||
    e5fe:	89a3      	ldrh	r3, [r4, #12]
    e600:	eba3 038a 	sub.w	r3, r3, sl, lsl #2
    e604:	429e      	cmp	r6, r3
	data_size = nvs_al_size(fs, len);
    e606:	4607      	mov	r7, r0
	if ((len > (fs->sector_size - 4 * ate_size)) ||
    e608:	f200 809e 	bhi.w	e748 <nvs_write+0x190>
    e60c:	b11e      	cbz	r6, e616 <nvs_write+0x5e>
	    ((len > 0) && (data == NULL))) {
    e60e:	f1b8 0f00 	cmp.w	r8, #0
    e612:	f000 8099 	beq.w	e748 <nvs_write+0x190>
	wlk_addr = fs->ate_wra;
    e616:	6863      	ldr	r3, [r4, #4]
    e618:	9303      	str	r3, [sp, #12]
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
    e61a:	aa04      	add	r2, sp, #16
    e61c:	a903      	add	r1, sp, #12
    e61e:	4620      	mov	r0, r4
		rd_addr = wlk_addr;
    e620:	f8dd b00c 	ldr.w	fp, [sp, #12]
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
    e624:	f003 ff77 	bl	12516 <nvs_prev_ate>
		if (rc) {
    e628:	4605      	mov	r5, r0
    e62a:	2800      	cmp	r0, #0
    e62c:	d1d9      	bne.n	e5e2 <nvs_write+0x2a>
		if ((wlk_ate.id == id) && (nvs_ate_valid(fs, &wlk_ate))) {
    e62e:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    e632:	454b      	cmp	r3, r9
    e634:	d005      	beq.n	e642 <nvs_write+0x8a>
		if (wlk_addr == fs->ate_wra) {
    e636:	6862      	ldr	r2, [r4, #4]
    e638:	9b03      	ldr	r3, [sp, #12]
    e63a:	429a      	cmp	r2, r3
    e63c:	d1ed      	bne.n	e61a <nvs_write+0x62>
		if (len == 0) {
    e63e:	b9e6      	cbnz	r6, e67a <nvs_write+0xc2>
    e640:	e7cf      	b.n	e5e2 <nvs_write+0x2a>
		if ((wlk_ate.id == id) && (nvs_ate_valid(fs, &wlk_ate))) {
    e642:	a904      	add	r1, sp, #16
    e644:	4620      	mov	r0, r4
    e646:	f003 fed5 	bl	123f4 <nvs_ate_valid>
    e64a:	2800      	cmp	r0, #0
    e64c:	d0f3      	beq.n	e636 <nvs_write+0x7e>
			if (wlk_ate.len == 0U) {
    e64e:	f8bd 3014 	ldrh.w	r3, [sp, #20]
		if (len == 0) {
    e652:	b186      	cbz	r6, e676 <nvs_write+0xbe>
		} else if (len == wlk_ate.len) {
    e654:	429e      	cmp	r6, r3
    e656:	d110      	bne.n	e67a <nvs_write+0xc2>
		rd_addr += wlk_ate.offset;
    e658:	f8bd 0012 	ldrh.w	r0, [sp, #18]
		rd_addr &= ADDR_SECT_MASK;
    e65c:	ea4f 411b 	mov.w	r1, fp, lsr #16
    e660:	0409      	lsls	r1, r1, #16
			rc = nvs_flash_block_cmp(fs, rd_addr, data, len);
    e662:	4401      	add	r1, r0
    e664:	4633      	mov	r3, r6
    e666:	4642      	mov	r2, r8
    e668:	4620      	mov	r0, r4
    e66a:	f003 fe56 	bl	1231a <nvs_flash_block_cmp>
			if (rc <= 0) {
    e66e:	2800      	cmp	r0, #0
    e670:	dc03      	bgt.n	e67a <nvs_write+0xc2>
    e672:	4605      	mov	r5, r0
    e674:	e7b5      	b.n	e5e2 <nvs_write+0x2a>
			if (wlk_ate.len == 0U) {
    e676:	2b00      	cmp	r3, #0
    e678:	d0b3      	beq.n	e5e2 <nvs_write+0x2a>
	if (data_size) {
    e67a:	bba7      	cbnz	r7, e6e6 <nvs_write+0x12e>
	k_mutex_lock(&fs->nvs_lock, K_FOREVER);
    e67c:	f104 0a14 	add.w	sl, r4, #20
	return z_impl_k_mutex_lock(mutex, timeout);
    e680:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    e684:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    e688:	4650      	mov	r0, sl
    e68a:	f002 fbc9 	bl	10e20 <z_impl_k_mutex_lock>
	fs->ate_wra &= ADDR_SECT_MASK;
    e68e:	f8df b0cc 	ldr.w	fp, [pc, #204]	; e75c <nvs_write+0x1a4>
		if (gc_count == fs->sector_count) {
    e692:	89e3      	ldrh	r3, [r4, #14]
    e694:	429d      	cmp	r5, r3
    e696:	d054      	beq.n	e742 <nvs_write+0x18a>
		if (fs->ate_wra >= (fs->data_wra + required_space)) {
    e698:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
    e69c:	18f9      	adds	r1, r7, r3
    e69e:	428a      	cmp	r2, r1
    e6a0:	d324      	bcc.n	e6ec <nvs_write+0x134>
	entry.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
    e6a2:	f8ad 301a 	strh.w	r3, [sp, #26]
	nvs_ate_crc8_update(&entry);
    e6a6:	a806      	add	r0, sp, #24
	entry.part = 0xff;
    e6a8:	23ff      	movs	r3, #255	; 0xff
    e6aa:	f88d 301e 	strb.w	r3, [sp, #30]
	entry.id = id;
    e6ae:	f8ad 9018 	strh.w	r9, [sp, #24]
	entry.len = (uint16_t)len;
    e6b2:	f8ad 601c 	strh.w	r6, [sp, #28]
	nvs_ate_crc8_update(&entry);
    e6b6:	f003 fe7f 	bl	123b8 <nvs_ate_crc8_update>
	rc = nvs_flash_data_wrt(fs, data, len);
    e6ba:	4632      	mov	r2, r6
    e6bc:	4641      	mov	r1, r8
    e6be:	4620      	mov	r0, r4
    e6c0:	f003 ff05 	bl	124ce <nvs_flash_data_wrt>
	if (rc) {
    e6c4:	4603      	mov	r3, r0
    e6c6:	b938      	cbnz	r0, e6d8 <nvs_write+0x120>
	rc = nvs_flash_ate_wrt(fs, &entry);
    e6c8:	a906      	add	r1, sp, #24
    e6ca:	4620      	mov	r0, r4
    e6cc:	f003 ff12 	bl	124f4 <nvs_flash_ate_wrt>
	rc = len;
    e6d0:	2800      	cmp	r0, #0
    e6d2:	bf14      	ite	ne
    e6d4:	4603      	movne	r3, r0
    e6d6:	4633      	moveq	r3, r6
    e6d8:	9301      	str	r3, [sp, #4]
	return z_impl_k_mutex_unlock(mutex);
    e6da:	4650      	mov	r0, sl
    e6dc:	f002 fc18 	bl	10f10 <z_impl_k_mutex_unlock>
	return rc;
    e6e0:	9b01      	ldr	r3, [sp, #4]
    e6e2:	461d      	mov	r5, r3
    e6e4:	e77d      	b.n	e5e2 <nvs_write+0x2a>
		required_space = data_size + ate_size;
    e6e6:	4457      	add	r7, sl
    e6e8:	b2bf      	uxth	r7, r7
    e6ea:	e7c7      	b.n	e67c <nvs_write+0xc4>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    e6ec:	2108      	movs	r1, #8
    e6ee:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    e6f0:	f003 fe76 	bl	123e0 <nvs_al_size.isra.0>
	close_ate.id = 0xFFFF;
    e6f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
    e6f8:	f8ad 3018 	strh.w	r3, [sp, #24]
	close_ate.len = 0U;
    e6fc:	2300      	movs	r3, #0
    e6fe:	f8ad 301c 	strh.w	r3, [sp, #28]
	close_ate.offset = (uint16_t)((fs->ate_wra + ate_size) & ADDR_OFFS_MASK);
    e702:	1813      	adds	r3, r2, r0
    e704:	f8ad 301a 	strh.w	r3, [sp, #26]
	fs->ate_wra += (fs->sector_size - ate_size);
    e708:	89a3      	ldrh	r3, [r4, #12]
	fs->ate_wra &= ADDR_SECT_MASK;
    e70a:	ea02 020b 	and.w	r2, r2, fp
	fs->ate_wra += (fs->sector_size - ate_size);
    e70e:	441a      	add	r2, r3
    e710:	1a12      	subs	r2, r2, r0
    e712:	6062      	str	r2, [r4, #4]
	nvs_ate_crc8_update(&close_ate);
    e714:	a806      	add	r0, sp, #24
    e716:	f003 fe4f 	bl	123b8 <nvs_ate_crc8_update>
	rc = nvs_flash_ate_wrt(fs, &close_ate);
    e71a:	a906      	add	r1, sp, #24
    e71c:	4620      	mov	r0, r4
    e71e:	f003 fee9 	bl	124f4 <nvs_flash_ate_wrt>
	nvs_sector_advance(fs, &fs->ate_wra);
    e722:	89e0      	ldrh	r0, [r4, #14]
    e724:	1d21      	adds	r1, r4, #4
    e726:	f003 fe50 	bl	123ca <nvs_sector_advance.isra.0>
	fs->data_wra = fs->ate_wra & ADDR_SECT_MASK;
    e72a:	6863      	ldr	r3, [r4, #4]
    e72c:	ea03 030b 	and.w	r3, r3, fp
    e730:	60a3      	str	r3, [r4, #8]
		rc = nvs_gc(fs);
    e732:	4620      	mov	r0, r4
    e734:	f7ff fc8a 	bl	e04c <nvs_gc>
		if (rc) {
    e738:	4603      	mov	r3, r0
    e73a:	2800      	cmp	r0, #0
    e73c:	d1cc      	bne.n	e6d8 <nvs_write+0x120>
		gc_count++;
    e73e:	3501      	adds	r5, #1
		if (gc_count == fs->sector_count) {
    e740:	e7a7      	b.n	e692 <nvs_write+0xda>
			rc = -ENOSPC;
    e742:	f06f 031b 	mvn.w	r3, #27
    e746:	e7c7      	b.n	e6d8 <nvs_write+0x120>
		return -EINVAL;
    e748:	f06f 0515 	mvn.w	r5, #21
    e74c:	e749      	b.n	e5e2 <nvs_write+0x2a>
    e74e:	bf00      	nop
    e750:	00013014 	.word	0x00013014
    e754:	0001302c 	.word	0x0001302c
    e758:	0001366d 	.word	0x0001366d
    e75c:	ffff0000 	.word	0xffff0000

0000e760 <nvs_read_hist>:
	return nvs_write(fs, id, NULL, 0);
}

ssize_t nvs_read_hist(struct nvs_fs *fs, uint16_t id, void *data, size_t len,
		      uint16_t cnt)
{
    e760:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    e764:	461e      	mov	r6, r3
	uint32_t wlk_addr, rd_addr;
	uint16_t cnt_his;
	struct nvs_ate wlk_ate;
	size_t ate_size;

	if (!fs->ready) {
    e766:	7c03      	ldrb	r3, [r0, #16]
{
    e768:	f8bd 9030 	ldrh.w	r9, [sp, #48]	; 0x30
    e76c:	4604      	mov	r4, r0
    e76e:	460f      	mov	r7, r1
    e770:	4690      	mov	r8, r2
	if (!fs->ready) {
    e772:	b973      	cbnz	r3, e792 <nvs_read_hist+0x32>
    e774:	4b2b      	ldr	r3, [pc, #172]	; (e824 <nvs_read_hist+0xc4>)
    e776:	492c      	ldr	r1, [pc, #176]	; (e828 <nvs_read_hist+0xc8>)
		LOG_ERR("NVS not initialized");
    e778:	482c      	ldr	r0, [pc, #176]	; (e82c <nvs_read_hist+0xcc>)
    e77a:	1ac9      	subs	r1, r1, r3
    e77c:	08c9      	lsrs	r1, r1, #3
    e77e:	0189      	lsls	r1, r1, #6
    e780:	f041 0101 	orr.w	r1, r1, #1
    e784:	f003 fb13 	bl	11dae <log_0>
		return -EACCES;
    e788:	f06f 000c 	mvn.w	r0, #12

	return wlk_ate.len;

err:
	return rc;
}
    e78c:	b004      	add	sp, #16
    e78e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    e792:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    e794:	2108      	movs	r1, #8
    e796:	f003 fe23 	bl	123e0 <nvs_al_size.isra.0>
	if (len > (fs->sector_size - 2 * ate_size)) {
    e79a:	89a3      	ldrh	r3, [r4, #12]
    e79c:	eba3 0340 	sub.w	r3, r3, r0, lsl #1
    e7a0:	429e      	cmp	r6, r3
    e7a2:	d83c      	bhi.n	e81e <nvs_read_hist+0xbe>
	wlk_addr = fs->ate_wra;
    e7a4:	6863      	ldr	r3, [r4, #4]
    e7a6:	9301      	str	r3, [sp, #4]
	cnt_his = 0U;
    e7a8:	f04f 0a00 	mov.w	sl, #0
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
    e7ac:	aa02      	add	r2, sp, #8
    e7ae:	a901      	add	r1, sp, #4
    e7b0:	4620      	mov	r0, r4
		rd_addr = wlk_addr;
    e7b2:	9d01      	ldr	r5, [sp, #4]
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
    e7b4:	f003 feaf 	bl	12516 <nvs_prev_ate>
		if (rc) {
    e7b8:	2800      	cmp	r0, #0
    e7ba:	d1e7      	bne.n	e78c <nvs_read_hist+0x2c>
		if ((wlk_ate.id == id) &&  (nvs_ate_valid(fs, &wlk_ate))) {
    e7bc:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    e7c0:	42bb      	cmp	r3, r7
    e7c2:	d108      	bne.n	e7d6 <nvs_read_hist+0x76>
    e7c4:	a902      	add	r1, sp, #8
    e7c6:	4620      	mov	r0, r4
    e7c8:	f003 fe14 	bl	123f4 <nvs_ate_valid>
    e7cc:	b118      	cbz	r0, e7d6 <nvs_read_hist+0x76>
			cnt_his++;
    e7ce:	f10a 0a01 	add.w	sl, sl, #1
    e7d2:	fa1f fa8a 	uxth.w	sl, sl
		if (wlk_addr == fs->ate_wra) {
    e7d6:	6862      	ldr	r2, [r4, #4]
    e7d8:	9b01      	ldr	r3, [sp, #4]
    e7da:	429a      	cmp	r2, r3
    e7dc:	d018      	beq.n	e810 <nvs_read_hist+0xb0>
	while (cnt_his <= cnt) {
    e7de:	45d1      	cmp	r9, sl
    e7e0:	d2e4      	bcs.n	e7ac <nvs_read_hist+0x4c>
	    (wlk_ate.len == 0U) || (cnt_his < cnt)) {
    e7e2:	f8bd 300c 	ldrh.w	r3, [sp, #12]
	if (((wlk_addr == fs->ate_wra) && (wlk_ate.id != id)) ||
    e7e6:	b1bb      	cbz	r3, e818 <nvs_read_hist+0xb8>
	    (wlk_ate.len == 0U) || (cnt_his < cnt)) {
    e7e8:	45d1      	cmp	r9, sl
    e7ea:	d815      	bhi.n	e818 <nvs_read_hist+0xb8>
	rd_addr += wlk_ate.offset;
    e7ec:	f8bd 100a 	ldrh.w	r1, [sp, #10]
	rd_addr &= ADDR_SECT_MASK;
    e7f0:	0c2d      	lsrs	r5, r5, #16
	rc = nvs_flash_rd(fs, rd_addr, data, MIN(len, wlk_ate.len));
    e7f2:	42b3      	cmp	r3, r6
	rd_addr &= ADDR_SECT_MASK;
    e7f4:	ea4f 4505 	mov.w	r5, r5, lsl #16
	rc = nvs_flash_rd(fs, rd_addr, data, MIN(len, wlk_ate.len));
    e7f8:	bf28      	it	cs
    e7fa:	4633      	movcs	r3, r6
    e7fc:	4642      	mov	r2, r8
    e7fe:	4429      	add	r1, r5
    e800:	4620      	mov	r0, r4
    e802:	f003 fd7c 	bl	122fe <nvs_flash_rd>
	if (rc) {
    e806:	2800      	cmp	r0, #0
    e808:	d1c0      	bne.n	e78c <nvs_read_hist+0x2c>
	return wlk_ate.len;
    e80a:	f8bd 000c 	ldrh.w	r0, [sp, #12]
    e80e:	e7bd      	b.n	e78c <nvs_read_hist+0x2c>
	if (((wlk_addr == fs->ate_wra) && (wlk_ate.id != id)) ||
    e810:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    e814:	42bb      	cmp	r3, r7
    e816:	d0e4      	beq.n	e7e2 <nvs_read_hist+0x82>
		return -ENOENT;
    e818:	f06f 0001 	mvn.w	r0, #1
    e81c:	e7b6      	b.n	e78c <nvs_read_hist+0x2c>
		return -EINVAL;
    e81e:	f06f 0015 	mvn.w	r0, #21
    e822:	e7b3      	b.n	e78c <nvs_read_hist+0x2c>
    e824:	00013014 	.word	0x00013014
    e828:	0001302c 	.word	0x0001302c
    e82c:	0001366d 	.word	0x0001366d

0000e830 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
    e830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e832:	4605      	mov	r5, r0
	__asm__ volatile(
    e834:	f04f 0320 	mov.w	r3, #32
    e838:	f3ef 8611 	mrs	r6, BASEPRI
    e83c:	f383 8811 	msr	BASEPRI, r3
    e840:	f3bf 8f6f 	isb	sy
	return list->head;
    e844:	4b09      	ldr	r3, [pc, #36]	; (e86c <pm_state_notify+0x3c>)
    e846:	681c      	ldr	r4, [r3, #0]
	struct pm_notifier *notifier;
	k_spinlock_key_t pm_notifier_key;
	void (*callback)(enum pm_state state);

	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    e848:	b15c      	cbz	r4, e862 <pm_state_notify+0x32>
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_power_state.state);
    e84a:	4f09      	ldr	r7, [pc, #36]	; (e870 <pm_state_notify+0x40>)
			callback = notifier->state_exit;
    e84c:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
    e850:	2d00      	cmp	r5, #0
    e852:	bf08      	it	eq
    e854:	4613      	moveq	r3, r2
		if (callback) {
    e856:	b10b      	cbz	r3, e85c <pm_state_notify+0x2c>
			callback(z_power_state.state);
    e858:	7838      	ldrb	r0, [r7, #0]
    e85a:	4798      	blx	r3
	return node->next;
    e85c:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    e85e:	2c00      	cmp	r4, #0
    e860:	d1f4      	bne.n	e84c <pm_state_notify+0x1c>
	__asm__ volatile(
    e862:	f386 8811 	msr	BASEPRI, r6
    e866:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
    e86a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e86c:	200002cc 	.word	0x200002cc
    e870:	200002d4 	.word	0x200002d4

0000e874 <pm_system_resume>:

void pm_system_resume(void)
{
    e874:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	 * and it may schedule another thread.
	 *
	 * Call pm_idle_exit_notification_disable() if this
	 * notification is not required.
	 */
	if (!post_ops_done) {
    e876:	4b0f      	ldr	r3, [pc, #60]	; (e8b4 <pm_system_resume+0x40>)
    e878:	681a      	ldr	r2, [r3, #0]
    e87a:	b9ba      	cbnz	r2, e8ac <pm_system_resume+0x38>
		post_ops_done = 1;
    e87c:	2201      	movs	r2, #1
    e87e:	601a      	str	r2, [r3, #0]
		exit_pos_ops(z_power_state);
    e880:	4a0d      	ldr	r2, [pc, #52]	; (e8b8 <pm_system_resume+0x44>)
    e882:	ca07      	ldmia	r2, {r0, r1, r2}
    e884:	ab01      	add	r3, sp, #4
    e886:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (pm_power_state_exit_post_ops != NULL) {
    e88a:	4a0c      	ldr	r2, [pc, #48]	; (e8bc <pm_system_resume+0x48>)
    e88c:	b14a      	cbz	r2, e8a2 <pm_system_resume+0x2e>
		pm_power_state_exit_post_ops(info);
    e88e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    e892:	f003 ffb0 	bl	127f6 <pm_power_state_exit_post_ops>
		pm_state_notify(false);
    e896:	2000      	movs	r0, #0
	}
}
    e898:	b005      	add	sp, #20
    e89a:	f85d eb04 	ldr.w	lr, [sp], #4
		pm_state_notify(false);
    e89e:	f7ff bfc7 	b.w	e830 <pm_state_notify>
    e8a2:	f382 8811 	msr	BASEPRI, r2
    e8a6:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    e8aa:	e7f4      	b.n	e896 <pm_system_resume+0x22>
}
    e8ac:	b005      	add	sp, #20
    e8ae:	f85d fb04 	ldr.w	pc, [sp], #4
    e8b2:	bf00      	nop
    e8b4:	20000008 	.word	0x20000008
    e8b8:	200002d4 	.word	0x200002d4
    e8bc:	000127f7 	.word	0x000127f7

0000e8c0 <pm_system_suspend>:
	return PM_STATE_ACTIVE;
}
#endif

enum pm_state pm_system_suspend(int32_t ticks)
{
    e8c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    e8c2:	b089      	sub	sp, #36	; 0x24
	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);
	z_power_state = pm_policy_next_state(ticks);
    e8c4:	466e      	mov	r6, sp
    e8c6:	4601      	mov	r1, r0
{
    e8c8:	4605      	mov	r5, r0
	z_power_state = pm_policy_next_state(ticks);
    e8ca:	4630      	mov	r0, r6
    e8cc:	f003 fe7a 	bl	125c4 <pm_policy_next_state>
    e8d0:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    e8d4:	4c17      	ldr	r4, [pc, #92]	; (e934 <pm_system_suspend+0x74>)
    e8d6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	if (z_power_state.state == PM_STATE_ACTIVE) {
    e8da:	7820      	ldrb	r0, [r4, #0]
    e8dc:	4627      	mov	r7, r4
    e8de:	b338      	cbz	r0, e930 <pm_system_suspend+0x70>
		LOG_DBG("No PM operations done.");
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks, z_power_state.state);
		return z_power_state.state;
	}
	post_ops_done = 0;
    e8e0:	4b15      	ldr	r3, [pc, #84]	; (e938 <pm_system_suspend+0x78>)
    e8e2:	2100      	movs	r1, #0
    e8e4:	6019      	str	r1, [r3, #0]

	if (ticks != K_TICKS_FOREVER) {
    e8e6:	1c6b      	adds	r3, r5, #1
    e8e8:	d00d      	beq.n	e906 <pm_system_suspend+0x46>
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
    e8ea:	4814      	ldr	r0, [pc, #80]	; (e93c <pm_system_suspend+0x7c>)
    e8ec:	4616      	mov	r6, r2
    e8ee:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
    e8f2:	4a13      	ldr	r2, [pc, #76]	; (e940 <pm_system_suspend+0x80>)
    e8f4:	2300      	movs	r3, #0
    e8f6:	fbe6 010c 	umlal	r0, r1, r6, ip
    e8fa:	f7fd fcef 	bl	c2dc <__aeabi_uldivmod>

		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		z_set_timeout_expiry(ticks -
    e8fe:	2101      	movs	r1, #1
    e900:	1a28      	subs	r0, r5, r0
    e902:	f004 fa36 	bl	12d72 <z_set_timeout_expiry>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
    e906:	f002 fbe5 	bl	110d4 <k_sched_lock>
	pm_debug_start_timer();
	/* Enter power state */
	pm_state_notify(true);
    e90a:	2001      	movs	r0, #1
    e90c:	f7ff ff90 	bl	e830 <pm_state_notify>
	pm_state_set(z_power_state);
    e910:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
    e914:	ab05      	add	r3, sp, #20
    e916:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (pm_power_state_set != NULL) {
    e91a:	4a0a      	ldr	r2, [pc, #40]	; (e944 <pm_system_suspend+0x84>)
    e91c:	b11a      	cbz	r2, e926 <pm_system_suspend+0x66>
		pm_power_state_set(info);
    e91e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    e922:	f003 ff55 	bl	127d0 <pm_power_state_set>
		/* Turn on peripherals and restore device states as necessary */
		pm_resume_devices();
	}
#endif
	pm_log_debug_info(z_power_state.state);
	pm_system_resume();
    e926:	f7ff ffa5 	bl	e874 <pm_system_resume>
	k_sched_unlock();
    e92a:	f002 fc8b 	bl	11244 <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks, z_power_state.state);
	return z_power_state.state;
    e92e:	7820      	ldrb	r0, [r4, #0]
}
    e930:	b009      	add	sp, #36	; 0x24
    e932:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e934:	200002d4 	.word	0x200002d4
    e938:	20000008 	.word	0x20000008
    e93c:	000f423f 	.word	0x000f423f
    e940:	000f4240 	.word	0x000f4240
    e944:	000127d1 	.word	0x000127d1

0000e948 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
    e948:	b510      	push	{r4, lr}
    e94a:	4807      	ldr	r0, [pc, #28]	; (e968 <uart_console_init+0x20>)
	__stdout_hook_install(console_out);
    e94c:	4c07      	ldr	r4, [pc, #28]	; (e96c <uart_console_init+0x24>)
    e94e:	f002 f811 	bl	10974 <z_impl_device_get_binding>

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
    e952:	4b07      	ldr	r3, [pc, #28]	; (e970 <uart_console_init+0x28>)
    e954:	6018      	str	r0, [r3, #0]
	__stdout_hook_install(console_out);
    e956:	4620      	mov	r0, r4
    e958:	f000 ffba 	bl	f8d0 <__stdout_hook_install>
	__printk_hook_install(console_out);
    e95c:	4620      	mov	r0, r4
    e95e:	f7fd fffd 	bl	c95c <__printk_hook_install>

	uart_console_hook_install();

	return 0;
}
    e962:	2000      	movs	r0, #0
    e964:	bd10      	pop	{r4, pc}
    e966:	bf00      	nop
    e968:	000135ca 	.word	0x000135ca
    e96c:	0000e975 	.word	0x0000e975
    e970:	200002e0 	.word	0x200002e0

0000e974 <console_out>:
	if ('\n' == c) {
    e974:	280a      	cmp	r0, #10
{
    e976:	b538      	push	{r3, r4, r5, lr}
    e978:	4d07      	ldr	r5, [pc, #28]	; (e998 <console_out+0x24>)
    e97a:	4604      	mov	r4, r0
	if ('\n' == c) {
    e97c:	d104      	bne.n	e988 <console_out+0x14>
		uart_poll_out(uart_console_dev, '\r');
    e97e:	6828      	ldr	r0, [r5, #0]
    e980:	6883      	ldr	r3, [r0, #8]
    e982:	210d      	movs	r1, #13
    e984:	685b      	ldr	r3, [r3, #4]
    e986:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
    e988:	6828      	ldr	r0, [r5, #0]
    e98a:	6883      	ldr	r3, [r0, #8]
    e98c:	b2e1      	uxtb	r1, r4
    e98e:	685b      	ldr	r3, [r3, #4]
    e990:	4798      	blx	r3
}
    e992:	4620      	mov	r0, r4
    e994:	bd38      	pop	{r3, r4, r5, pc}
    e996:	bf00      	nop
    e998:	200002e0 	.word	0x200002e0

0000e99c <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
    e99c:	4b08      	ldr	r3, [pc, #32]	; (e9c0 <onoff_stop+0x24>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    e99e:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    e9a0:	1ac3      	subs	r3, r0, r3
{
    e9a2:	460d      	mov	r5, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    e9a4:	4907      	ldr	r1, [pc, #28]	; (e9c4 <onoff_stop+0x28>)
	size_t offset = (size_t)(mgr - data->mgr);
    e9a6:	109b      	asrs	r3, r3, #2
{
    e9a8:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    e9aa:	4359      	muls	r1, r3
    e9ac:	4806      	ldr	r0, [pc, #24]	; (e9c8 <onoff_stop+0x2c>)
    e9ae:	2240      	movs	r2, #64	; 0x40
    e9b0:	f003 fe29 	bl	12606 <stop>
	notify(mgr, res);
    e9b4:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    e9b6:	4601      	mov	r1, r0
	notify(mgr, res);
    e9b8:	4620      	mov	r0, r4
}
    e9ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    e9be:	4718      	bx	r3
    e9c0:	200002f8 	.word	0x200002f8
    e9c4:	b6db6db7 	.word	0xb6db6db7
    e9c8:	00012e64 	.word	0x00012e64

0000e9cc <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    e9cc:	b573      	push	{r0, r1, r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    e9ce:	4c0c      	ldr	r4, [pc, #48]	; (ea00 <onoff_start+0x34>)
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    e9d0:	4a0c      	ldr	r2, [pc, #48]	; (ea04 <onoff_start+0x38>)
    e9d2:	2340      	movs	r3, #64	; 0x40
	size_t offset = (size_t)(mgr - data->mgr);
    e9d4:	1b04      	subs	r4, r0, r4
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    e9d6:	9300      	str	r3, [sp, #0]
{
    e9d8:	460d      	mov	r5, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    e9da:	460b      	mov	r3, r1
    e9dc:	490a      	ldr	r1, [pc, #40]	; (ea08 <onoff_start+0x3c>)
	size_t offset = (size_t)(mgr - data->mgr);
    e9de:	10a4      	asrs	r4, r4, #2
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    e9e0:	4361      	muls	r1, r4
{
    e9e2:	4606      	mov	r6, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    e9e4:	4809      	ldr	r0, [pc, #36]	; (ea0c <onoff_start+0x40>)
    e9e6:	f003 fe3b 	bl	12660 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    e9ea:	1e01      	subs	r1, r0, #0
    e9ec:	da05      	bge.n	e9fa <onoff_start+0x2e>
		notify(mgr, err);
    e9ee:	4630      	mov	r0, r6
    e9f0:	462b      	mov	r3, r5
	}
}
    e9f2:	b002      	add	sp, #8
    e9f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		notify(mgr, err);
    e9f8:	4718      	bx	r3
}
    e9fa:	b002      	add	sp, #8
    e9fc:	bd70      	pop	{r4, r5, r6, pc}
    e9fe:	bf00      	nop
    ea00:	200002f8 	.word	0x200002f8
    ea04:	000126cf 	.word	0x000126cf
    ea08:	b6db6db7 	.word	0xb6db6db7
    ea0c:	00012e64 	.word	0x00012e64

0000ea10 <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    ea10:	2200      	movs	r2, #0
{
    ea12:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    ea14:	2101      	movs	r1, #1
{
    ea16:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    ea18:	4610      	mov	r0, r2
    ea1a:	f000 fabd 	bl	ef98 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
    ea1e:	2000      	movs	r0, #0
    ea20:	f000 fa9c 	bl	ef5c <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
    ea24:	480f      	ldr	r0, [pc, #60]	; (ea64 <clk_init+0x54>)
    ea26:	f001 fd71 	bl	1050c <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    ea2a:	4b0f      	ldr	r3, [pc, #60]	; (ea68 <clk_init+0x58>)
    ea2c:	4298      	cmp	r0, r3
    ea2e:	d115      	bne.n	ea5c <clk_init+0x4c>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    ea30:	f004 f817 	bl	12a62 <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
    ea34:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
    ea36:	490d      	ldr	r1, [pc, #52]	; (ea6c <clk_init+0x5c>)
    ea38:	4630      	mov	r0, r6
    ea3a:	f003 f8b2 	bl	11ba2 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    ea3e:	2800      	cmp	r0, #0
    ea40:	db0b      	blt.n	ea5a <clk_init+0x4a>
	struct nrf_clock_control_data *data = dev->data;
    ea42:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    ea44:	4909      	ldr	r1, [pc, #36]	; (ea6c <clk_init+0x5c>)
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    ea46:	2501      	movs	r5, #1
    ea48:	6435      	str	r5, [r6, #64]	; 0x40
		err = onoff_manager_init(get_onoff_manager(dev, i),
    ea4a:	f104 001c 	add.w	r0, r4, #28
    ea4e:	f003 f8a8 	bl	11ba2 <onoff_manager_init>
		if (err < 0) {
    ea52:	2800      	cmp	r0, #0
    ea54:	db01      	blt.n	ea5a <clk_init+0x4a>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    ea56:	64e5      	str	r5, [r4, #76]	; 0x4c
	}

	return 0;
    ea58:	2000      	movs	r0, #0
}
    ea5a:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    ea5c:	f06f 0004 	mvn.w	r0, #4
    ea60:	e7fb      	b.n	ea5a <clk_init+0x4a>
    ea62:	bf00      	nop
    ea64:	0000eaa5 	.word	0x0000eaa5
    ea68:	0bad0000 	.word	0x0bad0000
    ea6c:	00013164 	.word	0x00013164

0000ea70 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    ea70:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    ea72:	230c      	movs	r3, #12
    ea74:	4809      	ldr	r0, [pc, #36]	; (ea9c <clkstarted_handle.constprop.0+0x2c>)
    ea76:	434b      	muls	r3, r1
static void clkstarted_handle(const struct device *dev,
    ea78:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
    ea7a:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
    ea7c:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	sub_data->cb = NULL;
    ea80:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
    ea82:	3340      	adds	r3, #64	; 0x40
	sub_data->cb = NULL;
    ea84:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
    ea86:	4418      	add	r0, r3
    ea88:	f003 fdaa 	bl	125e0 <set_on_state>
	if (callback) {
    ea8c:	b12d      	cbz	r5, ea9a <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
    ea8e:	4632      	mov	r2, r6
    ea90:	462b      	mov	r3, r5
    ea92:	4803      	ldr	r0, [pc, #12]	; (eaa0 <clkstarted_handle.constprop.0+0x30>)
}
    ea94:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    ea98:	4718      	bx	r3
}
    ea9a:	bd70      	pop	{r4, r5, r6, pc}
    ea9c:	200002f8 	.word	0x200002f8
    eaa0:	00012e64 	.word	0x00012e64

0000eaa4 <clock_event_handler>:
	switch (event) {
    eaa4:	b110      	cbz	r0, eaac <clock_event_handler+0x8>
    eaa6:	2801      	cmp	r0, #1
    eaa8:	d004      	beq.n	eab4 <clock_event_handler+0x10>
    eaaa:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    eaac:	4b03      	ldr	r3, [pc, #12]	; (eabc <clock_event_handler+0x18>)
    eaae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    eab0:	075b      	lsls	r3, r3, #29
    eab2:	d101      	bne.n	eab8 <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    eab4:	f7ff bfdc 	b.w	ea70 <clkstarted_handle.constprop.0>
}
    eab8:	4770      	bx	lr
    eaba:	bf00      	nop
    eabc:	200002f8 	.word	0x200002f8

0000eac0 <generic_hfclk_start>:
{
    eac0:	b508      	push	{r3, lr}
	__asm__ volatile(
    eac2:	f04f 0320 	mov.w	r3, #32
    eac6:	f3ef 8111 	mrs	r1, BASEPRI
    eaca:	f383 8811 	msr	BASEPRI, r3
    eace:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    ead2:	4a12      	ldr	r2, [pc, #72]	; (eb1c <generic_hfclk_start+0x5c>)
    ead4:	6813      	ldr	r3, [r2, #0]
    ead6:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
    eada:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
    eade:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    eae0:	d00c      	beq.n	eafc <generic_hfclk_start+0x3c>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    eae2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    eae6:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    eaea:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    eaee:	f013 0301 	ands.w	r3, r3, #1
    eaf2:	d003      	beq.n	eafc <generic_hfclk_start+0x3c>
			set_on_state(get_hf_flags());
    eaf4:	480a      	ldr	r0, [pc, #40]	; (eb20 <generic_hfclk_start+0x60>)
    eaf6:	f003 fd73 	bl	125e0 <set_on_state>
			already_started = true;
    eafa:	2301      	movs	r3, #1
	__asm__ volatile(
    eafc:	f381 8811 	msr	BASEPRI, r1
    eb00:	f3bf 8f6f 	isb	sy
	if (already_started) {
    eb04:	b123      	cbz	r3, eb10 <generic_hfclk_start+0x50>
}
    eb06:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    eb0a:	2000      	movs	r0, #0
    eb0c:	f7ff bfb0 	b.w	ea70 <clkstarted_handle.constprop.0>
}
    eb10:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    eb14:	2001      	movs	r0, #1
    eb16:	f001 bd09 	b.w	1052c <nrfx_clock_start>
    eb1a:	bf00      	nop
    eb1c:	20000348 	.word	0x20000348
    eb20:	20000338 	.word	0x20000338

0000eb24 <api_blocking_start>:
{
    eb24:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    eb26:	2200      	movs	r2, #0
    eb28:	2301      	movs	r3, #1
    eb2a:	e9cd 2302 	strd	r2, r3, [sp, #8]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    eb2e:	4a09      	ldr	r2, [pc, #36]	; (eb54 <api_blocking_start+0x30>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    eb30:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    eb34:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    eb36:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    eb3a:	f003 fdc1 	bl	126c0 <api_start>
	if (err < 0) {
    eb3e:	2800      	cmp	r0, #0
    eb40:	db05      	blt.n	eb4e <api_blocking_start+0x2a>
	return z_impl_k_sem_take(sem, timeout);
    eb42:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    eb46:	2300      	movs	r3, #0
    eb48:	4668      	mov	r0, sp
    eb4a:	f002 fa43 	bl	10fd4 <z_impl_k_sem_take>
}
    eb4e:	b005      	add	sp, #20
    eb50:	f85d fb04 	ldr.w	pc, [sp], #4
    eb54:	000126e7 	.word	0x000126e7

0000eb58 <lfclk_start>:
{
    eb58:	b510      	push	{r4, lr}
	if (!once) {
    eb5a:	4c07      	ldr	r4, [pc, #28]	; (eb78 <lfclk_start+0x20>)
    eb5c:	7823      	ldrb	r3, [r4, #0]
    eb5e:	b92b      	cbnz	r3, eb6c <lfclk_start+0x14>
	z_impl_k_busy_wait(usec_to_wait);
    eb60:	f44f 70a5 	mov.w	r0, #330	; 0x14a
    eb64:	f004 f923 	bl	12dae <z_impl_k_busy_wait>
		once = true;
    eb68:	2301      	movs	r3, #1
    eb6a:	7023      	strb	r3, [r4, #0]
}
    eb6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    eb70:	2000      	movs	r0, #0
    eb72:	f001 bcdb 	b.w	1052c <nrfx_clock_start>
    eb76:	bf00      	nop
    eb78:	20000509 	.word	0x20000509

0000eb7c <generic_hfclk_stop>:
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    eb7c:	4b09      	ldr	r3, [pc, #36]	; (eba4 <generic_hfclk_stop+0x28>)
    eb7e:	f3bf 8f5b 	dmb	ish
    eb82:	e853 2f00 	ldrex	r2, [r3]
    eb86:	f022 0102 	bic.w	r1, r2, #2
    eb8a:	e843 1000 	strex	r0, r1, [r3]
    eb8e:	2800      	cmp	r0, #0
    eb90:	d1f7      	bne.n	eb82 <generic_hfclk_stop+0x6>
    eb92:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    eb96:	07d3      	lsls	r3, r2, #31
    eb98:	d402      	bmi.n	eba0 <generic_hfclk_stop+0x24>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    eb9a:	2001      	movs	r0, #1
    eb9c:	f001 bd0e 	b.w	105bc <nrfx_clock_stop>
}
    eba0:	4770      	bx	lr
    eba2:	bf00      	nop
    eba4:	20000348 	.word	0x20000348

0000eba8 <z_nrf_clock_control_lf_on>:
{
    eba8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    ebac:	4939      	ldr	r1, [pc, #228]	; (ec94 <z_nrf_clock_control_lf_on+0xec>)
    ebae:	f3bf 8f5b 	dmb	ish
    ebb2:	4607      	mov	r7, r0
    ebb4:	2201      	movs	r2, #1
    ebb6:	e851 3f00 	ldrex	r3, [r1]
    ebba:	e841 2000 	strex	r0, r2, [r1]
    ebbe:	2800      	cmp	r0, #0
    ebc0:	d1f9      	bne.n	ebb6 <z_nrf_clock_control_lf_on+0xe>
    ebc2:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
    ebc6:	b933      	cbnz	r3, ebd6 <z_nrf_clock_control_lf_on+0x2e>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    ebc8:	4933      	ldr	r1, [pc, #204]	; (ec98 <z_nrf_clock_control_lf_on+0xf0>)
		err = onoff_request(mgr, &cli);
    ebca:	4834      	ldr	r0, [pc, #208]	; (ec9c <z_nrf_clock_control_lf_on+0xf4>)
    ebcc:	604b      	str	r3, [r1, #4]
    ebce:	60cb      	str	r3, [r1, #12]
    ebd0:	608a      	str	r2, [r1, #8]
    ebd2:	f002 fff9 	bl	11bc8 <onoff_request>
	switch (start_mode) {
    ebd6:	1e7b      	subs	r3, r7, #1
    ebd8:	2b01      	cmp	r3, #1
    ebda:	d82f      	bhi.n	ec3c <z_nrf_clock_control_lf_on+0x94>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    ebdc:	2f01      	cmp	r7, #1
    ebde:	d107      	bne.n	ebf0 <z_nrf_clock_control_lf_on+0x48>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    ebe0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    ebe4:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    ebe8:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    ebec:	2b01      	cmp	r3, #1
    ebee:	d025      	beq.n	ec3c <z_nrf_clock_control_lf_on+0x94>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    ebf0:	f003 ffa5 	bl	12b3e <k_is_in_isr>
    ebf4:	4604      	mov	r4, r0
    ebf6:	b918      	cbnz	r0, ec00 <z_nrf_clock_control_lf_on+0x58>
	return !z_sys_post_kernel;
    ebf8:	4b29      	ldr	r3, [pc, #164]	; (eca0 <z_nrf_clock_control_lf_on+0xf8>)
	int key = isr_mode ? irq_lock() : 0;
    ebfa:	781b      	ldrb	r3, [r3, #0]
    ebfc:	2b00      	cmp	r3, #0
    ebfe:	d141      	bne.n	ec84 <z_nrf_clock_control_lf_on+0xdc>
	__asm__ volatile(
    ec00:	f04f 0320 	mov.w	r3, #32
    ec04:	f3ef 8611 	mrs	r6, BASEPRI
    ec08:	f383 8811 	msr	BASEPRI, r3
    ec0c:	f3bf 8f6f 	isb	sy
    ec10:	2401      	movs	r4, #1
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    ec12:	f8df 8090 	ldr.w	r8, [pc, #144]	; eca4 <z_nrf_clock_control_lf_on+0xfc>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    ec16:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    ec1a:	f8d5 3418 	ldr.w	r3, [r5, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    ec1e:	f8d5 2418 	ldr.w	r2, [r5, #1048]	; 0x418
    ec22:	03d2      	lsls	r2, r2, #15
    ec24:	d50c      	bpl.n	ec40 <z_nrf_clock_control_lf_on+0x98>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    ec26:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
    ec2a:	2b01      	cmp	r3, #1
    ec2c:	d001      	beq.n	ec32 <z_nrf_clock_control_lf_on+0x8a>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    ec2e:	2f01      	cmp	r7, #1
    ec30:	d106      	bne.n	ec40 <z_nrf_clock_control_lf_on+0x98>
	if (isr_mode) {
    ec32:	b30c      	cbz	r4, ec78 <z_nrf_clock_control_lf_on+0xd0>
	__asm__ volatile(
    ec34:	f386 8811 	msr	BASEPRI, r6
    ec38:	f3bf 8f6f 	isb	sy
}
    ec3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    ec40:	b1ac      	cbz	r4, ec6e <z_nrf_clock_control_lf_on+0xc6>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    ec42:	4630      	mov	r0, r6
    ec44:	f000 fa1c 	bl	f080 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    ec48:	f8d5 3518 	ldr.w	r3, [r5, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    ec4c:	2b00      	cmp	r3, #0
    ec4e:	d1e4      	bne.n	ec1a <z_nrf_clock_control_lf_on+0x72>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    ec50:	f8d5 2104 	ldr.w	r2, [r5, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
    ec54:	2a00      	cmp	r2, #0
    ec56:	d0e0      	beq.n	ec1a <z_nrf_clock_control_lf_on+0x72>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    ec58:	f8c5 3104 	str.w	r3, [r5, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    ec5c:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
    ec60:	2301      	movs	r3, #1
    ec62:	f8c5 3518 	str.w	r3, [r5, #1304]	; 0x518
    ec66:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    ec6a:	60ab      	str	r3, [r5, #8]
}
    ec6c:	e7d5      	b.n	ec1a <z_nrf_clock_control_lf_on+0x72>
	return z_impl_k_sleep(timeout);
    ec6e:	2100      	movs	r1, #0
    ec70:	2021      	movs	r0, #33	; 0x21
    ec72:	f002 fcad 	bl	115d0 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    ec76:	e7e7      	b.n	ec48 <z_nrf_clock_control_lf_on+0xa0>
    p_reg->INTENSET = mask;
    ec78:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    ec7c:	2202      	movs	r2, #2
    ec7e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    ec82:	e7db      	b.n	ec3c <z_nrf_clock_control_lf_on+0x94>
    p_reg->INTENCLR = mask;
    ec84:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    ec88:	2202      	movs	r2, #2
    ec8a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
    ec8e:	4606      	mov	r6, r0
}
    ec90:	e7bf      	b.n	ec12 <z_nrf_clock_control_lf_on+0x6a>
    ec92:	bf00      	nop
    ec94:	2000034c 	.word	0x2000034c
    ec98:	200002e8 	.word	0x200002e8
    ec9c:	20000314 	.word	0x20000314
    eca0:	2000091c 	.word	0x2000091c
    eca4:	e000e100 	.word	0xe000e100

0000eca8 <sys_clock_timeout_handler>:

static void sys_clock_timeout_handler(int32_t chan,
				      uint32_t cc_value,
				      void *user_data)
{
	uint32_t dticks = counter_sub(cc_value, last_count) / CYC_PER_TICK;
    eca8:	4a04      	ldr	r2, [pc, #16]	; (ecbc <sys_clock_timeout_handler+0x14>)
    ecaa:	6813      	ldr	r3, [r2, #0]
	return (a - b) & COUNTER_MAX;
    ecac:	1ac8      	subs	r0, r1, r3
    ecae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000

	last_count += dticks * CYC_PER_TICK;
    ecb2:	4403      	add	r3, r0
    ecb4:	6013      	str	r3, [r2, #0]
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    ecb6:	f002 bddd 	b.w	11874 <sys_clock_announce>
    ecba:	bf00      	nop
    ecbc:	20000360 	.word	0x20000360

0000ecc0 <set_absolute_alarm>:
{
    ecc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    ecc4:	0086      	lsls	r6, r0, #2
    ecc6:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    ecca:	f100 0450 	add.w	r4, r0, #80	; 0x50
    ecce:	f506 3688 	add.w	r6, r6, #69632	; 0x11000
    ecd2:	00a4      	lsls	r4, r4, #2
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE void nrf_rtc_event_clear(NRF_RTC_Type * p_reg, nrf_rtc_event_t event)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    ecd4:	b2a4      	uxth	r4, r4
    ecd6:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    ecda:	f44f 3780 	mov.w	r7, #65536	; 0x10000
    return p_reg->CC[ch];
    ecde:	f8d6 3540 	ldr.w	r3, [r6, #1344]	; 0x540
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
    ece2:	f8df 806c 	ldr.w	r8, [pc, #108]	; ed50 <set_absolute_alarm+0x90>
	uint32_t cc_val = abs_val & COUNTER_MAX;
    ece6:	f021 457f 	bic.w	r5, r1, #4278190080	; 0xff000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    ecea:	f504 3488 	add.w	r4, r4, #69632	; 0x11000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    ecee:	4087      	lsls	r7, r0
     return p_reg->COUNTER;
    ecf0:	f8d8 9504 	ldr.w	r9, [r8, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    ecf4:	eba3 0309 	sub.w	r3, r3, r9
    ecf8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    ecfc:	f029 427f 	bic.w	r2, r9, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
    ed00:	2b01      	cmp	r3, #1
    p_reg->CC[ch] = cc_val;
    ed02:	f8c6 2540 	str.w	r2, [r6, #1344]	; 0x540
    ed06:	d102      	bne.n	ed0e <set_absolute_alarm+0x4e>
	z_impl_k_busy_wait(usec_to_wait);
    ed08:	2013      	movs	r0, #19
    ed0a:	f004 f850 	bl	12dae <z_impl_k_busy_wait>
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    ed0e:	f109 0202 	add.w	r2, r9, #2
	return (a - b) & COUNTER_MAX;
    ed12:	1aab      	subs	r3, r5, r2
    ed14:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
			cc_val = now + 2;
    ed18:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
    ed1c:	bf88      	it	hi
    ed1e:	4615      	movhi	r5, r2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    ed20:	2300      	movs	r3, #0
    ed22:	6023      	str	r3, [r4, #0]
    ed24:	6823      	ldr	r3, [r4, #0]
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    ed26:	f8c8 7344 	str.w	r7, [r8, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    ed2a:	f025 437f 	bic.w	r3, r5, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    ed2e:	f8c6 3540 	str.w	r3, [r6, #1344]	; 0x540
     return p_reg->COUNTER;
    ed32:	f8d8 3504 	ldr.w	r3, [r8, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
    ed36:	4599      	cmp	r9, r3
    ed38:	d006      	beq.n	ed48 <set_absolute_alarm+0x88>
	return (a - b) & COUNTER_MAX;
    ed3a:	1aeb      	subs	r3, r5, r3
    ed3c:	3b02      	subs	r3, #2
    ed3e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	} while ((now2 != now) &&
    ed42:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
    ed46:	d801      	bhi.n	ed4c <set_absolute_alarm+0x8c>
}
    ed48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		prev_cc = cc_val;
    ed4c:	462b      	mov	r3, r5
    ed4e:	e7cf      	b.n	ecf0 <set_absolute_alarm+0x30>
    ed50:	40011000 	.word	0x40011000

0000ed54 <rtc_nrf_isr>:
 * probably better abstract that at some point (e.g. query and reset
 * it by pointer at runtime, maybe?) so we don't have this leaky
 * symbol.
 */
void rtc_nrf_isr(const void *arg)
{
    ed54:	b570      	push	{r4, r5, r6, lr}
    ed56:	4d15      	ldr	r5, [pc, #84]	; (edac <rtc_nrf_isr+0x58>)
    return p_reg->INTENSET & mask;
    ed58:	4c15      	ldr	r4, [pc, #84]	; (edb0 <rtc_nrf_isr+0x5c>)
	ARG_UNUSED(arg);

	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    ed5a:	2600      	movs	r6, #0
    ed5c:	682b      	ldr	r3, [r5, #0]
    ed5e:	2000      	movs	r0, #0
    ed60:	b106      	cbz	r6, ed64 <rtc_nrf_isr+0x10>
				handler(chan, cc_val,
					cc_data[chan].user_context);
			}
		}
	}
}
    ed62:	bd70      	pop	{r4, r5, r6, pc}
    ed64:	f8d4 2304 	ldr.w	r2, [r4, #772]	; 0x304
		if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan)) &&
    ed68:	03d2      	lsls	r2, r2, #15
    ed6a:	d5fa      	bpl.n	ed62 <rtc_nrf_isr+0xe>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    ed6c:	f8d4 2140 	ldr.w	r2, [r4, #320]	; 0x140
    ed70:	2a00      	cmp	r2, #0
    ed72:	d0f6      	beq.n	ed62 <rtc_nrf_isr+0xe>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    ed74:	f8c4 6140 	str.w	r6, [r4, #320]	; 0x140
    ed78:	f8d4 2140 	ldr.w	r2, [r4, #320]	; 0x140
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    ed7c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    ed80:	f8c4 2348 	str.w	r2, [r4, #840]	; 0x348
    return p_reg->CC[ch];
    ed84:	f8d4 1540 	ldr.w	r1, [r4, #1344]	; 0x540
     return p_reg->COUNTER;
    ed88:	f8d4 6504 	ldr.w	r6, [r4, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    ed8c:	1a72      	subs	r2, r6, r1
    ed8e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
				cc_val = now;
    ed92:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
    ed96:	bf88      	it	hi
    ed98:	4631      	movhi	r1, r6
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    ed9a:	2601      	movs	r6, #1
			if (handler) {
    ed9c:	b11b      	cbz	r3, eda6 <rtc_nrf_isr+0x52>
				handler(chan, cc_val,
    ed9e:	686a      	ldr	r2, [r5, #4]
    eda0:	6028      	str	r0, [r5, #0]
    eda2:	4798      	blx	r3
    eda4:	e7da      	b.n	ed5c <rtc_nrf_isr+0x8>
    eda6:	602b      	str	r3, [r5, #0]
}
    eda8:	e7db      	b.n	ed62 <rtc_nrf_isr+0xe>
    edaa:	bf00      	nop
    edac:	20000354 	.word	0x20000354
    edb0:	40011000 	.word	0x40011000

0000edb4 <sys_clock_driver_init>:

	atomic_or(&alloc_mask, BIT(chan));
}

int sys_clock_driver_init(const struct device *dev)
{
    edb4:	b538      	push	{r3, r4, r5, lr}
    p_reg->PRESCALER = val;
    edb6:	4c0f      	ldr	r4, [pc, #60]	; (edf4 <sys_clock_driver_init+0x40>)
    edb8:	2500      	movs	r5, #0
    p_reg->INTENSET = mask;
    edba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    p_reg->PRESCALER = val;
    edbe:	f8c4 5508 	str.w	r5, [r4, #1288]	; 0x508
    p_reg->INTENSET = mask;
    edc2:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    edc6:	4b0c      	ldr	r3, [pc, #48]	; (edf8 <sys_clock_driver_init+0x44>)
    edc8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    edcc:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
	}

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    edd0:	2101      	movs	r1, #1
    edd2:	462a      	mov	r2, r5
    edd4:	2011      	movs	r0, #17
    edd6:	f000 f8df 	bl	ef98 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    edda:	2011      	movs	r0, #17
    eddc:	f000 f8be 	bl	ef5c <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    ede0:	2301      	movs	r3, #1

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    ede2:	4a06      	ldr	r2, [pc, #24]	; (edfc <sys_clock_driver_init+0x48>)
    ede4:	60a3      	str	r3, [r4, #8]
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		compare_set(0, counter() + CYC_PER_TICK,
			    sys_clock_timeout_handler, NULL);
	}

	z_nrf_clock_control_lf_on(mode);
    ede6:	2002      	movs	r0, #2
    ede8:	6023      	str	r3, [r4, #0]
	int_mask = BIT_MASK(CHAN_COUNT);
    edea:	6013      	str	r3, [r2, #0]
	z_nrf_clock_control_lf_on(mode);
    edec:	f7ff fedc 	bl	eba8 <z_nrf_clock_control_lf_on>

	return 0;
}
    edf0:	4628      	mov	r0, r5
    edf2:	bd38      	pop	{r3, r4, r5, pc}
    edf4:	40011000 	.word	0x40011000
    edf8:	e000e100 	.word	0xe000e100
    edfc:	2000035c 	.word	0x2000035c

0000ee00 <sys_clock_set_timeout>:

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return;
	}

	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    ee00:	4a13      	ldr	r2, [pc, #76]	; (ee50 <sys_clock_set_timeout+0x50>)
    ee02:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    ee06:	bf14      	ite	ne
    ee08:	4603      	movne	r3, r0
    ee0a:	4613      	moveq	r3, r2
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    ee0c:	3b01      	subs	r3, #1
    ee0e:	2b00      	cmp	r3, #0
    ee10:	dd1c      	ble.n	ee4c <sys_clock_set_timeout+0x4c>
    ee12:	4293      	cmp	r3, r2
    ee14:	bfa8      	it	ge
    ee16:	4613      	movge	r3, r2
     return p_reg->COUNTER;
    ee18:	4a0e      	ldr	r2, [pc, #56]	; (ee54 <sys_clock_set_timeout+0x54>)
    ee1a:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504

	uint32_t unannounced = counter_sub(counter(), last_count);
    ee1e:	4a0e      	ldr	r2, [pc, #56]	; (ee58 <sys_clock_set_timeout+0x58>)
    ee20:	6811      	ldr	r1, [r2, #0]
	return (a - b) & COUNTER_MAX;
    ee22:	1a40      	subs	r0, r0, r1
	 * duration, then force an announce to avoid loss of a wrap
	 * event.  This can happen if new timeouts keep being set
	 * before the existing one triggers the interrupt.
	 */
	if (unannounced >= COUNTER_HALF_SPAN) {
		ticks = 0;
    ee24:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
	return (a - b) & COUNTER_MAX;
    ee28:	f020 427f 	bic.w	r2, r0, #4278190080	; 0xff000000
		ticks = 0;
    ee2c:	bf18      	it	ne
    ee2e:	2300      	movne	r3, #0
	}

	/* Get the cycles from last_count to the tick boundary after
	 * the requested ticks have passed starting now.
	 */
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    ee30:	3201      	adds	r2, #1
    ee32:	4413      	add	r3, r2
	cc_data[chan].callback = handler;
    ee34:	4a09      	ldr	r2, [pc, #36]	; (ee5c <sys_clock_set_timeout+0x5c>)
    ee36:	480a      	ldr	r0, [pc, #40]	; (ee60 <sys_clock_set_timeout+0x60>)
    ee38:	6010      	str	r0, [r2, #0]
	cc_data[chan].user_context = user_data;
    ee3a:	2000      	movs	r0, #0
    ee3c:	6050      	str	r0, [r2, #4]
	set_absolute_alarm(chan, cc_value);
    ee3e:	4a04      	ldr	r2, [pc, #16]	; (ee50 <sys_clock_set_timeout+0x50>)
    ee40:	4293      	cmp	r3, r2
    ee42:	bf94      	ite	ls
    ee44:	18c9      	addls	r1, r1, r3
    ee46:	1889      	addhi	r1, r1, r2
    ee48:	f7ff bf3a 	b.w	ecc0 <set_absolute_alarm>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    ee4c:	2300      	movs	r3, #0
    ee4e:	e7e3      	b.n	ee18 <sys_clock_set_timeout+0x18>
    ee50:	007fffff 	.word	0x007fffff
    ee54:	40011000 	.word	0x40011000
    ee58:	20000360 	.word	0x20000360
    ee5c:	20000354 	.word	0x20000354
    ee60:	0000eca9 	.word	0x0000eca9

0000ee64 <sys_clock_elapsed>:
    ee64:	4b04      	ldr	r3, [pc, #16]	; (ee78 <sys_clock_elapsed+0x14>)
    ee66:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
{
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	return counter_sub(counter(), last_count) / CYC_PER_TICK;
    ee6a:	4b04      	ldr	r3, [pc, #16]	; (ee7c <sys_clock_elapsed+0x18>)
	return (a - b) & COUNTER_MAX;
    ee6c:	681b      	ldr	r3, [r3, #0]
    ee6e:	1ac0      	subs	r0, r0, r3
}
    ee70:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    ee74:	4770      	bx	lr
    ee76:	bf00      	nop
    ee78:	40011000 	.word	0x40011000
    ee7c:	20000360 	.word	0x20000360

0000ee80 <sys_clock_cycle_get_32>:
	__asm__ volatile(
    ee80:	f04f 0320 	mov.w	r3, #32
    ee84:	f3ef 8211 	mrs	r2, BASEPRI
    ee88:	f383 8811 	msr	BASEPRI, r3
    ee8c:	f3bf 8f6f 	isb	sy

uint32_t sys_clock_cycle_get_32(void)
{
	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t ret = counter_sub(counter(), last_count) + last_count;
    ee90:	4906      	ldr	r1, [pc, #24]	; (eeac <sys_clock_cycle_get_32+0x2c>)
    ee92:	4b07      	ldr	r3, [pc, #28]	; (eeb0 <sys_clock_cycle_get_32+0x30>)
    ee94:	6808      	ldr	r0, [r1, #0]
    ee96:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	__asm__ volatile(
    ee9a:	f382 8811 	msr	BASEPRI, r2
    ee9e:	f3bf 8f6f 	isb	sy
	return (a - b) & COUNTER_MAX;
    eea2:	1a1b      	subs	r3, r3, r0
    eea4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000

	k_spin_unlock(&lock, key);
	return ret;
}
    eea8:	4418      	add	r0, r3
    eeaa:	4770      	bx	lr
    eeac:	20000360 	.word	0x20000360
    eeb0:	40011000 	.word	0x40011000

0000eeb4 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    eeb4:	4a09      	ldr	r2, [pc, #36]	; (eedc <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    eeb6:	490a      	ldr	r1, [pc, #40]	; (eee0 <arch_swap+0x2c>)
	_current->arch.basepri = key;
    eeb8:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    eeba:	6809      	ldr	r1, [r1, #0]
    eebc:	6799      	str	r1, [r3, #120]	; 0x78

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    eebe:	4909      	ldr	r1, [pc, #36]	; (eee4 <arch_swap+0x30>)
	_current->arch.basepri = key;
    eec0:	6758      	str	r0, [r3, #116]	; 0x74
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    eec2:	684b      	ldr	r3, [r1, #4]
    eec4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    eec8:	604b      	str	r3, [r1, #4]
    eeca:	2300      	movs	r3, #0
    eecc:	f383 8811 	msr	BASEPRI, r3
    eed0:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    eed4:	6893      	ldr	r3, [r2, #8]
}
    eed6:	6f98      	ldr	r0, [r3, #120]	; 0x78
    eed8:	4770      	bx	lr
    eeda:	bf00      	nop
    eedc:	200004b4 	.word	0x200004b4
    eee0:	0001321c 	.word	0x0001321c
    eee4:	e000ed00 	.word	0xe000ed00

0000eee8 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    eee8:	4912      	ldr	r1, [pc, #72]	; (ef34 <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
    eeea:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    eeec:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    eef0:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    eef2:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    eef6:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    eefa:	2020      	movs	r0, #32
    msr BASEPRI, r0
    eefc:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    ef00:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    ef04:	4f0c      	ldr	r7, [pc, #48]	; (ef38 <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    ef06:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    ef0a:	6a4a      	ldr	r2, [r1, #36]	; 0x24

    str r2, [r1, #_kernel_offset_to_current]
    ef0c:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    ef0e:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    ef10:	6f50      	ldr	r0, [r2, #116]	; 0x74
    movs r3, #0
    ef12:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    ef14:	6753      	str	r3, [r2, #116]	; 0x74
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    ef16:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
    ef1a:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    ef1c:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    ef1e:	f000 fbff 	bl	f720 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    ef22:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    ef26:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    ef2a:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    ef2e:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    ef32:	4770      	bx	lr
    ldr r1, =_kernel
    ef34:	200004b4 	.word	0x200004b4
    ldr v4, =_SCS_ICSR
    ef38:	e000ed04 	.word	0xe000ed04

0000ef3c <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
    ef3c:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    ef40:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    ef42:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    ef46:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    ef4a:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    ef4c:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    ef50:	2902      	cmp	r1, #2
    beq _oops
    ef52:	d0ff      	beq.n	ef54 <_oops>

0000ef54 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    ef54:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    ef56:	f003 fbd0 	bl	126fa <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    ef5a:	bd01      	pop	{r0, pc}

0000ef5c <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    ef5c:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    ef5e:	2b00      	cmp	r3, #0
    ef60:	db08      	blt.n	ef74 <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    ef62:	2201      	movs	r2, #1
    ef64:	f000 001f 	and.w	r0, r0, #31
    ef68:	fa02 f000 	lsl.w	r0, r2, r0
    ef6c:	095b      	lsrs	r3, r3, #5
    ef6e:	4a02      	ldr	r2, [pc, #8]	; (ef78 <arch_irq_enable+0x1c>)
    ef70:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    ef74:	4770      	bx	lr
    ef76:	bf00      	nop
    ef78:	e000e100 	.word	0xe000e100

0000ef7c <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    ef7c:	4b05      	ldr	r3, [pc, #20]	; (ef94 <arch_irq_is_enabled+0x18>)
    ef7e:	0942      	lsrs	r2, r0, #5
    ef80:	f000 001f 	and.w	r0, r0, #31
    ef84:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    ef88:	2301      	movs	r3, #1
    ef8a:	fa03 f000 	lsl.w	r0, r3, r0
}
    ef8e:	4010      	ands	r0, r2
    ef90:	4770      	bx	lr
    ef92:	bf00      	nop
    ef94:	e000e100 	.word	0xe000e100

0000ef98 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    ef98:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    ef9a:	2b00      	cmp	r3, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    ef9c:	bfa8      	it	ge
    ef9e:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
		prio += _IRQ_PRIO_OFFSET;
    efa2:	f101 0101 	add.w	r1, r1, #1
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    efa6:	bfb8      	it	lt
    efa8:	4b06      	ldrlt	r3, [pc, #24]	; (efc4 <z_arm_irq_priority_set+0x2c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    efaa:	ea4f 1141 	mov.w	r1, r1, lsl #5
    efae:	bfac      	ite	ge
    efb0:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    efb4:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    efb8:	b2c9      	uxtb	r1, r1
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    efba:	bfb4      	ite	lt
    efbc:	5419      	strblt	r1, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    efbe:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
}
    efc2:	4770      	bx	lr
    efc4:	e000ed14 	.word	0xe000ed14

0000efc8 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    efc8:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    efcc:	9b00      	ldr	r3, [sp, #0]
    efce:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
    efd2:	490a      	ldr	r1, [pc, #40]	; (effc <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
    efd4:	9b01      	ldr	r3, [sp, #4]
    efd6:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    efda:	9b02      	ldr	r3, [sp, #8]
    efdc:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
    efe0:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    efe4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    efe8:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
    efec:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    eff0:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    eff2:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    eff4:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    eff6:	6743      	str	r3, [r0, #116]	; 0x74
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    eff8:	4770      	bx	lr
    effa:	bf00      	nop
    effc:	00011c5b 	.word	0x00011c5b

0000f000 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
    f000:	4a09      	ldr	r2, [pc, #36]	; (f028 <z_check_thread_stack_fail+0x28>)
{
    f002:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
    f004:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
    f006:	b170      	cbz	r0, f026 <z_check_thread_stack_fail+0x26>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    f008:	f113 0f16 	cmn.w	r3, #22
    f00c:	6e40      	ldr	r0, [r0, #100]	; 0x64
    f00e:	d005      	beq.n	f01c <z_check_thread_stack_fail+0x1c>
    f010:	f1a0 0220 	sub.w	r2, r0, #32
    f014:	429a      	cmp	r2, r3
    f016:	d805      	bhi.n	f024 <z_check_thread_stack_fail+0x24>
    f018:	4283      	cmp	r3, r0
    f01a:	d203      	bcs.n	f024 <z_check_thread_stack_fail+0x24>
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
    f01c:	4281      	cmp	r1, r0
    f01e:	bf28      	it	cs
    f020:	2000      	movcs	r0, #0
    f022:	4770      	bx	lr
    f024:	2000      	movs	r0, #0
}
    f026:	4770      	bx	lr
    f028:	200004b4 	.word	0x200004b4

0000f02c <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    f02c:	b508      	push	{r3, lr}
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    f02e:	4b09      	ldr	r3, [pc, #36]	; (f054 <arch_switch_to_main_thread+0x28>)
    f030:	6098      	str	r0, [r3, #8]
{
    f032:	460d      	mov	r5, r1
    f034:	4614      	mov	r4, r2
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    f036:	f000 fb73 	bl	f720 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    f03a:	4620      	mov	r0, r4
    f03c:	f385 8809 	msr	PSP, r5
    f040:	2100      	movs	r1, #0
    f042:	b663      	cpsie	if
    f044:	f381 8811 	msr	BASEPRI, r1
    f048:	f3bf 8f6f 	isb	sy
    f04c:	2200      	movs	r2, #0
    f04e:	2300      	movs	r3, #0
    f050:	f002 fe03 	bl	11c5a <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    f054:	200004b4 	.word	0x200004b4

0000f058 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    f058:	4901      	ldr	r1, [pc, #4]	; (f060 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    f05a:	2210      	movs	r2, #16
	str	r2, [r1]
    f05c:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    f05e:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    f060:	e000ed10 	.word	0xe000ed10

0000f064 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    f064:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    f066:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    f068:	f380 8811 	msr	BASEPRI, r0
	isb
    f06c:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    f070:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    f074:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    f076:	b662      	cpsie	i
	isb
    f078:	f3bf 8f6f 	isb	sy

	bx	lr
    f07c:	4770      	bx	lr
    f07e:	bf00      	nop

0000f080 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    f080:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    f082:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    f084:	f381 8811 	msr	BASEPRI, r1

	wfe
    f088:	bf20      	wfe

	msr	BASEPRI, r0
    f08a:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    f08e:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    f090:	4770      	bx	lr
    f092:	bf00      	nop

0000f094 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    f094:	b573      	push	{r0, r1, r4, r5, r6, lr}
    f096:	4606      	mov	r6, r0

	if (esf != NULL) {
    f098:	460c      	mov	r4, r1
    f09a:	b301      	cbz	r1, f0de <z_arm_fatal_error+0x4a>
    f09c:	4b13      	ldr	r3, [pc, #76]	; (f0ec <z_arm_fatal_error+0x58>)
    f09e:	4d14      	ldr	r5, [pc, #80]	; (f0f0 <z_arm_fatal_error+0x5c>)
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    f0a0:	4814      	ldr	r0, [pc, #80]	; (f0f4 <z_arm_fatal_error+0x60>)
    f0a2:	1aed      	subs	r5, r5, r3
    f0a4:	08ed      	lsrs	r5, r5, #3
    f0a6:	01ad      	lsls	r5, r5, #6
    f0a8:	f045 0501 	orr.w	r5, r5, #1
    f0ac:	f8ad 5000 	strh.w	r5, [sp]
    f0b0:	e9d1 2301 	ldrd	r2, r3, [r1, #4]
    f0b4:	6809      	ldr	r1, [r1, #0]
    f0b6:	f002 feb4 	bl	11e22 <log_3>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    f0ba:	f8ad 5000 	strh.w	r5, [sp]
    f0be:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    f0c2:	68e1      	ldr	r1, [r4, #12]
    f0c4:	480c      	ldr	r0, [pc, #48]	; (f0f8 <z_arm_fatal_error+0x64>)
    f0c6:	f002 feac 	bl	11e22 <log_3>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    f0ca:	69e1      	ldr	r1, [r4, #28]
    f0cc:	480b      	ldr	r0, [pc, #44]	; (f0fc <z_arm_fatal_error+0x68>)
    f0ce:	462a      	mov	r2, r5
    f0d0:	f002 fe7a 	bl	11dc8 <log_1>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    f0d4:	69a1      	ldr	r1, [r4, #24]
    f0d6:	480a      	ldr	r0, [pc, #40]	; (f100 <z_arm_fatal_error+0x6c>)
    f0d8:	462a      	mov	r2, r5
    f0da:	f002 fe75 	bl	11dc8 <log_1>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    f0de:	4621      	mov	r1, r4
    f0e0:	4630      	mov	r0, r6
}
    f0e2:	b002      	add	sp, #8
    f0e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_fatal_error(reason, esf);
    f0e8:	f001 bc6e 	b.w	109c8 <z_fatal_error>
    f0ec:	00013014 	.word	0x00013014
    f0f0:	00013044 	.word	0x00013044
    f0f4:	0001381f 	.word	0x0001381f
    f0f8:	0001384e 	.word	0x0001384e
    f0fc:	0001387d 	.word	0x0001387d
    f100:	0001388c 	.word	0x0001388c

0000f104 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    f104:	bf30      	wfi
    b z_SysNmiOnReset
    f106:	f7ff bffd 	b.w	f104 <z_SysNmiOnReset>
    f10a:	bf00      	nop

0000f10c <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    f10c:	4a0b      	ldr	r2, [pc, #44]	; (f13c <z_arm_prep_c+0x30>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
    f10e:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    f110:	4b0b      	ldr	r3, [pc, #44]	; (f140 <z_arm_prep_c+0x34>)
    f112:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    f116:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    f118:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    f11c:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    f120:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    f124:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    f128:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    f12c:	f001 fcaa 	bl	10a84 <z_bss_zero>
	z_data_copy();
    f130:	f002 fac0 	bl	116b4 <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    f134:	f000 faca 	bl	f6cc <z_arm_interrupt_init>
	z_cstart();
    f138:	f001 fcc8 	bl	10acc <z_cstart>
    f13c:	0000c200 	.word	0x0000c200
    f140:	e000ed00 	.word	0xe000ed00

0000f144 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    f144:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    f146:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    f148:	4a0b      	ldr	r2, [pc, #44]	; (f178 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    f14a:	6a10      	ldr	r0, [r2, #32]
	cmp r0, #0
    f14c:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    f14e:	bf1e      	ittt	ne
	movne	r1, #0
    f150:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    f152:	6211      	strne	r1, [r2, #32]
		blne	z_pm_save_idle_exit
    f154:	f003 fcfe 	blne	12b54 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    f158:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    f15a:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    f15e:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    f162:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    f166:	4905      	ldr	r1, [pc, #20]	; (f17c <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    f168:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    f16a:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    f16c:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    f16e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    f172:	4903      	ldr	r1, [pc, #12]	; (f180 <_isr_wrapper+0x3c>)
	bx r1
    f174:	4708      	bx	r1
    f176:	0000      	.short	0x0000
	ldr r2, =_kernel
    f178:	200004b4 	.word	0x200004b4
	ldr r1, =_sw_isr_table
    f17c:	00012edc 	.word	0x00012edc
	ldr r1, =z_arm_int_exit
    f180:	0000f629 	.word	0x0000f629

0000f184 <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    f184:	2000      	movs	r0, #0
    msr CONTROL, r0
    f186:	f380 8814 	msr	CONTROL, r0
    isb
    f18a:	f3bf 8f6f 	isb	sy
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
    f18e:	f003 fe3b 	bl	12e08 <z_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    f192:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    f194:	490d      	ldr	r1, [pc, #52]	; (f1cc <__start+0x48>)
    str r0, [r1]
    f196:	6008      	str	r0, [r1, #0]
    dsb
    f198:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    f19c:	480c      	ldr	r0, [pc, #48]	; (f1d0 <__start+0x4c>)
    msr msp, r0
    f19e:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    f1a2:	f000 fa61 	bl	f668 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    f1a6:	2020      	movs	r0, #32
    msr BASEPRI, r0
    f1a8:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    f1ac:	4809      	ldr	r0, [pc, #36]	; (f1d4 <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    f1ae:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
    f1b2:	1840      	adds	r0, r0, r1
    msr PSP, r0
    f1b4:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    f1b8:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    f1bc:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    f1be:	4308      	orrs	r0, r1
    msr CONTROL, r0
    f1c0:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    f1c4:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    f1c8:	f7ff ffa0 	bl	f10c <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
    f1cc:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    f1d0:	20001040 	.word	0x20001040
    ldr r0, =z_interrupt_stacks
    f1d4:	200011c0 	.word	0x200011c0

0000f1d8 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    f1d8:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    f1dc:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    f1e0:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    f1e2:	4672      	mov	r2, lr
	bl z_arm_fault
    f1e4:	f000 f94e 	bl	f484 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    f1e8:	bd01      	pop	{r0, pc}
    f1ea:	bf00      	nop

0000f1ec <mem_manage_fault>:
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
			      bool *recoverable)
{
    f1ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    f1f0:	4b35      	ldr	r3, [pc, #212]	; (f2c8 <mem_manage_fault+0xdc>)
    f1f2:	4c36      	ldr	r4, [pc, #216]	; (f2cc <mem_manage_fault+0xe0>)
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    f1f4:	4d36      	ldr	r5, [pc, #216]	; (f2d0 <mem_manage_fault+0xe4>)
    f1f6:	1ae4      	subs	r4, r4, r3
    f1f8:	08e4      	lsrs	r4, r4, #3
	PR_FAULT_INFO("***** MPU FAULT *****");
    f1fa:	01a4      	lsls	r4, r4, #6
    f1fc:	f044 0901 	orr.w	r9, r4, #1
{
    f200:	4607      	mov	r7, r0
    f202:	4688      	mov	r8, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
    f204:	4833      	ldr	r0, [pc, #204]	; (f2d4 <mem_manage_fault+0xe8>)
    f206:	4649      	mov	r1, r9
{
    f208:	4616      	mov	r6, r2
	PR_FAULT_INFO("***** MPU FAULT *****");
    f20a:	f002 fdd0 	bl	11dae <log_0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    f20e:	6aab      	ldr	r3, [r5, #40]	; 0x28
    f210:	06db      	lsls	r3, r3, #27
    f212:	d503      	bpl.n	f21c <mem_manage_fault+0x30>
		PR_FAULT_INFO("  Stacking error (context area might be"
    f214:	4830      	ldr	r0, [pc, #192]	; (f2d8 <mem_manage_fault+0xec>)
    f216:	4649      	mov	r1, r9
    f218:	f002 fdc9 	bl	11dae <log_0>
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    f21c:	6aab      	ldr	r3, [r5, #40]	; 0x28
    f21e:	0718      	lsls	r0, r3, #28
    f220:	d504      	bpl.n	f22c <mem_manage_fault+0x40>
		PR_FAULT_INFO("  Unstacking error");
    f222:	482e      	ldr	r0, [pc, #184]	; (f2dc <mem_manage_fault+0xf0>)
    f224:	f044 0101 	orr.w	r1, r4, #1
    f228:	f002 fdc1 	bl	11dae <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    f22c:	4d28      	ldr	r5, [pc, #160]	; (f2d0 <mem_manage_fault+0xe4>)
    f22e:	6aab      	ldr	r3, [r5, #40]	; 0x28
    f230:	0799      	lsls	r1, r3, #30
    f232:	d423      	bmi.n	f27c <mem_manage_fault+0x90>
	uint32_t mmfar = -EINVAL;
    f234:	f06f 0915 	mvn.w	r9, #21
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    f238:	4d25      	ldr	r5, [pc, #148]	; (f2d0 <mem_manage_fault+0xe4>)
    f23a:	6aab      	ldr	r3, [r5, #40]	; 0x28
    f23c:	07db      	lsls	r3, r3, #31
    f23e:	d504      	bpl.n	f24a <mem_manage_fault+0x5e>
		PR_FAULT_INFO("  Instruction Access Violation");
    f240:	4827      	ldr	r0, [pc, #156]	; (f2e0 <mem_manage_fault+0xf4>)
    f242:	f044 0101 	orr.w	r1, r4, #1
    f246:	f002 fdb2 	bl	11dae <log_0>
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    f24a:	6aab      	ldr	r3, [r5, #40]	; 0x28
    f24c:	0698      	lsls	r0, r3, #26
    f24e:	d504      	bpl.n	f25a <mem_manage_fault+0x6e>
		PR_FAULT_INFO(
    f250:	4824      	ldr	r0, [pc, #144]	; (f2e4 <mem_manage_fault+0xf8>)
    f252:	f044 0101 	orr.w	r1, r4, #1
    f256:	f002 fdaa 	bl	11dae <log_0>
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    f25a:	4b1d      	ldr	r3, [pc, #116]	; (f2d0 <mem_manage_fault+0xe4>)
    f25c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    f25e:	06d1      	lsls	r1, r2, #27
    f260:	d424      	bmi.n	f2ac <mem_manage_fault+0xc0>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    f262:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    f264:	0792      	lsls	r2, r2, #30
    f266:	d421      	bmi.n	f2ac <mem_manage_fault+0xc0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    f268:	2000      	movs	r0, #0
		"without stack guard, user-mode or null-pointer detection\n");
#endif /* CONFIG_MPU_STACK_GUARD || CONFIG_USERSPACE */
	}

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    f26a:	4a19      	ldr	r2, [pc, #100]	; (f2d0 <mem_manage_fault+0xe4>)
    f26c:	6a93      	ldr	r3, [r2, #40]	; 0x28
    f26e:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    f272:	6293      	str	r3, [r2, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
    f274:	2300      	movs	r3, #0
    f276:	7033      	strb	r3, [r6, #0]

	return reason;
}
    f278:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		PR_FAULT_INFO("  Data Access Violation");
    f27c:	f044 0a01 	orr.w	sl, r4, #1
    f280:	4819      	ldr	r0, [pc, #100]	; (f2e8 <mem_manage_fault+0xfc>)
    f282:	4651      	mov	r1, sl
    f284:	f002 fd93 	bl	11dae <log_0>
		uint32_t temp = SCB->MMFAR;
    f288:	f8d5 9034 	ldr.w	r9, [r5, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    f28c:	6aab      	ldr	r3, [r5, #40]	; 0x28
    f28e:	061a      	lsls	r2, r3, #24
    f290:	d5d0      	bpl.n	f234 <mem_manage_fault+0x48>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    f292:	4816      	ldr	r0, [pc, #88]	; (f2ec <mem_manage_fault+0x100>)
    f294:	4652      	mov	r2, sl
    f296:	4649      	mov	r1, r9
    f298:	f002 fd96 	bl	11dc8 <log_1>
			if (from_hard_fault != 0) {
    f29c:	f1b8 0f00 	cmp.w	r8, #0
    f2a0:	d0ca      	beq.n	f238 <mem_manage_fault+0x4c>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    f2a2:	6aab      	ldr	r3, [r5, #40]	; 0x28
    f2a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    f2a8:	62ab      	str	r3, [r5, #40]	; 0x28
    f2aa:	e7c5      	b.n	f238 <mem_manage_fault+0x4c>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
    f2ac:	685b      	ldr	r3, [r3, #4]
    f2ae:	051b      	lsls	r3, r3, #20
    f2b0:	d5da      	bpl.n	f268 <mem_manage_fault+0x7c>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
    f2b2:	4639      	mov	r1, r7
    f2b4:	4648      	mov	r0, r9
    f2b6:	f7ff fea3 	bl	f000 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
    f2ba:	2800      	cmp	r0, #0
    f2bc:	d0d4      	beq.n	f268 <mem_manage_fault+0x7c>
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    f2be:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
    f2c2:	2002      	movs	r0, #2
    f2c4:	e7d1      	b.n	f26a <mem_manage_fault+0x7e>
    f2c6:	bf00      	nop
    f2c8:	00013014 	.word	0x00013014
    f2cc:	00013044 	.word	0x00013044
    f2d0:	e000ed00 	.word	0xe000ed00
    f2d4:	000138ba 	.word	0x000138ba
    f2d8:	000138d0 	.word	0x000138d0
    f2dc:	00013903 	.word	0x00013903
    f2e0:	00013944 	.word	0x00013944
    f2e4:	00013963 	.word	0x00013963
    f2e8:	00013916 	.word	0x00013916
    f2ec:	0001392e 	.word	0x0001392e

0000f2f0 <usage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
    f2f0:	b570      	push	{r4, r5, r6, lr}
    f2f2:	4b23      	ldr	r3, [pc, #140]	; (f380 <usage_fault.constprop.0+0x90>)
    f2f4:	4c23      	ldr	r4, [pc, #140]	; (f384 <usage_fault.constprop.0+0x94>)
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    f2f6:	4d24      	ldr	r5, [pc, #144]	; (f388 <usage_fault.constprop.0+0x98>)
	PR_FAULT_INFO("***** USAGE FAULT *****");
    f2f8:	4824      	ldr	r0, [pc, #144]	; (f38c <usage_fault.constprop.0+0x9c>)
    f2fa:	1ae4      	subs	r4, r4, r3
    f2fc:	08e4      	lsrs	r4, r4, #3
    f2fe:	01a4      	lsls	r4, r4, #6
    f300:	f044 0601 	orr.w	r6, r4, #1
    f304:	4631      	mov	r1, r6
    f306:	f002 fd52 	bl	11dae <log_0>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    f30a:	6aab      	ldr	r3, [r5, #40]	; 0x28
    f30c:	019b      	lsls	r3, r3, #6
    f30e:	d503      	bpl.n	f318 <usage_fault.constprop.0+0x28>
		PR_FAULT_INFO("  Division by zero");
    f310:	481f      	ldr	r0, [pc, #124]	; (f390 <usage_fault.constprop.0+0xa0>)
    f312:	4631      	mov	r1, r6
    f314:	f002 fd4b 	bl	11dae <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    f318:	6aab      	ldr	r3, [r5, #40]	; 0x28
    f31a:	01dd      	lsls	r5, r3, #7
    f31c:	d504      	bpl.n	f328 <usage_fault.constprop.0+0x38>
		PR_FAULT_INFO("  Unaligned memory access");
    f31e:	481d      	ldr	r0, [pc, #116]	; (f394 <usage_fault.constprop.0+0xa4>)
    f320:	f044 0101 	orr.w	r1, r4, #1
    f324:	f002 fd43 	bl	11dae <log_0>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    f328:	4d17      	ldr	r5, [pc, #92]	; (f388 <usage_fault.constprop.0+0x98>)
    f32a:	6aab      	ldr	r3, [r5, #40]	; 0x28
    f32c:	0318      	lsls	r0, r3, #12
    f32e:	d504      	bpl.n	f33a <usage_fault.constprop.0+0x4a>
		PR_FAULT_INFO("  No coprocessor instructions");
    f330:	4819      	ldr	r0, [pc, #100]	; (f398 <usage_fault.constprop.0+0xa8>)
    f332:	f044 0101 	orr.w	r1, r4, #1
    f336:	f002 fd3a 	bl	11dae <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    f33a:	6aab      	ldr	r3, [r5, #40]	; 0x28
    f33c:	0359      	lsls	r1, r3, #13
    f33e:	d504      	bpl.n	f34a <usage_fault.constprop.0+0x5a>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    f340:	4816      	ldr	r0, [pc, #88]	; (f39c <usage_fault.constprop.0+0xac>)
    f342:	f044 0101 	orr.w	r1, r4, #1
    f346:	f002 fd32 	bl	11dae <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    f34a:	4d0f      	ldr	r5, [pc, #60]	; (f388 <usage_fault.constprop.0+0x98>)
    f34c:	6aab      	ldr	r3, [r5, #40]	; 0x28
    f34e:	039a      	lsls	r2, r3, #14
    f350:	d504      	bpl.n	f35c <usage_fault.constprop.0+0x6c>
		PR_FAULT_INFO("  Illegal use of the EPSR");
    f352:	4813      	ldr	r0, [pc, #76]	; (f3a0 <usage_fault.constprop.0+0xb0>)
    f354:	f044 0101 	orr.w	r1, r4, #1
    f358:	f002 fd29 	bl	11dae <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    f35c:	6aab      	ldr	r3, [r5, #40]	; 0x28
    f35e:	03db      	lsls	r3, r3, #15
    f360:	d504      	bpl.n	f36c <usage_fault.constprop.0+0x7c>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    f362:	4810      	ldr	r0, [pc, #64]	; (f3a4 <usage_fault.constprop.0+0xb4>)
    f364:	f044 0101 	orr.w	r1, r4, #1
    f368:	f002 fd21 	bl	11dae <log_0>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    f36c:	4a06      	ldr	r2, [pc, #24]	; (f388 <usage_fault.constprop.0+0x98>)
    f36e:	6a93      	ldr	r3, [r2, #40]	; 0x28
    f370:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    f374:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    f378:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
    f37a:	2000      	movs	r0, #0
    f37c:	bd70      	pop	{r4, r5, r6, pc}
    f37e:	bf00      	nop
    f380:	00013014 	.word	0x00013014
    f384:	00013044 	.word	0x00013044
    f388:	e000ed00 	.word	0xe000ed00
    f38c:	00013992 	.word	0x00013992
    f390:	000139aa 	.word	0x000139aa
    f394:	000139bd 	.word	0x000139bd
    f398:	000139d7 	.word	0x000139d7
    f39c:	000139f5 	.word	0x000139f5
    f3a0:	00013a1a 	.word	0x00013a1a
    f3a4:	00013a34 	.word	0x00013a34

0000f3a8 <bus_fault.constprop.0>:
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    f3a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f3ac:	4b2a      	ldr	r3, [pc, #168]	; (f458 <bus_fault.constprop.0+0xb0>)
    f3ae:	4c2b      	ldr	r4, [pc, #172]	; (f45c <bus_fault.constprop.0+0xb4>)
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    f3b0:	4d2b      	ldr	r5, [pc, #172]	; (f460 <bus_fault.constprop.0+0xb8>)
    f3b2:	1ae4      	subs	r4, r4, r3
    f3b4:	08e4      	lsrs	r4, r4, #3
	PR_FAULT_INFO("***** BUS FAULT *****");
    f3b6:	01a4      	lsls	r4, r4, #6
    f3b8:	f044 0801 	orr.w	r8, r4, #1
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    f3bc:	4607      	mov	r7, r0
    f3be:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
    f3c0:	4828      	ldr	r0, [pc, #160]	; (f464 <bus_fault.constprop.0+0xbc>)
    f3c2:	4641      	mov	r1, r8
    f3c4:	f002 fcf3 	bl	11dae <log_0>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    f3c8:	6aab      	ldr	r3, [r5, #40]	; 0x28
    f3ca:	04d9      	lsls	r1, r3, #19
    f3cc:	d503      	bpl.n	f3d6 <bus_fault.constprop.0+0x2e>
		PR_FAULT_INFO("  Stacking error");
    f3ce:	4826      	ldr	r0, [pc, #152]	; (f468 <bus_fault.constprop.0+0xc0>)
    f3d0:	4641      	mov	r1, r8
    f3d2:	f002 fcec 	bl	11dae <log_0>
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    f3d6:	6aab      	ldr	r3, [r5, #40]	; 0x28
    f3d8:	051a      	lsls	r2, r3, #20
    f3da:	d504      	bpl.n	f3e6 <bus_fault.constprop.0+0x3e>
		PR_FAULT_INFO("  Unstacking error");
    f3dc:	4823      	ldr	r0, [pc, #140]	; (f46c <bus_fault.constprop.0+0xc4>)
    f3de:	f044 0101 	orr.w	r1, r4, #1
    f3e2:	f002 fce4 	bl	11dae <log_0>
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    f3e6:	4d1e      	ldr	r5, [pc, #120]	; (f460 <bus_fault.constprop.0+0xb8>)
    f3e8:	6aab      	ldr	r3, [r5, #40]	; 0x28
    f3ea:	059b      	lsls	r3, r3, #22
    f3ec:	d512      	bpl.n	f414 <bus_fault.constprop.0+0x6c>
		PR_FAULT_INFO("  Precise data bus error");
    f3ee:	f044 0801 	orr.w	r8, r4, #1
    f3f2:	481f      	ldr	r0, [pc, #124]	; (f470 <bus_fault.constprop.0+0xc8>)
    f3f4:	4641      	mov	r1, r8
    f3f6:	f002 fcda 	bl	11dae <log_0>
		STORE_xFAR(bfar, SCB->BFAR);
    f3fa:	6ba9      	ldr	r1, [r5, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    f3fc:	6aab      	ldr	r3, [r5, #40]	; 0x28
    f3fe:	0418      	lsls	r0, r3, #16
    f400:	d508      	bpl.n	f414 <bus_fault.constprop.0+0x6c>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    f402:	481c      	ldr	r0, [pc, #112]	; (f474 <bus_fault.constprop.0+0xcc>)
    f404:	4642      	mov	r2, r8
    f406:	f002 fcdf 	bl	11dc8 <log_1>
			if (from_hard_fault != 0) {
    f40a:	b11f      	cbz	r7, f414 <bus_fault.constprop.0+0x6c>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    f40c:	6aab      	ldr	r3, [r5, #40]	; 0x28
    f40e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    f412:	62ab      	str	r3, [r5, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    f414:	4d12      	ldr	r5, [pc, #72]	; (f460 <bus_fault.constprop.0+0xb8>)
    f416:	6aab      	ldr	r3, [r5, #40]	; 0x28
    f418:	0559      	lsls	r1, r3, #21
    f41a:	d504      	bpl.n	f426 <bus_fault.constprop.0+0x7e>
		PR_FAULT_INFO("  Imprecise data bus error");
    f41c:	4816      	ldr	r0, [pc, #88]	; (f478 <bus_fault.constprop.0+0xd0>)
    f41e:	f044 0101 	orr.w	r1, r4, #1
    f422:	f002 fcc4 	bl	11dae <log_0>
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    f426:	6aab      	ldr	r3, [r5, #40]	; 0x28
    f428:	05da      	lsls	r2, r3, #23
    f42a:	d50d      	bpl.n	f448 <bus_fault.constprop.0+0xa0>
		PR_FAULT_INFO("  Instruction bus error");
    f42c:	4813      	ldr	r0, [pc, #76]	; (f47c <bus_fault.constprop.0+0xd4>)
    f42e:	f044 0101 	orr.w	r1, r4, #1
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    f432:	f002 fcbc 	bl	11dae <log_0>
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    f436:	4a0a      	ldr	r2, [pc, #40]	; (f460 <bus_fault.constprop.0+0xb8>)
    f438:	6a93      	ldr	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    f43a:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    f43c:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    f440:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    f442:	7030      	strb	r0, [r6, #0]
}
    f444:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    f448:	6aab      	ldr	r3, [r5, #40]	; 0x28
    f44a:	049b      	lsls	r3, r3, #18
    f44c:	d5f3      	bpl.n	f436 <bus_fault.constprop.0+0x8e>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    f44e:	480c      	ldr	r0, [pc, #48]	; (f480 <bus_fault.constprop.0+0xd8>)
    f450:	f044 0101 	orr.w	r1, r4, #1
    f454:	e7ed      	b.n	f432 <bus_fault.constprop.0+0x8a>
    f456:	bf00      	nop
    f458:	00013014 	.word	0x00013014
    f45c:	00013044 	.word	0x00013044
    f460:	e000ed00 	.word	0xe000ed00
    f464:	00013a5f 	.word	0x00013a5f
    f468:	00013a75 	.word	0x00013a75
    f46c:	00013903 	.word	0x00013903
    f470:	00013a86 	.word	0x00013a86
    f474:	00013a9f 	.word	0x00013a9f
    f478:	00013ab4 	.word	0x00013ab4
    f47c:	00013acf 	.word	0x00013acf
    f480:	00013963 	.word	0x00013963

0000f484 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    f484:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    f488:	4b58      	ldr	r3, [pc, #352]	; (f5ec <z_arm_fault+0x168>)
    f48a:	685e      	ldr	r6, [r3, #4]
{
    f48c:	b08b      	sub	sp, #44	; 0x2c
    f48e:	460f      	mov	r7, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    f490:	f3c6 0408 	ubfx	r4, r6, #0, #9
    f494:	2500      	movs	r5, #0
    f496:	f385 8811 	msr	BASEPRI, r5
    f49a:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    f49e:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    f4a2:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    f4a6:	d10d      	bne.n	f4c4 <z_arm_fault+0x40>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    f4a8:	f002 030c 	and.w	r3, r2, #12
    f4ac:	2b08      	cmp	r3, #8
    f4ae:	d10b      	bne.n	f4c8 <z_arm_fault+0x44>
    f4b0:	494f      	ldr	r1, [pc, #316]	; (f5f0 <z_arm_fault+0x16c>)
    f4b2:	4b50      	ldr	r3, [pc, #320]	; (f5f4 <z_arm_fault+0x170>)
		PR_EXC("SPSEL in thread mode does not indicate PSP");
    f4b4:	4850      	ldr	r0, [pc, #320]	; (f5f8 <z_arm_fault+0x174>)
    f4b6:	1ac9      	subs	r1, r1, r3
    f4b8:	08c9      	lsrs	r1, r1, #3
    f4ba:	0189      	lsls	r1, r1, #6
    f4bc:	f041 0101 	orr.w	r1, r1, #1
    f4c0:	f002 fc75 	bl	11dae <log_0>
		return NULL;
    f4c4:	462f      	mov	r7, r5
    f4c6:	e003      	b.n	f4d0 <z_arm_fault+0x4c>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    f4c8:	0712      	lsls	r2, r2, #28
    f4ca:	d401      	bmi.n	f4d0 <z_arm_fault+0x4c>
			ptr_esf = (z_arch_esf_t *)msp;
    f4cc:	4607      	mov	r7, r0
			*nested_exc = true;
    f4ce:	2501      	movs	r5, #1
	*recoverable = false;
    f4d0:	2300      	movs	r3, #0
    f4d2:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (fault) {
    f4d6:	1ee3      	subs	r3, r4, #3
    f4d8:	2b09      	cmp	r3, #9
    f4da:	d86e      	bhi.n	f5ba <z_arm_fault+0x136>
    f4dc:	e8df f003 	tbb	[pc, r3]
    f4e0:	40605c05 	.word	0x40605c05
    f4e4:	6d6d6d6d 	.word	0x6d6d6d6d
    f4e8:	646d      	.short	0x646d
    f4ea:	4b42      	ldr	r3, [pc, #264]	; (f5f4 <z_arm_fault+0x170>)
    f4ec:	4e40      	ldr	r6, [pc, #256]	; (f5f0 <z_arm_fault+0x16c>)
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    f4ee:	f8df 80fc 	ldr.w	r8, [pc, #252]	; f5ec <z_arm_fault+0x168>
	PR_FAULT_INFO("***** HARD FAULT *****");
    f4f2:	4842      	ldr	r0, [pc, #264]	; (f5fc <z_arm_fault+0x178>)
    f4f4:	1af6      	subs	r6, r6, r3
    f4f6:	08f6      	lsrs	r6, r6, #3
    f4f8:	01b6      	lsls	r6, r6, #6
    f4fa:	f046 0601 	orr.w	r6, r6, #1
    f4fe:	4631      	mov	r1, r6
    f500:	f002 fc55 	bl	11dae <log_0>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    f504:	f8d8 402c 	ldr.w	r4, [r8, #44]	; 0x2c
	*recoverable = false;
    f508:	f04f 0900 	mov.w	r9, #0
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    f50c:	f014 0402 	ands.w	r4, r4, #2
	*recoverable = false;
    f510:	f88d 9007 	strb.w	r9, [sp, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    f514:	d005      	beq.n	f522 <z_arm_fault+0x9e>
		PR_EXC("  Bus fault on vector table read");
    f516:	483a      	ldr	r0, [pc, #232]	; (f600 <z_arm_fault+0x17c>)
    f518:	4631      	mov	r1, r6
	PR_FAULT_INFO(
    f51a:	f002 fc48 	bl	11dae <log_0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    f51e:	2400      	movs	r4, #0
}
    f520:	e021      	b.n	f566 <z_arm_fault+0xe2>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    f522:	f8d8 302c 	ldr.w	r3, [r8, #44]	; 0x2c
    f526:	005b      	lsls	r3, r3, #1
    f528:	d51d      	bpl.n	f566 <z_arm_fault+0xe2>
		PR_EXC("  Fault escalation (see below)");
    f52a:	4836      	ldr	r0, [pc, #216]	; (f604 <z_arm_fault+0x180>)
    f52c:	4631      	mov	r1, r6
    f52e:	f002 fc3e 	bl	11dae <log_0>
		if (SCB_MMFSR != 0) {
    f532:	f898 3028 	ldrb.w	r3, [r8, #40]	; 0x28
    f536:	b133      	cbz	r3, f546 <z_arm_fault+0xc2>
			reason = mem_manage_fault(esf, 1, recoverable);
    f538:	f10d 0207 	add.w	r2, sp, #7
    f53c:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
    f53e:	4638      	mov	r0, r7
    f540:	f7ff fe54 	bl	f1ec <mem_manage_fault>
    f544:	e00e      	b.n	f564 <z_arm_fault+0xe0>
		} else if (SCB_BFSR != 0) {
    f546:	f898 3029 	ldrb.w	r3, [r8, #41]	; 0x29
    f54a:	b12b      	cbz	r3, f558 <z_arm_fault+0xd4>
			reason = bus_fault(esf, 1, recoverable);
    f54c:	f10d 0107 	add.w	r1, sp, #7
    f550:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
    f552:	f7ff ff29 	bl	f3a8 <bus_fault.constprop.0>
    f556:	e005      	b.n	f564 <z_arm_fault+0xe0>
		} else if (SCB_UFSR != 0) {
    f558:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
    f55c:	b29b      	uxth	r3, r3
    f55e:	b113      	cbz	r3, f566 <z_arm_fault+0xe2>
			reason = usage_fault(esf);
    f560:	f7ff fec6 	bl	f2f0 <usage_fault.constprop.0>
    f564:	4604      	mov	r4, r0
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    f566:	f89d 3007 	ldrb.w	r3, [sp, #7]
    f56a:	b993      	cbnz	r3, f592 <z_arm_fault+0x10e>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    f56c:	2220      	movs	r2, #32
    f56e:	4639      	mov	r1, r7
    f570:	a802      	add	r0, sp, #8
    f572:	f003 f916 	bl	127a2 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    f576:	9b09      	ldr	r3, [sp, #36]	; 0x24
    f578:	b39d      	cbz	r5, f5e2 <z_arm_fault+0x15e>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    f57a:	f3c3 0208 	ubfx	r2, r3, #0, #9
    f57e:	b922      	cbnz	r2, f58a <z_arm_fault+0x106>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    f580:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    f584:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    f588:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    f58a:	a902      	add	r1, sp, #8
    f58c:	4620      	mov	r0, r4
    f58e:	f7ff fd81 	bl	f094 <z_arm_fatal_error>
}
    f592:	b00b      	add	sp, #44	; 0x2c
    f594:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
    f598:	f10d 0207 	add.w	r2, sp, #7
    f59c:	2100      	movs	r1, #0
    f59e:	e7ce      	b.n	f53e <z_arm_fault+0xba>
		reason = bus_fault(esf, 0, recoverable);
    f5a0:	f10d 0107 	add.w	r1, sp, #7
    f5a4:	2000      	movs	r0, #0
    f5a6:	e7d4      	b.n	f552 <z_arm_fault+0xce>
    f5a8:	4911      	ldr	r1, [pc, #68]	; (f5f0 <z_arm_fault+0x16c>)
    f5aa:	4b12      	ldr	r3, [pc, #72]	; (f5f4 <z_arm_fault+0x170>)
	PR_FAULT_INFO(
    f5ac:	4816      	ldr	r0, [pc, #88]	; (f608 <z_arm_fault+0x184>)
    f5ae:	1ac9      	subs	r1, r1, r3
    f5b0:	08c9      	lsrs	r1, r1, #3
    f5b2:	0189      	lsls	r1, r1, #6
    f5b4:	f041 0101 	orr.w	r1, r1, #1
    f5b8:	e7af      	b.n	f51a <z_arm_fault+0x96>
    f5ba:	4a0e      	ldr	r2, [pc, #56]	; (f5f4 <z_arm_fault+0x170>)
    f5bc:	4b0c      	ldr	r3, [pc, #48]	; (f5f0 <z_arm_fault+0x16c>)
	PR_FAULT_INFO("***** %s %d) *****",
    f5be:	4813      	ldr	r0, [pc, #76]	; (f60c <z_arm_fault+0x188>)
    f5c0:	4913      	ldr	r1, [pc, #76]	; (f610 <z_arm_fault+0x18c>)
    f5c2:	1a9b      	subs	r3, r3, r2
    f5c4:	08db      	lsrs	r3, r3, #3
    f5c6:	f416 7ff8 	tst.w	r6, #496	; 0x1f0
    f5ca:	ea4f 1383 	mov.w	r3, r3, lsl #6
    f5ce:	bf18      	it	ne
    f5d0:	4601      	movne	r1, r0
    f5d2:	f043 0301 	orr.w	r3, r3, #1
    f5d6:	480f      	ldr	r0, [pc, #60]	; (f614 <z_arm_fault+0x190>)
    f5d8:	f1a4 0210 	sub.w	r2, r4, #16
    f5dc:	f002 fc08 	bl	11df0 <log_2>
    f5e0:	e79d      	b.n	f51e <z_arm_fault+0x9a>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    f5e2:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    f5e6:	f023 0301 	bic.w	r3, r3, #1
    f5ea:	e7cd      	b.n	f588 <z_arm_fault+0x104>
    f5ec:	e000ed00 	.word	0xe000ed00
    f5f0:	00013044 	.word	0x00013044
    f5f4:	00013014 	.word	0x00013014
    f5f8:	00013ae7 	.word	0x00013ae7
    f5fc:	00013b12 	.word	0x00013b12
    f600:	00013b29 	.word	0x00013b29
    f604:	00013b4a 	.word	0x00013b4a
    f608:	00013b69 	.word	0x00013b69
    f60c:	00013ba2 	.word	0x00013ba2
    f610:	00013b8d 	.word	0x00013b8d
    f614:	00013bbb 	.word	0x00013bbb

0000f618 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    f618:	4a02      	ldr	r2, [pc, #8]	; (f624 <z_arm_fault_init+0xc>)
    f61a:	6953      	ldr	r3, [r2, #20]
    f61c:	f043 0310 	orr.w	r3, r3, #16
    f620:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    f622:	4770      	bx	lr
    f624:	e000ed00 	.word	0xe000ed00

0000f628 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    f628:	4b04      	ldr	r3, [pc, #16]	; (f63c <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    f62a:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    f62c:	6a58      	ldr	r0, [r3, #36]	; 0x24
	cmp r0, r1
    f62e:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    f630:	d003      	beq.n	f63a <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    f632:	4903      	ldr	r1, [pc, #12]	; (f640 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    f634:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    f638:	600a      	str	r2, [r1, #0]

0000f63a <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    f63a:	4770      	bx	lr
	ldr r3, =_kernel
    f63c:	200004b4 	.word	0x200004b4
	ldr r1, =_SCS_ICSR
    f640:	e000ed04 	.word	0xe000ed04

0000f644 <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    f644:	4907      	ldr	r1, [pc, #28]	; (f664 <z_arm_clear_arm_mpu_config+0x20>)
    f646:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90

	for (i = 0; i < num_regions; i++) {
    f64a:	2300      	movs	r3, #0
	int num_regions =
    f64c:	f3c2 2207 	ubfx	r2, r2, #8, #8
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
  MPU->RASR = 0U;
    f650:	4618      	mov	r0, r3
	for (i = 0; i < num_regions; i++) {
    f652:	4293      	cmp	r3, r2
    f654:	d100      	bne.n	f658 <z_arm_clear_arm_mpu_config+0x14>
		ARM_MPU_ClrRegion(i);
	}
}
    f656:	4770      	bx	lr
  MPU->RNR = rnr;
    f658:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
  MPU->RASR = 0U;
    f65c:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	for (i = 0; i < num_regions; i++) {
    f660:	3301      	adds	r3, #1
    f662:	e7f6      	b.n	f652 <z_arm_clear_arm_mpu_config+0xe>
    f664:	e000ed00 	.word	0xe000ed00

0000f668 <z_arm_init_arch_hw_at_boot>:
 * components and core registers.
 *
 * @return N/A
 */
void z_arm_init_arch_hw_at_boot(void)
{
    f668:	b508      	push	{r3, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    f66a:	b672      	cpsid	i
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    f66c:	2300      	movs	r3, #0
    f66e:	f383 8813 	msr	FAULTMASK, r3

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    f672:	f7ff ffe7 	bl	f644 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
    f676:	4b14      	ldr	r3, [pc, #80]	; (f6c8 <z_arm_init_arch_hw_at_boot+0x60>)
    f678:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    f67c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    f680:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    f684:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    f688:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    f68c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    f690:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    f694:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    f698:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
    f69c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    f6a0:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    f6a4:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
    f6a8:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
    f6ac:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    f6b0:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
    f6b4:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
    f6b8:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
  __ASM volatile ("cpsie i" : : : "memory");
    f6bc:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    f6be:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    f6c2:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    f6c6:	bd08      	pop	{r3, pc}
    f6c8:	e000e100 	.word	0xe000e100

0000f6cc <z_arm_interrupt_init>:
    f6cc:	4804      	ldr	r0, [pc, #16]	; (f6e0 <z_arm_interrupt_init+0x14>)
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    f6ce:	2300      	movs	r3, #0
    f6d0:	2120      	movs	r1, #32
    f6d2:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    f6d4:	3301      	adds	r3, #1
    f6d6:	2b27      	cmp	r3, #39	; 0x27
    f6d8:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    f6dc:	d1f9      	bne.n	f6d2 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    f6de:	4770      	bx	lr
    f6e0:	e000e100 	.word	0xe000e100

0000f6e4 <z_impl_k_thread_abort>:
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
    f6e4:	4b06      	ldr	r3, [pc, #24]	; (f700 <z_impl_k_thread_abort+0x1c>)
    f6e6:	689b      	ldr	r3, [r3, #8]
    f6e8:	4283      	cmp	r3, r0
    f6ea:	d107      	bne.n	f6fc <z_impl_k_thread_abort+0x18>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    f6ec:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    f6f0:	b123      	cbz	r3, f6fc <z_impl_k_thread_abort+0x18>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    f6f2:	4a04      	ldr	r2, [pc, #16]	; (f704 <z_impl_k_thread_abort+0x20>)
    f6f4:	6853      	ldr	r3, [r2, #4]
    f6f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    f6fa:	6053      	str	r3, [r2, #4]
		}
	}

	z_thread_abort(thread);
    f6fc:	f001 bf88 	b.w	11610 <z_thread_abort>
    f700:	200004b4 	.word	0x200004b4
    f704:	e000ed00 	.word	0xe000ed00

0000f708 <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    f708:	4b02      	ldr	r3, [pc, #8]	; (f714 <z_arm_configure_static_mpu_regions+0xc>)
    f70a:	4a03      	ldr	r2, [pc, #12]	; (f718 <z_arm_configure_static_mpu_regions+0x10>)
    f70c:	4803      	ldr	r0, [pc, #12]	; (f71c <z_arm_configure_static_mpu_regions+0x14>)
    f70e:	2101      	movs	r1, #1
    f710:	f000 b88c 	b.w	f82c <arm_core_mpu_configure_static_mpu_regions>
    f714:	20010000 	.word	0x20010000
    f718:	20000000 	.word	0x20000000
    f71c:	00013170 	.word	0x00013170

0000f720 <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
    f720:	6e42      	ldr	r2, [r0, #100]	; 0x64
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
    f722:	4b05      	ldr	r3, [pc, #20]	; (f738 <z_arm_configure_dynamic_mpu_regions+0x18>)
		guard_start = thread->stack_info.start - guard_size;
    f724:	3a20      	subs	r2, #32
	dynamic_regions[region_num].start = guard_start;
    f726:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
    f728:	4a04      	ldr	r2, [pc, #16]	; (f73c <z_arm_configure_dynamic_mpu_regions+0x1c>)
    f72a:	2120      	movs	r1, #32
    f72c:	e9c3 1201 	strd	r1, r2, [r3, #4]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
    f730:	4618      	mov	r0, r3
    f732:	2101      	movs	r1, #1
    f734:	f000 b884 	b.w	f840 <arm_core_mpu_configure_dynamic_mpu_regions>
    f738:	20000364 	.word	0x20000364
    f73c:	150b0000 	.word	0x150b0000

0000f740 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    f740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
	/* Select the region you want to access */
	MPU->RNR = index;
    f742:	4f2a      	ldr	r7, [pc, #168]	; (f7ec <mpu_configure_regions+0xac>)
    f744:	460e      	mov	r6, r1
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    f746:	2100      	movs	r1, #0
    f748:	42b1      	cmp	r1, r6
    f74a:	da14      	bge.n	f776 <mpu_configure_regions+0x36>
		if (regions[i].size == 0U) {
    f74c:	6844      	ldr	r4, [r0, #4]
    f74e:	2c00      	cmp	r4, #0
    f750:	d048      	beq.n	f7e4 <mpu_configure_regions+0xa4>
			continue;
		}
		/* Non-empty region. */

		if (do_sanity_check &&
    f752:	b1c3      	cbz	r3, f786 <mpu_configure_regions+0x46>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
    f754:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
    f758:	ea14 0f0c 	tst.w	r4, ip
    f75c:	d00d      	beq.n	f77a <mpu_configure_regions+0x3a>
    f75e:	4a24      	ldr	r2, [pc, #144]	; (f7f0 <mpu_configure_regions+0xb0>)
    f760:	4b24      	ldr	r3, [pc, #144]	; (f7f4 <mpu_configure_regions+0xb4>)
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
    f762:	4825      	ldr	r0, [pc, #148]	; (f7f8 <mpu_configure_regions+0xb8>)
    f764:	1ad2      	subs	r2, r2, r3
    f766:	08d2      	lsrs	r2, r2, #3
    f768:	0192      	lsls	r2, r2, #6
    f76a:	f042 0201 	orr.w	r2, r2, #1
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    f76e:	f002 fb2b 	bl	11dc8 <log_1>
			return -EINVAL;
		}

		reg_index = mpu_configure_region(reg_index, &regions[i]);
    f772:	f06f 0215 	mvn.w	r2, #21
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
    f776:	4610      	mov	r0, r2
    f778:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		&&
    f77a:	2c1f      	cmp	r4, #31
    f77c:	d9ef      	bls.n	f75e <mpu_configure_regions+0x1e>
		((part->start & (part->size - 1U)) == 0U);
    f77e:	6805      	ldr	r5, [r0, #0]
		&&
    f780:	ea1c 0f05 	tst.w	ip, r5
    f784:	d1eb      	bne.n	f75e <mpu_configure_regions+0x1e>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
    f786:	2c20      	cmp	r4, #32
		reg_index = mpu_configure_region(reg_index, &regions[i]);
    f788:	b2d5      	uxtb	r5, r2
	/* in ARMv7-M MPU the base address is not required
	 * to determine region attributes
	 */
	(void) base;

	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    f78a:	f8d0 c008 	ldr.w	ip, [r0, #8]
	region_conf.base = new_region->start;
    f78e:	6802      	ldr	r2, [r0, #0]
	if (size <= 32U) {
    f790:	d916      	bls.n	f7c0 <mpu_configure_regions+0x80>
	if (size > (1UL << 31)) {
    f792:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    f796:	d815      	bhi.n	f7c4 <mpu_configure_regions+0x84>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    f798:	3c01      	subs	r4, #1
    f79a:	fab4 f484 	clz	r4, r4
    f79e:	f1c4 041f 	rsb	r4, r4, #31
    f7a2:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
    f7a4:	2d07      	cmp	r5, #7
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    f7a6:	ea4c 0404 	orr.w	r4, ip, r4
    f7aa:	d90d      	bls.n	f7c8 <mpu_configure_regions+0x88>
    f7ac:	4a10      	ldr	r2, [pc, #64]	; (f7f0 <mpu_configure_regions+0xb0>)
    f7ae:	4b11      	ldr	r3, [pc, #68]	; (f7f4 <mpu_configure_regions+0xb4>)
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    f7b0:	4812      	ldr	r0, [pc, #72]	; (f7fc <mpu_configure_regions+0xbc>)
    f7b2:	1ad2      	subs	r2, r2, r3
    f7b4:	08d2      	lsrs	r2, r2, #3
    f7b6:	0192      	lsls	r2, r2, #6
    f7b8:	f042 0201 	orr.w	r2, r2, #1
    f7bc:	4629      	mov	r1, r5
    f7be:	e7d6      	b.n	f76e <mpu_configure_regions+0x2e>
		return REGION_32B;
    f7c0:	2408      	movs	r4, #8
    f7c2:	e7ef      	b.n	f7a4 <mpu_configure_regions+0x64>
		return REGION_4G;
    f7c4:	243e      	movs	r4, #62	; 0x3e
    f7c6:	e7ed      	b.n	f7a4 <mpu_configure_regions+0x64>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    f7c8:	f022 021f 	bic.w	r2, r2, #31
				| MPU_RBAR_VALID_Msk | index;
    f7cc:	432a      	orrs	r2, r5
    f7ce:	f042 0210 	orr.w	r2, r2, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    f7d2:	f044 0401 	orr.w	r4, r4, #1
	MPU->RNR = index;
    f7d6:	f8c7 5098 	str.w	r5, [r7, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    f7da:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    f7de:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
		reg_index++;
    f7e2:	1c6a      	adds	r2, r5, #1
	for (i = 0; i < regions_num; i++) {
    f7e4:	3101      	adds	r1, #1
    f7e6:	300c      	adds	r0, #12
    f7e8:	e7ae      	b.n	f748 <mpu_configure_regions+0x8>
    f7ea:	bf00      	nop
    f7ec:	e000ed00 	.word	0xe000ed00
    f7f0:	0001303c 	.word	0x0001303c
    f7f4:	00013014 	.word	0x00013014
    f7f8:	00013bd2 	.word	0x00013bd2
    f7fc:	00013bf5 	.word	0x00013bf5

0000f800 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    f800:	4b04      	ldr	r3, [pc, #16]	; (f814 <arm_core_mpu_enable+0x14>)
    f802:	2205      	movs	r2, #5
    f804:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    f808:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    f80c:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    f810:	4770      	bx	lr
    f812:	bf00      	nop
    f814:	e000ed00 	.word	0xe000ed00

0000f818 <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    f818:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    f81c:	4b02      	ldr	r3, [pc, #8]	; (f828 <arm_core_mpu_disable+0x10>)
    f81e:	2200      	movs	r2, #0
    f820:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    f824:	4770      	bx	lr
    f826:	bf00      	nop
    f828:	e000ed00 	.word	0xe000ed00

0000f82c <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    f82c:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    f82e:	4c03      	ldr	r4, [pc, #12]	; (f83c <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    f830:	2301      	movs	r3, #1
    f832:	7822      	ldrb	r2, [r4, #0]
    f834:	f7ff ff84 	bl	f740 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    f838:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
    f83a:	bd10      	pop	{r4, pc}
    f83c:	2000050a 	.word	0x2000050a

0000f840 <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
    f840:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    f842:	4a09      	ldr	r2, [pc, #36]	; (f868 <arm_core_mpu_configure_dynamic_mpu_regions+0x28>)
    f844:	2300      	movs	r3, #0
    f846:	7812      	ldrb	r2, [r2, #0]
    f848:	f7ff ff7a 	bl	f740 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    f84c:	f110 0f16 	cmn.w	r0, #22
    f850:	d003      	beq.n	f85a <arm_core_mpu_configure_dynamic_mpu_regions+0x1a>
  MPU->RNR = rnr;
    f852:	4b06      	ldr	r3, [pc, #24]	; (f86c <arm_core_mpu_configure_dynamic_mpu_regions+0x2c>)
  MPU->RASR = 0U;
    f854:	2200      	movs	r2, #0

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    f856:	2807      	cmp	r0, #7
    f858:	dd00      	ble.n	f85c <arm_core_mpu_configure_dynamic_mpu_regions+0x1c>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
    f85a:	bd08      	pop	{r3, pc}
  MPU->RNR = rnr;
    f85c:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
  MPU->RASR = 0U;
    f860:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    f864:	3001      	adds	r0, #1
    f866:	e7f6      	b.n	f856 <arm_core_mpu_configure_dynamic_mpu_regions+0x16>
    f868:	2000050a 	.word	0x2000050a
    f86c:	e000ed00 	.word	0xe000ed00

0000f870 <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    f870:	4914      	ldr	r1, [pc, #80]	; (f8c4 <z_arm_mpu_init+0x54>)
    f872:	6808      	ldr	r0, [r1, #0]
    f874:	2808      	cmp	r0, #8
{
    f876:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
    f878:	d821      	bhi.n	f8be <z_arm_mpu_init+0x4e>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    f87a:	f7ff ffcd 	bl	f818 <arm_core_mpu_disable>
	MPU->RNR = index;
    f87e:	4c12      	ldr	r4, [pc, #72]	; (f8c8 <z_arm_mpu_init+0x58>)
    f880:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    f882:	2200      	movs	r2, #0
    f884:	4290      	cmp	r0, r2
    f886:	f101 010c 	add.w	r1, r1, #12
    f88a:	d105      	bne.n	f898 <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    f88c:	4b0f      	ldr	r3, [pc, #60]	; (f8cc <z_arm_mpu_init+0x5c>)
    f88e:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
    f890:	f7ff ffb6 	bl	f800 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    f894:	2000      	movs	r0, #0
}
    f896:	bd10      	pop	{r4, pc}
    f898:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    f89c:	f851 3c0c 	ldr.w	r3, [r1, #-12]
    f8a0:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    f8a4:	4313      	orrs	r3, r2
    f8a6:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    f8aa:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    f8ae:	f851 3c04 	ldr.w	r3, [r1, #-4]
    f8b2:	f043 0301 	orr.w	r3, r3, #1
    f8b6:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    f8ba:	3201      	adds	r2, #1
    f8bc:	e7e2      	b.n	f884 <z_arm_mpu_init+0x14>
		return -1;
    f8be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    f8c2:	e7e8      	b.n	f896 <z_arm_mpu_init+0x26>
    f8c4:	0001317c 	.word	0x0001317c
    f8c8:	e000ed00 	.word	0xe000ed00
    f8cc:	2000050a 	.word	0x2000050a

0000f8d0 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    f8d0:	4b01      	ldr	r3, [pc, #4]	; (f8d8 <__stdout_hook_install+0x8>)
    f8d2:	6018      	str	r0, [r3, #0]
}
    f8d4:	4770      	bx	lr
    f8d6:	bf00      	nop
    f8d8:	2000000c 	.word	0x2000000c

0000f8dc <nordicsemi_nrf52_init>:
	__asm__ volatile(
    f8dc:	f04f 0320 	mov.w	r3, #32
    f8e0:	f3ef 8211 	mrs	r2, BASEPRI
    f8e4:	f383 8811 	msr	BASEPRI, r3
    f8e8:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    f8ec:	4906      	ldr	r1, [pc, #24]	; (f908 <nordicsemi_nrf52_init+0x2c>)
    f8ee:	2301      	movs	r3, #1
    f8f0:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    f8f4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    f8f8:	f8c1 3578 	str.w	r3, [r1, #1400]	; 0x578
	__asm__ volatile(
    f8fc:	f382 8811 	msr	BASEPRI, r2
    f900:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    f904:	2000      	movs	r0, #0
    f906:	4770      	bx	lr
    f908:	4001e000 	.word	0x4001e000

0000f90c <sys_arch_reboot>:
    *p_gpregret = val;
    f90c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    f910:	b2c0      	uxtb	r0, r0
    f912:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
    f916:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    f91a:	4905      	ldr	r1, [pc, #20]	; (f930 <sys_arch_reboot+0x24>)
    f91c:	4b05      	ldr	r3, [pc, #20]	; (f934 <sys_arch_reboot+0x28>)
    f91e:	68ca      	ldr	r2, [r1, #12]
    f920:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    f924:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    f926:	60cb      	str	r3, [r1, #12]
    f928:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    f92c:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    f92e:	e7fd      	b.n	f92c <sys_arch_reboot+0x20>
    f930:	e000ed00 	.word	0xe000ed00
    f934:	05fa0004 	.word	0x05fa0004

0000f938 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    f938:	b120      	cbz	r0, f944 <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    f93a:	4b03      	ldr	r3, [pc, #12]	; (f948 <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    f93c:	0180      	lsls	r0, r0, #6
    f93e:	f043 0301 	orr.w	r3, r3, #1
    f942:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    f944:	4770      	bx	lr
    f946:	bf00      	nop
    f948:	000130b0 	.word	0x000130b0

0000f94c <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    f94c:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
    f94e:	4b09      	ldr	r3, [pc, #36]	; (f974 <gpio_nrfx_init+0x28>)
    f950:	781a      	ldrb	r2, [r3, #0]
    f952:	b96a      	cbnz	r2, f970 <gpio_nrfx_init+0x24>
		gpio_initialized = true;
    f954:	2101      	movs	r1, #1
    f956:	7019      	strb	r1, [r3, #0]
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    f958:	2006      	movs	r0, #6
    f95a:	2105      	movs	r1, #5
    f95c:	f7ff fb1c 	bl	ef98 <z_arm_irq_priority_set>
			    gpiote_event_handler, NULL, 0);

		irq_enable(DT_IRQN(GPIOTE_NODE));
    f960:	2006      	movs	r0, #6
    f962:	f7ff fafb 	bl	ef5c <arch_irq_enable>
    return ((uint32_t)p_reg + event);
}

NRF_STATIC_INLINE void nrf_gpiote_int_enable(NRF_GPIOTE_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
    f966:	4b04      	ldr	r3, [pc, #16]	; (f978 <gpio_nrfx_init+0x2c>)
    f968:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    f96c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		nrf_gpiote_int_enable(NRF_GPIOTE, NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
    f970:	2000      	movs	r0, #0
    f972:	bd08      	pop	{r3, pc}
    f974:	2000050b 	.word	0x2000050b
    f978:	40006000 	.word	0x40006000

0000f97c <gpio_nrfx_pin_interrupt_configure>:
{
    f97c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    f97e:	4617      	mov	r7, r2
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    f980:	6842      	ldr	r2, [r0, #4]
	return port->data;
    f982:	6906      	ldr	r6, [r0, #16]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    f984:	7a12      	ldrb	r2, [r2, #8]
    f986:	f001 041f 	and.w	r4, r1, #31
	if (!IS_ENABLED(CONFIG_GPIO_NRF_INT_EDGE_USING_SENSE) &&
    f98a:	f5b7 3fa0 	cmp.w	r7, #81920	; 0x14000
{
    f98e:	460d      	mov	r5, r1
    f990:	ea44 1442 	orr.w	r4, r4, r2, lsl #5
	if (!IS_ENABLED(CONFIG_GPIO_NRF_INT_EDGE_USING_SENSE) &&
    f994:	d10c      	bne.n	f9b0 <gpio_nrfx_pin_interrupt_configure+0x34>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
    f996:	f004 021f 	and.w	r2, r4, #31
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    f99a:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
    f99e:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    f9a2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    f9a6:	07d0      	lsls	r0, r2, #31
    f9a8:	d507      	bpl.n	f9ba <gpio_nrfx_pin_interrupt_configure+0x3e>
		return -ENOTSUP;
    f9aa:	f06f 0085 	mvn.w	r0, #133	; 0x85
    f9ae:	e09a      	b.n	fae6 <gpio_nrfx_pin_interrupt_configure+0x16a>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
    f9b0:	f5b7 5f00 	cmp.w	r7, #8192	; 0x2000
    f9b4:	68f1      	ldr	r1, [r6, #12]
    f9b6:	f000 8098 	beq.w	faea <gpio_nrfx_pin_interrupt_configure+0x16e>
    f9ba:	68f2      	ldr	r2, [r6, #12]
    f9bc:	2101      	movs	r1, #1
    f9be:	40a9      	lsls	r1, r5
    f9c0:	4311      	orrs	r1, r2
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
    f9c2:	6972      	ldr	r2, [r6, #20]
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
    f9c4:	60f1      	str	r1, [r6, #12]
    f9c6:	2101      	movs	r1, #1
    f9c8:	40a9      	lsls	r1, r5
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
    f9ca:	f5b7 3fa0 	cmp.w	r7, #81920	; 0x14000
    f9ce:	bf0c      	ite	eq
    f9d0:	430a      	orreq	r2, r1
    f9d2:	438a      	bicne	r2, r1
    f9d4:	6172      	str	r2, [r6, #20]
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
    f9d6:	69b2      	ldr	r2, [r6, #24]
    f9d8:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
    f9dc:	bf0c      	ite	eq
    f9de:	430a      	orreq	r2, r1
    f9e0:	438a      	bicne	r2, r1
    f9e2:	61b2      	str	r2, [r6, #24]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
    f9e4:	6932      	ldr	r2, [r6, #16]
    f9e6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
    f9ea:	bf0c      	ite	eq
    f9ec:	4311      	orreq	r1, r2
    f9ee:	ea22 0101 	bicne.w	r1, r2, r1
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_int_enable_check(NRF_GPIOTE_Type const * p_reg, uint32_t mask)
{
    return p_reg->INTENSET & mask;
    f9f2:	4a4a      	ldr	r2, [pc, #296]	; (fb1c <gpio_nrfx_pin_interrupt_configure+0x1a0>)
    f9f4:	6131      	str	r1, [r6, #16]
    f9f6:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    f9fa:	2000      	movs	r0, #0
    f9fc:	b2db      	uxtb	r3, r3
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    f9fe:	f500 71a2 	add.w	r1, r0, #324	; 0x144
    fa02:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
    fa06:	f3c1 2104 	ubfx	r1, r1, #8, #5
		if ((nrf_gpiote_event_pin_get(NRF_GPIOTE, i) == abs_pin)
    fa0a:	428c      	cmp	r4, r1
    fa0c:	d172      	bne.n	faf4 <gpio_nrfx_pin_interrupt_configure+0x178>
		    && (intenset & BIT(i))) {
    fa0e:	fa23 f100 	lsr.w	r1, r3, r0
    fa12:	07c9      	lsls	r1, r1, #31
    fa14:	d56e      	bpl.n	faf4 <gpio_nrfx_pin_interrupt_configure+0x178>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
    fa16:	0083      	lsls	r3, r0, #2
    fa18:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    fa1c:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    fa20:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
    fa24:	f021 0101 	bic.w	r1, r1, #1
    fa28:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
			nrf_gpiote_int_disable(NRF_GPIOTE, BIT(i));
    fa2c:	2301      	movs	r3, #1
    fa2e:	4083      	lsls	r3, r0
    p_reg->INTENCLR = mask;
    fa30:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
			nrfx_gpiote_channel_free(i);
    fa34:	b2c0      	uxtb	r0, r0
    fa36:	f000 fe31 	bl	1069c <nrfx_gpiote_channel_free>
	nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
    fa3a:	4620      	mov	r0, r4
    fa3c:	2100      	movs	r1, #0
    fa3e:	f002 fee5 	bl	1280c <nrf_gpio_cfg_sense_set>
	if (data->pin_int_en & BIT(pin)) {
    fa42:	68f0      	ldr	r0, [r6, #12]
    fa44:	40e8      	lsrs	r0, r5
    fa46:	f010 0001 	ands.w	r0, r0, #1
    fa4a:	d04c      	beq.n	fae6 <gpio_nrfx_pin_interrupt_configure+0x16a>
		if (data->trig_edge & BIT(pin)) {
    fa4c:	6970      	ldr	r0, [r6, #20]
    fa4e:	40e8      	lsrs	r0, r5
    fa50:	f010 0201 	ands.w	r2, r0, #1
    fa54:	d055      	beq.n	fb02 <gpio_nrfx_pin_interrupt_configure+0x186>
				if (data->double_edge & BIT(pin)) {
    fa56:	69b3      	ldr	r3, [r6, #24]
    fa58:	40eb      	lsrs	r3, r5
    fa5a:	07db      	lsls	r3, r3, #31
				} else if ((data->int_active_level & BIT(pin)) != 0U) {
    fa5c:	bf5f      	itttt	pl
    fa5e:	6931      	ldrpl	r1, [r6, #16]
    fa60:	fa21 f505 	lsrpl.w	r5, r1, r5
    fa64:	f005 0501 	andpl.w	r5, r5, #1
    fa68:	f1c5 0502 	rsbpl	r5, r5, #2
	if (nrfx_gpiote_channel_alloc(&channel) != NRFX_SUCCESS) {
    fa6c:	f10d 0007 	add.w	r0, sp, #7
				} else if ((data->int_active_level & BIT(pin)) != 0U) {
    fa70:	bf54      	ite	pl
    fa72:	b2ed      	uxtbpl	r5, r5
					pol = NRF_GPIOTE_POLARITY_TOGGLE;
    fa74:	2503      	movmi	r5, #3
	if (nrfx_gpiote_channel_alloc(&channel) != NRFX_SUCCESS) {
    fa76:	f000 fe31 	bl	106dc <nrfx_gpiote_channel_alloc>
    fa7a:	4b29      	ldr	r3, [pc, #164]	; (fb20 <gpio_nrfx_pin_interrupt_configure+0x1a4>)
    fa7c:	4298      	cmp	r0, r3
    fa7e:	d13d      	bne.n	fafc <gpio_nrfx_pin_interrupt_configure+0x180>
	nrf_gpiote_event_t evt = offsetof(NRF_GPIOTE_Type, EVENTS_IN[channel]);
    fa80:	f89d 2007 	ldrb.w	r2, [sp, #7]
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    fa84:	0093      	lsls	r3, r2, #2
    fa86:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    fa8a:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    fa8e:	0224      	lsls	r4, r4, #8
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    fa90:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
    fa94:	f421 3147 	bic.w	r1, r1, #203776	; 0x31c00
    fa98:	f421 7140 	bic.w	r1, r1, #768	; 0x300
    fa9c:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    faa0:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
    faa4:	f404 54f8 	and.w	r4, r4, #7936	; 0x1f00
    faa8:	430c      	orrs	r4, r1
    faaa:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
    faae:	f8c3 5510 	str.w	r5, [r3, #1296]	; 0x510
    return ((uint32_t)p_reg + event);
    fab2:	0093      	lsls	r3, r2, #2
    fab4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    fab8:	f503 43c2 	add.w	r3, r3, #24832	; 0x6100
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    fabc:	2000      	movs	r0, #0
    fabe:	6018      	str	r0, [r3, #0]
	nrf_gpiote_event_enable(NRF_GPIOTE, channel);
    fac0:	f89d 1007 	ldrb.w	r1, [sp, #7]
    fac4:	681b      	ldr	r3, [r3, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    fac6:	008b      	lsls	r3, r1, #2
    fac8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    facc:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    fad0:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    fad4:	f042 0201 	orr.w	r2, r2, #1
    fad8:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
    p_reg->INTENSET = mask;
    fadc:	4a0f      	ldr	r2, [pc, #60]	; (fb1c <gpio_nrfx_pin_interrupt_configure+0x1a0>)
	nrf_gpiote_int_enable(NRF_GPIOTE, BIT(channel));
    fade:	2301      	movs	r3, #1
    fae0:	408b      	lsls	r3, r1
    fae2:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    fae6:	b003      	add	sp, #12
    fae8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
    faea:	2201      	movs	r2, #1
    faec:	40aa      	lsls	r2, r5
    faee:	ea21 0102 	bic.w	r1, r1, r2
    faf2:	e766      	b.n	f9c2 <gpio_nrfx_pin_interrupt_configure+0x46>
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    faf4:	3001      	adds	r0, #1
    faf6:	2808      	cmp	r0, #8
    faf8:	d181      	bne.n	f9fe <gpio_nrfx_pin_interrupt_configure+0x82>
    fafa:	e79e      	b.n	fa3a <gpio_nrfx_pin_interrupt_configure+0xbe>
		return -ENODEV;
    fafc:	f06f 0012 	mvn.w	r0, #18
    fb00:	e7f1      	b.n	fae6 <gpio_nrfx_pin_interrupt_configure+0x16a>
	if ((BIT(pin) & data->int_active_level) != 0U) {
    fb02:	6931      	ldr	r1, [r6, #16]
    fb04:	40e9      	lsrs	r1, r5
    fb06:	f001 0101 	and.w	r1, r1, #1
    fb0a:	f1c1 0103 	rsb	r1, r1, #3
			nrf_gpio_cfg_sense_set(abs_pin, sense);
    fb0e:	4620      	mov	r0, r4
    fb10:	b2c9      	uxtb	r1, r1
    fb12:	f002 fe7b 	bl	1280c <nrf_gpio_cfg_sense_set>
	int res = 0;
    fb16:	4610      	mov	r0, r2
    fb18:	e7e5      	b.n	fae6 <gpio_nrfx_pin_interrupt_configure+0x16a>
    fb1a:	bf00      	nop
    fb1c:	40006000 	.word	0x40006000
    fb20:	0bad0000 	.word	0x0bad0000

0000fb24 <gpio_nrfx_config>:
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    fb24:	4b2a      	ldr	r3, [pc, #168]	; (fbd0 <gpio_nrfx_config+0xac>)
{
    fb26:	b570      	push	{r4, r5, r6, lr}
	return port->config;
    fb28:	6846      	ldr	r6, [r0, #4]
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    fb2a:	482a      	ldr	r0, [pc, #168]	; (fbd4 <gpio_nrfx_config+0xb0>)
    fb2c:	4013      	ands	r3, r2
    fb2e:	4283      	cmp	r3, r0
    fb30:	d03e      	beq.n	fbb0 <gpio_nrfx_config+0x8c>
    fb32:	d80d      	bhi.n	fb50 <gpio_nrfx_config+0x2c>
    fb34:	2b06      	cmp	r3, #6
    fb36:	d015      	beq.n	fb64 <gpio_nrfx_config+0x40>
    fb38:	d805      	bhi.n	fb46 <gpio_nrfx_config+0x22>
    fb3a:	b19b      	cbz	r3, fb64 <gpio_nrfx_config+0x40>
    fb3c:	2b02      	cmp	r3, #2
    fb3e:	d039      	beq.n	fbb4 <gpio_nrfx_config+0x90>
    fb40:	f06f 0015 	mvn.w	r0, #21
    fb44:	e033      	b.n	fbae <gpio_nrfx_config+0x8a>
    fb46:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    fb4a:	d1f9      	bne.n	fb40 <gpio_nrfx_config+0x1c>
		drive = NRF_GPIO_PIN_H0S1;
    fb4c:	2301      	movs	r3, #1
    fb4e:	e009      	b.n	fb64 <gpio_nrfx_config+0x40>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    fb50:	4821      	ldr	r0, [pc, #132]	; (fbd8 <gpio_nrfx_config+0xb4>)
    fb52:	4283      	cmp	r3, r0
    fb54:	d030      	beq.n	fbb8 <gpio_nrfx_config+0x94>
    fb56:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
    fb5a:	d02f      	beq.n	fbbc <gpio_nrfx_config+0x98>
    fb5c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
    fb60:	d1ee      	bne.n	fb40 <gpio_nrfx_config+0x1c>
		drive = NRF_GPIO_PIN_S0H1;
    fb62:	2302      	movs	r3, #2
	if ((flags & GPIO_PULL_UP) != 0) {
    fb64:	06d0      	lsls	r0, r2, #27
		pull = NRF_GPIO_PIN_NOPULL;
    fb66:	bf54      	ite	pl
    fb68:	f3c2 1540 	ubfxpl	r5, r2, #5, #1
		pull = NRF_GPIO_PIN_PULLUP;
    fb6c:	2503      	movmi	r5, #3
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
    fb6e:	f482 7480 	eor.w	r4, r2, #256	; 0x100
	if ((flags & GPIO_OUTPUT) != 0) {
    fb72:	f412 7f00 	tst.w	r2, #512	; 0x200
	dir = ((flags & GPIO_OUTPUT) != 0)
    fb76:	f3c2 2040 	ubfx	r0, r2, #9, #1
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
    fb7a:	f3c4 2400 	ubfx	r4, r4, #8, #1
	if ((flags & GPIO_OUTPUT) != 0) {
    fb7e:	d007      	beq.n	fb90 <gpio_nrfx_config+0x6c>
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
    fb80:	f412 6f00 	tst.w	r2, #2048	; 0x800
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    fb84:	6876      	ldr	r6, [r6, #4]
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
    fb86:	d01b      	beq.n	fbc0 <gpio_nrfx_config+0x9c>
			nrf_gpio_port_out_set(reg, BIT(pin));
    fb88:	2201      	movs	r2, #1
    fb8a:	408a      	lsls	r2, r1
    p_reg->OUTSET = set_mask;
    fb8c:	f8c6 2508 	str.w	r2, [r6, #1288]	; 0x508
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    fb90:	ea40 0244 	orr.w	r2, r0, r4, lsl #1
    *p_pin = pin_number & 0x1F;
    fb94:	f001 011f 	and.w	r1, r1, #31
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    fb98:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    reg->PIN_CNF[pin_number] = cnf;
    fb9c:	f501 71e0 	add.w	r1, r1, #448	; 0x1c0
    fba0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    fba4:	ea43 0385 	orr.w	r3, r3, r5, lsl #2
    reg->PIN_CNF[pin_number] = cnf;
    fba8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	return 0;
    fbac:	2000      	movs	r0, #0
}
    fbae:	bd70      	pop	{r4, r5, r6, pc}
		drive = NRF_GPIO_PIN_H0D1;
    fbb0:	2307      	movs	r3, #7
    fbb2:	e7d7      	b.n	fb64 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_D0S1;
    fbb4:	2304      	movs	r3, #4
    fbb6:	e7d5      	b.n	fb64 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_D0H1;
    fbb8:	2305      	movs	r3, #5
    fbba:	e7d3      	b.n	fb64 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_H0H1;
    fbbc:	2303      	movs	r3, #3
    fbbe:	e7d1      	b.n	fb64 <gpio_nrfx_config+0x40>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
    fbc0:	0552      	lsls	r2, r2, #21
			nrf_gpio_port_out_clear(reg, BIT(pin));
    fbc2:	bf42      	ittt	mi
    fbc4:	2201      	movmi	r2, #1
    fbc6:	408a      	lslmi	r2, r1
    p_reg->OUTCLR = clr_mask;
    fbc8:	f8c6 250c 	strmi.w	r2, [r6, #1292]	; 0x50c
}
    fbcc:	e7e0      	b.n	fb90 <gpio_nrfx_config+0x6c>
    fbce:	bf00      	nop
    fbd0:	00f00006 	.word	0x00f00006
    fbd4:	00100006 	.word	0x00100006
    fbd8:	00400002 	.word	0x00400002

0000fbdc <gpiote_event_handler>:
{
    fbdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    fbe0:	4b41      	ldr	r3, [pc, #260]	; (fce8 <gpiote_event_handler+0x10c>)
    fbe2:	f8d3 517c 	ldr.w	r5, [r3, #380]	; 0x17c
	if (port_event) {
    fbe6:	2d00      	cmp	r5, #0
    fbe8:	d059      	beq.n	fc9e <gpiote_event_handler+0xc2>
	uint32_t out = data->pin_int_en;
    fbea:	4b40      	ldr	r3, [pc, #256]	; (fcec <gpiote_event_handler+0x110>)
    return p_reg->IN;
    fbec:	f04f 49a0 	mov.w	r9, #1342177280	; 0x50000000
	out &= ~data->trig_edge & ~data->double_edge;
    fbf0:	e9d3 2105 	ldrd	r2, r1, [r3, #20]
	uint32_t out = data->pin_int_en;
    fbf4:	68df      	ldr	r7, [r3, #12]
    fbf6:	f8d9 4510 	ldr.w	r4, [r9, #1296]	; 0x510
	uint32_t pin_states = ~(port_in ^ data->int_active_level);
    fbfa:	691b      	ldr	r3, [r3, #16]
	out &= ~data->trig_edge & ~data->double_edge;
    fbfc:	430a      	orrs	r2, r1
    fbfe:	ea27 0702 	bic.w	r7, r7, r2
	uint32_t pin_states = ~(port_in ^ data->int_active_level);
    fc02:	405c      	eors	r4, r3
	uint32_t out = pin_states & level_pins;
    fc04:	ea27 0404 	bic.w	r4, r7, r4
	uint32_t check_pins = level_pins;
    fc08:	463a      	mov	r2, r7
	uint32_t bit = 1U << pin;
    fc0a:	2601      	movs	r6, #1
	uint32_t pin = 0U;
    fc0c:	f04f 0800 	mov.w	r8, #0
	while (check_pins) {
    fc10:	bb82      	cbnz	r2, fc74 <gpiote_event_handler+0x98>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    fc12:	4b35      	ldr	r3, [pc, #212]	; (fce8 <gpiote_event_handler+0x10c>)
    fc14:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
    fc18:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
	uint32_t fired_triggers[GPIO_COUNT] = {0};
    fc1c:	4a34      	ldr	r2, [pc, #208]	; (fcf0 <gpiote_event_handler+0x114>)
    return p_reg->INTENSET & mask;
    fc1e:	4832      	ldr	r0, [pc, #200]	; (fce8 <gpiote_event_handler+0x10c>)
    fc20:	2300      	movs	r3, #0
		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
    fc22:	2601      	movs	r6, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    fc24:	461f      	mov	r7, r3
    return p_reg->INTENSET & mask;
    fc26:	f8d0 1304 	ldr.w	r1, [r0, #772]	; 0x304
    fc2a:	fa06 fc03 	lsl.w	ip, r6, r3
    fc2e:	ea1c 0f01 	tst.w	ip, r1
    fc32:	d00c      	beq.n	fc4e <gpiote_event_handler+0x72>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    fc34:	6811      	ldr	r1, [r2, #0]
    fc36:	b151      	cbz	r1, fc4e <gpiote_event_handler+0x72>
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    fc38:	f503 71a2 	add.w	r1, r3, #324	; 0x144
    fc3c:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    fc40:	6017      	str	r7, [r2, #0]
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    fc42:	f3c1 2104 	ubfx	r1, r1, #8, #5
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
    fc46:	fa06 f101 	lsl.w	r1, r6, r1
    fc4a:	430c      	orrs	r4, r1
    fc4c:	6811      	ldr	r1, [r2, #0]
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    fc4e:	3301      	adds	r3, #1
    fc50:	2b08      	cmp	r3, #8
    fc52:	f102 0204 	add.w	r2, r2, #4
    fc56:	d1e6      	bne.n	fc26 <gpiote_event_handler+0x4a>
	if (fired_triggers[0]) {
    fc58:	bb1c      	cbnz	r4, fca2 <gpiote_event_handler+0xc6>
	if (port_event) {
    fc5a:	b14d      	cbz	r5, fc70 <gpiote_event_handler+0x94>
	uint32_t out = data->pin_int_en;
    fc5c:	4e23      	ldr	r6, [pc, #140]	; (fcec <gpiote_event_handler+0x110>)
	out &= ~data->trig_edge & ~data->double_edge;
    fc5e:	e9d6 3105 	ldrd	r3, r1, [r6, #20]
	uint32_t out = data->pin_int_en;
    fc62:	68f2      	ldr	r2, [r6, #12]
	out &= ~data->trig_edge & ~data->double_edge;
    fc64:	430b      	orrs	r3, r1
    fc66:	ea22 0203 	bic.w	r2, r2, r3
	uint32_t bit = 1U << pin;
    fc6a:	2401      	movs	r4, #1
	uint32_t pin = 0U;
    fc6c:	2500      	movs	r5, #0
	while (level_pins) {
    fc6e:	bb4a      	cbnz	r2, fcc4 <gpiote_event_handler+0xe8>
}
    fc70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (check_pins & bit) {
    fc74:	4216      	tst	r6, r2
    fc76:	d00e      	beq.n	fc96 <gpiote_event_handler+0xba>
			if (!(level_pins & bit)) {
    fc78:	423e      	tst	r6, r7
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    fc7a:	f008 001f 	and.w	r0, r8, #31
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    fc7e:	bf08      	it	eq
    fc80:	f500 73e0 	addeq.w	r3, r0, #448	; 0x1c0
			nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
    fc84:	f04f 0100 	mov.w	r1, #0
    fc88:	bf08      	it	eq
    fc8a:	f859 3023 	ldreq.w	r3, [r9, r3, lsl #2]
    fc8e:	f002 fdbd 	bl	1280c <nrf_gpio_cfg_sense_set>
			check_pins &= ~bit;
    fc92:	ea22 0206 	bic.w	r2, r2, r6
		++pin;
    fc96:	f108 0801 	add.w	r8, r8, #1
		bit <<= 1;
    fc9a:	0076      	lsls	r6, r6, #1
    fc9c:	e7b8      	b.n	fc10 <gpiote_event_handler+0x34>
	uint32_t fired_triggers[GPIO_COUNT] = {0};
    fc9e:	462c      	mov	r4, r5
    fca0:	e7bc      	b.n	fc1c <gpiote_event_handler+0x40>
	gpio_fire_callbacks(list, port, pins);
    fca2:	4b12      	ldr	r3, [pc, #72]	; (fcec <gpiote_event_handler+0x110>)
    fca4:	6859      	ldr	r1, [r3, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    fca6:	2900      	cmp	r1, #0
    fca8:	d0d7      	beq.n	fc5a <gpiote_event_handler+0x7e>
    fcaa:	680e      	ldr	r6, [r1, #0]
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    fcac:	4f11      	ldr	r7, [pc, #68]	; (fcf4 <gpiote_event_handler+0x118>)
		if (cb->pin_mask & pins) {
    fcae:	688a      	ldr	r2, [r1, #8]
    fcb0:	4022      	ands	r2, r4
    fcb2:	d002      	beq.n	fcba <gpiote_event_handler+0xde>
			cb->handler(port, cb, cb->pin_mask & pins);
    fcb4:	684b      	ldr	r3, [r1, #4]
    fcb6:	4638      	mov	r0, r7
    fcb8:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    fcba:	2e00      	cmp	r6, #0
    fcbc:	d0cd      	beq.n	fc5a <gpiote_event_handler+0x7e>
    fcbe:	4631      	mov	r1, r6
    fcc0:	6836      	ldr	r6, [r6, #0]
    fcc2:	e7f4      	b.n	fcae <gpiote_event_handler+0xd2>
		if (level_pins & bit) {
    fcc4:	4214      	tst	r4, r2
    fcc6:	d00c      	beq.n	fce2 <gpiote_event_handler+0x106>
	if ((BIT(pin) & data->int_active_level) != 0U) {
    fcc8:	6931      	ldr	r1, [r6, #16]
    fcca:	40e9      	lsrs	r1, r5
    fccc:	f001 0101 	and.w	r1, r1, #1
    fcd0:	f1c1 0103 	rsb	r1, r1, #3
			nrf_gpio_cfg_sense_set(abs_pin, sense);
    fcd4:	b2c9      	uxtb	r1, r1
    fcd6:	f005 001f 	and.w	r0, r5, #31
    fcda:	f002 fd97 	bl	1280c <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
    fcde:	ea22 0204 	bic.w	r2, r2, r4
		++pin;
    fce2:	3501      	adds	r5, #1
		bit <<= 1;
    fce4:	0064      	lsls	r4, r4, #1
    fce6:	e7c2      	b.n	fc6e <gpiote_event_handler+0x92>
    fce8:	40006000 	.word	0x40006000
    fcec:	20000374 	.word	0x20000374
    fcf0:	40006100 	.word	0x40006100
    fcf4:	00012eac 	.word	0x00012eac

0000fcf8 <flash_nrf_pages_layout>:

static void flash_nrf_pages_layout(const struct device *dev,
				     const struct flash_pages_layout **layout,
				     size_t *layout_size)
{
	*layout = &dev_layout;
    fcf8:	4b02      	ldr	r3, [pc, #8]	; (fd04 <flash_nrf_pages_layout+0xc>)
    fcfa:	600b      	str	r3, [r1, #0]
	*layout_size = 1;
    fcfc:	2301      	movs	r3, #1
    fcfe:	6013      	str	r3, [r2, #0]
}
    fd00:	4770      	bx	lr
    fd02:	bf00      	nop
    fd04:	20000394 	.word	0x20000394

0000fd08 <flash_nrf_get_parameters>:
flash_nrf_get_parameters(const struct device *dev)
{
	ARG_UNUSED(dev);

	return &flash_nrf_parameters;
}
    fd08:	4800      	ldr	r0, [pc, #0]	; (fd0c <flash_nrf_get_parameters+0x4>)
    fd0a:	4770      	bx	lr
    fd0c:	000131e4 	.word	0x000131e4

0000fd10 <flash_nrf_read>:
{
    fd10:	b570      	push	{r4, r5, r6, lr}
    fd12:	460d      	mov	r5, r1
	if (is_regular_addr_valid(addr, len)) {
    fd14:	4628      	mov	r0, r5
    fd16:	4619      	mov	r1, r3
{
    fd18:	4616      	mov	r6, r2
    fd1a:	461c      	mov	r4, r3
	if (is_regular_addr_valid(addr, len)) {
    fd1c:	f002 fdd5 	bl	128ca <is_regular_addr_valid>
    fd20:	b970      	cbnz	r0, fd40 <flash_nrf_read+0x30>
    fd22:	4a0c      	ldr	r2, [pc, #48]	; (fd54 <flash_nrf_read+0x44>)
    fd24:	4b0c      	ldr	r3, [pc, #48]	; (fd58 <flash_nrf_read+0x48>)
		LOG_ERR("invalid address: 0x%08lx:%zu",
    fd26:	480d      	ldr	r0, [pc, #52]	; (fd5c <flash_nrf_read+0x4c>)
    fd28:	1a9b      	subs	r3, r3, r2
    fd2a:	08db      	lsrs	r3, r3, #3
    fd2c:	019b      	lsls	r3, r3, #6
    fd2e:	f043 0301 	orr.w	r3, r3, #1
    fd32:	4622      	mov	r2, r4
    fd34:	4629      	mov	r1, r5
    fd36:	f002 f85b 	bl	11df0 <log_2>
		return -EINVAL;
    fd3a:	f06f 0015 	mvn.w	r0, #21
}
    fd3e:	bd70      	pop	{r4, r5, r6, pc}
	if (!len) {
    fd40:	b134      	cbz	r4, fd50 <flash_nrf_read+0x40>
	memcpy(data, (void *)addr, len);
    fd42:	4622      	mov	r2, r4
    fd44:	4629      	mov	r1, r5
    fd46:	4630      	mov	r0, r6
    fd48:	f002 fd2b 	bl	127a2 <memcpy>
	return 0;
    fd4c:	2000      	movs	r0, #0
    fd4e:	e7f6      	b.n	fd3e <flash_nrf_read+0x2e>
		return 0;
    fd50:	4620      	mov	r0, r4
    fd52:	e7f4      	b.n	fd3e <flash_nrf_read+0x2e>
    fd54:	00013014 	.word	0x00013014
    fd58:	00013024 	.word	0x00013024
    fd5c:	00013c35 	.word	0x00013c35

0000fd60 <nrf_flash_init>:
	.page_layout = flash_nrf_pages_layout,
#endif
};

static int nrf_flash_init(const struct device *dev)
{
    fd60:	b510      	push	{r4, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
    fd62:	2201      	movs	r2, #1
    fd64:	4611      	mov	r1, r2
    fd66:	4806      	ldr	r0, [pc, #24]	; (fd80 <nrf_flash_init+0x20>)
#ifndef CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE
	nrf_flash_sync_init();
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

#if defined(CONFIG_FLASH_PAGE_LAYOUT)
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
    fd68:	4c06      	ldr	r4, [pc, #24]	; (fd84 <nrf_flash_init+0x24>)
    fd6a:	f002 ff09 	bl	12b80 <z_impl_k_sem_init>
    fd6e:	f002 fe8c 	bl	12a8a <nrfx_nvmc_flash_page_count_get>
    fd72:	6020      	str	r0, [r4, #0]
	dev_layout.pages_size = nrfx_nvmc_flash_page_size_get();
    fd74:	f002 fe85 	bl	12a82 <nrfx_nvmc_flash_page_size_get>
    fd78:	6060      	str	r0, [r4, #4]
#endif

	return 0;
}
    fd7a:	2000      	movs	r0, #0
    fd7c:	bd10      	pop	{r4, pc}
    fd7e:	bf00      	nop
    fd80:	2000039c 	.word	0x2000039c
    fd84:	20000394 	.word	0x20000394

0000fd88 <flash_nrf_erase>:
{
    fd88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    fd8a:	460d      	mov	r5, r1
    fd8c:	4614      	mov	r4, r2
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
    fd8e:	f002 fe78 	bl	12a82 <nrfx_nvmc_flash_page_size_get>
	if (is_regular_addr_valid(addr, size)) {
    fd92:	4621      	mov	r1, r4
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
    fd94:	4606      	mov	r6, r0
	if (is_regular_addr_valid(addr, size)) {
    fd96:	4628      	mov	r0, r5
    fd98:	f002 fd97 	bl	128ca <is_regular_addr_valid>
		if (((addr % pg_size) != 0) || ((size % pg_size) != 0)) {
    fd9c:	462f      	mov	r7, r5
	if (is_regular_addr_valid(addr, size)) {
    fd9e:	b378      	cbz	r0, fe00 <flash_nrf_erase+0x78>
		if (((addr % pg_size) != 0) || ((size % pg_size) != 0)) {
    fda0:	fbb5 f3f6 	udiv	r3, r5, r6
    fda4:	fb06 5313 	mls	r3, r6, r3, r5
    fda8:	b923      	cbnz	r3, fdb4 <flash_nrf_erase+0x2c>
    fdaa:	fbb4 f0f6 	udiv	r0, r4, r6
    fdae:	fb06 4010 	mls	r0, r6, r0, r4
    fdb2:	b170      	cbz	r0, fdd2 <flash_nrf_erase+0x4a>
    fdb4:	4a18      	ldr	r2, [pc, #96]	; (fe18 <flash_nrf_erase+0x90>)
    fdb6:	4b19      	ldr	r3, [pc, #100]	; (fe1c <flash_nrf_erase+0x94>)
			LOG_ERR("unaligned address: 0x%08lx:%zu",
    fdb8:	4819      	ldr	r0, [pc, #100]	; (fe20 <flash_nrf_erase+0x98>)
    fdba:	1a9b      	subs	r3, r3, r2
    fdbc:	08db      	lsrs	r3, r3, #3
    fdbe:	019b      	lsls	r3, r3, #6
    fdc0:	f043 0301 	orr.w	r3, r3, #1
    fdc4:	4622      	mov	r2, r4
    fdc6:	4629      	mov	r1, r5
		LOG_ERR("invalid address: 0x%08lx:%zu",
    fdc8:	f002 f812 	bl	11df0 <log_2>
		return -EINVAL;
    fdcc:	f06f 0015 	mvn.w	r0, #21
    fdd0:	e015      	b.n	fdfe <flash_nrf_erase+0x76>
		if (!n_pages) {
    fdd2:	42b4      	cmp	r4, r6
    fdd4:	d313      	bcc.n	fdfe <flash_nrf_erase+0x76>
	return z_impl_k_sem_take(sem, timeout);
    fdd6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    fdda:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    fdde:	4811      	ldr	r0, [pc, #68]	; (fe24 <flash_nrf_erase+0x9c>)
    fde0:	f001 f8f8 	bl	10fd4 <z_impl_k_sem_take>

#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

static int erase_op(void *context)
{
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
    fde4:	f002 fe4d 	bl	12a82 <nrfx_nvmc_flash_page_size_get>
    fde8:	4605      	mov	r5, r0
		if (nrfx_nvmc_page_partial_erase_continue()) {
			e_ctx->len -= pg_size;
			e_ctx->flash_addr += pg_size;
		}
#else
		(void)nrfx_nvmc_page_erase(e_ctx->flash_addr);
    fdea:	4638      	mov	r0, r7
    fdec:	f000 fcba 	bl	10764 <nrfx_nvmc_page_erase>
			}

		}
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

	} while (e_ctx->len > 0);
    fdf0:	1b64      	subs	r4, r4, r5
    fdf2:	442f      	add	r7, r5
    fdf4:	d1f9      	bne.n	fdea <flash_nrf_erase+0x62>
	z_impl_k_sem_give(sem);
    fdf6:	480b      	ldr	r0, [pc, #44]	; (fe24 <flash_nrf_erase+0x9c>)
    fdf8:	f001 f8cc 	bl	10f94 <z_impl_k_sem_give>
	return ret;
    fdfc:	4620      	mov	r0, r4
}
    fdfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    fe00:	4a05      	ldr	r2, [pc, #20]	; (fe18 <flash_nrf_erase+0x90>)
    fe02:	4b06      	ldr	r3, [pc, #24]	; (fe1c <flash_nrf_erase+0x94>)
		LOG_ERR("invalid address: 0x%08lx:%zu",
    fe04:	4808      	ldr	r0, [pc, #32]	; (fe28 <flash_nrf_erase+0xa0>)
    fe06:	1a9b      	subs	r3, r3, r2
    fe08:	08db      	lsrs	r3, r3, #3
    fe0a:	019b      	lsls	r3, r3, #6
    fe0c:	f043 0301 	orr.w	r3, r3, #1
    fe10:	4622      	mov	r2, r4
    fe12:	4629      	mov	r1, r5
    fe14:	e7d8      	b.n	fdc8 <flash_nrf_erase+0x40>
    fe16:	bf00      	nop
    fe18:	00013014 	.word	0x00013014
    fe1c:	00013024 	.word	0x00013024
    fe20:	00013c52 	.word	0x00013c52
    fe24:	2000039c 	.word	0x2000039c
    fe28:	00013c35 	.word	0x00013c35

0000fe2c <flash_nrf_write>:
{
    fe2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    fe2e:	460e      	mov	r6, r1
	if (is_regular_addr_valid(addr, len)) {
    fe30:	4630      	mov	r0, r6
    fe32:	4619      	mov	r1, r3
{
    fe34:	4617      	mov	r7, r2
    fe36:	461c      	mov	r4, r3
	if (is_regular_addr_valid(addr, len)) {
    fe38:	f002 fd47 	bl	128ca <is_regular_addr_valid>
    fe3c:	b970      	cbnz	r0, fe5c <flash_nrf_write+0x30>
    fe3e:	4a1f      	ldr	r2, [pc, #124]	; (febc <flash_nrf_write+0x90>)
    fe40:	4b1f      	ldr	r3, [pc, #124]	; (fec0 <flash_nrf_write+0x94>)
		LOG_ERR("invalid address: 0x%08lx:%zu",
    fe42:	4820      	ldr	r0, [pc, #128]	; (fec4 <flash_nrf_write+0x98>)
    fe44:	1a9b      	subs	r3, r3, r2
    fe46:	08db      	lsrs	r3, r3, #3
    fe48:	019b      	lsls	r3, r3, #6
    fe4a:	f043 0301 	orr.w	r3, r3, #1
    fe4e:	4622      	mov	r2, r4
    fe50:	4631      	mov	r1, r6
		LOG_ERR("not word-aligned: 0x%08lx:%zu",
    fe52:	f001 ffcd 	bl	11df0 <log_2>
		return -EINVAL;
    fe56:	f06f 0015 	mvn.w	r0, #21
}
    fe5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (data & 0x3) ? false : true;
    fe5c:	ea46 0504 	orr.w	r5, r6, r4
	if (!is_aligned_32(addr) || (len % sizeof(uint32_t))) {
    fe60:	f015 0503 	ands.w	r5, r5, #3
    fe64:	d00a      	beq.n	fe7c <flash_nrf_write+0x50>
    fe66:	4a15      	ldr	r2, [pc, #84]	; (febc <flash_nrf_write+0x90>)
    fe68:	4b15      	ldr	r3, [pc, #84]	; (fec0 <flash_nrf_write+0x94>)
		LOG_ERR("not word-aligned: 0x%08lx:%zu",
    fe6a:	4817      	ldr	r0, [pc, #92]	; (fec8 <flash_nrf_write+0x9c>)
    fe6c:	1a9b      	subs	r3, r3, r2
    fe6e:	08db      	lsrs	r3, r3, #3
    fe70:	019b      	lsls	r3, r3, #6
    fe72:	f043 0301 	orr.w	r3, r3, #1
    fe76:	4622      	mov	r2, r4
    fe78:	4631      	mov	r1, r6
    fe7a:	e7ea      	b.n	fe52 <flash_nrf_write+0x26>
	if (!len) {
    fe7c:	b1dc      	cbz	r4, feb6 <flash_nrf_write+0x8a>
	return z_impl_k_sem_take(sem, timeout);
    fe7e:	4813      	ldr	r0, [pc, #76]	; (fecc <flash_nrf_write+0xa0>)
    fe80:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    fe84:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    fe88:	f001 f8a4 	bl	10fd4 <z_impl_k_sem_take>
		}
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */
	}
#endif /* CONFIG_SOC_FLASH_NRF_EMULATE_ONE_BYTE_WRITE_ACCESS */
	/* Write all the 4-byte aligned data */
	while (w_ctx->len >= sizeof(uint32_t)) {
    fe8c:	192b      	adds	r3, r5, r4
    fe8e:	2b03      	cmp	r3, #3
    fe90:	eba6 0005 	sub.w	r0, r6, r5
    fe94:	d809      	bhi.n	feaa <flash_nrf_write+0x7e>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrf_nvmc_ready_check(NRF_NVMC_Type const * p_reg)
{
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
    fe96:	4a0e      	ldr	r2, [pc, #56]	; (fed0 <flash_nrf_write+0xa4>)
    fe98:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
	while (!nrfx_nvmc_write_done_check()) {
    fe9c:	07db      	lsls	r3, r3, #31
    fe9e:	d5fb      	bpl.n	fe98 <flash_nrf_write+0x6c>
	z_impl_k_sem_give(sem);
    fea0:	480a      	ldr	r0, [pc, #40]	; (fecc <flash_nrf_write+0xa0>)
    fea2:	f001 f877 	bl	10f94 <z_impl_k_sem_give>
	return ret;
    fea6:	2000      	movs	r0, #0
}
    fea8:	e7d7      	b.n	fe5a <flash_nrf_write+0x2e>
		if (SUSPEND_POFWARN()) {
			return -ECANCELED;
		}

		nrfx_nvmc_word_write(w_ctx->flash_addr,
				     UNALIGNED_GET((uint32_t *)w_ctx->data_addr));
    feaa:	1b7b      	subs	r3, r7, r5
    feac:	3d04      	subs	r5, #4
		nrfx_nvmc_word_write(w_ctx->flash_addr,
    feae:	6819      	ldr	r1, [r3, #0]
    feb0:	f000 fc78 	bl	107a4 <nrfx_nvmc_word_write>
}
    feb4:	e7ea      	b.n	fe8c <flash_nrf_write+0x60>
		return 0;
    feb6:	4620      	mov	r0, r4
    feb8:	e7cf      	b.n	fe5a <flash_nrf_write+0x2e>
    feba:	bf00      	nop
    febc:	00013014 	.word	0x00013014
    fec0:	00013024 	.word	0x00013024
    fec4:	00013c35 	.word	0x00013c35
    fec8:	00013c71 	.word	0x00013c71
    fecc:	2000039c 	.word	0x2000039c
    fed0:	4001e000 	.word	0x4001e000

0000fed4 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
    fed4:	b570      	push	{r4, r5, r6, lr}
		break;
	default:
		return -ENOTSUP;
	}
#else
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
    fed6:	794b      	ldrb	r3, [r1, #5]
    fed8:	2b01      	cmp	r3, #1
    feda:	d124      	bne.n	ff26 <uarte_nrfx_configure+0x52>
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    fedc:	798b      	ldrb	r3, [r1, #6]
    fede:	2b03      	cmp	r3, #3
    fee0:	d121      	bne.n	ff26 <uarte_nrfx_configure+0x52>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
    fee2:	79cc      	ldrb	r4, [r1, #7]
    fee4:	b12c      	cbz	r4, fef2 <uarte_nrfx_configure+0x1e>
    fee6:	2c01      	cmp	r4, #1
    fee8:	d11d      	bne.n	ff26 <uarte_nrfx_configure+0x52>
	case UART_CFG_FLOW_CTRL_NONE:
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
		break;
	case UART_CFG_FLOW_CTRL_RTS_CTS:
		if (IS_HWFC_PINS_USED(get_dev_config(dev)->flags)) {
    feea:	6843      	ldr	r3, [r0, #4]
    feec:	685b      	ldr	r3, [r3, #4]
    feee:	079b      	lsls	r3, r3, #30
    fef0:	d019      	beq.n	ff26 <uarte_nrfx_configure+0x52>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
    fef2:	790a      	ldrb	r2, [r1, #4]
    fef4:	b112      	cbz	r2, fefc <uarte_nrfx_configure+0x28>
    fef6:	2a02      	cmp	r2, #2
    fef8:	d115      	bne.n	ff26 <uarte_nrfx_configure+0x52>
    fefa:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
    fefc:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
    fefe:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
    ff00:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
    ff04:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
    ff06:	d062      	beq.n	ffce <__kernel_ram_size+0x26>
    ff08:	d82b      	bhi.n	ff62 <uarte_nrfx_configure+0x8e>
    ff0a:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    ff0e:	d061      	beq.n	ffd4 <__kernel_ram_size+0x2c>
    ff10:	d814      	bhi.n	ff3c <uarte_nrfx_configure+0x68>
    ff12:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    ff16:	d05f      	beq.n	ffd8 <__kernel_ram_size+0x30>
    ff18:	d808      	bhi.n	ff2c <uarte_nrfx_configure+0x58>
    ff1a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    ff1e:	d05e      	beq.n	ffde <__kernel_ram_size+0x36>
    ff20:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    ff24:	d05e      	beq.n	ffe4 <__kernel_ram_size+0x3c>
    ff26:	f06f 0085 	mvn.w	r0, #133	; 0x85
    ff2a:	e04f      	b.n	ffcc <__kernel_ram_size+0x24>
    ff2c:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    ff30:	d05b      	beq.n	ffea <__kernel_ram_size+0x42>
    ff32:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    ff36:	d1f6      	bne.n	ff26 <uarte_nrfx_configure+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    ff38:	4b36      	ldr	r3, [pc, #216]	; (10014 <CONFIG_PM_SRAM_SIZE+0x14>)
    ff3a:	e03c      	b.n	ffb6 <__kernel_ram_size+0xe>
	switch (baudrate) {
    ff3c:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    ff40:	d056      	beq.n	fff0 <__kernel_ram_size+0x48>
    ff42:	d807      	bhi.n	ff54 <uarte_nrfx_configure+0x80>
    ff44:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    ff48:	d054      	beq.n	fff4 <__kernel_ram_size+0x4c>
    ff4a:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    ff4e:	d1ea      	bne.n	ff26 <uarte_nrfx_configure+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    ff50:	4b31      	ldr	r3, [pc, #196]	; (10018 <CONFIG_PM_SRAM_SIZE+0x18>)
    ff52:	e030      	b.n	ffb6 <__kernel_ram_size+0xe>
	switch (baudrate) {
    ff54:	f647 2612 	movw	r6, #31250	; 0x7a12
    ff58:	42b3      	cmp	r3, r6
    ff5a:	d1e4      	bne.n	ff26 <uarte_nrfx_configure+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    ff5c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    ff60:	e029      	b.n	ffb6 <__kernel_ram_size+0xe>
	switch (baudrate) {
    ff62:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    ff66:	d047      	beq.n	fff8 <__kernel_ram_size+0x50>
    ff68:	d813      	bhi.n	ff92 <uarte_nrfx_configure+0xbe>
    ff6a:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    ff6e:	d046      	beq.n	fffe <__kernel_ram_size+0x56>
    ff70:	d809      	bhi.n	ff86 <uarte_nrfx_configure+0xb2>
    ff72:	f64d 26c0 	movw	r6, #56000	; 0xdac0
    ff76:	42b3      	cmp	r3, r6
    ff78:	d043      	beq.n	10002 <CONFIG_PM_SRAM_SIZE+0x2>
    ff7a:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    ff7e:	d1d2      	bne.n	ff26 <uarte_nrfx_configure+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    ff80:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    ff84:	e017      	b.n	ffb6 <__kernel_ram_size+0xe>
	switch (baudrate) {
    ff86:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    ff8a:	d1cc      	bne.n	ff26 <uarte_nrfx_configure+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    ff8c:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    ff90:	e011      	b.n	ffb6 <__kernel_ram_size+0xe>
	switch (baudrate) {
    ff92:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    ff96:	d037      	beq.n	10008 <CONFIG_PM_SRAM_SIZE+0x8>
    ff98:	d808      	bhi.n	ffac <__kernel_ram_size+0x4>
    ff9a:	4e20      	ldr	r6, [pc, #128]	; (1001c <CONFIG_PM_SRAM_SIZE+0x1c>)
    ff9c:	42b3      	cmp	r3, r6
    ff9e:	d036      	beq.n	1000e <CONFIG_PM_SRAM_SIZE+0xe>
    ffa0:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    ffa4:	d1bf      	bne.n	ff26 <uarte_nrfx_configure+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    ffa6:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    ffaa:	e004      	b.n	ffb6 <__kernel_ram_size+0xe>
	switch (baudrate) {
    ffac:	4e1c      	ldr	r6, [pc, #112]	; (10020 <CONFIG_PM_SRAM_SIZE+0x20>)
    ffae:	42b3      	cmp	r3, r6
    ffb0:	d1b9      	bne.n	ff26 <uarte_nrfx_configure+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    ffb2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    ffb6:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	get_dev_data(dev)->uart_config = *cfg;
    ffba:	6903      	ldr	r3, [r0, #16]
    ffbc:	c903      	ldmia	r1, {r0, r1}
                    | (uint32_t)p_cfg->hwfc;
    ffbe:	4322      	orrs	r2, r4
    ffc0:	3304      	adds	r3, #4
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    ffc2:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
    ffc6:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
    ffca:	2000      	movs	r0, #0
}
    ffcc:	bd70      	pop	{r4, r5, r6, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    ffce:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    ffd2:	e7f0      	b.n	ffb6 <__kernel_ram_size+0xe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    ffd4:	4b13      	ldr	r3, [pc, #76]	; (10024 <CONFIG_PM_SRAM_SIZE+0x24>)
    ffd6:	e7ee      	b.n	ffb6 <__kernel_ram_size+0xe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    ffd8:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    ffdc:	e7eb      	b.n	ffb6 <__kernel_ram_size+0xe>
		nrf_baudrate = 0x00014000;
    ffde:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    ffe2:	e7e8      	b.n	ffb6 <__kernel_ram_size+0xe>
	switch (baudrate) {
    ffe4:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    ffe8:	e7e5      	b.n	ffb6 <__kernel_ram_size+0xe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    ffea:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    ffee:	e7e2      	b.n	ffb6 <__kernel_ram_size+0xe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    fff0:	4b0d      	ldr	r3, [pc, #52]	; (10028 <CONFIG_PM_SRAM_SIZE+0x28>)
    fff2:	e7e0      	b.n	ffb6 <__kernel_ram_size+0xe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    fff4:	4b0d      	ldr	r3, [pc, #52]	; (1002c <CONFIG_PM_SRAM_SIZE+0x2c>)
    fff6:	e7de      	b.n	ffb6 <__kernel_ram_size+0xe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    fff8:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    fffc:	e7db      	b.n	ffb6 <__kernel_ram_size+0xe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    fffe:	4b0c      	ldr	r3, [pc, #48]	; (10030 <CONFIG_PM_SRAM_SIZE+0x30>)
   10000:	e7d9      	b.n	ffb6 <__kernel_ram_size+0xe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   10002:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   10006:	e7d6      	b.n	ffb6 <__kernel_ram_size+0xe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   10008:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   1000c:	e7d3      	b.n	ffb6 <__kernel_ram_size+0xe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   1000e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   10012:	e7d0      	b.n	ffb6 <__kernel_ram_size+0xe>
   10014:	0013b000 	.word	0x0013b000
   10018:	004ea000 	.word	0x004ea000
   1001c:	0003d090 	.word	0x0003d090
   10020:	000f4240 	.word	0x000f4240
   10024:	00275000 	.word	0x00275000
   10028:	0075c000 	.word	0x0075c000
   1002c:	003af000 	.word	0x003af000
   10030:	013a9000 	.word	0x013a9000

00010034 <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
   10034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return dev->data;
   10036:	6906      	ldr	r6, [r0, #16]
{
   10038:	4605      	mov	r5, r0
   1003a:	460f      	mov	r7, r1
	struct uarte_nrfx_data *data = get_dev_data(dev);
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   1003c:	f002 fd7f 	bl	12b3e <k_is_in_isr>
   10040:	b910      	cbnz	r0, 10048 <uarte_nrfx_poll_out+0x14>
	return !z_sys_post_kernel;
   10042:	4b2c      	ldr	r3, [pc, #176]	; (100f4 <uarte_nrfx_poll_out+0xc0>)
	int key;

	if (isr_mode) {
   10044:	781b      	ldrb	r3, [r3, #0]
   10046:	b983      	cbnz	r3, 1006a <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
   10048:	f04f 0320 	mov.w	r3, #32
   1004c:	f3ef 8411 	mrs	r4, BASEPRI
   10050:	f383 8811 	msr	BASEPRI, r3
   10054:	f3bf 8f6f 	isb	sy
		while (1) {
			key = irq_lock();
			if (is_tx_ready(dev)) {
   10058:	6868      	ldr	r0, [r5, #4]
   1005a:	f002 fca7 	bl	129ac <is_tx_ready.isra.0>
   1005e:	bb28      	cbnz	r0, 100ac <uarte_nrfx_poll_out+0x78>
	__asm__ volatile(
   10060:	f384 8811 	msr	BASEPRI, r4
   10064:	f3bf 8f6f 	isb	sy
}
   10068:	e7ee      	b.n	10048 <uarte_nrfx_poll_out+0x14>
{
   1006a:	2464      	movs	r4, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
   1006c:	6868      	ldr	r0, [r5, #4]
   1006e:	f002 fc9d 	bl	129ac <is_tx_ready.isra.0>
   10072:	b970      	cbnz	r0, 10092 <uarte_nrfx_poll_out+0x5e>
   10074:	2001      	movs	r0, #1
   10076:	f002 fcf2 	bl	12a5e <nrfx_busy_wait>
   1007a:	3c01      	subs	r4, #1
   1007c:	d1f6      	bne.n	1006c <uarte_nrfx_poll_out+0x38>
	return z_impl_k_sleep(timeout);
   1007e:	2100      	movs	r1, #0
   10080:	2021      	movs	r0, #33	; 0x21
   10082:	f001 faa5 	bl	115d0 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   10086:	e7f0      	b.n	1006a <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
   10088:	f384 8811 	msr	BASEPRI, r4
   1008c:	f3bf 8f6f 	isb	sy
}
   10090:	e7f5      	b.n	1007e <uarte_nrfx_poll_out+0x4a>
	__asm__ volatile(
   10092:	f04f 0320 	mov.w	r3, #32
   10096:	f3ef 8411 	mrs	r4, BASEPRI
   1009a:	f383 8811 	msr	BASEPRI, r3
   1009e:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   100a2:	6868      	ldr	r0, [r5, #4]
   100a4:	f002 fc82 	bl	129ac <is_tx_ready.isra.0>
   100a8:	2800      	cmp	r0, #0
   100aa:	d0ed      	beq.n	10088 <uarte_nrfx_poll_out+0x54>
		}
	} else {
		key = wait_tx_ready(dev);
	}

	data->char_out = c;
   100ac:	f806 7f10 	strb.w	r7, [r6, #16]!
	tx_start(dev, &data->char_out, 1);
   100b0:	6869      	ldr	r1, [r5, #4]
	return config->uarte_regs;
   100b2:	680b      	ldr	r3, [r1, #0]
NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    p_reg->TXD.MAXCNT = length;
   100b4:	2201      	movs	r2, #1
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   100b6:	f8c3 6544 	str.w	r6, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   100ba:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   100be:	2200      	movs	r2, #0
   100c0:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   100c4:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
   100c8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
   100cc:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
   100d0:	684a      	ldr	r2, [r1, #4]
   100d2:	06d2      	lsls	r2, r2, #27
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   100d4:	bf41      	itttt	mi
   100d6:	2208      	movmi	r2, #8
   100d8:	f8c3 2500 	strmi.w	r2, [r3, #1280]	; 0x500
    p_reg->INTENSET = mask;
   100dc:	f44f 0280 	movmi.w	r2, #4194304	; 0x400000
   100e0:	f8c3 2304 	strmi.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   100e4:	2201      	movs	r2, #1
   100e6:	609a      	str	r2, [r3, #8]
	__asm__ volatile(
   100e8:	f384 8811 	msr	BASEPRI, r4
   100ec:	f3bf 8f6f 	isb	sy

	irq_unlock(key);
}
   100f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   100f2:	bf00      	nop
   100f4:	2000091c 	.word	0x2000091c

000100f8 <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
   100f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   100fa:	2200      	movs	r2, #0
   100fc:	4605      	mov	r5, r0
   100fe:	2101      	movs	r1, #1
   10100:	2002      	movs	r0, #2
   10102:	f7fe ff49 	bl	ef98 <z_arm_irq_priority_set>
   10106:	2002      	movs	r0, #2
   10108:	f7fe ff28 	bl	ef5c <arch_irq_enable>
	return config->uarte_regs;
   1010c:	686b      	ldr	r3, [r5, #4]
	return dev->data;
   1010e:	692e      	ldr	r6, [r5, #16]
	return config->uarte_regs;
   10110:	681c      	ldr	r4, [r3, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   10112:	2300      	movs	r3, #0
   10114:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
	data->dev = dev;
   10118:	4631      	mov	r1, r6
    p_reg->OUTSET = set_mask;
   1011a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   1011e:	2240      	movs	r2, #64	; 0x40
   10120:	f841 5b04 	str.w	r5, [r1], #4
    reg->PIN_CNF[pin_number] = cnf;
   10124:	200c      	movs	r0, #12
    p_reg->OUTSET = set_mask;
   10126:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    p_reg->PSEL.TXD = pseltxd;
   1012a:	2706      	movs	r7, #6
    reg->PIN_CNF[pin_number] = cnf;
   1012c:	2203      	movs	r2, #3
   1012e:	f8c3 2718 	str.w	r2, [r3, #1816]	; 0x718
   10132:	f8c3 0720 	str.w	r0, [r3, #1824]	; 0x720
   10136:	f8c4 750c 	str.w	r7, [r4, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
   1013a:	2708      	movs	r7, #8
   1013c:	f8c4 7514 	str.w	r7, [r4, #1300]	; 0x514
   10140:	f8c3 071c 	str.w	r0, [r3, #1820]	; 0x71c
    p_reg->OUTSET = set_mask;
   10144:	2020      	movs	r0, #32
   10146:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
    reg->PIN_CNF[pin_number] = cnf;
   1014a:	f8c3 2714 	str.w	r2, [r3, #1812]	; 0x714
    p_reg->PSEL.RTS = pselrts;
   1014e:	2305      	movs	r3, #5
   10150:	f8c4 3508 	str.w	r3, [r4, #1288]	; 0x508
    p_reg->PSEL.CTS = pselcts;
   10154:	2307      	movs	r3, #7
   10156:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
   1015a:	4628      	mov	r0, r5
   1015c:	f7ff feba 	bl	fed4 <uarte_nrfx_configure>
	if (err) {
   10160:	4607      	mov	r7, r0
   10162:	b9b0      	cbnz	r0, 10192 <uarte_0_init+0x9a>
	    get_dev_config(dev)->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
   10164:	686b      	ldr	r3, [r5, #4]
   10166:	685b      	ldr	r3, [r3, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
   10168:	0719      	lsls	r1, r3, #28
   1016a:	d527      	bpl.n	101bc <uarte_0_init+0xc4>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
   1016c:	f106 0012 	add.w	r0, r6, #18
   10170:	f000 fb26 	bl	107c0 <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
   10174:	4b25      	ldr	r3, [pc, #148]	; (1020c <uarte_0_init+0x114>)
   10176:	4298      	cmp	r0, r3
   10178:	d00d      	beq.n	10196 <uarte_0_init+0x9e>
   1017a:	4b25      	ldr	r3, [pc, #148]	; (10210 <uarte_0_init+0x118>)
   1017c:	4925      	ldr	r1, [pc, #148]	; (10214 <uarte_0_init+0x11c>)
		LOG_ERR("Failed to allocate PPI Channel");
   1017e:	4826      	ldr	r0, [pc, #152]	; (10218 <uarte_0_init+0x120>)
   10180:	1ac9      	subs	r1, r1, r3
   10182:	08c9      	lsrs	r1, r1, #3
   10184:	0189      	lsls	r1, r1, #6
   10186:	f041 0101 	orr.w	r1, r1, #1
   1018a:	f001 fe10 	bl	11dae <log_0>
		return -EIO;
   1018e:	f06f 0704 	mvn.w	r7, #4
UART_NRF_UARTE_DEVICE(0);
   10192:	4638      	mov	r0, r7
   10194:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
   10196:	7cb0      	ldrb	r0, [r6, #18]
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
   10198:	00c3      	lsls	r3, r0, #3
   1019a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1019e:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    return (uint32_t)p_reg + (uint32_t)task;
   101a2:	f104 020c 	add.w	r2, r4, #12
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
   101a6:	f504 7190 	add.w	r1, r4, #288	; 0x120
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
   101aa:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
   101ae:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->CHENSET = mask;
   101b2:	4a1a      	ldr	r2, [pc, #104]	; (1021c <uarte_0_init+0x124>)
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
   101b4:	2301      	movs	r3, #1
   101b6:	4083      	lsls	r3, r0
   101b8:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   101bc:	2308      	movs	r3, #8
   101be:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   101c2:	2300      	movs	r3, #0
   101c4:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   101c8:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
   101cc:	f106 0311 	add.w	r3, r6, #17

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   101d0:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   101d4:	2301      	movs	r3, #1
   101d6:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   101da:	6023      	str	r3, [r4, #0]
	if (!(get_dev_config(dev)->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
   101dc:	686b      	ldr	r3, [r5, #4]
   101de:	685b      	ldr	r3, [r3, #4]
   101e0:	071a      	lsls	r2, r3, #28
    p_reg->INTENSET = mask;
   101e2:	bf5c      	itt	pl
   101e4:	f44f 7280 	movpl.w	r2, #256	; 0x100
   101e8:	f8c4 2304 	strpl.w	r2, [r4, #772]	; 0x304
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
   101ec:	06db      	lsls	r3, r3, #27
   101ee:	bf44      	itt	mi
   101f0:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
   101f4:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
   101f8:	3610      	adds	r6, #16
    p_reg->TXD.MAXCNT = length;
   101fa:	2300      	movs	r3, #0
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   101fc:	f8c4 6544 	str.w	r6, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   10200:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   10204:	2301      	movs	r3, #1
   10206:	60a3      	str	r3, [r4, #8]
   10208:	60e3      	str	r3, [r4, #12]
UART_NRF_UARTE_DEVICE(0);
   1020a:	e7c2      	b.n	10192 <uarte_0_init+0x9a>
   1020c:	0bad0000 	.word	0x0bad0000
   10210:	00013014 	.word	0x00013014
   10214:	0001305c 	.word	0x0001305c
   10218:	00013cac 	.word	0x00013cac
   1021c:	4001f000 	.word	0x4001f000

00010220 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
   10220:	b508      	push	{r3, lr}
	z_impl_log_panic();
   10222:	f7fd faf1 	bl	d808 <z_impl_log_panic>
   10226:	4b06      	ldr	r3, [pc, #24]	; (10240 <k_sys_fatal_error_handler+0x20>)
   10228:	4906      	ldr	r1, [pc, #24]	; (10244 <k_sys_fatal_error_handler+0x24>)
	defined(CONFIG_SPM_SERVICE_NS_HANDLER_FROM_SPM_FAULT)
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
   1022a:	4807      	ldr	r0, [pc, #28]	; (10248 <k_sys_fatal_error_handler+0x28>)
   1022c:	1ac9      	subs	r1, r1, r3
   1022e:	08c9      	lsrs	r1, r1, #3
   10230:	0189      	lsls	r1, r1, #6
   10232:	f041 0101 	orr.w	r1, r1, #1
   10236:	f001 fdba 	bl	11dae <log_0>
		sys_arch_reboot(0);
   1023a:	2000      	movs	r0, #0
   1023c:	f7ff fb66 	bl	f90c <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
   10240:	00013014 	.word	0x00013014
   10244:	0001301c 	.word	0x0001301c
   10248:	00013cdb 	.word	0x00013cdb

0001024c <nrf52_errata_16>:
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   1024c:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
   10250:	f893 2fe0 	ldrb.w	r2, [r3, #4064]	; 0xfe0
            uint32_t var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   10254:	2a06      	cmp	r2, #6
   10256:	d109      	bne.n	1026c <nrf52_errata_16+0x20>
            uint32_t var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
   10258:	f8d3 3fe8 	ldr.w	r3, [r3, #4072]	; 0xfe8
   1025c:	f3c3 1303 	ubfx	r3, r3, #4, #4
   10260:	3b03      	subs	r3, #3
   10262:	2b04      	cmp	r3, #4
   10264:	d802      	bhi.n	1026c <nrf52_errata_16+0x20>
   10266:	4a02      	ldr	r2, [pc, #8]	; (10270 <nrf52_errata_16+0x24>)
   10268:	5cd0      	ldrb	r0, [r2, r3]
   1026a:	4770      	bx	lr
                    default:
                        return false;
                }
            }
        #endif
        return false;
   1026c:	2000      	movs	r0, #0
    #endif
}
   1026e:	4770      	bx	lr
   10270:	00013d07 	.word	0x00013d07

00010274 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   10274:	4a02      	ldr	r2, [pc, #8]	; (10280 <nvmc_wait+0xc>)
   10276:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
   1027a:	2b00      	cmp	r3, #0
   1027c:	d0fb      	beq.n	10276 <nvmc_wait+0x2>
}
   1027e:	4770      	bx	lr
   10280:	4001e000 	.word	0x4001e000

00010284 <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
   10284:	b510      	push	{r4, lr}
    #endif

    #if NRF52_ERRATA_12_ENABLE_WORKAROUND
        /* Workaround for Errata 12 "COMP: Reference ladder not correctly calibrated" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_12()){
   10286:	f002 fbdb 	bl	12a40 <nrf52_errata_108>
   1028a:	b140      	cbz	r0, 1029e <SystemInit+0x1a>
            *(volatile uint32_t *)0x40013540 = (*(uint32_t *)0x10000324 & 0x00001F00) >> 8;
   1028c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   10290:	4a90      	ldr	r2, [pc, #576]	; (104d4 <SystemInit+0x250>)
   10292:	f8d3 3324 	ldr.w	r3, [r3, #804]	; 0x324
   10296:	f3c3 2304 	ubfx	r3, r3, #8, #5
   1029a:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
    #endif

    #if NRF52_ERRATA_16_ENABLE_WORKAROUND
        /* Workaround for Errata 16 "System: RAM may be corrupt on wakeup from CPU IDLE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_16()){
   1029e:	f7ff ffd5 	bl	1024c <nrf52_errata_16>
   102a2:	b110      	cbz	r0, 102aa <SystemInit+0x26>
            *(volatile uint32_t *)0x4007C074 = 3131961357ul;
   102a4:	4b8c      	ldr	r3, [pc, #560]	; (104d8 <SystemInit+0x254>)
   102a6:	4a8d      	ldr	r2, [pc, #564]	; (104dc <SystemInit+0x258>)
   102a8:	675a      	str	r2, [r3, #116]	; 0x74
    #endif

    #if NRF52_ERRATA_31_ENABLE_WORKAROUND
        /* Workaround for Errata 31 "CLOCK: Calibration values are not correctly loaded from FICR at reset" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_31()){
   102aa:	f002 fbc9 	bl	12a40 <nrf52_errata_108>
   102ae:	b148      	cbz	r0, 102c4 <SystemInit+0x40>
            *(volatile uint32_t *)0x4000053C = ((*(volatile uint32_t *)0x10000244) & 0x0000E000) >> 13;
   102b0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   102b4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   102b8:	f8d3 3244 	ldr.w	r3, [r3, #580]	; 0x244
   102bc:	f3c3 3342 	ubfx	r3, r3, #13, #3
   102c0:	f8c2 353c 	str.w	r3, [r2, #1340]	; 0x53c
    #endif

    #if NRF52_ERRATA_32_ENABLE_WORKAROUND
        /* Workaround for Errata 32 "DIF: Debug session automatically enables TracePort pins" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_32()){
   102c4:	f7ff ffc2 	bl	1024c <nrf52_errata_16>
   102c8:	b130      	cbz	r0, 102d8 <SystemInit+0x54>
            CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
   102ca:	4a85      	ldr	r2, [pc, #532]	; (104e0 <SystemInit+0x25c>)
   102cc:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
   102d0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   102d4:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
   102d8:	f002 fbb2 	bl	12a40 <nrf52_errata_108>
   102dc:	b140      	cbz	r0, 102f0 <SystemInit+0x6c>
            NRF_CLOCK->EVENTS_DONE = 0;
   102de:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   102e2:	2200      	movs	r2, #0
   102e4:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
   102e8:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
   102ec:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_37_ENABLE_WORKAROUND
        /* Workaround for Errata 37 "RADIO: Encryption engine is slow by default" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_37()){
   102f0:	f7ff ffac 	bl	1024c <nrf52_errata_16>
   102f4:	b120      	cbz	r0, 10300 <SystemInit+0x7c>
            *(volatile uint32_t *)0x400005A0 = 0x3;
   102f6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   102fa:	2203      	movs	r2, #3
   102fc:	f8c3 25a0 	str.w	r2, [r3, #1440]	; 0x5a0
    #endif

    #if NRF52_ERRATA_57_ENABLE_WORKAROUND
        /* Workaround for Errata 57 "NFCT: NFC Modulation amplitude" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_57()){
   10300:	f7ff ffa4 	bl	1024c <nrf52_errata_16>
   10304:	b160      	cbz	r0, 10320 <SystemInit+0x9c>
            *(volatile uint32_t *)0x40005610 = 0x00000005;
   10306:	4b77      	ldr	r3, [pc, #476]	; (104e4 <SystemInit+0x260>)
   10308:	2205      	movs	r2, #5
   1030a:	f8c3 2610 	str.w	r2, [r3, #1552]	; 0x610
            *(volatile uint32_t *)0x40005688 = 0x00000001;
   1030e:	2201      	movs	r2, #1
   10310:	f8c3 2688 	str.w	r2, [r3, #1672]	; 0x688
            *(volatile uint32_t *)0x40005618 = 0x00000000;
   10314:	2200      	movs	r2, #0
   10316:	f8c3 2618 	str.w	r2, [r3, #1560]	; 0x618
            *(volatile uint32_t *)0x40005614 = 0x0000003F;
   1031a:	223f      	movs	r2, #63	; 0x3f
   1031c:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1;
            uint32_t var2;

            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
   10320:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   10324:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   10328:	1c51      	adds	r1, r2, #1
            {
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   1032a:	bf09      	itett	eq
   1032c:	f04f 4370 	moveq.w	r3, #4026531840	; 0xf0000000
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
            }
            else
            {
                var1 = *(uint32_t *)0x10000130ul;
                var2 = *(uint32_t *)0x10000134ul;
   10330:	f8d3 3134 	ldrne.w	r3, [r3, #308]	; 0x134
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   10334:	f893 2fe0 	ldrbeq.w	r2, [r3, #4064]	; 0xfe0
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
   10338:	f8d3 3fe8 	ldreq.w	r3, [r3, #4072]	; 0xfe8
   1033c:	bf08      	it	eq
   1033e:	f3c3 1303 	ubfxeq	r3, r3, #4, #4
            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   10342:	2a06      	cmp	r2, #6
   10344:	d14d      	bne.n	103e2 <SystemInit+0x15e>
            {
                switch(var2)
   10346:	3b03      	subs	r3, #3
   10348:	2b04      	cmp	r3, #4
   1034a:	d803      	bhi.n	10354 <SystemInit+0xd0>
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
   1034c:	4a66      	ldr	r2, [pc, #408]	; (104e8 <SystemInit+0x264>)
   1034e:	5cd3      	ldrb	r3, [r2, r3]
   10350:	2b00      	cmp	r3, #0
   10352:	d046      	beq.n	103e2 <SystemInit+0x15e>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
   10354:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   10358:	4b64      	ldr	r3, [pc, #400]	; (104ec <SystemInit+0x268>)
   1035a:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
   1035e:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
   10362:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
   10366:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
   1036a:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
   1036e:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
   10372:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
   10376:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
   1037a:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
   1037e:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
   10382:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
   10386:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
   1038a:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
   1038e:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
   10392:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
   10396:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
   1039a:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
   1039e:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
   103a2:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
   103a6:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
   103aa:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
   103ae:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
   103b2:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
   103b6:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
   103ba:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
   103be:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
   103c2:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
   103c6:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
   103ca:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
   103ce:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
   103d2:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
   103d6:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
   103da:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
   103de:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_108_ENABLE_WORKAROUND
        /* Workaround for Errata 108 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_108()){
   103e2:	f002 fb2d 	bl	12a40 <nrf52_errata_108>
   103e6:	b148      	cbz	r0, 103fc <SystemInit+0x178>
            *(volatile uint32_t *)0x40000EE4ul = *(volatile uint32_t *)0x10000258ul & 0x0000004Ful;
   103e8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   103ec:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   103f0:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
   103f4:	f003 034f 	and.w	r3, r3, #79	; 0x4f
   103f8:	f8c2 3ee4 	str.w	r3, [r2, #3812]	; 0xee4
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
   103fc:	f002 fb20 	bl	12a40 <nrf52_errata_108>
   10400:	b148      	cbz	r0, 10416 <SystemInit+0x192>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
   10402:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   10406:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
   1040a:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
   1040c:	bf44      	itt	mi
   1040e:	f06f 0201 	mvnmi.w	r2, #1
   10412:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   10416:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   1041a:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   1041e:	2a06      	cmp	r2, #6
   10420:	d126      	bne.n	10470 <SystemInit+0x1ec>
            {
                switch(var2)
   10422:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
   10426:	3b03      	subs	r3, #3
   10428:	2b04      	cmp	r3, #4
   1042a:	d802      	bhi.n	10432 <SystemInit+0x1ae>
    #endif

    #if NRF52_ERRATA_182_ENABLE_WORKAROUND
        /* Workaround for Errata 182 "RADIO: Fixes for anomalies #102, #106, and #107 do not take effect" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_182()){
   1042c:	4a30      	ldr	r2, [pc, #192]	; (104f0 <SystemInit+0x26c>)
   1042e:	5cd3      	ldrb	r3, [r2, r3]
   10430:	b163      	cbz	r3, 1044c <SystemInit+0x1c8>
            *(volatile uint32_t *) 0x4000173C |= (0x1 << 10);
   10432:	4a30      	ldr	r2, [pc, #192]	; (104f4 <SystemInit+0x270>)
   10434:	f8d2 373c 	ldr.w	r3, [r2, #1852]	; 0x73c
   10438:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   1043c:	f8c2 373c 	str.w	r3, [r2, #1852]	; 0x73c
        #if defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   10440:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   10444:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
   10448:	2b06      	cmp	r3, #6
   1044a:	d111      	bne.n	10470 <SystemInit+0x1ec>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   1044c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   10450:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
   10454:	3b03      	subs	r3, #3
   10456:	2b04      	cmp	r3, #4
   10458:	d802      	bhi.n	10460 <SystemInit+0x1dc>
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_errata_249())
   1045a:	4a27      	ldr	r2, [pc, #156]	; (104f8 <SystemInit+0x274>)
   1045c:	5cd3      	ldrb	r3, [r2, r3]
   1045e:	b13b      	cbz	r3, 10470 <SystemInit+0x1ec>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
   10460:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   10464:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
   10468:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1046c:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   10470:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   10474:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   10478:	2a00      	cmp	r2, #0
   1047a:	db03      	blt.n	10484 <SystemInit+0x200>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
   1047c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   10480:	2b00      	cmp	r3, #0
   10482:	da22      	bge.n	104ca <SystemInit+0x246>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   10484:	491d      	ldr	r1, [pc, #116]	; (104fc <SystemInit+0x278>)
   10486:	2301      	movs	r3, #1
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   10488:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   1048c:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   10490:	2415      	movs	r4, #21
    nvmc_wait();
   10492:	f7ff feef 	bl	10274 <nvmc_wait>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   10496:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
   1049a:	f7ff feeb 	bl	10274 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
   1049e:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
   104a2:	f7ff fee7 	bl	10274 <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   104a6:	2300      	movs	r3, #0
   104a8:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
   104ac:	f7ff fee2 	bl	10274 <nvmc_wait>
   104b0:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   104b4:	490a      	ldr	r1, [pc, #40]	; (104e0 <SystemInit+0x25c>)
   104b6:	4b12      	ldr	r3, [pc, #72]	; (10500 <SystemInit+0x27c>)
   104b8:	68ca      	ldr	r2, [r1, #12]
   104ba:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   104be:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   104c0:	60cb      	str	r3, [r1, #12]
   104c2:	f3bf 8f4f 	dsb	sy
    __NOP();
   104c6:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   104c8:	e7fd      	b.n	104c6 <SystemInit+0x242>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
   104ca:	4b0e      	ldr	r3, [pc, #56]	; (10504 <SystemInit+0x280>)
   104cc:	4a0e      	ldr	r2, [pc, #56]	; (10508 <SystemInit+0x284>)
   104ce:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
   104d0:	bd10      	pop	{r4, pc}
   104d2:	bf00      	nop
   104d4:	40013000 	.word	0x40013000
   104d8:	4007c000 	.word	0x4007c000
   104dc:	baadf00d 	.word	0xbaadf00d
   104e0:	e000ed00 	.word	0xe000ed00
   104e4:	40005000 	.word	0x40005000
   104e8:	00013cf8 	.word	0x00013cf8
   104ec:	4000c000 	.word	0x4000c000
   104f0:	00013cfd 	.word	0x00013cfd
   104f4:	40001000 	.word	0x40001000
   104f8:	00013d02 	.word	0x00013d02
   104fc:	4001e000 	.word	0x4001e000
   10500:	05fa0004 	.word	0x05fa0004
   10504:	20000024 	.word	0x20000024
   10508:	03d09000 	.word	0x03d09000

0001050c <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
   1050c:	4b04      	ldr	r3, [pc, #16]	; (10520 <nrfx_clock_init+0x14>)
   1050e:	791a      	ldrb	r2, [r3, #4]
   10510:	b922      	cbnz	r2, 1051c <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
   10512:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
   10514:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
   10516:	809a      	strh	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
   10518:	4802      	ldr	r0, [pc, #8]	; (10524 <nrfx_clock_init+0x18>)
   1051a:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
   1051c:	4802      	ldr	r0, [pc, #8]	; (10528 <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   1051e:	4770      	bx	lr
   10520:	200003b0 	.word	0x200003b0
   10524:	0bad0000 	.word	0x0bad0000
   10528:	0bad000c 	.word	0x0bad000c

0001052c <nrfx_clock_start>:
    m_clock_cb.module_initialized = false;
    NRFX_LOG_INFO("Uninitialized.");
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
   1052c:	b530      	push	{r4, r5, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
   1052e:	b110      	cbz	r0, 10536 <nrfx_clock_start+0xa>
   10530:	2801      	cmp	r0, #1
   10532:	d034      	beq.n	1059e <nrfx_clock_start+0x72>
#endif
        default:
            NRFX_ASSERT(0);
            break;
    }
}
   10534:	bd30      	pop	{r4, r5, pc}
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   10536:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1053a:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   1053e:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
   10542:	03c9      	lsls	r1, r1, #15
   10544:	d529      	bpl.n	1059a <nrfx_clock_start+0x6e>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
   10546:	f002 0203 	and.w	r2, r2, #3
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
   1054a:	2a01      	cmp	r2, #1
   1054c:	d125      	bne.n	1059a <nrfx_clock_start+0x6e>
    p_reg->LFCLKSRC = (uint32_t)(source);
   1054e:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   10552:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   10556:	2200      	movs	r2, #0
   10558:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   1055c:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    p_reg->INTENSET = mask;
   10560:	2202      	movs	r2, #2
   10562:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    core_debug = CoreDebug->DEMCR;
   10566:	4a13      	ldr	r2, [pc, #76]	; (105b4 <nrfx_clock_start+0x88>)
   10568:	f8d2 00fc 	ldr.w	r0, [r2, #252]	; 0xfc
    CoreDebug->DEMCR = core_debug | CoreDebug_DEMCR_TRCENA_Msk;
   1056c:	f040 7380 	orr.w	r3, r0, #16777216	; 0x1000000
   10570:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
    dwt_ctrl = DWT->CTRL;
   10574:	4b10      	ldr	r3, [pc, #64]	; (105b8 <nrfx_clock_start+0x8c>)
   10576:	681c      	ldr	r4, [r3, #0]
    DWT->CTRL = dwt_ctrl | DWT_CTRL_CYCCNTENA_Msk;
   10578:	f044 0101 	orr.w	r1, r4, #1
   1057c:	6019      	str	r1, [r3, #0]
    cyccnt_inital = DWT->CYCCNT;
   1057e:	685d      	ldr	r5, [r3, #4]
    while ((DWT->CYCCNT - cyccnt_inital) < ANOMALY_132_DELAY_CYCLES)
   10580:	6859      	ldr	r1, [r3, #4]
   10582:	1b49      	subs	r1, r1, r5
   10584:	f5b1 5f0a 	cmp.w	r1, #8832	; 0x2280
   10588:	d3fa      	bcc.n	10580 <nrfx_clock_start+0x54>
    DWT->CTRL = dwt_ctrl;
   1058a:	601c      	str	r4, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1058c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    CoreDebug->DEMCR = core_debug;
   10590:	f8c2 00fc 	str.w	r0, [r2, #252]	; 0xfc
   10594:	2201      	movs	r2, #1
   10596:	609a      	str	r2, [r3, #8]
}
   10598:	e7cc      	b.n	10534 <nrfx_clock_start+0x8>
    p_reg->LFCLKSRC = (uint32_t)(source);
   1059a:	2200      	movs	r2, #0
   1059c:	e7d7      	b.n	1054e <nrfx_clock_start+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1059e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   105a2:	2200      	movs	r2, #0
   105a4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   105a8:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
   105ac:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   105b0:	6018      	str	r0, [r3, #0]
}
   105b2:	e7bf      	b.n	10534 <nrfx_clock_start+0x8>
   105b4:	e000ed00 	.word	0xe000ed00
   105b8:	e0001000 	.word	0xe0001000

000105bc <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
   105bc:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
   105be:	b110      	cbz	r0, 105c6 <nrfx_clock_stop+0xa>
   105c0:	2801      	cmp	r0, #1
   105c2:	d017      	beq.n	105f4 <nrfx_clock_stop+0x38>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
   105c4:	bd38      	pop	{r3, r4, r5, pc}
    p_reg->INTENCLR = mask;
   105c6:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
   105ca:	2302      	movs	r3, #2
   105cc:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   105d0:	f8c4 0104 	str.w	r0, [r4, #260]	; 0x104
   105d4:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   105d8:	2301      	movs	r3, #1
   105da:	60e3      	str	r3, [r4, #12]
   105dc:	f242 7510 	movw	r5, #10000	; 0x2710
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   105e0:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
   105e4:	03db      	lsls	r3, r3, #15
   105e6:	d5ed      	bpl.n	105c4 <nrfx_clock_stop+0x8>
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
   105e8:	2001      	movs	r0, #1
   105ea:	f002 fa38 	bl	12a5e <nrfx_busy_wait>
   105ee:	3d01      	subs	r5, #1
   105f0:	d1f6      	bne.n	105e0 <nrfx_clock_stop+0x24>
   105f2:	e7e7      	b.n	105c4 <nrfx_clock_stop+0x8>
    p_reg->INTENCLR = mask;
   105f4:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   105f8:	2300      	movs	r3, #0
    p_reg->INTENCLR = mask;
   105fa:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   105fe:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   10602:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   10606:	6060      	str	r0, [r4, #4]
   10608:	f242 7510 	movw	r5, #10000	; 0x2710
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   1060c:	f8d4 340c 	ldr.w	r3, [r4, #1036]	; 0x40c
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   10610:	f8d4 240c 	ldr.w	r2, [r4, #1036]	; 0x40c
   10614:	03d2      	lsls	r2, r2, #15
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   10616:	f003 0301 	and.w	r3, r3, #1
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   1061a:	d505      	bpl.n	10628 <nrfx_clock_stop+0x6c>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
   1061c:	b123      	cbz	r3, 10628 <nrfx_clock_stop+0x6c>
   1061e:	2001      	movs	r0, #1
   10620:	f002 fa1d 	bl	12a5e <nrfx_busy_wait>
   10624:	3d01      	subs	r5, #1
   10626:	d1f1      	bne.n	1060c <nrfx_clock_stop+0x50>
            m_clock_cb.hfclk_started = false;
   10628:	4b01      	ldr	r3, [pc, #4]	; (10630 <nrfx_clock_stop+0x74>)
   1062a:	2200      	movs	r2, #0
   1062c:	715a      	strb	r2, [r3, #5]
   1062e:	e7c9      	b.n	105c4 <nrfx_clock_stop+0x8>
   10630:	200003b0 	.word	0x200003b0

00010634 <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   10634:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
   10638:	b510      	push	{r4, lr}
   1063a:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
   1063e:	b16a      	cbz	r2, 1065c <nrfx_power_clock_irq_handler+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   10640:	2200      	movs	r2, #0
   10642:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   10646:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
   1064a:	2201      	movs	r2, #1
   1064c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
   10650:	4b11      	ldr	r3, [pc, #68]	; (10698 <nrfx_power_clock_irq_handler+0x64>)
   10652:	7958      	ldrb	r0, [r3, #5]
   10654:	b910      	cbnz	r0, 1065c <nrfx_power_clock_irq_handler+0x28>
        {
            m_clock_cb.hfclk_started = true;
   10656:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   10658:	681b      	ldr	r3, [r3, #0]
   1065a:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   1065c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   10660:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
   10664:	b172      	cbz	r2, 10684 <nrfx_power_clock_irq_handler+0x50>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   10666:	2200      	movs	r2, #0
   10668:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   1066c:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   10670:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   10674:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
   10678:	0792      	lsls	r2, r2, #30
   1067a:	d104      	bne.n	10686 <nrfx_power_clock_irq_handler+0x52>
    p_reg->LFCLKSRC = (uint32_t)(source);
   1067c:	2201      	movs	r2, #1
   1067e:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   10682:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
   10684:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
   10686:	2202      	movs	r2, #2
   10688:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   1068c:	4b02      	ldr	r3, [pc, #8]	; (10698 <nrfx_power_clock_irq_handler+0x64>)
}
   1068e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   10692:	681b      	ldr	r3, [r3, #0]
   10694:	2001      	movs	r0, #1
   10696:	4718      	bx	r3
   10698:	200003b0 	.word	0x200003b0

0001069c <nrfx_gpiote_channel_free>:
    return m_cb.allocated_channels_mask & (1UL << index);
}

static bool is_app_channel(uint8_t index)
{
    return NRFX_GPIOTE_APP_CHANNELS_MASK & (1UL << index);
   1069c:	2301      	movs	r3, #1
   1069e:	fa03 f000 	lsl.w	r0, r3, r0
   106a2:	b2c3      	uxtb	r3, r0

nrfx_err_t nrfx_gpiote_channel_free(uint8_t channel)
{
    nrfx_err_t err_code = NRFX_SUCCESS;

    if (!is_app_channel(channel))
   106a4:	b193      	cbz	r3, 106cc <nrfx_gpiote_channel_free+0x30>
	__asm__ volatile(
   106a6:	f04f 0320 	mov.w	r3, #32
   106aa:	f3ef 8111 	mrs	r1, BASEPRI
   106ae:	f383 8811 	msr	BASEPRI, r3
   106b2:	f3bf 8f6f 	isb	sy
    m_cb.allocated_channels_mask &= ~(1UL << index);
   106b6:	4a06      	ldr	r2, [pc, #24]	; (106d0 <nrfx_gpiote_channel_free+0x34>)
   106b8:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
   106ba:	ea23 0000 	bic.w	r0, r3, r0
   106be:	64d0      	str	r0, [r2, #76]	; 0x4c
	__asm__ volatile(
   106c0:	f381 8811 	msr	BASEPRI, r1
   106c4:	f3bf 8f6f 	isb	sy
   106c8:	4802      	ldr	r0, [pc, #8]	; (106d4 <nrfx_gpiote_channel_free+0x38>)
   106ca:	4770      	bx	lr
    {
        err_code = NRFX_ERROR_INVALID_PARAM;
   106cc:	4802      	ldr	r0, [pc, #8]	; (106d8 <nrfx_gpiote_channel_free+0x3c>)
        NRFX_CRITICAL_SECTION_EXIT();
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   106ce:	4770      	bx	lr
   106d0:	200003b8 	.word	0x200003b8
   106d4:	0bad0000 	.word	0x0bad0000
   106d8:	0bad0004 	.word	0x0bad0004

000106dc <nrfx_gpiote_channel_alloc>:

nrfx_err_t nrfx_gpiote_channel_alloc(uint8_t * p_channel)
{
   106dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   106e0:	4605      	mov	r5, r0
    return m_cb.allocated_channels_mask & (1UL << index);
   106e2:	f8df e05c 	ldr.w	lr, [pc, #92]	; 10740 <nrfx_gpiote_channel_alloc+0x64>
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
   106e6:	4817      	ldr	r0, [pc, #92]	; (10744 <nrfx_gpiote_channel_alloc+0x68>)
        NRFX_CRITICAL_SECTION_ENTER();
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
        {
            channel_allocated_set(ch_idx);
            *p_channel = ch_idx;
            err_code = NRFX_SUCCESS;
   106e8:	f8df 805c 	ldr.w	r8, [pc, #92]	; 10748 <nrfx_gpiote_channel_alloc+0x6c>
{
   106ec:	2400      	movs	r4, #0
    uint32_t mask = NRFX_GPIOTE_APP_CHANNELS_MASK;
   106ee:	22ff      	movs	r2, #255	; 0xff
    return m_cb.allocated_channels_mask & (1UL << index);
   106f0:	2601      	movs	r6, #1
   106f2:	b2e3      	uxtb	r3, r4
	__asm__ volatile(
   106f4:	f04f 0120 	mov.w	r1, #32
   106f8:	f3ef 8c11 	mrs	ip, BASEPRI
   106fc:	f381 8811 	msr	BASEPRI, r1
   10700:	f3bf 8f6f 	isb	sy
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
   10704:	fa22 f103 	lsr.w	r1, r2, r3
   10708:	07c9      	lsls	r1, r1, #31
   1070a:	d50a      	bpl.n	10722 <nrfx_gpiote_channel_alloc+0x46>
    return m_cb.allocated_channels_mask & (1UL << index);
   1070c:	f8de 104c 	ldr.w	r1, [lr, #76]	; 0x4c
   10710:	fa06 f703 	lsl.w	r7, r6, r3
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
   10714:	4239      	tst	r1, r7
    m_cb.allocated_channels_mask |= (1UL << index);
   10716:	bf01      	itttt	eq
   10718:	4339      	orreq	r1, r7
   1071a:	f8ce 104c 	streq.w	r1, [lr, #76]	; 0x4c
            err_code = NRFX_SUCCESS;
   1071e:	4640      	moveq	r0, r8
            *p_channel = ch_idx;
   10720:	702b      	strbeq	r3, [r5, #0]
	__asm__ volatile(
   10722:	f38c 8811 	msr	BASEPRI, ip
   10726:	f3bf 8f6f 	isb	sy
        }
        NRFX_CRITICAL_SECTION_EXIT();

        if (err_code == NRFX_SUCCESS)
   1072a:	4540      	cmp	r0, r8
   1072c:	d005      	beq.n	1073a <nrfx_gpiote_channel_alloc+0x5e>
        {
            NRFX_LOG_INFO("Allocated channel: %d.", ch_idx);
            break;
        }

        mask &= ~(1UL << ch_idx);
   1072e:	fa06 f303 	lsl.w	r3, r6, r3
    for (uint8_t ch_idx = 0; mask != 0; ch_idx++)
   10732:	439a      	bics	r2, r3
   10734:	f104 0401 	add.w	r4, r4, #1
   10738:	d1db      	bne.n	106f2 <nrfx_gpiote_channel_alloc+0x16>
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   1073a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1073e:	bf00      	nop
   10740:	200003b8 	.word	0x200003b8
   10744:	0bad0002 	.word	0x0bad0002
   10748:	0bad0000 	.word	0x0bad0000

0001074c <nvmc_word_write>:
   1074c:	4a04      	ldr	r2, [pc, #16]	; (10760 <nvmc_word_write+0x14>)
   1074e:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
{
#if defined(NRF9160_XXAA)
    while (!nrf_nvmc_write_ready_check(NRF_NVMC))
    {}
#else
    while (!nrf_nvmc_ready_check(NRF_NVMC))
   10752:	07db      	lsls	r3, r3, #31
   10754:	d5fb      	bpl.n	1074e <nvmc_word_write+0x2>
    {}
#endif

    *(volatile uint32_t *)addr = value;
   10756:	6001      	str	r1, [r0, #0]
  __ASM volatile ("dmb 0xF":::"memory");
   10758:	f3bf 8f5f 	dmb	sy
    __DMB();
}
   1075c:	4770      	bx	lr
   1075e:	bf00      	nop
   10760:	4001e000 	.word	0x4001e000

00010764 <nrfx_nvmc_page_erase>:
NRF_STATIC_INLINE uint32_t nrf_ficr_codepagesize_get(NRF_FICR_Type const * p_reg)
{
#if defined(FICR_INFO_CODEPAGESIZE_CODEPAGESIZE_Msk)
    return p_reg->INFO.CODEPAGESIZE;
#else
    return p_reg->CODEPAGESIZE;
   10764:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   10768:	691a      	ldr	r2, [r3, #16]
    return !(addr % flash_page_size_get());
   1076a:	fbb0 f3f2 	udiv	r3, r0, r2
   1076e:	fb02 0313 	mls	r3, r2, r3, r0

nrfx_err_t nrfx_nvmc_page_erase(uint32_t addr)
{
    NRFX_ASSERT(is_valid_address(addr, false));

    if (!is_page_aligned_check(addr))
   10772:	b973      	cbnz	r3, 10792 <nrfx_nvmc_page_erase+0x2e>
#endif

NRF_STATIC_INLINE void nrf_nvmc_mode_set(NRF_NVMC_Type * p_reg,
                                         nrf_nvmc_mode_t mode)
{
    p_reg->CONFIG = (uint32_t)mode;
   10774:	4b08      	ldr	r3, [pc, #32]	; (10798 <nrfx_nvmc_page_erase+0x34>)
   10776:	2202      	movs	r2, #2
   10778:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    else
    {
        p_reg->ERASEPCR1 = page_addr;
    }
#elif defined(NRF52_SERIES)
    p_reg->ERASEPAGE = page_addr;
   1077c:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   10780:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
        return NRFX_ERROR_INVALID_ADDR;
    }

    nvmc_erase_mode_set();
    nrf_nvmc_page_erase_start(NRF_NVMC, addr);
    while (!nrf_nvmc_ready_check(NRF_NVMC))
   10784:	07d2      	lsls	r2, r2, #31
   10786:	d5fb      	bpl.n	10780 <nrfx_nvmc_page_erase+0x1c>
    p_reg->CONFIG = (uint32_t)mode;
   10788:	2200      	movs	r2, #0
    {}
    nvmc_readonly_mode_set();

    return NRFX_SUCCESS;
   1078a:	4804      	ldr	r0, [pc, #16]	; (1079c <nrfx_nvmc_page_erase+0x38>)
   1078c:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   10790:	4770      	bx	lr
        return NRFX_ERROR_INVALID_ADDR;
   10792:	4803      	ldr	r0, [pc, #12]	; (107a0 <nrfx_nvmc_page_erase+0x3c>)
}
   10794:	4770      	bx	lr
   10796:	bf00      	nop
   10798:	4001e000 	.word	0x4001e000
   1079c:	0bad0000 	.word	0x0bad0000
   107a0:	0bad000a 	.word	0x0bad000a

000107a4 <nrfx_nvmc_word_write>:

    nrfx_nvmc_word_write(aligned_addr, partial_word_create(addr, (const uint8_t *)&value, 2));
}

void nrfx_nvmc_word_write(uint32_t addr, uint32_t value)
{
   107a4:	b510      	push	{r4, lr}
   107a6:	4c05      	ldr	r4, [pc, #20]	; (107bc <nrfx_nvmc_word_write+0x18>)
   107a8:	2301      	movs	r3, #1
   107aa:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504
    NRFX_ASSERT(is_valid_address(addr, true));
    NRFX_ASSERT(nrfx_is_word_aligned((void const *)addr));

    nvmc_write_mode_set();

    nvmc_word_write(addr, value);
   107ae:	f7ff ffcd 	bl	1074c <nvmc_word_write>
   107b2:	2300      	movs	r3, #0
   107b4:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504

    nvmc_readonly_mode_set();
}
   107b8:	bd10      	pop	{r4, pc}
   107ba:	bf00      	nop
   107bc:	4001e000 	.word	0x4001e000

000107c0 <nrfx_ppi_channel_alloc>:
    group_allocated_clr_all();
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
   107c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
    uint32_t mask = NRFX_PPI_PROG_APP_CHANNELS_MASK;
   107c4:	4a14      	ldr	r2, [pc, #80]	; (10818 <nrfx_ppi_channel_alloc+0x58>)
    return ((m_channels_allocated & nrfx_ppi_channel_to_mask(channel)) != 0);
   107c6:	4e15      	ldr	r6, [pc, #84]	; (1081c <nrfx_ppi_channel_alloc+0x5c>)
        NRFX_CRITICAL_SECTION_ENTER();
        if ((mask & nrfx_ppi_channel_to_mask(channel)) && (!is_allocated_channel(channel)))
        {
            channel_allocated_set(channel);
            *p_channel = channel;
            err_code   = NRFX_SUCCESS;
   107c8:	4f15      	ldr	r7, [pc, #84]	; (10820 <nrfx_ppi_channel_alloc+0x60>)
{
   107ca:	4605      	mov	r5, r0
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
   107cc:	4815      	ldr	r0, [pc, #84]	; (10824 <nrfx_ppi_channel_alloc+0x64>)
{
   107ce:	2400      	movs	r4, #0
NRFX_STATIC_INLINE uint32_t nrfx_ppi_task_addr_group_disable_get(nrf_ppi_channel_group_t group);

#ifndef NRFX_DECLARE_ONLY
NRFX_STATIC_INLINE uint32_t nrfx_ppi_channel_to_mask(nrf_ppi_channel_t channel)
{
    return (1uL << (uint32_t) channel);
   107d0:	f04f 0e01 	mov.w	lr, #1
   107d4:	fa5f fc84 	uxtb.w	ip, r4
	__asm__ volatile(
   107d8:	f04f 0320 	mov.w	r3, #32
   107dc:	f3ef 8811 	mrs	r8, BASEPRI
   107e0:	f383 8811 	msr	BASEPRI, r3
   107e4:	f3bf 8f6f 	isb	sy
   107e8:	fa0e f30c 	lsl.w	r3, lr, ip
        if ((mask & nrfx_ppi_channel_to_mask(channel)) && (!is_allocated_channel(channel)))
   107ec:	4213      	tst	r3, r2
   107ee:	d007      	beq.n	10800 <nrfx_ppi_channel_alloc+0x40>
    return ((m_channels_allocated & nrfx_ppi_channel_to_mask(channel)) != 0);
   107f0:	6831      	ldr	r1, [r6, #0]
        if ((mask & nrfx_ppi_channel_to_mask(channel)) && (!is_allocated_channel(channel)))
   107f2:	420b      	tst	r3, r1
    m_channels_allocated |= nrfx_ppi_channel_to_mask(channel);
   107f4:	bf01      	itttt	eq
   107f6:	4319      	orreq	r1, r3
   107f8:	6031      	streq	r1, [r6, #0]
            *p_channel = channel;
   107fa:	f885 c000 	strbeq.w	ip, [r5]
            err_code   = NRFX_SUCCESS;
   107fe:	4638      	moveq	r0, r7
	__asm__ volatile(
   10800:	f388 8811 	msr	BASEPRI, r8
   10804:	f3bf 8f6f 	isb	sy
        }
        NRFX_CRITICAL_SECTION_EXIT();
        if (err_code == NRFX_SUCCESS)
   10808:	42b8      	cmp	r0, r7
   1080a:	d003      	beq.n	10814 <nrfx_ppi_channel_alloc+0x54>
    for (uint8_t ch_idx = NRF_PPI_CHANNEL0; mask != 0; ch_idx++)
   1080c:	439a      	bics	r2, r3
   1080e:	f104 0401 	add.w	r4, r4, #1
   10812:	d1df      	bne.n	107d4 <nrfx_ppi_channel_alloc+0x14>
        mask &= ~nrfx_ppi_channel_to_mask(channel);
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   10814:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10818:	000fffff 	.word	0x000fffff
   1081c:	20000408 	.word	0x20000408
   10820:	0bad0000 	.word	0x0bad0000
   10824:	0bad0002 	.word	0x0bad0002

00010828 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
   10828:	b510      	push	{r4, lr}
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   1082a:	4c11      	ldr	r4, [pc, #68]	; (10870 <_DoInit+0x48>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
   1082c:	4a11      	ldr	r2, [pc, #68]	; (10874 <_DoInit+0x4c>)
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
   1082e:	4912      	ldr	r1, [pc, #72]	; (10878 <_DoInit+0x50>)
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   10830:	2303      	movs	r3, #3
   10832:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
   10834:	6163      	str	r3, [r4, #20]
  p->aUp[0].pBuffer       = _acUpBuffer;
   10836:	4b11      	ldr	r3, [pc, #68]	; (1087c <_DoInit+0x54>)
  p->aUp[0].sName         = "Terminal";
   10838:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
   1083a:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
   1083c:	f44f 6380 	mov.w	r3, #1024	; 0x400
   10840:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
   10842:	2300      	movs	r3, #0
   10844:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
   10846:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   10848:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].sName         = "Terminal";
   1084a:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
   1084c:	4a0c      	ldr	r2, [pc, #48]	; (10880 <_DoInit+0x58>)
   1084e:	6662      	str	r2, [r4, #100]	; 0x64
  STRCPY((char*)&p->acID[7], "RTT");
   10850:	1de0      	adds	r0, r4, #7
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
   10852:	2210      	movs	r2, #16
   10854:	66a2      	str	r2, [r4, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
   10856:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
   10858:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   1085a:	6763      	str	r3, [r4, #116]	; 0x74
  STRCPY((char*)&p->acID[7], "RTT");
   1085c:	f001 ff58 	bl	12710 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  STRCPY((char*)&p->acID[0], "SEGGER");
   10860:	4908      	ldr	r1, [pc, #32]	; (10884 <_DoInit+0x5c>)
   10862:	4620      	mov	r0, r4
   10864:	f001 ff54 	bl	12710 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  p->acID[6] = ' ';
   10868:	2320      	movs	r3, #32
   1086a:	71a3      	strb	r3, [r4, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
}
   1086c:	bd10      	pop	{r4, pc}
   1086e:	bf00      	nop
   10870:	2000040c 	.word	0x2000040c
   10874:	00013d0c 	.word	0x00013d0c
   10878:	00013d15 	.word	0x00013d15
   1087c:	2000051c 	.word	0x2000051c
   10880:	2000050c 	.word	0x2000050c
   10884:	00013d19 	.word	0x00013d19

00010888 <SEGGER_RTT_WriteSkipNoLock>:
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
#if (RTT_USE_ASM == 0)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   10888:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  //
  // 1) is the most common case for large buffers and assuming that J-Link reads the data fast enough
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  RdOff = pRing->RdOff;
   1088c:	4f23      	ldr	r7, [pc, #140]	; (1091c <SEGGER_RTT_WriteSkipNoLock+0x94>)
   1088e:	f04f 0b18 	mov.w	fp, #24
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   10892:	4614      	mov	r4, r2
  RdOff = pRing->RdOff;
   10894:	fb0b 7200 	mla	r2, fp, r0, r7
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   10898:	4606      	mov	r6, r0
  RdOff = pRing->RdOff;
   1089a:	6a93      	ldr	r3, [r2, #40]	; 0x28
  WrOff = pRing->WrOff;
   1089c:	6a55      	ldr	r5, [r2, #36]	; 0x24
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
   1089e:	42ab      	cmp	r3, r5
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   108a0:	4688      	mov	r8, r1
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
   108a2:	d834      	bhi.n	1090e <SEGGER_RTT_WriteSkipNoLock+0x86>
    Avail = pRing->SizeOfBuffer - WrOff - 1u;           // Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
   108a4:	f8d2 a020 	ldr.w	sl, [r2, #32]
   108a8:	ebaa 0905 	sub.w	r9, sl, r5
   108ac:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
    if (Avail >= NumBytes) {                            // Case 1)?
   108b0:	4294      	cmp	r4, r2
   108b2:	d811      	bhi.n	108d8 <SEGGER_RTT_WriteSkipNoLock+0x50>
CopyStraight:
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   108b4:	f04f 0918 	mov.w	r9, #24
   108b8:	fb06 9309 	mla	r3, r6, r9, r9
   108bc:	443b      	add	r3, r7
      memcpy((void*)pDst, pData, NumBytes);
   108be:	4622      	mov	r2, r4
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   108c0:	6858      	ldr	r0, [r3, #4]
      memcpy((void*)pDst, pData, NumBytes);
   108c2:	4641      	mov	r1, r8
   108c4:	4428      	add	r0, r5
   108c6:	f001 ff6c 	bl	127a2 <memcpy>
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = WrOff + NumBytes;
   108ca:	fb09 7606 	mla	r6, r9, r6, r7
   108ce:	442c      	add	r4, r5
      if (NumBytes) {
        pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
        memcpy((void*)pDst, pData + Rem, NumBytes);
      }
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = NumBytes;
   108d0:	6274      	str	r4, [r6, #36]	; 0x24
      return 1;
   108d2:	2001      	movs	r0, #1
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
      goto CopyStraight;
    }
  }
  return 0;     // No space in buffer
}
   108d4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    Avail += RdOff;                                     // Space incl. wrap-around
   108d8:	4413      	add	r3, r2
    if (Avail >= NumBytes) {                            // Case 2? => If not, we have case 3) (does not fit)
   108da:	429c      	cmp	r4, r3
   108dc:	d81b      	bhi.n	10916 <SEGGER_RTT_WriteSkipNoLock+0x8e>
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   108de:	fb00 bb0b 	mla	fp, r0, fp, fp
   108e2:	44bb      	add	fp, r7
      memcpy((void*)pDst, pData, Rem);                  // Copy 1st chunk
   108e4:	464a      	mov	r2, r9
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   108e6:	f8db 0004 	ldr.w	r0, [fp, #4]
   108ea:	442c      	add	r4, r5
      memcpy((void*)pDst, pData, Rem);                  // Copy 1st chunk
   108ec:	4428      	add	r0, r5
   108ee:	f001 ff58 	bl	127a2 <memcpy>
      if (NumBytes) {
   108f2:	ebb4 040a 	subs.w	r4, r4, sl
   108f6:	d006      	beq.n	10906 <SEGGER_RTT_WriteSkipNoLock+0x7e>
        memcpy((void*)pDst, pData + Rem, NumBytes);
   108f8:	f8db 0004 	ldr.w	r0, [fp, #4]
   108fc:	4622      	mov	r2, r4
   108fe:	eb08 0109 	add.w	r1, r8, r9
   10902:	f001 ff4e 	bl	127a2 <memcpy>
      pRing->WrOff = NumBytes;
   10906:	2018      	movs	r0, #24
   10908:	fb00 7606 	mla	r6, r0, r6, r7
   1090c:	e7e0      	b.n	108d0 <SEGGER_RTT_WriteSkipNoLock+0x48>
    Avail = RdOff - WrOff - 1u;
   1090e:	3b01      	subs	r3, #1
   10910:	1b5b      	subs	r3, r3, r5
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
   10912:	42a3      	cmp	r3, r4
   10914:	d2ce      	bcs.n	108b4 <SEGGER_RTT_WriteSkipNoLock+0x2c>
  return 0;     // No space in buffer
   10916:	2000      	movs	r0, #0
   10918:	e7dc      	b.n	108d4 <SEGGER_RTT_WriteSkipNoLock+0x4c>
   1091a:	bf00      	nop
   1091c:	2000040c 	.word	0x2000040c

00010920 <SEGGER_RTT_HasDataUp>:
unsigned SEGGER_RTT_HasDataUp(unsigned BufferIndex) {
  SEGGER_RTT_BUFFER_UP* pRing;
  unsigned                v;

  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  v = pRing->RdOff;
   10920:	4b03      	ldr	r3, [pc, #12]	; (10930 <SEGGER_RTT_HasDataUp+0x10>)
   10922:	2218      	movs	r2, #24
   10924:	fb02 3300 	mla	r3, r2, r0, r3
   10928:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  return pRing->WrOff - v;
   1092a:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
   1092c:	1a80      	subs	r0, r0, r2
   1092e:	4770      	bx	lr
   10930:	2000040c 	.word	0x2000040c

00010934 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   10934:	4b0e      	ldr	r3, [pc, #56]	; (10970 <z_sys_init_run_level+0x3c>)
{
   10936:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   10938:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   1093c:	3001      	adds	r0, #1
   1093e:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   10942:	42a6      	cmp	r6, r4
   10944:	d800      	bhi.n	10948 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
   10946:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
   10948:	e9d4 3500 	ldrd	r3, r5, [r4]
   1094c:	4628      	mov	r0, r5
   1094e:	4798      	blx	r3
		if (dev != NULL) {
   10950:	b165      	cbz	r5, 1096c <z_sys_init_run_level+0x38>
				dev->state->init_res = rc;
   10952:	68eb      	ldr	r3, [r5, #12]
			if (rc != 0) {
   10954:	b130      	cbz	r0, 10964 <z_sys_init_run_level+0x30>
				if (rc < 0) {
   10956:	2800      	cmp	r0, #0
   10958:	bfb8      	it	lt
   1095a:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
   1095c:	28ff      	cmp	r0, #255	; 0xff
   1095e:	bfa8      	it	ge
   10960:	20ff      	movge	r0, #255	; 0xff
   10962:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
   10964:	785a      	ldrb	r2, [r3, #1]
   10966:	f042 0201 	orr.w	r2, r2, #1
   1096a:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1096c:	3408      	adds	r4, #8
   1096e:	e7e8      	b.n	10942 <z_sys_init_run_level+0xe>
   10970:	00013208 	.word	0x00013208

00010974 <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
   10974:	b570      	push	{r4, r5, r6, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
   10976:	4605      	mov	r5, r0
   10978:	b910      	cbnz	r0, 10980 <z_impl_device_get_binding+0xc>
		return NULL;
   1097a:	2400      	movs	r4, #0
			return dev;
		}
	}

	return NULL;
}
   1097c:	4620      	mov	r0, r4
   1097e:	bd70      	pop	{r4, r5, r6, pc}
	if ((name == NULL) || (name[0] == '\0')) {
   10980:	7803      	ldrb	r3, [r0, #0]
   10982:	2b00      	cmp	r3, #0
   10984:	d0f9      	beq.n	1097a <z_impl_device_get_binding+0x6>
	for (dev = __device_start; dev != __device_end; dev++) {
   10986:	4c0e      	ldr	r4, [pc, #56]	; (109c0 <z_impl_device_get_binding+0x4c>)
   10988:	4e0e      	ldr	r6, [pc, #56]	; (109c4 <z_impl_device_get_binding+0x50>)
   1098a:	42b4      	cmp	r4, r6
   1098c:	d108      	bne.n	109a0 <z_impl_device_get_binding+0x2c>
	for (dev = __device_start; dev != __device_end; dev++) {
   1098e:	4c0c      	ldr	r4, [pc, #48]	; (109c0 <z_impl_device_get_binding+0x4c>)
   10990:	42b4      	cmp	r4, r6
   10992:	d0f2      	beq.n	1097a <z_impl_device_get_binding+0x6>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   10994:	4620      	mov	r0, r4
   10996:	f002 f884 	bl	12aa2 <z_device_ready>
   1099a:	b950      	cbnz	r0, 109b2 <z_impl_device_get_binding+0x3e>
	for (dev = __device_start; dev != __device_end; dev++) {
   1099c:	3418      	adds	r4, #24
   1099e:	e7f7      	b.n	10990 <z_impl_device_get_binding+0x1c>
		if (z_device_ready(dev) && (dev->name == name)) {
   109a0:	4620      	mov	r0, r4
   109a2:	f002 f87e 	bl	12aa2 <z_device_ready>
   109a6:	b110      	cbz	r0, 109ae <z_impl_device_get_binding+0x3a>
   109a8:	6823      	ldr	r3, [r4, #0]
   109aa:	42ab      	cmp	r3, r5
   109ac:	d0e6      	beq.n	1097c <z_impl_device_get_binding+0x8>
	for (dev = __device_start; dev != __device_end; dev++) {
   109ae:	3418      	adds	r4, #24
   109b0:	e7eb      	b.n	1098a <z_impl_device_get_binding+0x16>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   109b2:	6821      	ldr	r1, [r4, #0]
   109b4:	4628      	mov	r0, r5
   109b6:	f001 fed7 	bl	12768 <strcmp>
   109ba:	2800      	cmp	r0, #0
   109bc:	d1ee      	bne.n	1099c <z_impl_device_get_binding+0x28>
   109be:	e7dd      	b.n	1097c <z_impl_device_get_binding+0x8>
   109c0:	00012e64 	.word	0x00012e64
   109c4:	00012edc 	.word	0x00012edc

000109c8 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   109c8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   109cc:	4606      	mov	r6, r0
   109ce:	460f      	mov	r7, r1
	__asm__ volatile(
   109d0:	f04f 0320 	mov.w	r3, #32
   109d4:	f3ef 8811 	mrs	r8, BASEPRI
   109d8:	f383 8811 	msr	BASEPRI, r3
   109dc:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
   109e0:	f000 fe10 	bl	11604 <z_impl_k_current_get>
   109e4:	4c1f      	ldr	r4, [pc, #124]	; (10a64 <z_fatal_error+0x9c>)
   109e6:	4b20      	ldr	r3, [pc, #128]	; (10a68 <z_fatal_error+0xa0>)
   109e8:	1ae4      	subs	r4, r4, r3
   109ea:	2e04      	cmp	r6, #4
   109ec:	ea4f 04d4 	mov.w	r4, r4, lsr #3
   109f0:	bf96      	itet	ls
   109f2:	4a1e      	ldrls	r2, [pc, #120]	; (10a6c <z_fatal_error+0xa4>)
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   109f4:	4a1e      	ldrhi	r2, [pc, #120]	; (10a70 <z_fatal_error+0xa8>)
   109f6:	f852 2026 	ldrls.w	r2, [r2, r6, lsl #2]
   109fa:	01a4      	lsls	r4, r4, #6
   109fc:	f044 0301 	orr.w	r3, r4, #1
   10a00:	4605      	mov	r5, r0
   10a02:	f8ad 3000 	strh.w	r3, [sp]
   10a06:	481b      	ldr	r0, [pc, #108]	; (10a74 <z_fatal_error+0xac>)
   10a08:	2300      	movs	r3, #0
   10a0a:	4631      	mov	r1, r6
   10a0c:	f001 fa09 	bl	11e22 <log_3>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   10a10:	b147      	cbz	r7, 10a24 <z_fatal_error+0x5c>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   10a12:	69fb      	ldr	r3, [r7, #28]
   10a14:	f3c3 0308 	ubfx	r3, r3, #0, #9
   10a18:	b123      	cbz	r3, 10a24 <z_fatal_error+0x5c>
		LOG_ERR("Fault during interrupt handling\n");
   10a1a:	4817      	ldr	r0, [pc, #92]	; (10a78 <z_fatal_error+0xb0>)
   10a1c:	f044 0101 	orr.w	r1, r4, #1
   10a20:	f001 f9c5 	bl	11dae <log_0>
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   10a24:	f044 0401 	orr.w	r4, r4, #1
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
   10a28:	b12d      	cbz	r5, 10a36 <z_fatal_error+0x6e>
   10a2a:	4628      	mov	r0, r5
   10a2c:	f002 f890 	bl	12b50 <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
   10a30:	b108      	cbz	r0, 10a36 <z_fatal_error+0x6e>
   10a32:	7803      	ldrb	r3, [r0, #0]
   10a34:	b903      	cbnz	r3, 10a38 <z_fatal_error+0x70>
		thread_name = "unknown";
   10a36:	4811      	ldr	r0, [pc, #68]	; (10a7c <z_fatal_error+0xb4>)
{
	if (IS_ENABLED(CONFIG_LOG_MINIMAL) || IS_ENABLED(CONFIG_LOG2)) {
		return (char *)str;
	}

	return z_log_strdup(str);
   10a38:	f7fc fd6e 	bl	d518 <z_log_strdup>
	LOG_ERR("Current thread: %p (%s)", thread,
   10a3c:	4623      	mov	r3, r4
   10a3e:	4602      	mov	r2, r0
   10a40:	4629      	mov	r1, r5
   10a42:	480f      	ldr	r0, [pc, #60]	; (10a80 <z_fatal_error+0xb8>)
   10a44:	f001 f9d4 	bl	11df0 <log_2>
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
   10a48:	4639      	mov	r1, r7
   10a4a:	4630      	mov	r0, r6
   10a4c:	f7ff fbe8 	bl	10220 <k_sys_fatal_error_handler>
	__asm__ volatile(
   10a50:	f388 8811 	msr	BASEPRI, r8
   10a54:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   10a58:	4628      	mov	r0, r5
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   10a5a:	b002      	add	sp, #8
   10a5c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   10a60:	f7fe be40 	b.w	f6e4 <z_impl_k_thread_abort>
   10a64:	00013044 	.word	0x00013044
   10a68:	00013014 	.word	0x00013014
   10a6c:	00013220 	.word	0x00013220
   10a70:	00013d20 	.word	0x00013d20
   10a74:	00013d36 	.word	0x00013d36
   10a78:	00013d5e 	.word	0x00013d5e
   10a7c:	00013d2e 	.word	0x00013d2e
   10a80:	00013d7f 	.word	0x00013d7f

00010a84 <z_bss_zero>:
 * @return N/A
 */
__boot_func
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
   10a84:	4802      	ldr	r0, [pc, #8]	; (10a90 <z_bss_zero+0xc>)
   10a86:	4a03      	ldr	r2, [pc, #12]	; (10a94 <z_bss_zero+0x10>)
   10a88:	2100      	movs	r1, #0
   10a8a:	1a12      	subs	r2, r2, r0
   10a8c:	f001 be94 	b.w	127b8 <memset>
   10a90:	20000058 	.word	0x20000058
   10a94:	20000920 	.word	0x20000920

00010a98 <bg_thread_main>:
 *
 * @return N/A
 */
__boot_func
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
   10a98:	b508      	push	{r3, lr}
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
   10a9a:	4b0a      	ldr	r3, [pc, #40]	; (10ac4 <bg_thread_main+0x2c>)
   10a9c:	2201      	movs	r2, #1

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   10a9e:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
   10aa0:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   10aa2:	f7ff ff47 	bl	10934 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
   10aa6:	f000 ffd3 	bl	11a50 <boot_banner>
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
   10aaa:	2003      	movs	r0, #3
   10aac:	f7ff ff42 	bl	10934 <z_sys_init_run_level>

	z_init_static_threads();
   10ab0:	f000 f944 	bl	10d3c <z_init_static_threads>
	z_sys_init_run_level(_SYS_INIT_LEVEL_SMP);
#endif

	extern void main(void);

	main();
   10ab4:	f7fb fd94 	bl	c5e0 <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   10ab8:	4a03      	ldr	r2, [pc, #12]	; (10ac8 <bg_thread_main+0x30>)
   10aba:	7b13      	ldrb	r3, [r2, #12]
   10abc:	f023 0301 	bic.w	r3, r3, #1
   10ac0:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   10ac2:	bd08      	pop	{r3, pc}
   10ac4:	2000091c 	.word	0x2000091c
   10ac8:	20000190 	.word	0x20000190

00010acc <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
   10acc:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
   10ad0:	b0a7      	sub	sp, #156	; 0x9c
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	LOG_CORE_INIT();
   10ad2:	f7fc fc59 	bl	d388 <log_core_init>
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
   10ad6:	f8df 90e0 	ldr.w	r9, [pc, #224]	; 10bb8 <z_cstart+0xec>
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   10ada:	f389 8808 	msr	MSP, r9
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
   10ade:	4d37      	ldr	r5, [pc, #220]	; (10bbc <z_cstart+0xf0>)
	_kernel.ready_q.cache = &z_main_thread;
   10ae0:	4e37      	ldr	r6, [pc, #220]	; (10bc0 <z_cstart+0xf4>)
   10ae2:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   10ae4:	f8df a0dc 	ldr.w	sl, [pc, #220]	; 10bc4 <z_cstart+0xf8>
	z_setup_new_thread(thread, stack,
   10ae8:	4f37      	ldr	r7, [pc, #220]	; (10bc8 <z_cstart+0xfc>)
   10aea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   10aee:	2400      	movs	r4, #0
   10af0:	616b      	str	r3, [r5, #20]
   10af2:	23e0      	movs	r3, #224	; 0xe0
   10af4:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   10af8:	77ec      	strb	r4, [r5, #31]
   10afa:	762c      	strb	r4, [r5, #24]
   10afc:	766c      	strb	r4, [r5, #25]
   10afe:	76ac      	strb	r4, [r5, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   10b00:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   10b02:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   10b06:	626b      	str	r3, [r5, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   10b08:	f7fe fd86 	bl	f618 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   10b0c:	f7fe faa4 	bl	f058 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   10b10:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   10b14:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   10b16:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
   10b18:	f7fe feaa 	bl	f870 <z_arm_mpu_init>
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
   10b1c:	4d2b      	ldr	r5, [pc, #172]	; (10bcc <z_cstart+0x100>)
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   10b1e:	f7fe fdf3 	bl	f708 <z_arm_configure_static_mpu_regions>
	dummy_thread->base.user_options = K_ESSENTIAL;
   10b22:	f240 1301 	movw	r3, #257	; 0x101
   10b26:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
   10b2a:	ab06      	add	r3, sp, #24
   10b2c:	60ab      	str	r3, [r5, #8]
	dummy_thread->stack_info.size = 0U;
   10b2e:	e9cd 441f 	strd	r4, r4, [sp, #124]	; 0x7c
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
   10b32:	f001 ffb5 	bl	12aa0 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   10b36:	4620      	mov	r0, r4
   10b38:	f7ff fefc 	bl	10934 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   10b3c:	2001      	movs	r0, #1
   10b3e:	f7ff fef9 	bl	10934 <z_sys_init_run_level>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   10b42:	f04f 0b01 	mov.w	fp, #1
	z_sched_init();
   10b46:	f000 fcaf 	bl	114a8 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   10b4a:	4b21      	ldr	r3, [pc, #132]	; (10bd0 <z_cstart+0x104>)
	_kernel.ready_q.cache = &z_main_thread;
   10b4c:	626e      	str	r6, [r5, #36]	; 0x24
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   10b4e:	4921      	ldr	r1, [pc, #132]	; (10bd4 <z_cstart+0x108>)
   10b50:	9305      	str	r3, [sp, #20]
   10b52:	f44f 6280 	mov.w	r2, #1024	; 0x400
   10b56:	4653      	mov	r3, sl
   10b58:	e9cd 4b03 	strd	r4, fp, [sp, #12]
   10b5c:	e9cd 4401 	strd	r4, r4, [sp, #4]
   10b60:	9400      	str	r4, [sp, #0]
   10b62:	4630      	mov	r0, r6
   10b64:	f000 f88c 	bl	10c80 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   10b68:	7b73      	ldrb	r3, [r6, #13]
   10b6a:	4680      	mov	r8, r0
   10b6c:	f023 0304 	bic.w	r3, r3, #4
	z_ready_thread(&z_main_thread);
   10b70:	4630      	mov	r0, r6
   10b72:	7373      	strb	r3, [r6, #13]
   10b74:	f002 f878 	bl	12c68 <z_ready_thread>
	z_setup_new_thread(thread, stack,
   10b78:	230f      	movs	r3, #15
   10b7a:	e9cd 4302 	strd	r4, r3, [sp, #8]
   10b7e:	4916      	ldr	r1, [pc, #88]	; (10bd8 <z_cstart+0x10c>)
   10b80:	4b16      	ldr	r3, [pc, #88]	; (10bdc <z_cstart+0x110>)
   10b82:	f44f 72a0 	mov.w	r2, #320	; 0x140
   10b86:	e9cd b404 	strd	fp, r4, [sp, #16]
   10b8a:	e9cd 5400 	strd	r5, r4, [sp]
   10b8e:	4638      	mov	r0, r7
   10b90:	f000 f876 	bl	10c80 <z_setup_new_thread>
   10b94:	7b7b      	ldrb	r3, [r7, #13]
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
   10b96:	60ef      	str	r7, [r5, #12]
   10b98:	f023 0304 	bic.w	r3, r3, #4
   10b9c:	737b      	strb	r3, [r7, #13]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
   10b9e:	f105 0318 	add.w	r3, r5, #24
	list->tail = (sys_dnode_t *)list;
   10ba2:	e9c5 3306 	strd	r3, r3, [r5, #24]
		_kernel.cpus[i].id = i;
   10ba6:	752c      	strb	r4, [r5, #20]
		_kernel.cpus[i].irq_stack =
   10ba8:	f8c5 9004 	str.w	r9, [r5, #4]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   10bac:	4652      	mov	r2, sl
   10bae:	4641      	mov	r1, r8
   10bb0:	4630      	mov	r0, r6
   10bb2:	f7fe fa3b 	bl	f02c <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   10bb6:	bf00      	nop
   10bb8:	200019e0 	.word	0x200019e0
   10bbc:	e000ed00 	.word	0xe000ed00
   10bc0:	20000190 	.word	0x20000190
   10bc4:	00010a99 	.word	0x00010a99
   10bc8:	20000110 	.word	0x20000110
   10bcc:	200004b4 	.word	0x200004b4
   10bd0:	00013de1 	.word	0x00013de1
   10bd4:	20000c40 	.word	0x20000c40
   10bd8:	20001060 	.word	0x20001060
   10bdc:	00010df5 	.word	0x00010df5

00010be0 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
   10be0:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   10be2:	4b0e      	ldr	r3, [pc, #56]	; (10c1c <init_mem_slab_module+0x3c>)
   10be4:	4c0e      	ldr	r4, [pc, #56]	; (10c20 <init_mem_slab_module+0x40>)
   10be6:	42a3      	cmp	r3, r4
   10be8:	d301      	bcc.n	10bee <init_mem_slab_module+0xe>
			goto out;
		}
		z_object_init(slab);
	}

out:
   10bea:	2000      	movs	r0, #0
	return rc;
}
   10bec:	bd70      	pop	{r4, r5, r6, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   10bee:	e9d3 0103 	ldrd	r0, r1, [r3, #12]
   10bf2:	ea41 0200 	orr.w	r2, r1, r0
   10bf6:	f012 0203 	ands.w	r2, r2, #3
   10bfa:	d10b      	bne.n	10c14 <init_mem_slab_module+0x34>
	for (j = 0U; j < slab->num_blocks; j++) {
   10bfc:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
   10bfe:	615a      	str	r2, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   10c00:	42aa      	cmp	r2, r5
   10c02:	d101      	bne.n	10c08 <init_mem_slab_module+0x28>
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   10c04:	331c      	adds	r3, #28
   10c06:	e7ee      	b.n	10be6 <init_mem_slab_module+0x6>
		*(char **)p = slab->free_list;
   10c08:	695e      	ldr	r6, [r3, #20]
   10c0a:	600e      	str	r6, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
   10c0c:	3201      	adds	r2, #1
		slab->free_list = p;
   10c0e:	6159      	str	r1, [r3, #20]
		p += slab->block_size;
   10c10:	4401      	add	r1, r0
	for (j = 0U; j < slab->num_blocks; j++) {
   10c12:	e7f5      	b.n	10c00 <init_mem_slab_module+0x20>
	return rc;
   10c14:	f06f 0015 	mvn.w	r0, #21
   10c18:	e7e8      	b.n	10bec <init_mem_slab_module+0xc>
   10c1a:	bf00      	nop
   10c1c:	20000030 	.word	0x20000030
   10c20:	20000030 	.word	0x20000030

00010c24 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   10c24:	b537      	push	{r0, r1, r2, r4, r5, lr}
   10c26:	460c      	mov	r4, r1
	__asm__ volatile(
   10c28:	f04f 0520 	mov.w	r5, #32
   10c2c:	f3ef 8111 	mrs	r1, BASEPRI
   10c30:	f385 8811 	msr	BASEPRI, r5
   10c34:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
   10c38:	6945      	ldr	r5, [r0, #20]
   10c3a:	b15d      	cbz	r5, 10c54 <k_mem_slab_alloc+0x30>
		/* take a free block */
		*mem = slab->free_list;
   10c3c:	6025      	str	r5, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
   10c3e:	682b      	ldr	r3, [r5, #0]
   10c40:	6143      	str	r3, [r0, #20]
		slab->num_used++;
   10c42:	6983      	ldr	r3, [r0, #24]
   10c44:	3301      	adds	r3, #1
   10c46:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
   10c48:	2000      	movs	r0, #0
	__asm__ volatile(
   10c4a:	f381 8811 	msr	BASEPRI, r1
   10c4e:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
   10c52:	e011      	b.n	10c78 <k_mem_slab_alloc+0x54>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
   10c54:	ea52 0c03 	orrs.w	ip, r2, r3
   10c58:	d103      	bne.n	10c62 <k_mem_slab_alloc+0x3e>
		*mem = NULL;
   10c5a:	6025      	str	r5, [r4, #0]
		result = -ENOMEM;
   10c5c:	f06f 000b 	mvn.w	r0, #11
   10c60:	e7f3      	b.n	10c4a <k_mem_slab_alloc+0x26>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
   10c62:	e9cd 2300 	strd	r2, r3, [sp]
   10c66:	4602      	mov	r2, r0
   10c68:	3008      	adds	r0, #8
   10c6a:	f000 faa5 	bl	111b8 <z_pend_curr>
		if (result == 0) {
   10c6e:	b918      	cbnz	r0, 10c78 <k_mem_slab_alloc+0x54>
			*mem = _current->base.swap_data;
   10c70:	4b02      	ldr	r3, [pc, #8]	; (10c7c <k_mem_slab_alloc+0x58>)
   10c72:	689b      	ldr	r3, [r3, #8]
   10c74:	695b      	ldr	r3, [r3, #20]
   10c76:	6023      	str	r3, [r4, #0]
}
   10c78:	b003      	add	sp, #12
   10c7a:	bd30      	pop	{r4, r5, pc}
   10c7c:	200004b4 	.word	0x200004b4

00010c80 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   10c80:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
   10c84:	9e0e      	ldr	r6, [sp, #56]	; 0x38
   10c86:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   10c88:	2604      	movs	r6, #4
   10c8a:	7346      	strb	r6, [r0, #13]

	thread_base->prio = priority;
   10c8c:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   10c8e:	7386      	strb	r6, [r0, #14]
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   10c90:	f100 0558 	add.w	r5, r0, #88	; 0x58
{
   10c94:	460f      	mov	r7, r1
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   10c96:	1dd6      	adds	r6, r2, #7
   10c98:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   10c9c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	thread_base->pended_on = NULL;
   10c9e:	2500      	movs	r5, #0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   10ca0:	f026 0607 	bic.w	r6, r6, #7

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
   10ca4:	3720      	adds	r7, #32
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
   10ca6:	e9c0 5506 	strd	r5, r5, [r0, #24]
	new_thread->stack_info.size = stack_buf_size;
   10caa:	e9c0 7619 	strd	r7, r6, [r0, #100]	; 0x64
	thread_base->pended_on = NULL;
   10cae:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
   10cb0:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
   10cb2:	66c5      	str	r5, [r0, #108]	; 0x6c
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   10cb4:	f106 0820 	add.w	r8, r6, #32
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   10cb8:	9202      	str	r2, [sp, #8]
   10cba:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   10cbc:	9201      	str	r2, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
   10cbe:	4488      	add	r8, r1
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   10cc0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   10cc2:	9200      	str	r2, [sp, #0]
   10cc4:	4642      	mov	r2, r8
{
   10cc6:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   10cc8:	f7fe f97e 	bl	efc8 <arch_new_thread>
	if (!_current) {
   10ccc:	4b04      	ldr	r3, [pc, #16]	; (10ce0 <z_setup_new_thread+0x60>)
	new_thread->init_data = NULL;
   10cce:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
   10cd0:	689b      	ldr	r3, [r3, #8]
   10cd2:	b103      	cbz	r3, 10cd6 <z_setup_new_thread+0x56>
	new_thread->resource_pool = _current->resource_pool;
   10cd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
	return stack_ptr;
   10cd6:	6723      	str	r3, [r4, #112]	; 0x70
}
   10cd8:	4640      	mov	r0, r8
   10cda:	b004      	add	sp, #16
   10cdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10ce0:	200004b4 	.word	0x200004b4

00010ce4 <z_impl_k_thread_create>:
{
   10ce4:	b5f0      	push	{r4, r5, r6, r7, lr}
   10ce6:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   10ce8:	2700      	movs	r7, #0
   10cea:	9705      	str	r7, [sp, #20]
   10cec:	9f10      	ldr	r7, [sp, #64]	; 0x40
   10cee:	9704      	str	r7, [sp, #16]
   10cf0:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
   10cf2:	9703      	str	r7, [sp, #12]
   10cf4:	9f0e      	ldr	r7, [sp, #56]	; 0x38
   10cf6:	9702      	str	r7, [sp, #8]
{
   10cf8:	e9dd 6512 	ldrd	r6, r5, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   10cfc:	9f0d      	ldr	r7, [sp, #52]	; 0x34
   10cfe:	9701      	str	r7, [sp, #4]
   10d00:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   10d02:	9700      	str	r7, [sp, #0]
{
   10d04:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   10d06:	f7ff ffbb 	bl	10c80 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   10d0a:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
   10d0e:	bf08      	it	eq
   10d10:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
   10d14:	d005      	beq.n	10d22 <z_impl_k_thread_create+0x3e>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   10d16:	ea55 0306 	orrs.w	r3, r5, r6
   10d1a:	d105      	bne.n	10d28 <z_impl_k_thread_create+0x44>
	z_sched_start(thread);
   10d1c:	4620      	mov	r0, r4
   10d1e:	f000 fb5d 	bl	113dc <z_sched_start>
}
   10d22:	4620      	mov	r0, r4
   10d24:	b007      	add	sp, #28
   10d26:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   10d28:	4903      	ldr	r1, [pc, #12]	; (10d38 <z_impl_k_thread_create+0x54>)
   10d2a:	4632      	mov	r2, r6
   10d2c:	462b      	mov	r3, r5
   10d2e:	f104 0018 	add.w	r0, r4, #24
   10d32:	f000 fd25 	bl	11780 <z_add_timeout>
   10d36:	e7f4      	b.n	10d22 <z_impl_k_thread_create+0x3e>
   10d38:	00012c89 	.word	0x00012c89

00010d3c <z_init_static_threads>:
{
   10d3c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   10d40:	4c29      	ldr	r4, [pc, #164]	; (10de8 <z_init_static_threads+0xac>)
	_FOREACH_STATIC_THREAD(thread_data) {
   10d42:	4d2a      	ldr	r5, [pc, #168]	; (10dec <z_init_static_threads+0xb0>)
{
   10d44:	b087      	sub	sp, #28
   10d46:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
   10d48:	42ae      	cmp	r6, r5
   10d4a:	f104 0430 	add.w	r4, r4, #48	; 0x30
   10d4e:	d30f      	bcc.n	10d70 <z_init_static_threads+0x34>
	k_sched_lock();
   10d50:	f000 f9c0 	bl	110d4 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   10d54:	4c24      	ldr	r4, [pc, #144]	; (10de8 <z_init_static_threads+0xac>)
   10d56:	f8df 9098 	ldr.w	r9, [pc, #152]	; 10df0 <z_init_static_threads+0xb4>
		} else {
			return (t * to_hz + off) / from_hz;
   10d5a:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   10d5e:	f240 37e7 	movw	r7, #999	; 0x3e7
   10d62:	42ac      	cmp	r4, r5
   10d64:	d320      	bcc.n	10da8 <z_init_static_threads+0x6c>
}
   10d66:	b007      	add	sp, #28
   10d68:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
   10d6c:	f000 ba6a 	b.w	11244 <k_sched_unlock>
		z_setup_new_thread(
   10d70:	f854 3c04 	ldr.w	r3, [r4, #-4]
   10d74:	9305      	str	r3, [sp, #20]
   10d76:	f854 3c10 	ldr.w	r3, [r4, #-16]
   10d7a:	9304      	str	r3, [sp, #16]
   10d7c:	f854 3c14 	ldr.w	r3, [r4, #-20]
   10d80:	9303      	str	r3, [sp, #12]
   10d82:	f854 3c18 	ldr.w	r3, [r4, #-24]
   10d86:	9302      	str	r3, [sp, #8]
   10d88:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   10d8c:	9301      	str	r3, [sp, #4]
   10d8e:	f854 3c20 	ldr.w	r3, [r4, #-32]
   10d92:	9300      	str	r3, [sp, #0]
   10d94:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   10d98:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   10d9c:	f7ff ff70 	bl	10c80 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   10da0:	f854 3c30 	ldr.w	r3, [r4, #-48]
   10da4:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
   10da6:	e7ce      	b.n	10d46 <z_init_static_threads+0xa>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   10da8:	6a63      	ldr	r3, [r4, #36]	; 0x24
   10daa:	1c5a      	adds	r2, r3, #1
   10dac:	d00d      	beq.n	10dca <z_init_static_threads+0x8e>
					    K_MSEC(thread_data->init_delay));
   10dae:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   10db2:	2100      	movs	r1, #0
   10db4:	4638      	mov	r0, r7
   10db6:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   10dba:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
   10dbe:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   10dc2:	d104      	bne.n	10dce <z_init_static_threads+0x92>
	z_sched_start(thread);
   10dc4:	4640      	mov	r0, r8
   10dc6:	f000 fb09 	bl	113dc <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   10dca:	3430      	adds	r4, #48	; 0x30
   10dcc:	e7c9      	b.n	10d62 <z_init_static_threads+0x26>
   10dce:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   10dd2:	2300      	movs	r3, #0
   10dd4:	f7fb fa82 	bl	c2dc <__aeabi_uldivmod>
   10dd8:	4602      	mov	r2, r0
   10dda:	460b      	mov	r3, r1
   10ddc:	f108 0018 	add.w	r0, r8, #24
   10de0:	4649      	mov	r1, r9
   10de2:	f000 fccd 	bl	11780 <z_add_timeout>
   10de6:	e7f0      	b.n	10dca <z_init_static_threads+0x8e>
   10de8:	20000030 	.word	0x20000030
   10dec:	20000030 	.word	0x20000030
   10df0:	00012c89 	.word	0x00012c89

00010df4 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
   10df4:	b508      	push	{r3, lr}
	_kernel.idle = ticks;
   10df6:	4c09      	ldr	r4, [pc, #36]	; (10e1c <idle+0x28>)
	__asm__ volatile(
   10df8:	f04f 0220 	mov.w	r2, #32
   10dfc:	f3ef 8311 	mrs	r3, BASEPRI
   10e00:	f382 8811 	msr	BASEPRI, r2
   10e04:	f3bf 8f6f 	isb	sy
	int32_t ticks = z_get_next_timeout_expiry();
   10e08:	f001 ffa3 	bl	12d52 <z_get_next_timeout_expiry>
	_kernel.idle = ticks;
   10e0c:	6220      	str	r0, [r4, #32]
	if (pm_system_suspend(ticks) == PM_STATE_ACTIVE) {
   10e0e:	f7fd fd57 	bl	e8c0 <pm_system_suspend>
   10e12:	2800      	cmp	r0, #0
   10e14:	d1f0      	bne.n	10df8 <idle+0x4>
	arch_cpu_idle();
   10e16:	f7fe f925 	bl	f064 <arch_cpu_idle>
}
   10e1a:	e7ed      	b.n	10df8 <idle+0x4>
   10e1c:	200004b4 	.word	0x200004b4

00010e20 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   10e20:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   10e24:	4604      	mov	r4, r0
   10e26:	4617      	mov	r7, r2
   10e28:	461e      	mov	r6, r3
   10e2a:	f04f 0320 	mov.w	r3, #32
   10e2e:	f3ef 8811 	mrs	r8, BASEPRI
   10e32:	f383 8811 	msr	BASEPRI, r3
   10e36:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   10e3a:	68c3      	ldr	r3, [r0, #12]
   10e3c:	4a32      	ldr	r2, [pc, #200]	; (10f08 <z_impl_k_mutex_lock+0xe8>)
   10e3e:	b16b      	cbz	r3, 10e5c <z_impl_k_mutex_lock+0x3c>
   10e40:	6880      	ldr	r0, [r0, #8]
   10e42:	6891      	ldr	r1, [r2, #8]
   10e44:	4288      	cmp	r0, r1
   10e46:	d019      	beq.n	10e7c <z_impl_k_mutex_lock+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   10e48:	ea57 0306 	orrs.w	r3, r7, r6
   10e4c:	d118      	bne.n	10e80 <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
   10e4e:	f388 8811 	msr	BASEPRI, r8
   10e52:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
   10e56:	f06f 000f 	mvn.w	r0, #15
   10e5a:	e00c      	b.n	10e76 <z_impl_k_mutex_lock+0x56>
					_current->base.prio :
   10e5c:	6891      	ldr	r1, [r2, #8]
   10e5e:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   10e62:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
   10e64:	3301      	adds	r3, #1
   10e66:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   10e68:	6893      	ldr	r3, [r2, #8]
   10e6a:	60a3      	str	r3, [r4, #8]
   10e6c:	f388 8811 	msr	BASEPRI, r8
   10e70:	f3bf 8f6f 	isb	sy
		return 0;
   10e74:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
   10e76:	b002      	add	sp, #8
   10e78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   10e7c:	6921      	ldr	r1, [r4, #16]
   10e7e:	e7f0      	b.n	10e62 <z_impl_k_mutex_lock+0x42>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   10e80:	f991 100e 	ldrsb.w	r1, [r1, #14]
   10e84:	f990 300e 	ldrsb.w	r3, [r0, #14]
	thread->base.thread_state &= ~states;
}

static inline bool z_is_under_prio_ceiling(int prio)
{
	return prio >= CONFIG_PRIORITY_CEILING;
   10e88:	4299      	cmp	r1, r3
   10e8a:	bfa8      	it	ge
   10e8c:	4619      	movge	r1, r3
   10e8e:	f06f 027e 	mvn.w	r2, #126	; 0x7e
   10e92:	4291      	cmp	r1, r2
   10e94:	bfb8      	it	lt
   10e96:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   10e98:	428b      	cmp	r3, r1
   10e9a:	dd2e      	ble.n	10efa <z_impl_k_mutex_lock+0xda>
		resched = adjust_owner_prio(mutex, new_prio);
   10e9c:	f001 fe61 	bl	12b62 <adjust_owner_prio.isra.0>
   10ea0:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   10ea2:	e9cd 7600 	strd	r7, r6, [sp]
   10ea6:	4819      	ldr	r0, [pc, #100]	; (10f0c <z_impl_k_mutex_lock+0xec>)
   10ea8:	4622      	mov	r2, r4
   10eaa:	4641      	mov	r1, r8
   10eac:	f000 f984 	bl	111b8 <z_pend_curr>
	if (got_mutex == 0) {
   10eb0:	2800      	cmp	r0, #0
   10eb2:	d0e0      	beq.n	10e76 <z_impl_k_mutex_lock+0x56>
	__asm__ volatile(
   10eb4:	f04f 0320 	mov.w	r3, #32
   10eb8:	f3ef 8611 	mrs	r6, BASEPRI
   10ebc:	f383 8811 	msr	BASEPRI, r3
   10ec0:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   10ec4:	6823      	ldr	r3, [r4, #0]
   10ec6:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   10ec8:	429c      	cmp	r4, r3
   10eca:	d00a      	beq.n	10ee2 <z_impl_k_mutex_lock+0xc2>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   10ecc:	b14b      	cbz	r3, 10ee2 <z_impl_k_mutex_lock+0xc2>
   10ece:	f993 300e 	ldrsb.w	r3, [r3, #14]
   10ed2:	4299      	cmp	r1, r3
   10ed4:	bfa8      	it	ge
   10ed6:	4619      	movge	r1, r3
   10ed8:	f06f 037e 	mvn.w	r3, #126	; 0x7e
   10edc:	4299      	cmp	r1, r3
   10ede:	bfb8      	it	lt
   10ee0:	4619      	movlt	r1, r3
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   10ee2:	68a0      	ldr	r0, [r4, #8]
   10ee4:	f001 fe3d 	bl	12b62 <adjust_owner_prio.isra.0>
   10ee8:	b900      	cbnz	r0, 10eec <z_impl_k_mutex_lock+0xcc>
	if (resched) {
   10eea:	b145      	cbz	r5, 10efe <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
   10eec:	4807      	ldr	r0, [pc, #28]	; (10f0c <z_impl_k_mutex_lock+0xec>)
   10eee:	4631      	mov	r1, r6
   10ef0:	f000 f8de 	bl	110b0 <z_reschedule>
	return -EAGAIN;
   10ef4:	f06f 000a 	mvn.w	r0, #10
   10ef8:	e7bd      	b.n	10e76 <z_impl_k_mutex_lock+0x56>
	bool resched = false;
   10efa:	2500      	movs	r5, #0
   10efc:	e7d1      	b.n	10ea2 <z_impl_k_mutex_lock+0x82>
	__asm__ volatile(
   10efe:	f386 8811 	msr	BASEPRI, r6
   10f02:	f3bf 8f6f 	isb	sy
   10f06:	e7f5      	b.n	10ef4 <z_impl_k_mutex_lock+0xd4>
   10f08:	200004b4 	.word	0x200004b4
   10f0c:	2000091d 	.word	0x2000091d

00010f10 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   10f10:	b538      	push	{r3, r4, r5, lr}

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
   10f12:	6883      	ldr	r3, [r0, #8]
{
   10f14:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
   10f16:	2b00      	cmp	r3, #0
   10f18:	d032      	beq.n	10f80 <z_impl_k_mutex_unlock+0x70>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   10f1a:	4a1c      	ldr	r2, [pc, #112]	; (10f8c <z_impl_k_mutex_unlock+0x7c>)
   10f1c:	6892      	ldr	r2, [r2, #8]
   10f1e:	4293      	cmp	r3, r2
   10f20:	d131      	bne.n	10f86 <z_impl_k_mutex_unlock+0x76>
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
   10f22:	7bda      	ldrb	r2, [r3, #15]
   10f24:	3a01      	subs	r2, #1
   10f26:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
   10f28:	68c3      	ldr	r3, [r0, #12]
   10f2a:	2b01      	cmp	r3, #1
   10f2c:	d905      	bls.n	10f3a <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
   10f2e:	3b01      	subs	r3, #1
   10f30:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
   10f32:	f000 f987 	bl	11244 <k_sched_unlock>

	return 0;
   10f36:	2000      	movs	r0, #0
}
   10f38:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   10f3a:	f04f 0320 	mov.w	r3, #32
   10f3e:	f3ef 8511 	mrs	r5, BASEPRI
   10f42:	f383 8811 	msr	BASEPRI, r3
   10f46:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   10f4a:	6901      	ldr	r1, [r0, #16]
   10f4c:	6880      	ldr	r0, [r0, #8]
   10f4e:	f001 fe08 	bl	12b62 <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   10f52:	4620      	mov	r0, r4
   10f54:	f001 fecf 	bl	12cf6 <z_unpend_first_thread>
	mutex->owner = new_owner;
   10f58:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   10f5a:	b158      	cbz	r0, 10f74 <z_impl_k_mutex_unlock+0x64>
		mutex->owner_orig_prio = new_owner->base.prio;
   10f5c:	f990 200e 	ldrsb.w	r2, [r0, #14]
   10f60:	6122      	str	r2, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   10f62:	2200      	movs	r2, #0
   10f64:	6782      	str	r2, [r0, #120]	; 0x78
		z_ready_thread(new_owner);
   10f66:	f001 fe7f 	bl	12c68 <z_ready_thread>
		z_reschedule(&lock, key);
   10f6a:	4809      	ldr	r0, [pc, #36]	; (10f90 <z_impl_k_mutex_unlock+0x80>)
   10f6c:	4629      	mov	r1, r5
   10f6e:	f000 f89f 	bl	110b0 <z_reschedule>
   10f72:	e7de      	b.n	10f32 <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
   10f74:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   10f76:	f385 8811 	msr	BASEPRI, r5
   10f7a:	f3bf 8f6f 	isb	sy
   10f7e:	e7d8      	b.n	10f32 <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
   10f80:	f06f 0015 	mvn.w	r0, #21
   10f84:	e7d8      	b.n	10f38 <z_impl_k_mutex_unlock+0x28>
		return -EPERM;
   10f86:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   10f8a:	e7d5      	b.n	10f38 <z_impl_k_mutex_unlock+0x28>
   10f8c:	200004b4 	.word	0x200004b4
   10f90:	2000091d 	.word	0x2000091d

00010f94 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   10f94:	b538      	push	{r3, r4, r5, lr}
   10f96:	4604      	mov	r4, r0
	__asm__ volatile(
   10f98:	f04f 0320 	mov.w	r3, #32
   10f9c:	f3ef 8511 	mrs	r5, BASEPRI
   10fa0:	f383 8811 	msr	BASEPRI, r3
   10fa4:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
   10fa8:	f001 fea5 	bl	12cf6 <z_unpend_first_thread>

	if (thread != NULL) {
   10fac:	b148      	cbz	r0, 10fc2 <z_impl_k_sem_give+0x2e>
   10fae:	2200      	movs	r2, #0
   10fb0:	6782      	str	r2, [r0, #120]	; 0x78
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   10fb2:	f001 fe59 	bl	12c68 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   10fb6:	4629      	mov	r1, r5
   10fb8:	4805      	ldr	r0, [pc, #20]	; (10fd0 <z_impl_k_sem_give+0x3c>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
   10fba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   10fbe:	f000 b877 	b.w	110b0 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   10fc2:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   10fc6:	429a      	cmp	r2, r3
   10fc8:	bf18      	it	ne
   10fca:	3301      	addne	r3, #1
   10fcc:	60a3      	str	r3, [r4, #8]
}
   10fce:	e7f2      	b.n	10fb6 <z_impl_k_sem_give+0x22>
   10fd0:	2000091d 	.word	0x2000091d

00010fd4 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   10fd4:	b513      	push	{r0, r1, r4, lr}
   10fd6:	f04f 0420 	mov.w	r4, #32
   10fda:	f3ef 8111 	mrs	r1, BASEPRI
   10fde:	f384 8811 	msr	BASEPRI, r4
   10fe2:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
   10fe6:	6884      	ldr	r4, [r0, #8]
   10fe8:	b144      	cbz	r4, 10ffc <z_impl_k_sem_take+0x28>
		sem->count--;
   10fea:	3c01      	subs	r4, #1
   10fec:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
   10fee:	f381 8811 	msr	BASEPRI, r1
   10ff2:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   10ff6:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
   10ff8:	b002      	add	sp, #8
   10ffa:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   10ffc:	ea52 0403 	orrs.w	r4, r2, r3
   11000:	d106      	bne.n	11010 <z_impl_k_sem_take+0x3c>
   11002:	f381 8811 	msr	BASEPRI, r1
   11006:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   1100a:	f06f 000f 	mvn.w	r0, #15
   1100e:	e7f3      	b.n	10ff8 <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   11010:	e9cd 2300 	strd	r2, r3, [sp]
   11014:	4602      	mov	r2, r0
   11016:	4802      	ldr	r0, [pc, #8]	; (11020 <z_impl_k_sem_take+0x4c>)
   11018:	f000 f8ce 	bl	111b8 <z_pend_curr>
	return ret;
   1101c:	e7ec      	b.n	10ff8 <z_impl_k_sem_take+0x24>
   1101e:	bf00      	nop
   11020:	2000091d 	.word	0x2000091d

00011024 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
   11024:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
   11026:	4c08      	ldr	r4, [pc, #32]	; (11048 <z_reset_time_slice+0x24>)
   11028:	6823      	ldr	r3, [r4, #0]
   1102a:	b15b      	cbz	r3, 11044 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
   1102c:	f7fd ff1a 	bl	ee64 <sys_clock_elapsed>
   11030:	4603      	mov	r3, r0
   11032:	6820      	ldr	r0, [r4, #0]
   11034:	4a05      	ldr	r2, [pc, #20]	; (1104c <z_reset_time_slice+0x28>)
   11036:	4403      	add	r3, r0
		z_set_timeout_expiry(slice_time, false);
	}
}
   11038:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
   1103c:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
   1103e:	2100      	movs	r1, #0
   11040:	f001 be97 	b.w	12d72 <z_set_timeout_expiry>
}
   11044:	bd10      	pop	{r4, pc}
   11046:	bf00      	nop
   11048:	200004ec 	.word	0x200004ec
   1104c:	200004b4 	.word	0x200004b4

00011050 <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
   11050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11052:	4604      	mov	r4, r0
   11054:	460d      	mov	r5, r1
	__asm__ volatile(
   11056:	f04f 0320 	mov.w	r3, #32
   1105a:	f3ef 8611 	mrs	r6, BASEPRI
   1105e:	f383 8811 	msr	BASEPRI, r3
   11062:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
   11066:	4b0f      	ldr	r3, [pc, #60]	; (110a4 <k_sched_time_slice_set+0x54>)
   11068:	2100      	movs	r1, #0
			return (uint32_t)((t * to_hz + off) / from_hz);
   1106a:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   1106e:	f240 30e7 	movw	r0, #999	; 0x3e7
   11072:	6119      	str	r1, [r3, #16]
   11074:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   11078:	2300      	movs	r3, #0
   1107a:	fbe4 0107 	umlal	r0, r1, r4, r7
   1107e:	f7fb f92d 	bl	c2dc <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
   11082:	2c00      	cmp	r4, #0
   11084:	4b08      	ldr	r3, [pc, #32]	; (110a8 <k_sched_time_slice_set+0x58>)
   11086:	dc09      	bgt.n	1109c <k_sched_time_slice_set+0x4c>
			/* It's not possible to reliably set a 1-tick
			 * timeout if ticks aren't regular.
			 */
			slice_time = MAX(2, slice_time);
   11088:	6018      	str	r0, [r3, #0]
		}
		slice_max_prio = prio;
   1108a:	4b08      	ldr	r3, [pc, #32]	; (110ac <k_sched_time_slice_set+0x5c>)
   1108c:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
   1108e:	f7ff ffc9 	bl	11024 <z_reset_time_slice>
	__asm__ volatile(
   11092:	f386 8811 	msr	BASEPRI, r6
   11096:	f3bf 8f6f 	isb	sy
	}
}
   1109a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			slice_time = MAX(2, slice_time);
   1109c:	2802      	cmp	r0, #2
   1109e:	bfb8      	it	lt
   110a0:	2002      	movlt	r0, #2
   110a2:	e7f1      	b.n	11088 <k_sched_time_slice_set+0x38>
   110a4:	200004b4 	.word	0x200004b4
   110a8:	200004ec 	.word	0x200004ec
   110ac:	200004e8 	.word	0x200004e8

000110b0 <z_reschedule>:
{
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif

	return arch_irq_unlocked(key) && !arch_is_in_isr();
   110b0:	b949      	cbnz	r1, 110c6 <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   110b2:	f3ef 8005 	mrs	r0, IPSR
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
	if (resched(key.key) && need_swap()) {
   110b6:	b930      	cbnz	r0, 110c6 <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
   110b8:	4b05      	ldr	r3, [pc, #20]	; (110d0 <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
   110ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   110bc:	689b      	ldr	r3, [r3, #8]
   110be:	429a      	cmp	r2, r3
   110c0:	d001      	beq.n	110c6 <z_reschedule+0x16>
	ret = arch_swap(key);
   110c2:	f7fd bef7 	b.w	eeb4 <arch_swap>
   110c6:	f381 8811 	msr	BASEPRI, r1
   110ca:	f3bf 8f6f 	isb	sy
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
   110ce:	4770      	bx	lr
   110d0:	200004b4 	.word	0x200004b4

000110d4 <k_sched_lock>:
	__asm__ volatile(
   110d4:	f04f 0320 	mov.w	r3, #32
   110d8:	f3ef 8111 	mrs	r1, BASEPRI
   110dc:	f383 8811 	msr	BASEPRI, r3
   110e0:	f3bf 8f6f 	isb	sy
   110e4:	4b04      	ldr	r3, [pc, #16]	; (110f8 <k_sched_lock+0x24>)
   110e6:	689a      	ldr	r2, [r3, #8]
   110e8:	7bd3      	ldrb	r3, [r2, #15]
   110ea:	3b01      	subs	r3, #1
   110ec:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   110ee:	f381 8811 	msr	BASEPRI, r1
   110f2:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
   110f6:	4770      	bx	lr
   110f8:	200004b4 	.word	0x200004b4

000110fc <update_cache>:
{
   110fc:	b538      	push	{r3, r4, r5, lr}
   110fe:	4602      	mov	r2, r0
	thread = _priq_run_best(&_kernel.ready_q.runq);
   11100:	480c      	ldr	r0, [pc, #48]	; (11134 <update_cache+0x38>)
   11102:	4d0d      	ldr	r5, [pc, #52]	; (11138 <update_cache+0x3c>)
   11104:	f001 fd80 	bl	12c08 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   11108:	4604      	mov	r4, r0
   1110a:	b900      	cbnz	r0, 1110e <update_cache+0x12>
   1110c:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
   1110e:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
   11110:	b94a      	cbnz	r2, 11126 <update_cache+0x2a>
	if (z_is_thread_prevented_from_running(_current)) {
   11112:	7b5a      	ldrb	r2, [r3, #13]
   11114:	06d2      	lsls	r2, r2, #27
   11116:	d106      	bne.n	11126 <update_cache+0x2a>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   11118:	69a2      	ldr	r2, [r4, #24]
   1111a:	b922      	cbnz	r2, 11126 <update_cache+0x2a>
	if (is_preempt(_current) || is_metairq(thread)) {
   1111c:	89da      	ldrh	r2, [r3, #14]
   1111e:	2a7f      	cmp	r2, #127	; 0x7f
   11120:	d901      	bls.n	11126 <update_cache+0x2a>
		_kernel.ready_q.cache = _current;
   11122:	626b      	str	r3, [r5, #36]	; 0x24
}
   11124:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
   11126:	429c      	cmp	r4, r3
   11128:	d001      	beq.n	1112e <update_cache+0x32>
			z_reset_time_slice();
   1112a:	f7ff ff7b 	bl	11024 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   1112e:	626c      	str	r4, [r5, #36]	; 0x24
}
   11130:	e7f8      	b.n	11124 <update_cache+0x28>
   11132:	bf00      	nop
   11134:	200004dc 	.word	0x200004dc
   11138:	200004b4 	.word	0x200004b4

0001113c <unready_thread>:
{
   1113c:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
   1113e:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
   11142:	7b43      	ldrb	r3, [r0, #13]
   11144:	2a00      	cmp	r2, #0
{
   11146:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   11148:	da04      	bge.n	11154 <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1114a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1114e:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
   11150:	f001 fd22 	bl	12b98 <sys_dlist_remove>
	update_cache(thread == _current);
   11154:	4b04      	ldr	r3, [pc, #16]	; (11168 <unready_thread+0x2c>)
   11156:	6898      	ldr	r0, [r3, #8]
   11158:	1a43      	subs	r3, r0, r1
   1115a:	4258      	negs	r0, r3
   1115c:	4158      	adcs	r0, r3
}
   1115e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
   11162:	f7ff bfcb 	b.w	110fc <update_cache>
   11166:	bf00      	nop
   11168:	200004b4 	.word	0x200004b4

0001116c <pend>:
{
   1116c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11170:	4606      	mov	r6, r0
   11172:	4615      	mov	r5, r2
   11174:	461c      	mov	r4, r3
	__asm__ volatile(
   11176:	f04f 0320 	mov.w	r3, #32
   1117a:	f3ef 8711 	mrs	r7, BASEPRI
   1117e:	f383 8811 	msr	BASEPRI, r3
   11182:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
   11186:	f001 fd45 	bl	12c14 <add_to_waitq_locked>
	__asm__ volatile(
   1118a:	f387 8811 	msr	BASEPRI, r7
   1118e:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   11192:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
   11196:	bf08      	it	eq
   11198:	f1b5 3fff 	cmpeq.w	r5, #4294967295	; 0xffffffff
   1119c:	d008      	beq.n	111b0 <pend+0x44>
   1119e:	462a      	mov	r2, r5
   111a0:	4623      	mov	r3, r4
   111a2:	f106 0018 	add.w	r0, r6, #24
   111a6:	4903      	ldr	r1, [pc, #12]	; (111b4 <pend+0x48>)
}
   111a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   111ac:	f000 bae8 	b.w	11780 <z_add_timeout>
   111b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   111b4:	00012c89 	.word	0x00012c89

000111b8 <z_pend_curr>:
{
   111b8:	b510      	push	{r4, lr}
	pending_current = _current;
   111ba:	4b07      	ldr	r3, [pc, #28]	; (111d8 <z_pend_curr+0x20>)
   111bc:	6898      	ldr	r0, [r3, #8]
   111be:	4b07      	ldr	r3, [pc, #28]	; (111dc <z_pend_curr+0x24>)
{
   111c0:	460c      	mov	r4, r1
	pending_current = _current;
   111c2:	6018      	str	r0, [r3, #0]
{
   111c4:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
   111c6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   111ca:	f7ff ffcf 	bl	1116c <pend>
   111ce:	4620      	mov	r0, r4
}
   111d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   111d4:	f7fd be6e 	b.w	eeb4 <arch_swap>
   111d8:	200004b4 	.word	0x200004b4
   111dc:	200004e4 	.word	0x200004e4

000111e0 <z_impl_k_thread_suspend>:
{
   111e0:	b570      	push	{r4, r5, r6, lr}
   111e2:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   111e4:	3018      	adds	r0, #24
   111e6:	f001 fd9e 	bl	12d26 <z_abort_timeout>
	__asm__ volatile(
   111ea:	f04f 0320 	mov.w	r3, #32
   111ee:	f3ef 8611 	mrs	r6, BASEPRI
   111f2:	f383 8811 	msr	BASEPRI, r3
   111f6:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
   111fa:	f994 200d 	ldrsb.w	r2, [r4, #13]
   111fe:	7b63      	ldrb	r3, [r4, #13]
   11200:	2a00      	cmp	r2, #0
   11202:	da05      	bge.n	11210 <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   11204:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   11208:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   1120a:	4620      	mov	r0, r4
   1120c:	f001 fcc4 	bl	12b98 <sys_dlist_remove>
		update_cache(thread == _current);
   11210:	4d0b      	ldr	r5, [pc, #44]	; (11240 <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   11212:	7b63      	ldrb	r3, [r4, #13]
   11214:	68a8      	ldr	r0, [r5, #8]
   11216:	f043 0310 	orr.w	r3, r3, #16
   1121a:	7363      	strb	r3, [r4, #13]
   1121c:	1b03      	subs	r3, r0, r4
   1121e:	4258      	negs	r0, r3
   11220:	4158      	adcs	r0, r3
   11222:	f7ff ff6b 	bl	110fc <update_cache>
	__asm__ volatile(
   11226:	f386 8811 	msr	BASEPRI, r6
   1122a:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   1122e:	68ab      	ldr	r3, [r5, #8]
   11230:	42a3      	cmp	r3, r4
   11232:	d103      	bne.n	1123c <z_impl_k_thread_suspend+0x5c>
}
   11234:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   11238:	f001 bcdc 	b.w	12bf4 <z_reschedule_unlocked>
}
   1123c:	bd70      	pop	{r4, r5, r6, pc}
   1123e:	bf00      	nop
   11240:	200004b4 	.word	0x200004b4

00011244 <k_sched_unlock>:
{
   11244:	b510      	push	{r4, lr}
	__asm__ volatile(
   11246:	f04f 0320 	mov.w	r3, #32
   1124a:	f3ef 8411 	mrs	r4, BASEPRI
   1124e:	f383 8811 	msr	BASEPRI, r3
   11252:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
   11256:	4b08      	ldr	r3, [pc, #32]	; (11278 <k_sched_unlock+0x34>)
   11258:	689a      	ldr	r2, [r3, #8]
   1125a:	7bd3      	ldrb	r3, [r2, #15]
   1125c:	3301      	adds	r3, #1
   1125e:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   11260:	2000      	movs	r0, #0
   11262:	f7ff ff4b 	bl	110fc <update_cache>
	__asm__ volatile(
   11266:	f384 8811 	msr	BASEPRI, r4
   1126a:	f3bf 8f6f 	isb	sy
}
   1126e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
   11272:	f001 bcbf 	b.w	12bf4 <z_reschedule_unlocked>
   11276:	bf00      	nop
   11278:	200004b4 	.word	0x200004b4

0001127c <move_thread_to_end_of_prio_q>:
{
   1127c:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   1127e:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
   11282:	7b43      	ldrb	r3, [r0, #13]
   11284:	2a00      	cmp	r2, #0
{
   11286:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   11288:	da04      	bge.n	11294 <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1128a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1128e:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   11290:	f001 fc82 	bl	12b98 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   11294:	7b4b      	ldrb	r3, [r1, #13]
	return list->head == list;
   11296:	4a15      	ldr	r2, [pc, #84]	; (112ec <move_thread_to_end_of_prio_q+0x70>)
   11298:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1129c:	734b      	strb	r3, [r1, #13]
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
   1129e:	e9d2 340a 	ldrd	r3, r4, [r2, #40]	; 0x28
	return sys_dlist_is_empty(list) ? NULL : list->head;
   112a2:	f102 0528 	add.w	r5, r2, #40	; 0x28
   112a6:	42ab      	cmp	r3, r5
   112a8:	d01b      	beq.n	112e2 <move_thread_to_end_of_prio_q+0x66>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   112aa:	b1d3      	cbz	r3, 112e2 <move_thread_to_end_of_prio_q+0x66>
	int32_t b1 = thread_1->base.prio;
   112ac:	f991 600e 	ldrsb.w	r6, [r1, #14]
	int32_t b2 = thread_2->base.prio;
   112b0:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
   112b4:	4286      	cmp	r6, r0
   112b6:	d00f      	beq.n	112d8 <move_thread_to_end_of_prio_q+0x5c>
		return b2 - b1;
   112b8:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   112ba:	2800      	cmp	r0, #0
   112bc:	dd0c      	ble.n	112d8 <move_thread_to_end_of_prio_q+0x5c>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
   112be:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
   112c0:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
   112c4:	6001      	str	r1, [r0, #0]
	successor->prev = node;
   112c6:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
   112c8:	6890      	ldr	r0, [r2, #8]
   112ca:	1a43      	subs	r3, r0, r1
   112cc:	4258      	negs	r0, r3
}
   112ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   112d2:	4158      	adcs	r0, r3
   112d4:	f7ff bf12 	b.w	110fc <update_cache>
	return (node == list->tail) ? NULL : node->next;
   112d8:	42a3      	cmp	r3, r4
   112da:	d002      	beq.n	112e2 <move_thread_to_end_of_prio_q+0x66>
   112dc:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   112de:	2b00      	cmp	r3, #0
   112e0:	d1e6      	bne.n	112b0 <move_thread_to_end_of_prio_q+0x34>
	node->prev = tail;
   112e2:	e9c1 5400 	strd	r5, r4, [r1]
	tail->next = node;
   112e6:	6021      	str	r1, [r4, #0]
	list->tail = node;
   112e8:	62d1      	str	r1, [r2, #44]	; 0x2c
}
   112ea:	e7ed      	b.n	112c8 <move_thread_to_end_of_prio_q+0x4c>
   112ec:	200004b4 	.word	0x200004b4

000112f0 <z_time_slice>:
{
   112f0:	b538      	push	{r3, r4, r5, lr}
   112f2:	4601      	mov	r1, r0
	__asm__ volatile(
   112f4:	f04f 0320 	mov.w	r3, #32
   112f8:	f3ef 8411 	mrs	r4, BASEPRI
   112fc:	f383 8811 	msr	BASEPRI, r3
   11300:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
   11304:	4b15      	ldr	r3, [pc, #84]	; (1135c <z_time_slice+0x6c>)
   11306:	4a16      	ldr	r2, [pc, #88]	; (11360 <z_time_slice+0x70>)
   11308:	6898      	ldr	r0, [r3, #8]
   1130a:	6815      	ldr	r5, [r2, #0]
   1130c:	42a8      	cmp	r0, r5
   1130e:	d106      	bne.n	1131e <z_time_slice+0x2e>
			z_reset_time_slice();
   11310:	f7ff fe88 	bl	11024 <z_reset_time_slice>
	__asm__ volatile(
   11314:	f384 8811 	msr	BASEPRI, r4
   11318:	f3bf 8f6f 	isb	sy
}
   1131c:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
   1131e:	2500      	movs	r5, #0
   11320:	6015      	str	r5, [r2, #0]
	if (slice_time && sliceable(_current)) {
   11322:	4a10      	ldr	r2, [pc, #64]	; (11364 <z_time_slice+0x74>)
   11324:	6812      	ldr	r2, [r2, #0]
   11326:	b1ba      	cbz	r2, 11358 <z_time_slice+0x68>
		&& !z_is_idle_thread_object(thread);
   11328:	89c2      	ldrh	r2, [r0, #14]
   1132a:	2a7f      	cmp	r2, #127	; 0x7f
   1132c:	d814      	bhi.n	11358 <z_time_slice+0x68>
		&& !z_is_thread_prevented_from_running(thread)
   1132e:	7b42      	ldrb	r2, [r0, #13]
   11330:	06d2      	lsls	r2, r2, #27
   11332:	d111      	bne.n	11358 <z_time_slice+0x68>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   11334:	4a0c      	ldr	r2, [pc, #48]	; (11368 <z_time_slice+0x78>)
   11336:	f990 500e 	ldrsb.w	r5, [r0, #14]
   1133a:	6812      	ldr	r2, [r2, #0]
   1133c:	4295      	cmp	r5, r2
   1133e:	db0b      	blt.n	11358 <z_time_slice+0x68>
		&& !z_is_idle_thread_object(thread);
   11340:	4a0a      	ldr	r2, [pc, #40]	; (1136c <z_time_slice+0x7c>)
   11342:	4290      	cmp	r0, r2
   11344:	d008      	beq.n	11358 <z_time_slice+0x68>
		if (ticks >= _current_cpu->slice_ticks) {
   11346:	691a      	ldr	r2, [r3, #16]
   11348:	428a      	cmp	r2, r1
   1134a:	dc02      	bgt.n	11352 <z_time_slice+0x62>
			move_thread_to_end_of_prio_q(_current);
   1134c:	f7ff ff96 	bl	1127c <move_thread_to_end_of_prio_q>
   11350:	e7de      	b.n	11310 <z_time_slice+0x20>
			_current_cpu->slice_ticks -= ticks;
   11352:	1a52      	subs	r2, r2, r1
		_current_cpu->slice_ticks = 0;
   11354:	611a      	str	r2, [r3, #16]
   11356:	e7dd      	b.n	11314 <z_time_slice+0x24>
   11358:	2200      	movs	r2, #0
   1135a:	e7fb      	b.n	11354 <z_time_slice+0x64>
   1135c:	200004b4 	.word	0x200004b4
   11360:	200004e4 	.word	0x200004e4
   11364:	200004ec 	.word	0x200004ec
   11368:	200004e8 	.word	0x200004e8
   1136c:	20000110 	.word	0x20000110

00011370 <ready_thread>:
{
   11370:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   11372:	f990 200d 	ldrsb.w	r2, [r0, #13]
   11376:	7b43      	ldrb	r3, [r0, #13]
   11378:	2a00      	cmp	r2, #0
   1137a:	db2a      	blt.n	113d2 <ready_thread+0x62>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   1137c:	06da      	lsls	r2, r3, #27
   1137e:	d128      	bne.n	113d2 <ready_thread+0x62>
   11380:	6982      	ldr	r2, [r0, #24]
   11382:	bb32      	cbnz	r2, 113d2 <ready_thread+0x62>
	return list->head == list;
   11384:	4a14      	ldr	r2, [pc, #80]	; (113d8 <ready_thread+0x68>)
	thread->base.thread_state |= _THREAD_QUEUED;
   11386:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1138a:	7343      	strb	r3, [r0, #13]
	return (node == list->tail) ? NULL : node->next;
   1138c:	e9d2 340a 	ldrd	r3, r4, [r2, #40]	; 0x28
	return sys_dlist_is_empty(list) ? NULL : list->head;
   11390:	f102 0528 	add.w	r5, r2, #40	; 0x28
   11394:	42ab      	cmp	r3, r5
   11396:	d017      	beq.n	113c8 <ready_thread+0x58>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   11398:	b1b3      	cbz	r3, 113c8 <ready_thread+0x58>
	int32_t b1 = thread_1->base.prio;
   1139a:	f990 600e 	ldrsb.w	r6, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   1139e:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
   113a2:	428e      	cmp	r6, r1
   113a4:	d00b      	beq.n	113be <ready_thread+0x4e>
		return b2 - b1;
   113a6:	1b89      	subs	r1, r1, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   113a8:	2900      	cmp	r1, #0
   113aa:	dd08      	ble.n	113be <ready_thread+0x4e>
	sys_dnode_t *const prev = successor->prev;
   113ac:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   113ae:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
   113b2:	6010      	str	r0, [r2, #0]
	successor->prev = node;
   113b4:	6058      	str	r0, [r3, #4]
}
   113b6:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
   113b8:	2000      	movs	r0, #0
   113ba:	f7ff be9f 	b.w	110fc <update_cache>
	return (node == list->tail) ? NULL : node->next;
   113be:	42a3      	cmp	r3, r4
   113c0:	d002      	beq.n	113c8 <ready_thread+0x58>
   113c2:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   113c4:	2b00      	cmp	r3, #0
   113c6:	d1ea      	bne.n	1139e <ready_thread+0x2e>
	node->prev = tail;
   113c8:	e9c0 5400 	strd	r5, r4, [r0]
	tail->next = node;
   113cc:	6020      	str	r0, [r4, #0]
	list->tail = node;
   113ce:	62d0      	str	r0, [r2, #44]	; 0x2c
}
   113d0:	e7f1      	b.n	113b6 <ready_thread+0x46>
}
   113d2:	bc70      	pop	{r4, r5, r6}
   113d4:	4770      	bx	lr
   113d6:	bf00      	nop
   113d8:	200004b4 	.word	0x200004b4

000113dc <z_sched_start>:
{
   113dc:	b510      	push	{r4, lr}
	__asm__ volatile(
   113de:	f04f 0220 	mov.w	r2, #32
   113e2:	f3ef 8411 	mrs	r4, BASEPRI
   113e6:	f382 8811 	msr	BASEPRI, r2
   113ea:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
   113ee:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
   113f0:	0751      	lsls	r1, r2, #29
   113f2:	d404      	bmi.n	113fe <z_sched_start+0x22>
	__asm__ volatile(
   113f4:	f384 8811 	msr	BASEPRI, r4
   113f8:	f3bf 8f6f 	isb	sy
}
   113fc:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   113fe:	f022 0204 	bic.w	r2, r2, #4
   11402:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
   11404:	f7ff ffb4 	bl	11370 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   11408:	4621      	mov	r1, r4
   1140a:	4802      	ldr	r0, [pc, #8]	; (11414 <z_sched_start+0x38>)
}
   1140c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
   11410:	f7ff be4e 	b.w	110b0 <z_reschedule>
   11414:	2000091d 	.word	0x2000091d

00011418 <z_set_prio>:
{
   11418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1141a:	4604      	mov	r4, r0
	__asm__ volatile(
   1141c:	f04f 0320 	mov.w	r3, #32
   11420:	f3ef 8611 	mrs	r6, BASEPRI
   11424:	f383 8811 	msr	BASEPRI, r3
   11428:	f3bf 8f6f 	isb	sy
	uint8_t state = thread->base.thread_state;
   1142c:	7b43      	ldrb	r3, [r0, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   1142e:	06da      	lsls	r2, r3, #27
				thread->base.prio = prio;
   11430:	b249      	sxtb	r1, r1
   11432:	d133      	bne.n	1149c <z_set_prio+0x84>
		if (need_sched) {
   11434:	6982      	ldr	r2, [r0, #24]
   11436:	bb8a      	cbnz	r2, 1149c <z_set_prio+0x84>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   11438:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1143c:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   1143e:	f001 fbab 	bl	12b98 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   11442:	7b43      	ldrb	r3, [r0, #13]
	return list->head == list;
   11444:	4a17      	ldr	r2, [pc, #92]	; (114a4 <z_set_prio+0x8c>)
				thread->base.prio = prio;
   11446:	7381      	strb	r1, [r0, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
   11448:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1144c:	7343      	strb	r3, [r0, #13]
   1144e:	4610      	mov	r0, r2
   11450:	f850 3f28 	ldr.w	r3, [r0, #40]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   11454:	4283      	cmp	r3, r0
   11456:	d01b      	beq.n	11490 <z_set_prio+0x78>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   11458:	b1d3      	cbz	r3, 11490 <z_set_prio+0x78>
	return (node == list->tail) ? NULL : node->next;
   1145a:	6ad7      	ldr	r7, [r2, #44]	; 0x2c
	int32_t b2 = thread_2->base.prio;
   1145c:	f993 500e 	ldrsb.w	r5, [r3, #14]
	if (b1 != b2) {
   11460:	42a9      	cmp	r1, r5
   11462:	d010      	beq.n	11486 <z_set_prio+0x6e>
		return b2 - b1;
   11464:	1a6d      	subs	r5, r5, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
   11466:	2d00      	cmp	r5, #0
   11468:	dd0d      	ble.n	11486 <z_set_prio+0x6e>
	sys_dnode_t *const prev = successor->prev;
   1146a:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   1146c:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   11470:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   11472:	605c      	str	r4, [r3, #4]
			update_cache(1);
   11474:	2001      	movs	r0, #1
   11476:	f7ff fe41 	bl	110fc <update_cache>
   1147a:	2001      	movs	r0, #1
	__asm__ volatile(
   1147c:	f386 8811 	msr	BASEPRI, r6
   11480:	f3bf 8f6f 	isb	sy
}
   11484:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   11486:	42bb      	cmp	r3, r7
   11488:	d002      	beq.n	11490 <z_set_prio+0x78>
   1148a:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1148c:	2b00      	cmp	r3, #0
   1148e:	d1e5      	bne.n	1145c <z_set_prio+0x44>
	sys_dnode_t *const tail = list->tail;
   11490:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
	node->prev = tail;
   11492:	e9c4 0300 	strd	r0, r3, [r4]
	tail->next = node;
   11496:	601c      	str	r4, [r3, #0]
	list->tail = node;
   11498:	62d4      	str	r4, [r2, #44]	; 0x2c
}
   1149a:	e7eb      	b.n	11474 <z_set_prio+0x5c>
			thread->base.prio = prio;
   1149c:	73a1      	strb	r1, [r4, #14]
   1149e:	2000      	movs	r0, #0
   114a0:	e7ec      	b.n	1147c <z_set_prio+0x64>
   114a2:	bf00      	nop
   114a4:	200004b4 	.word	0x200004b4

000114a8 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
   114a8:	4b04      	ldr	r3, [pc, #16]	; (114bc <z_sched_init+0x14>)
		sys_dlist_init(&_kernel.ready_q.runq.queues[i]);
	}
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   114aa:	2100      	movs	r1, #0
   114ac:	f103 0228 	add.w	r2, r3, #40	; 0x28
	list->tail = (sys_dnode_t *)list;
   114b0:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
   114b4:	4608      	mov	r0, r1
   114b6:	f7ff bdcb 	b.w	11050 <k_sched_time_slice_set>
   114ba:	bf00      	nop
   114bc:	200004b4 	.word	0x200004b4

000114c0 <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
   114c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
   114c2:	f04f 0320 	mov.w	r3, #32
   114c6:	f3ef 8511 	mrs	r5, BASEPRI
   114ca:	f383 8811 	msr	BASEPRI, r3
   114ce:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(&_kernel.ready_q.runq,
   114d2:	491a      	ldr	r1, [pc, #104]	; (1153c <z_impl_k_yield+0x7c>)
   114d4:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
   114d6:	7b43      	ldrb	r3, [r0, #13]
   114d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   114dc:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   114de:	f001 fb5b 	bl	12b98 <sys_dlist_remove>
			       _current);
	}
	queue_thread(&_kernel.ready_q.runq, _current);
   114e2:	688b      	ldr	r3, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
   114e4:	7b5a      	ldrb	r2, [r3, #13]
	return list->head == list;
   114e6:	4608      	mov	r0, r1
   114e8:	f062 027f 	orn	r2, r2, #127	; 0x7f
   114ec:	735a      	strb	r2, [r3, #13]
   114ee:	f850 2f28 	ldr.w	r2, [r0, #40]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   114f2:	4282      	cmp	r2, r0
   114f4:	d01c      	beq.n	11530 <z_impl_k_yield+0x70>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   114f6:	b1da      	cbz	r2, 11530 <z_impl_k_yield+0x70>
	return (node == list->tail) ? NULL : node->next;
   114f8:	6acf      	ldr	r7, [r1, #44]	; 0x2c
	int32_t b1 = thread_1->base.prio;
   114fa:	f993 600e 	ldrsb.w	r6, [r3, #14]
	int32_t b2 = thread_2->base.prio;
   114fe:	f992 400e 	ldrsb.w	r4, [r2, #14]
	if (b1 != b2) {
   11502:	42a6      	cmp	r6, r4
   11504:	d00f      	beq.n	11526 <z_impl_k_yield+0x66>
		return b2 - b1;
   11506:	1ba4      	subs	r4, r4, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   11508:	2c00      	cmp	r4, #0
   1150a:	dd0c      	ble.n	11526 <z_impl_k_yield+0x66>
	sys_dnode_t *const prev = successor->prev;
   1150c:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   1150e:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
   11512:	600b      	str	r3, [r1, #0]
	successor->prev = node;
   11514:	6053      	str	r3, [r2, #4]
	update_cache(1);
   11516:	2001      	movs	r0, #1
   11518:	f7ff fdf0 	bl	110fc <update_cache>
   1151c:	4628      	mov	r0, r5
	z_swap(&sched_spinlock, key);
}
   1151e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   11522:	f7fd bcc7 	b.w	eeb4 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
   11526:	42ba      	cmp	r2, r7
   11528:	d002      	beq.n	11530 <z_impl_k_yield+0x70>
   1152a:	6812      	ldr	r2, [r2, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1152c:	2a00      	cmp	r2, #0
   1152e:	d1e6      	bne.n	114fe <z_impl_k_yield+0x3e>
	sys_dnode_t *const tail = list->tail;
   11530:	6aca      	ldr	r2, [r1, #44]	; 0x2c
	node->prev = tail;
   11532:	e9c3 0200 	strd	r0, r2, [r3]
	tail->next = node;
   11536:	6013      	str	r3, [r2, #0]
	list->tail = node;
   11538:	62cb      	str	r3, [r1, #44]	; 0x2c
}
   1153a:	e7ec      	b.n	11516 <z_impl_k_yield+0x56>
   1153c:	200004b4 	.word	0x200004b4

00011540 <z_tick_sleep>:
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
   11540:	ea50 0301 	orrs.w	r3, r0, r1
{
   11544:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11548:	4605      	mov	r5, r0
   1154a:	460e      	mov	r6, r1
	if (ticks == 0) {
   1154c:	d103      	bne.n	11556 <z_tick_sleep+0x16>
	z_impl_k_yield();
   1154e:	f7ff ffb7 	bl	114c0 <z_impl_k_yield>
	if (ticks > 0) {
		return ticks;
	}
#endif

	return 0;
   11552:	2000      	movs	r0, #0
   11554:	e033      	b.n	115be <z_tick_sleep+0x7e>
	if (Z_TICK_ABS(ticks) <= 0) {
   11556:	f06f 0401 	mvn.w	r4, #1
   1155a:	1a24      	subs	r4, r4, r0
   1155c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   11560:	eb63 0301 	sbc.w	r3, r3, r1
   11564:	2c01      	cmp	r4, #1
   11566:	f173 0300 	sbcs.w	r3, r3, #0
   1156a:	da02      	bge.n	11572 <z_tick_sleep+0x32>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   1156c:	f001 fc1b 	bl	12da6 <sys_clock_tick_get_32>
   11570:	1944      	adds	r4, r0, r5
   11572:	f04f 0320 	mov.w	r3, #32
   11576:	f3ef 8811 	mrs	r8, BASEPRI
   1157a:	f383 8811 	msr	BASEPRI, r3
   1157e:	f3bf 8f6f 	isb	sy
	pending_current = _current;
   11582:	4f10      	ldr	r7, [pc, #64]	; (115c4 <z_tick_sleep+0x84>)
   11584:	4b10      	ldr	r3, [pc, #64]	; (115c8 <z_tick_sleep+0x88>)
   11586:	68b8      	ldr	r0, [r7, #8]
   11588:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
   1158a:	f7ff fdd7 	bl	1113c <unready_thread>
	z_add_thread_timeout(_current, timeout);
   1158e:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   11590:	490e      	ldr	r1, [pc, #56]	; (115cc <z_tick_sleep+0x8c>)
   11592:	462a      	mov	r2, r5
   11594:	4633      	mov	r3, r6
   11596:	3018      	adds	r0, #24
   11598:	f000 f8f2 	bl	11780 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   1159c:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
   1159e:	7b53      	ldrb	r3, [r2, #13]
   115a0:	f043 0310 	orr.w	r3, r3, #16
   115a4:	7353      	strb	r3, [r2, #13]
   115a6:	4640      	mov	r0, r8
   115a8:	f7fd fc84 	bl	eeb4 <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   115ac:	f001 fbfb 	bl	12da6 <sys_clock_tick_get_32>
   115b0:	1a20      	subs	r0, r4, r0
   115b2:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
   115b6:	2801      	cmp	r0, #1
   115b8:	f173 0300 	sbcs.w	r3, r3, #0
   115bc:	dbc9      	blt.n	11552 <z_tick_sleep+0x12>
}
   115be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   115c2:	bf00      	nop
   115c4:	200004b4 	.word	0x200004b4
   115c8:	200004e4 	.word	0x200004e4
   115cc:	00012c89 	.word	0x00012c89

000115d0 <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   115d0:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   115d4:	bf08      	it	eq
   115d6:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
   115da:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   115dc:	d106      	bne.n	115ec <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
   115de:	4b08      	ldr	r3, [pc, #32]	; (11600 <z_impl_k_sleep+0x30>)
   115e0:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   115e2:	f7ff fdfd 	bl	111e0 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
   115e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
   115ea:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
   115ec:	f7ff ffa8 	bl	11540 <z_tick_sleep>
			return (t * to_hz + off) / from_hz;
   115f0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   115f4:	fb80 0303 	smull	r0, r3, r0, r3
   115f8:	0bc0      	lsrs	r0, r0, #15
   115fa:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
   115fe:	e7f4      	b.n	115ea <z_impl_k_sleep+0x1a>
   11600:	200004b4 	.word	0x200004b4

00011604 <z_impl_k_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   11604:	4b01      	ldr	r3, [pc, #4]	; (1160c <z_impl_k_current_get+0x8>)
   11606:	6898      	ldr	r0, [r3, #8]
   11608:	4770      	bx	lr
   1160a:	bf00      	nop
   1160c:	200004b4 	.word	0x200004b4

00011610 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
   11610:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11614:	4604      	mov	r4, r0
   11616:	f04f 0320 	mov.w	r3, #32
   1161a:	f3ef 8611 	mrs	r6, BASEPRI
   1161e:	f383 8811 	msr	BASEPRI, r3
   11622:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   11626:	7b43      	ldrb	r3, [r0, #13]
   11628:	071a      	lsls	r2, r3, #28
   1162a:	d505      	bpl.n	11638 <z_thread_abort+0x28>
	__asm__ volatile(
   1162c:	f386 8811 	msr	BASEPRI, r6
   11630:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
   11634:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
   11638:	f023 0220 	bic.w	r2, r3, #32
   1163c:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
   11640:	09d2      	lsrs	r2, r2, #7
   11642:	d120      	bne.n	11686 <z_thread_abort+0x76>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   11644:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
   11646:	68a3      	ldr	r3, [r4, #8]
   11648:	b113      	cbz	r3, 11650 <z_thread_abort+0x40>
			unpend_thread_no_timeout(thread);
   1164a:	4620      	mov	r0, r4
   1164c:	f001 faac 	bl	12ba8 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
   11650:	f104 0018 	add.w	r0, r4, #24
   11654:	f001 fb67 	bl	12d26 <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   11658:	f104 0758 	add.w	r7, r4, #88	; 0x58
   1165c:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
   11660:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
   11662:	42bd      	cmp	r5, r7
   11664:	d000      	beq.n	11668 <z_thread_abort+0x58>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   11666:	b9b5      	cbnz	r5, 11696 <z_thread_abort+0x86>
		update_cache(1);
   11668:	2001      	movs	r0, #1
   1166a:	f7ff fd47 	bl	110fc <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
   1166e:	4b10      	ldr	r3, [pc, #64]	; (116b0 <z_thread_abort+0xa0>)
   11670:	689b      	ldr	r3, [r3, #8]
   11672:	42a3      	cmp	r3, r4
   11674:	d1da      	bne.n	1162c <z_thread_abort+0x1c>
   11676:	f3ef 8305 	mrs	r3, IPSR
   1167a:	2b00      	cmp	r3, #0
   1167c:	d1d6      	bne.n	1162c <z_thread_abort+0x1c>
   1167e:	4630      	mov	r0, r6
   11680:	f7fd fc18 	bl	eeb4 <arch_swap>
	return ret;
   11684:	e7d2      	b.n	1162c <z_thread_abort+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   11686:	f003 035f 	and.w	r3, r3, #95	; 0x5f
   1168a:	f043 0308 	orr.w	r3, r3, #8
   1168e:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   11690:	f001 fa82 	bl	12b98 <sys_dlist_remove>
}
   11694:	e7d7      	b.n	11646 <z_thread_abort+0x36>
		unpend_thread_no_timeout(thread);
   11696:	4628      	mov	r0, r5
   11698:	f001 fa86 	bl	12ba8 <unpend_thread_no_timeout>
   1169c:	f105 0018 	add.w	r0, r5, #24
   116a0:	f001 fb41 	bl	12d26 <z_abort_timeout>
   116a4:	f8c5 8078 	str.w	r8, [r5, #120]	; 0x78
		ready_thread(thread);
   116a8:	4628      	mov	r0, r5
   116aa:	f7ff fe61 	bl	11370 <ready_thread>
   116ae:	e7d7      	b.n	11660 <z_thread_abort+0x50>
   116b0:	200004b4 	.word	0x200004b4

000116b4 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
   116b4:	b508      	push	{r3, lr}
	(void)memcpy(&__data_ram_start, &__data_rom_start,
		 __data_ram_end - __data_ram_start);
   116b6:	4806      	ldr	r0, [pc, #24]	; (116d0 <z_data_copy+0x1c>)
	(void)memcpy(&__data_ram_start, &__data_rom_start,
   116b8:	4a06      	ldr	r2, [pc, #24]	; (116d4 <z_data_copy+0x20>)
   116ba:	4907      	ldr	r1, [pc, #28]	; (116d8 <z_data_copy+0x24>)
   116bc:	1a12      	subs	r2, r2, r0
   116be:	f001 f870 	bl	127a2 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   116c2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&_ramfunc_ram_start, &_ramfunc_rom_start,
   116c6:	4a05      	ldr	r2, [pc, #20]	; (116dc <z_data_copy+0x28>)
   116c8:	4905      	ldr	r1, [pc, #20]	; (116e0 <z_data_copy+0x2c>)
   116ca:	4806      	ldr	r0, [pc, #24]	; (116e4 <z_data_copy+0x30>)
   116cc:	f001 b869 	b.w	127a2 <memcpy>
   116d0:	20000000 	.word	0x20000000
   116d4:	20000054 	.word	0x20000054
   116d8:	00013e20 	.word	0x00013e20
   116dc:	00000000 	.word	0x00000000
   116e0:	00013e20 	.word	0x00013e20
   116e4:	20000000 	.word	0x20000000

000116e8 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   116e8:	4b03      	ldr	r3, [pc, #12]	; (116f8 <elapsed+0x10>)
   116ea:	681b      	ldr	r3, [r3, #0]
   116ec:	b90b      	cbnz	r3, 116f2 <elapsed+0xa>
   116ee:	f7fd bbb9 	b.w	ee64 <sys_clock_elapsed>
}
   116f2:	2000      	movs	r0, #0
   116f4:	4770      	bx	lr
   116f6:	bf00      	nop
   116f8:	200004f0 	.word	0x200004f0

000116fc <next_timeout>:
	return list->head == list;
   116fc:	4b11      	ldr	r3, [pc, #68]	; (11744 <next_timeout+0x48>)

static int32_t next_timeout(void)
{
   116fe:	b510      	push	{r4, lr}
   11700:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   11702:	429c      	cmp	r4, r3
   11704:	bf08      	it	eq
   11706:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   11708:	f7ff ffee 	bl	116e8 <elapsed>
   1170c:	4603      	mov	r3, r0
	int32_t ret = to == NULL ? MAX_WAIT
   1170e:	b16c      	cbz	r4, 1172c <next_timeout+0x30>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   11710:	e9d4 0204 	ldrd	r0, r2, [r4, #16]
   11714:	1ac0      	subs	r0, r0, r3
   11716:	eb62 73e3 	sbc.w	r3, r2, r3, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
   1171a:	2801      	cmp	r0, #1
   1171c:	f173 0200 	sbcs.w	r2, r3, #0
   11720:	db0d      	blt.n	1173e <next_timeout+0x42>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   11722:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
   11726:	f173 0300 	sbcs.w	r3, r3, #0
   1172a:	db01      	blt.n	11730 <next_timeout+0x34>
	int32_t ret = to == NULL ? MAX_WAIT
   1172c:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   11730:	4b05      	ldr	r3, [pc, #20]	; (11748 <next_timeout+0x4c>)
   11732:	691b      	ldr	r3, [r3, #16]
   11734:	b113      	cbz	r3, 1173c <next_timeout+0x40>
   11736:	4298      	cmp	r0, r3
   11738:	bfa8      	it	ge
   1173a:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   1173c:	bd10      	pop	{r4, pc}
	int32_t ret = to == NULL ? MAX_WAIT
   1173e:	2000      	movs	r0, #0
   11740:	e7f6      	b.n	11730 <next_timeout+0x34>
   11742:	bf00      	nop
   11744:	20000028 	.word	0x20000028
   11748:	200004b4 	.word	0x200004b4

0001174c <remove_timeout>:
{
   1174c:	b530      	push	{r4, r5, lr}
	return (node == list->tail) ? NULL : node->next;
   1174e:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   11750:	b168      	cbz	r0, 1176e <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
   11752:	4a0a      	ldr	r2, [pc, #40]	; (1177c <remove_timeout+0x30>)
   11754:	6852      	ldr	r2, [r2, #4]
   11756:	4290      	cmp	r0, r2
   11758:	d009      	beq.n	1176e <remove_timeout+0x22>
	if (next(t) != NULL) {
   1175a:	b143      	cbz	r3, 1176e <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   1175c:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   11760:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   11764:	1912      	adds	r2, r2, r4
   11766:	eb41 0105 	adc.w	r1, r1, r5
   1176a:	e9c3 2104 	strd	r2, r1, [r3, #16]
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
   1176e:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;

	prev->next = next;
   11770:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   11772:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   11774:	2300      	movs	r3, #0
	node->prev = NULL;
   11776:	e9c0 3300 	strd	r3, r3, [r0]
}
   1177a:	bd30      	pop	{r4, r5, pc}
   1177c:	20000028 	.word	0x20000028

00011780 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   11780:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   11784:	bf08      	it	eq
   11786:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
   1178a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1178c:	4604      	mov	r4, r0
   1178e:	461f      	mov	r7, r3
   11790:	4615      	mov	r5, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   11792:	d067      	beq.n	11864 <z_add_timeout+0xe4>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
   11794:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
   11796:	f04f 0320 	mov.w	r3, #32
   1179a:	f3ef 8611 	mrs	r6, BASEPRI
   1179e:	f383 8811 	msr	BASEPRI, r3
   117a2:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
   117a6:	f06f 0201 	mvn.w	r2, #1
   117aa:	1b53      	subs	r3, r2, r5
   117ac:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   117b0:	eb6c 0307 	sbc.w	r3, ip, r7
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
   117b4:	2b00      	cmp	r3, #0
   117b6:	db1b      	blt.n	117f0 <z_add_timeout+0x70>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
   117b8:	4b2b      	ldr	r3, [pc, #172]	; (11868 <z_add_timeout+0xe8>)
   117ba:	e9d3 1300 	ldrd	r1, r3, [r3]
   117be:	1a52      	subs	r2, r2, r1
   117c0:	eb6c 0303 	sbc.w	r3, ip, r3
   117c4:	1b55      	subs	r5, r2, r5

			to->dticks = MAX(1, ticks);
   117c6:	eb63 0307 	sbc.w	r3, r3, r7
   117ca:	2d01      	cmp	r5, #1
   117cc:	f173 0200 	sbcs.w	r2, r3, #0
   117d0:	bfbc      	itt	lt
   117d2:	2501      	movlt	r5, #1
   117d4:	2300      	movlt	r3, #0
   117d6:	e9c0 5304 	strd	r5, r3, [r0, #16]
	return list->head == list;
   117da:	4824      	ldr	r0, [pc, #144]	; (1186c <z_add_timeout+0xec>)
	sys_dnode_t *const tail = list->tail;
   117dc:	e9d0 3c00 	ldrd	r3, ip, [r0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   117e0:	4283      	cmp	r3, r0
   117e2:	d118      	bne.n	11816 <z_add_timeout+0x96>
	node->prev = tail;
   117e4:	e9c4 0c00 	strd	r0, ip, [r4]
	tail->next = node;
   117e8:	f8cc 4000 	str.w	r4, [ip]
	list->tail = node;
   117ec:	6044      	str	r4, [r0, #4]
}
   117ee:	e026      	b.n	1183e <z_add_timeout+0xbe>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
   117f0:	f7ff ff7a 	bl	116e8 <elapsed>
   117f4:	3501      	adds	r5, #1
   117f6:	f147 0700 	adc.w	r7, r7, #0
   117fa:	182d      	adds	r5, r5, r0
   117fc:	eb47 77e0 	adc.w	r7, r7, r0, asr #31
   11800:	e9c4 5704 	strd	r5, r7, [r4, #16]
   11804:	e7e9      	b.n	117da <z_add_timeout+0x5a>
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
				sys_dlist_insert(&t->node, &to->node);
				break;
			}
			to->dticks -= t->dticks;
   11806:	1a52      	subs	r2, r2, r1
   11808:	eb65 0507 	sbc.w	r5, r5, r7
	return (node == list->tail) ? NULL : node->next;
   1180c:	459c      	cmp	ip, r3
   1180e:	e9c4 2504 	strd	r2, r5, [r4, #16]
   11812:	d0e7      	beq.n	117e4 <z_add_timeout+0x64>
   11814:	681b      	ldr	r3, [r3, #0]
		for (t = first(); t != NULL; t = next(t)) {
   11816:	2b00      	cmp	r3, #0
   11818:	d0e4      	beq.n	117e4 <z_add_timeout+0x64>
			if (t->dticks > to->dticks) {
   1181a:	e9d3 1704 	ldrd	r1, r7, [r3, #16]
   1181e:	e9d4 2504 	ldrd	r2, r5, [r4, #16]
   11822:	428a      	cmp	r2, r1
   11824:	eb75 0e07 	sbcs.w	lr, r5, r7
   11828:	daed      	bge.n	11806 <z_add_timeout+0x86>
				t->dticks -= to->dticks;
   1182a:	1a8a      	subs	r2, r1, r2
   1182c:	eb67 0505 	sbc.w	r5, r7, r5
   11830:	e9c3 2504 	strd	r2, r5, [r3, #16]
	sys_dnode_t *const prev = successor->prev;
   11834:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   11836:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   1183a:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   1183c:	605c      	str	r4, [r3, #4]
	return list->head == list;
   1183e:	6803      	ldr	r3, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   11840:	4283      	cmp	r3, r0
   11842:	d00b      	beq.n	1185c <z_add_timeout+0xdc>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   11844:	429c      	cmp	r4, r3
   11846:	d109      	bne.n	1185c <z_add_timeout+0xdc>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
   11848:	f7ff ff58 	bl	116fc <next_timeout>

			if (next_time == 0 ||
   1184c:	b118      	cbz	r0, 11856 <z_add_timeout+0xd6>
			    _current_cpu->slice_ticks != next_time) {
   1184e:	4b08      	ldr	r3, [pc, #32]	; (11870 <z_add_timeout+0xf0>)
			if (next_time == 0 ||
   11850:	691b      	ldr	r3, [r3, #16]
   11852:	4283      	cmp	r3, r0
   11854:	d002      	beq.n	1185c <z_add_timeout+0xdc>
				sys_clock_set_timeout(next_time, false);
   11856:	2100      	movs	r1, #0
   11858:	f7fd fad2 	bl	ee00 <sys_clock_set_timeout>
	__asm__ volatile(
   1185c:	f386 8811 	msr	BASEPRI, r6
   11860:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
   11864:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11866:	bf00      	nop
   11868:	20000210 	.word	0x20000210
   1186c:	20000028 	.word	0x20000028
   11870:	200004b4 	.word	0x200004b4

00011874 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
   11874:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   11878:	4605      	mov	r5, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   1187a:	f7ff fd39 	bl	112f0 <z_time_slice>
	__asm__ volatile(
   1187e:	f04f 0320 	mov.w	r3, #32
   11882:	f3ef 8411 	mrs	r4, BASEPRI
   11886:	f383 8811 	msr	BASEPRI, r3
   1188a:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   1188e:	4e24      	ldr	r6, [pc, #144]	; (11920 <sys_clock_announce+0xac>)
	return list->head == list;
   11890:	f8df 8090 	ldr.w	r8, [pc, #144]	; 11924 <sys_clock_announce+0xb0>
   11894:	6035      	str	r5, [r6, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
   11896:	4d24      	ldr	r5, [pc, #144]	; (11928 <sys_clock_announce+0xb4>)
   11898:	f8d8 0000 	ldr.w	r0, [r8]
	while (first() != NULL && first()->dticks <= announce_remaining) {
   1189c:	6832      	ldr	r2, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1189e:	4540      	cmp	r0, r8
		curr_tick += dt;
   118a0:	e9d5 1e00 	ldrd	r1, lr, [r5]
   118a4:	ea4f 77e2 	mov.w	r7, r2, asr #31
   118a8:	d00b      	beq.n	118c2 <sys_clock_announce+0x4e>
	while (first() != NULL && first()->dticks <= announce_remaining) {
   118aa:	b150      	cbz	r0, 118c2 <sys_clock_announce+0x4e>
   118ac:	e9d0 3c04 	ldrd	r3, ip, [r0, #16]
   118b0:	429a      	cmp	r2, r3
   118b2:	eb77 090c 	sbcs.w	r9, r7, ip
   118b6:	da16      	bge.n	118e6 <sys_clock_announce+0x72>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   118b8:	1a9b      	subs	r3, r3, r2
   118ba:	eb6c 0c07 	sbc.w	ip, ip, r7
   118be:	e9c0 3c04 	strd	r3, ip, [r0, #16]
	}

	curr_tick += announce_remaining;
   118c2:	1852      	adds	r2, r2, r1
   118c4:	eb4e 0707 	adc.w	r7, lr, r7
   118c8:	e9c5 2700 	strd	r2, r7, [r5]
	announce_remaining = 0;
   118cc:	2500      	movs	r5, #0
   118ce:	6035      	str	r5, [r6, #0]

	sys_clock_set_timeout(next_timeout(), false);
   118d0:	f7ff ff14 	bl	116fc <next_timeout>
   118d4:	4629      	mov	r1, r5
   118d6:	f7fd fa93 	bl	ee00 <sys_clock_set_timeout>
	__asm__ volatile(
   118da:	f384 8811 	msr	BASEPRI, r4
   118de:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   118e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
   118e6:	1859      	adds	r1, r3, r1
   118e8:	eb4e 77e3 	adc.w	r7, lr, r3, asr #31
		announce_remaining -= dt;
   118ec:	1ad3      	subs	r3, r2, r3
   118ee:	6033      	str	r3, [r6, #0]
		t->dticks = 0;
   118f0:	2200      	movs	r2, #0
   118f2:	2300      	movs	r3, #0
   118f4:	e9c0 2304 	strd	r2, r3, [r0, #16]
		curr_tick += dt;
   118f8:	e9c5 1700 	strd	r1, r7, [r5]
		remove_timeout(t);
   118fc:	f7ff ff26 	bl	1174c <remove_timeout>
   11900:	f384 8811 	msr	BASEPRI, r4
   11904:	f3bf 8f6f 	isb	sy
		t->fn(t);
   11908:	6883      	ldr	r3, [r0, #8]
   1190a:	4798      	blx	r3
	__asm__ volatile(
   1190c:	f04f 0320 	mov.w	r3, #32
   11910:	f3ef 8411 	mrs	r4, BASEPRI
   11914:	f383 8811 	msr	BASEPRI, r3
   11918:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
   1191c:	e7bc      	b.n	11898 <sys_clock_announce+0x24>
   1191e:	bf00      	nop
   11920:	200004f0 	.word	0x200004f0
   11924:	20000028 	.word	0x20000028
   11928:	20000210 	.word	0x20000210

0001192c <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   1192c:	b510      	push	{r4, lr}
   1192e:	f04f 0320 	mov.w	r3, #32
   11932:	f3ef 8411 	mrs	r4, BASEPRI
   11936:	f383 8811 	msr	BASEPRI, r3
   1193a:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + sys_clock_elapsed();
   1193e:	f7fd fa91 	bl	ee64 <sys_clock_elapsed>
   11942:	4a05      	ldr	r2, [pc, #20]	; (11958 <sys_clock_tick_get+0x2c>)
   11944:	e9d2 3100 	ldrd	r3, r1, [r2]
   11948:	18c0      	adds	r0, r0, r3
   1194a:	f141 0100 	adc.w	r1, r1, #0
	__asm__ volatile(
   1194e:	f384 8811 	msr	BASEPRI, r4
   11952:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   11956:	bd10      	pop	{r4, pc}
   11958:	20000210 	.word	0x20000210

0001195c <z_timer_expiration_handler>:
 * @param t  Timeout used by the timer.
 *
 * @return N/A
 */
void z_timer_expiration_handler(struct _timeout *t)
{
   1195c:	b538      	push	{r3, r4, r5, lr}

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   1195e:	e9d0 320a 	ldrd	r3, r2, [r0, #40]	; 0x28
   11962:	3301      	adds	r3, #1
   11964:	f142 0200 	adc.w	r2, r2, #0
   11968:	2b02      	cmp	r3, #2
   1196a:	f172 0300 	sbcs.w	r3, r2, #0
{
   1196e:	4604      	mov	r4, r0
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   11970:	d304      	bcc.n	1197c <z_timer_expiration_handler+0x20>
	    !K_TIMEOUT_EQ(timer->period, K_FOREVER)) {
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   11972:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	; 0x28
   11976:	490d      	ldr	r1, [pc, #52]	; (119ac <z_timer_expiration_handler+0x50>)
   11978:	f7ff ff02 	bl	11780 <z_add_timeout>
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
   1197c:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1197e:	3301      	adds	r3, #1
   11980:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
   11982:	6a23      	ldr	r3, [r4, #32]
   11984:	b10b      	cbz	r3, 1198a <z_timer_expiration_handler+0x2e>
		timer->expiry_fn(timer);
   11986:	4620      	mov	r0, r4
   11988:	4798      	blx	r3
	return list->head == list;
   1198a:	f854 5f18 	ldr.w	r5, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1198e:	42a5      	cmp	r5, r4
   11990:	d00a      	beq.n	119a8 <z_timer_expiration_handler+0x4c>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
   11992:	b14d      	cbz	r5, 119a8 <z_timer_expiration_handler+0x4c>
	 * place a thread can be taken off this pend queue, and b) the
	 * only place a thread can be put on the pend queue is at
	 * thread level, which of course cannot interrupt the current
	 * context.
	 */
	z_unpend_thread_no_timeout(thread);
   11994:	4628      	mov	r0, r5
   11996:	f001 f911 	bl	12bbc <z_unpend_thread_no_timeout>
   1199a:	2300      	movs	r3, #0
   1199c:	67ab      	str	r3, [r5, #120]	; 0x78

	arch_thread_return_value_set(thread, 0);

	z_ready_thread(thread);
   1199e:	4628      	mov	r0, r5
}
   119a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_ready_thread(thread);
   119a4:	f001 b960 	b.w	12c68 <z_ready_thread>
}
   119a8:	bd38      	pop	{r3, r4, r5, pc}
   119aa:	bf00      	nop
   119ac:	0001195d 	.word	0x0001195d

000119b0 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
   119b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   119b4:	4611      	mov	r1, r2
   119b6:	4605      	mov	r5, r0
   119b8:	4618      	mov	r0, r3
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   119ba:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   119be:	bf08      	it	eq
   119c0:	f1b1 3fff 	cmpeq.w	r1, #4294967295	; 0xffffffff
{
   119c4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   119c8:	4688      	mov	r8, r1
   119ca:	4607      	mov	r7, r0
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   119cc:	d03c      	beq.n	11a48 <z_impl_k_timer_start+0x98>
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   119ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   119d2:	bf08      	it	eq
   119d4:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
   119d8:	4614      	mov	r4, r2
   119da:	461e      	mov	r6, r3
   119dc:	d013      	beq.n	11a06 <z_impl_k_timer_start+0x56>
   119de:	431a      	orrs	r2, r3
   119e0:	d011      	beq.n	11a06 <z_impl_k_timer_start+0x56>
	    Z_TICK_ABS(period.ticks) < 0) {
   119e2:	f06f 0201 	mvn.w	r2, #1
   119e6:	1b12      	subs	r2, r2, r4
   119e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   119ec:	eb62 0203 	sbc.w	r2, r2, r3
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   119f0:	2a00      	cmp	r2, #0
   119f2:	da08      	bge.n	11a06 <z_impl_k_timer_start+0x56>
		period.ticks = MAX(period.ticks - 1, 1);
   119f4:	3c01      	subs	r4, #1
   119f6:	f163 0600 	sbc.w	r6, r3, #0
   119fa:	2c01      	cmp	r4, #1
   119fc:	f176 0300 	sbcs.w	r3, r6, #0
   11a00:	bfbc      	itt	lt
   11a02:	2401      	movlt	r4, #1
   11a04:	2600      	movlt	r6, #0
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
   11a06:	f06f 0301 	mvn.w	r3, #1
   11a0a:	1a5b      	subs	r3, r3, r1
   11a0c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   11a10:	eb63 0300 	sbc.w	r3, r3, r0
   11a14:	2b00      	cmp	r3, #0
   11a16:	da08      	bge.n	11a2a <z_impl_k_timer_start+0x7a>
		duration.ticks = MAX(duration.ticks - 1, 0);
   11a18:	1e4a      	subs	r2, r1, #1
   11a1a:	f160 0700 	sbc.w	r7, r0, #0
   11a1e:	2f00      	cmp	r7, #0
   11a20:	4690      	mov	r8, r2
   11a22:	bfbc      	itt	lt
   11a24:	f04f 0800 	movlt.w	r8, #0
   11a28:	4647      	movlt	r7, r8
	}

	(void)z_abort_timeout(&timer->timeout);
   11a2a:	4628      	mov	r0, r5
   11a2c:	f001 f97b 	bl	12d26 <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
   11a30:	2300      	movs	r3, #0
   11a32:	632b      	str	r3, [r5, #48]	; 0x30
	timer->period = period;
   11a34:	e9c5 460a 	strd	r4, r6, [r5, #40]	; 0x28

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   11a38:	4642      	mov	r2, r8
   11a3a:	463b      	mov	r3, r7
   11a3c:	4628      	mov	r0, r5
   11a3e:	4903      	ldr	r1, [pc, #12]	; (11a4c <z_impl_k_timer_start+0x9c>)
		     duration);
}
   11a40:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   11a44:	f7ff be9c 	b.w	11780 <z_add_timeout>
}
   11a48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11a4c:	0001195d 	.word	0x0001195d

00011a50 <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
   11a50:	4a02      	ldr	r2, [pc, #8]	; (11a5c <boot_banner+0xc>)
   11a52:	4903      	ldr	r1, [pc, #12]	; (11a60 <boot_banner+0x10>)
   11a54:	4803      	ldr	r0, [pc, #12]	; (11a64 <boot_banner+0x14>)
   11a56:	f000 b83b 	b.w	11ad0 <printk>
   11a5a:	bf00      	nop
   11a5c:	00013534 	.word	0x00013534
   11a60:	00013de9 	.word	0x00013de9
   11a64:	00013df8 	.word	0x00013df8

00011a68 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   11a68:	4770      	bx	lr

00011a6a <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
   11a6a:	4603      	mov	r3, r0
   11a6c:	b158      	cbz	r0, 11a86 <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   11a6e:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   11a70:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
   11a74:	2a01      	cmp	r2, #1
   11a76:	d003      	beq.n	11a80 <sys_notify_validate+0x16>
   11a78:	2a03      	cmp	r2, #3
   11a7a:	d104      	bne.n	11a86 <sys_notify_validate+0x1c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
   11a7c:	6802      	ldr	r2, [r0, #0]
   11a7e:	b112      	cbz	r2, 11a86 <sys_notify_validate+0x1c>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
   11a80:	2000      	movs	r0, #0
   11a82:	6098      	str	r0, [r3, #8]
   11a84:	4770      	bx	lr
		return -EINVAL;
   11a86:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
   11a8a:	4770      	bx	lr

00011a8c <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   11a8c:	6842      	ldr	r2, [r0, #4]
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
   11a8e:	6081      	str	r1, [r0, #8]
	return method & SYS_NOTIFY_METHOD_MASK;
   11a90:	f002 0203 	and.w	r2, r2, #3
	switch (method) {
   11a94:	2a03      	cmp	r2, #3
   11a96:	f04f 0200 	mov.w	r2, #0
{
   11a9a:	4603      	mov	r3, r0
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
   11a9c:	bf0c      	ite	eq
   11a9e:	6800      	ldreq	r0, [r0, #0]
	sys_notify_generic_callback rv = NULL;
   11aa0:	4610      	movne	r0, r2
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   11aa2:	605a      	str	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   11aa4:	4770      	bx	lr

00011aa6 <arch_printk_char_out>:
}
   11aa6:	2000      	movs	r0, #0
   11aa8:	4770      	bx	lr

00011aaa <str_out>:
{
   11aaa:	b530      	push	{r4, r5, lr}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   11aac:	688a      	ldr	r2, [r1, #8]
   11aae:	680c      	ldr	r4, [r1, #0]
		ctx->str[ctx->count++] = '\0';
   11ab0:	1c55      	adds	r5, r2, #1
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   11ab2:	b114      	cbz	r4, 11aba <str_out+0x10>
   11ab4:	684b      	ldr	r3, [r1, #4]
   11ab6:	4293      	cmp	r3, r2
   11ab8:	dc01      	bgt.n	11abe <str_out+0x14>
		ctx->count++;
   11aba:	608d      	str	r5, [r1, #8]
}
   11abc:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   11abe:	3b01      	subs	r3, #1
   11ac0:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   11ac2:	bf08      	it	eq
   11ac4:	2200      	moveq	r2, #0
   11ac6:	608d      	str	r5, [r1, #8]
   11ac8:	bf0c      	ite	eq
   11aca:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   11acc:	54a0      	strbne	r0, [r4, r2]
   11ace:	e7f5      	b.n	11abc <str_out+0x12>

00011ad0 <printk>:
{
   11ad0:	b40f      	push	{r0, r1, r2, r3}
   11ad2:	b507      	push	{r0, r1, r2, lr}
   11ad4:	a904      	add	r1, sp, #16
   11ad6:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   11ada:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
   11adc:	f7fa ff44 	bl	c968 <vprintk>
}
   11ae0:	b003      	add	sp, #12
   11ae2:	f85d eb04 	ldr.w	lr, [sp], #4
   11ae6:	b004      	add	sp, #16
   11ae8:	4770      	bx	lr

00011aea <snprintk>:
{
   11aea:	b40c      	push	{r2, r3}
   11aec:	b507      	push	{r0, r1, r2, lr}
   11aee:	ab04      	add	r3, sp, #16
   11af0:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   11af4:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   11af6:	f7fa ff45 	bl	c984 <vsnprintk>
}
   11afa:	b003      	add	sp, #12
   11afc:	f85d eb04 	ldr.w	lr, [sp], #4
   11b00:	b002      	add	sp, #8
   11b02:	4770      	bx	lr

00011b04 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   11b04:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
   11b06:	f013 0307 	ands.w	r3, r3, #7
   11b0a:	d105      	bne.n	11b18 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   11b0c:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
   11b0e:	2b00      	cmp	r3, #0
   11b10:	bf0c      	ite	eq
   11b12:	2000      	moveq	r0, #0
   11b14:	2003      	movne	r0, #3
   11b16:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   11b18:	2b02      	cmp	r3, #2
   11b1a:	d105      	bne.n	11b28 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   11b1c:	8b43      	ldrh	r3, [r0, #26]
		evt = EVT_STOP;
   11b1e:	2b00      	cmp	r3, #0
   11b20:	bf14      	ite	ne
   11b22:	2000      	movne	r0, #0
   11b24:	2004      	moveq	r0, #4
   11b26:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   11b28:	2b01      	cmp	r3, #1
   11b2a:	d105      	bne.n	11b38 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   11b2c:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
   11b2e:	2b00      	cmp	r3, #0
   11b30:	bf0c      	ite	eq
   11b32:	2000      	moveq	r0, #0
   11b34:	2005      	movne	r0, #5
   11b36:	4770      	bx	lr
	int evt = EVT_NOP;
   11b38:	2000      	movs	r0, #0
}
   11b3a:	4770      	bx	lr

00011b3c <notify_one>:
{
   11b3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11b40:	460d      	mov	r5, r1
   11b42:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   11b44:	4619      	mov	r1, r3
   11b46:	1d28      	adds	r0, r5, #4
{
   11b48:	4690      	mov	r8, r2
   11b4a:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   11b4c:	f7ff ff9e 	bl	11a8c <sys_notify_finalize>
	if (cb) {
   11b50:	4604      	mov	r4, r0
   11b52:	b138      	cbz	r0, 11b64 <notify_one+0x28>
		cb(mgr, cli, state, res);
   11b54:	4633      	mov	r3, r6
   11b56:	4642      	mov	r2, r8
   11b58:	4629      	mov	r1, r5
   11b5a:	4638      	mov	r0, r7
   11b5c:	46a4      	mov	ip, r4
}
   11b5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
   11b62:	4760      	bx	ip
}
   11b64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00011b68 <transition_complete>:
{
   11b68:	b410      	push	{r4}
	__asm__ volatile(
   11b6a:	f04f 0420 	mov.w	r4, #32
   11b6e:	f3ef 8211 	mrs	r2, BASEPRI
   11b72:	f384 8811 	msr	BASEPRI, r4
   11b76:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
   11b7a:	6141      	str	r1, [r0, #20]
}
   11b7c:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
   11b7e:	2101      	movs	r1, #1
   11b80:	f7fa bf14 	b.w	c9ac <process_event>

00011b84 <validate_args>:
{
   11b84:	b510      	push	{r4, lr}
   11b86:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   11b88:	b140      	cbz	r0, 11b9c <validate_args+0x18>
   11b8a:	b139      	cbz	r1, 11b9c <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
   11b8c:	1d08      	adds	r0, r1, #4
   11b8e:	f7ff ff6c 	bl	11a6a <sys_notify_validate>
	if ((rv == 0)
   11b92:	b928      	cbnz	r0, 11ba0 <validate_args+0x1c>
	    && ((cli->notify.flags
   11b94:	68a3      	ldr	r3, [r4, #8]
   11b96:	f033 0303 	bics.w	r3, r3, #3
   11b9a:	d001      	beq.n	11ba0 <validate_args+0x1c>
		rv = -EINVAL;
   11b9c:	f06f 0015 	mvn.w	r0, #21
}
   11ba0:	bd10      	pop	{r4, pc}

00011ba2 <onoff_manager_init>:
{
   11ba2:	b538      	push	{r3, r4, r5, lr}
   11ba4:	460c      	mov	r4, r1
	if ((mgr == NULL)
   11ba6:	4605      	mov	r5, r0
   11ba8:	b158      	cbz	r0, 11bc2 <onoff_manager_init+0x20>
	    || (transitions == NULL)
   11baa:	b151      	cbz	r1, 11bc2 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   11bac:	680b      	ldr	r3, [r1, #0]
   11bae:	b143      	cbz	r3, 11bc2 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   11bb0:	684b      	ldr	r3, [r1, #4]
   11bb2:	b133      	cbz	r3, 11bc2 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   11bb4:	221c      	movs	r2, #28
   11bb6:	2100      	movs	r1, #0
   11bb8:	f000 fdfe 	bl	127b8 <memset>
   11bbc:	612c      	str	r4, [r5, #16]
	return 0;
   11bbe:	2000      	movs	r0, #0
}
   11bc0:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   11bc2:	f06f 0015 	mvn.w	r0, #21
   11bc6:	e7fb      	b.n	11bc0 <onoff_manager_init+0x1e>

00011bc8 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   11bc8:	b570      	push	{r4, r5, r6, lr}
   11bca:	4604      	mov	r4, r0
   11bcc:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   11bce:	f7ff ffd9 	bl	11b84 <validate_args>

	if (rv < 0) {
   11bd2:	1e05      	subs	r5, r0, #0
   11bd4:	db31      	blt.n	11c3a <onoff_request+0x72>
   11bd6:	f04f 0320 	mov.w	r3, #32
   11bda:	f3ef 8111 	mrs	r1, BASEPRI
   11bde:	f383 8811 	msr	BASEPRI, r3
   11be2:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   11be6:	8b63      	ldrh	r3, [r4, #26]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   11be8:	8b20      	ldrh	r0, [r4, #24]
	if (mgr->refs == SERVICE_REFS_MAX) {
   11bea:	f64f 75ff 	movw	r5, #65535	; 0xffff
   11bee:	42ab      	cmp	r3, r5
   11bf0:	f000 0207 	and.w	r2, r0, #7
   11bf4:	d02e      	beq.n	11c54 <onoff_request+0x8c>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
   11bf6:	2a02      	cmp	r2, #2
   11bf8:	d10e      	bne.n	11c18 <onoff_request+0x50>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
   11bfa:	3301      	adds	r3, #1
   11bfc:	8363      	strh	r3, [r4, #26]
	rv = state;
   11bfe:	4615      	mov	r5, r2
		notify = true;
   11c00:	2301      	movs	r3, #1
	__asm__ volatile(
   11c02:	f381 8811 	msr	BASEPRI, r1
   11c06:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
   11c0a:	b1b3      	cbz	r3, 11c3a <onoff_request+0x72>
			notify_one(mgr, cli, state, 0);
   11c0c:	2300      	movs	r3, #0
   11c0e:	4631      	mov	r1, r6
   11c10:	4620      	mov	r0, r4
   11c12:	f7ff ff93 	bl	11b3c <notify_one>
   11c16:	e010      	b.n	11c3a <onoff_request+0x72>
	} else if ((state == ONOFF_STATE_OFF)
   11c18:	0783      	lsls	r3, r0, #30
   11c1a:	d001      	beq.n	11c20 <onoff_request+0x58>
		   || (state == ONOFF_STATE_TO_ON)) {
   11c1c:	2a06      	cmp	r2, #6
   11c1e:	d10e      	bne.n	11c3e <onoff_request+0x76>
	parent->next = child;
   11c20:	2300      	movs	r3, #0
   11c22:	6033      	str	r3, [r6, #0]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
   11c24:	6863      	ldr	r3, [r4, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
   11c26:	b993      	cbnz	r3, 11c4e <onoff_request+0x86>
	list->head = node;
   11c28:	e9c4 6600 	strd	r6, r6, [r4]
	if (start) {
   11c2c:	4615      	mov	r5, r2
   11c2e:	b962      	cbnz	r2, 11c4a <onoff_request+0x82>
		process_event(mgr, EVT_RECHECK, key);
   11c30:	460a      	mov	r2, r1
   11c32:	4620      	mov	r0, r4
   11c34:	2102      	movs	r1, #2
   11c36:	f7fa feb9 	bl	c9ac <process_event>
		}
	}

	return rv;
}
   11c3a:	4628      	mov	r0, r5
   11c3c:	bd70      	pop	{r4, r5, r6, pc}
		rv = -EIO;
   11c3e:	2a05      	cmp	r2, #5
   11c40:	bf0c      	ite	eq
   11c42:	f06f 0585 	mvneq.w	r5, #133	; 0x85
   11c46:	f06f 0504 	mvnne.w	r5, #4
   11c4a:	2300      	movs	r3, #0
   11c4c:	e7d9      	b.n	11c02 <onoff_request+0x3a>
	parent->next = child;
   11c4e:	601e      	str	r6, [r3, #0]
	list->tail = node;
   11c50:	6066      	str	r6, [r4, #4]
}
   11c52:	e7eb      	b.n	11c2c <onoff_request+0x64>
		rv = -EAGAIN;
   11c54:	f06f 050a 	mvn.w	r5, #10
   11c58:	e7f7      	b.n	11c4a <onoff_request+0x82>

00011c5a <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   11c5a:	4604      	mov	r4, r0
   11c5c:	b508      	push	{r3, lr}
   11c5e:	4608      	mov	r0, r1
   11c60:	4611      	mov	r1, r2
	entry(p1, p2, p3);
   11c62:	461a      	mov	r2, r3
   11c64:	47a0      	blx	r4
	return z_impl_k_current_get();
   11c66:	f7ff fccd 	bl	11604 <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
   11c6a:	f7fd fd3b 	bl	f6e4 <z_impl_k_thread_abort>

00011c6e <encode_uint>:
{
   11c6e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11c72:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
   11c74:	78d3      	ldrb	r3, [r2, #3]
	switch (specifier) {
   11c76:	2b6f      	cmp	r3, #111	; 0x6f
{
   11c78:	4680      	mov	r8, r0
   11c7a:	460f      	mov	r7, r1
   11c7c:	4615      	mov	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   11c7e:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
   11c82:	d029      	beq.n	11cd8 <encode_uint+0x6a>
   11c84:	d824      	bhi.n	11cd0 <encode_uint+0x62>
		return 16;
   11c86:	2b58      	cmp	r3, #88	; 0x58
   11c88:	bf14      	ite	ne
   11c8a:	260a      	movne	r6, #10
   11c8c:	2610      	moveq	r6, #16
	char *bp = bps + (bpe - bps);
   11c8e:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
   11c92:	4632      	mov	r2, r6
   11c94:	2300      	movs	r3, #0
   11c96:	4640      	mov	r0, r8
   11c98:	4639      	mov	r1, r7
   11c9a:	f7fa fb1f 	bl	c2dc <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   11c9e:	2a09      	cmp	r2, #9
   11ca0:	b2d4      	uxtb	r4, r2
   11ca2:	d81e      	bhi.n	11ce2 <encode_uint+0x74>
   11ca4:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
   11ca6:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
   11ca8:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
   11caa:	f177 0300 	sbcs.w	r3, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
   11cae:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
   11cb2:	d301      	bcc.n	11cb8 <encode_uint+0x4a>
   11cb4:	45d1      	cmp	r9, sl
   11cb6:	d811      	bhi.n	11cdc <encode_uint+0x6e>
	if (conv->flag_hash) {
   11cb8:	782b      	ldrb	r3, [r5, #0]
   11cba:	069b      	lsls	r3, r3, #26
   11cbc:	d505      	bpl.n	11cca <encode_uint+0x5c>
		if (radix == 8) {
   11cbe:	2e08      	cmp	r6, #8
   11cc0:	d115      	bne.n	11cee <encode_uint+0x80>
			conv->altform_0 = true;
   11cc2:	78ab      	ldrb	r3, [r5, #2]
   11cc4:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
   11cc8:	70ab      	strb	r3, [r5, #2]
}
   11cca:	4648      	mov	r0, r9
   11ccc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
   11cd0:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
   11cd4:	2b70      	cmp	r3, #112	; 0x70
   11cd6:	e7d7      	b.n	11c88 <encode_uint+0x1a>
	switch (specifier) {
   11cd8:	2608      	movs	r6, #8
   11cda:	e7d8      	b.n	11c8e <encode_uint+0x20>
		value /= radix;
   11cdc:	4680      	mov	r8, r0
   11cde:	460f      	mov	r7, r1
   11ce0:	e7d7      	b.n	11c92 <encode_uint+0x24>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   11ce2:	f1bb 0f19 	cmp.w	fp, #25
   11ce6:	bf94      	ite	ls
   11ce8:	3437      	addls	r4, #55	; 0x37
   11cea:	3457      	addhi	r4, #87	; 0x57
   11cec:	e7db      	b.n	11ca6 <encode_uint+0x38>
		} else if (radix == 16) {
   11cee:	2e10      	cmp	r6, #16
   11cf0:	d1eb      	bne.n	11cca <encode_uint+0x5c>
			conv->altform_0c = true;
   11cf2:	78ab      	ldrb	r3, [r5, #2]
   11cf4:	f043 0310 	orr.w	r3, r3, #16
   11cf8:	e7e6      	b.n	11cc8 <encode_uint+0x5a>

00011cfa <outs>:
{
   11cfa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11cfe:	4607      	mov	r7, r0
   11d00:	4688      	mov	r8, r1
   11d02:	4615      	mov	r5, r2
   11d04:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   11d06:	4614      	mov	r4, r2
   11d08:	42b4      	cmp	r4, r6
   11d0a:	eba4 0005 	sub.w	r0, r4, r5
   11d0e:	d302      	bcc.n	11d16 <outs+0x1c>
   11d10:	b93e      	cbnz	r6, 11d22 <outs+0x28>
   11d12:	7823      	ldrb	r3, [r4, #0]
   11d14:	b12b      	cbz	r3, 11d22 <outs+0x28>
		int rc = out((int)*sp++, ctx);
   11d16:	f814 0b01 	ldrb.w	r0, [r4], #1
   11d1a:	4641      	mov	r1, r8
   11d1c:	47b8      	blx	r7
		if (rc < 0) {
   11d1e:	2800      	cmp	r0, #0
   11d20:	daf2      	bge.n	11d08 <outs+0xe>
}
   11d22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00011d26 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BOOTLOADER_MCUBOOT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_MCUBOOT_SIGNATURE_KEY_FILE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_MCUBOOT_EXTRA_IMGTOOL_ARGS, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   11d26:	4770      	bx	lr

00011d28 <log_list_init>:

#include "log_list.h"

void log_list_init(struct log_list_t *list)
{
	list->tail = NULL;
   11d28:	2300      	movs	r3, #0
	list->head = NULL;
   11d2a:	e9c0 3300 	strd	r3, r3, [r0]
}
   11d2e:	4770      	bx	lr

00011d30 <log_list_add_tail>:

void log_list_add_tail(struct log_list_t *list, struct log_msg *msg)
{
	if (list->head == NULL) {
   11d30:	6803      	ldr	r3, [r0, #0]
   11d32:	b923      	cbnz	r3, 11d3e <log_list_add_tail+0xe>
		list->head = msg;
   11d34:	6001      	str	r1, [r0, #0]
	} else {
		list->tail->next = msg;
	}

	list->tail = msg;
	msg->next = NULL;
   11d36:	2300      	movs	r3, #0
	list->tail = msg;
   11d38:	6041      	str	r1, [r0, #4]
	msg->next = NULL;
   11d3a:	600b      	str	r3, [r1, #0]
}
   11d3c:	4770      	bx	lr
		list->tail->next = msg;
   11d3e:	6843      	ldr	r3, [r0, #4]
   11d40:	6019      	str	r1, [r3, #0]
   11d42:	e7f8      	b.n	11d36 <log_list_add_tail+0x6>

00011d44 <log_list_head_peek>:

struct log_msg *log_list_head_peek(struct log_list_t *list)
{
	return list->head;
}
   11d44:	6800      	ldr	r0, [r0, #0]
   11d46:	4770      	bx	lr

00011d48 <log_list_head_get>:

struct log_msg *log_list_head_get(struct log_list_t *list)
{
   11d48:	4603      	mov	r3, r0
	struct log_msg *msg = list->head;
   11d4a:	6800      	ldr	r0, [r0, #0]

	if (list->head != NULL) {
   11d4c:	b108      	cbz	r0, 11d52 <log_list_head_get+0xa>
		list->head = list->head->next;
   11d4e:	6802      	ldr	r2, [r0, #0]
   11d50:	601a      	str	r2, [r3, #0]
	}

	return msg;
}
   11d52:	4770      	bx	lr

00011d54 <z_log_msg_std_alloc>:
/** @brief Allocate chunk for standard log message.
 *
 *  @return Allocated chunk of NULL.
 */
static inline struct log_msg *z_log_msg_std_alloc(void)
{
   11d54:	b508      	push	{r3, lr}
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   11d56:	f7fb fdb7 	bl	d8c8 <log_msg_chunk_alloc>

	if (msg != NULL) {
   11d5a:	b118      	cbz	r0, 11d64 <z_log_msg_std_alloc+0x10>
		/* all fields reset to 0, reference counter to 1 */
		msg->hdr.ref_cnt = 1;
   11d5c:	2301      	movs	r3, #1
   11d5e:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
   11d60:	2300      	movs	r3, #0
   11d62:	8103      	strh	r3, [r0, #8]
			msg->hdr.ids.source_id = 0;
		}
	}

	return msg;
}
   11d64:	bd08      	pop	{r3, pc}

00011d66 <default_get_timestamp>:
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
   11d66:	f7fd b88b 	b.w	ee80 <sys_clock_cycle_get_32>

00011d6a <dummy_timestamp>:
   11d6a:	2000      	movs	r0, #0
   11d6c:	4770      	bx	lr

00011d6e <z_log_get_s_mask>:
{
   11d6e:	b5f0      	push	{r4, r5, r6, r7, lr}
   11d70:	4605      	mov	r5, r0
	uint32_t mask = 0U;
   11d72:	2000      	movs	r0, #0
	uint32_t arg = 0U;
   11d74:	4603      	mov	r3, r0
	bool arm = false;
   11d76:	4602      	mov	r2, r0
				mask |= BIT(arg);
   11d78:	2701      	movs	r7, #1
	while ((curr = *str++) && arg < nargs) {
   11d7a:	f815 4b01 	ldrb.w	r4, [r5], #1
   11d7e:	b10c      	cbz	r4, 11d84 <z_log_get_s_mask+0x16>
   11d80:	428b      	cmp	r3, r1
   11d82:	d300      	bcc.n	11d86 <z_log_get_s_mask+0x18>
}
   11d84:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (curr == '%') {
   11d86:	2c25      	cmp	r4, #37	; 0x25
   11d88:	d102      	bne.n	11d90 <z_log_get_s_mask+0x22>
			arm = !arm;
   11d8a:	f082 0201 	eor.w	r2, r2, #1
   11d8e:	e7f4      	b.n	11d7a <z_log_get_s_mask+0xc>
		} else if (arm && isalpha((int)curr)) {
   11d90:	2a00      	cmp	r2, #0
   11d92:	d0f2      	beq.n	11d7a <z_log_get_s_mask+0xc>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
   11d94:	f044 0620 	orr.w	r6, r4, #32
   11d98:	3e61      	subs	r6, #97	; 0x61
   11d9a:	2e19      	cmp	r6, #25
   11d9c:	d8ed      	bhi.n	11d7a <z_log_get_s_mask+0xc>
			if (curr == 's') {
   11d9e:	2c73      	cmp	r4, #115	; 0x73
				mask |= BIT(arg);
   11da0:	bf04      	itt	eq
   11da2:	fa07 f203 	lsleq.w	r2, r7, r3
   11da6:	4310      	orreq	r0, r2
			arg++;
   11da8:	3301      	adds	r3, #1
			arm = false;
   11daa:	2200      	movs	r2, #0
   11dac:	e7e5      	b.n	11d7a <z_log_get_s_mask+0xc>

00011dae <log_0>:
{
   11dae:	b538      	push	{r3, r4, r5, lr}
   11db0:	4605      	mov	r5, r0
   11db2:	460c      	mov	r4, r1
 *
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_0(const char *str)
{
	struct log_msg *msg = z_log_msg_std_alloc();
   11db4:	f7ff ffce 	bl	11d54 <z_log_msg_std_alloc>

	if (msg != NULL) {
   11db8:	b128      	cbz	r0, 11dc6 <log_0+0x18>
		msg->str = str;
   11dba:	6105      	str	r5, [r0, #16]
		msg_finalize(msg, src_level);
   11dbc:	4621      	mov	r1, r4
}
   11dbe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		msg_finalize(msg, src_level);
   11dc2:	f7fb bcbf 	b.w	d744 <msg_finalize>
}
   11dc6:	bd38      	pop	{r3, r4, r5, pc}

00011dc8 <log_1>:
{
   11dc8:	b570      	push	{r4, r5, r6, lr}
   11dca:	4606      	mov	r6, r0
   11dcc:	460d      	mov	r5, r1
   11dce:	4614      	mov	r4, r2
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_1(const char *str,
					       log_arg_t arg1)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   11dd0:	f7ff ffc0 	bl	11d54 <z_log_msg_std_alloc>

	if (msg != NULL) {
   11dd4:	b158      	cbz	r0, 11dee <log_1+0x26>
		msg->str = str;
		msg->hdr.params.std.nargs = 1U;
   11dd6:	7a42      	ldrb	r2, [r0, #9]
		msg->str = str;
   11dd8:	6106      	str	r6, [r0, #16]
		msg->hdr.params.std.nargs = 1U;
   11dda:	2101      	movs	r1, #1
   11ddc:	f361 1207 	bfi	r2, r1, #4, #4
   11de0:	7242      	strb	r2, [r0, #9]
		msg->payload.single.args[0] = arg1;
   11de2:	6145      	str	r5, [r0, #20]
		msg_finalize(msg, src_level);
   11de4:	4621      	mov	r1, r4
}
   11de6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		msg_finalize(msg, src_level);
   11dea:	f7fb bcab 	b.w	d744 <msg_finalize>
}
   11dee:	bd70      	pop	{r4, r5, r6, pc}

00011df0 <log_2>:
{
   11df0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11df4:	4680      	mov	r8, r0
   11df6:	460f      	mov	r7, r1
   11df8:	4616      	mov	r6, r2
   11dfa:	461d      	mov	r5, r3
 */
static inline struct log_msg *log_msg_create_2(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   11dfc:	f7ff ffaa 	bl	11d54 <z_log_msg_std_alloc>

	if (msg != NULL) {
   11e00:	b168      	cbz	r0, 11e1e <log_2+0x2e>
		msg->str = str;
		msg->hdr.params.std.nargs = 2U;
   11e02:	7a43      	ldrb	r3, [r0, #9]
		msg->str = str;
   11e04:	f8c0 8010 	str.w	r8, [r0, #16]
		msg->hdr.params.std.nargs = 2U;
   11e08:	2202      	movs	r2, #2
   11e0a:	f362 1307 	bfi	r3, r2, #4, #4
   11e0e:	7243      	strb	r3, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
   11e10:	e9c0 7605 	strd	r7, r6, [r0, #20]
		msg_finalize(msg, src_level);
   11e14:	4629      	mov	r1, r5
}
   11e16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		msg_finalize(msg, src_level);
   11e1a:	f7fb bc93 	b.w	d744 <msg_finalize>
}
   11e1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00011e22 <log_3>:
{
   11e22:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   11e26:	4680      	mov	r8, r0
   11e28:	f8bd 9020 	ldrh.w	r9, [sp, #32]
   11e2c:	460f      	mov	r7, r1
   11e2e:	4616      	mov	r6, r2
   11e30:	461d      	mov	r5, r3
static inline struct log_msg *log_msg_create_3(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2,
					       log_arg_t arg3)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   11e32:	f7ff ff8f 	bl	11d54 <z_log_msg_std_alloc>

	if (msg != NULL) {
   11e36:	b170      	cbz	r0, 11e56 <log_3+0x34>
		msg->str = str;
		msg->hdr.params.std.nargs = 3U;
   11e38:	7a43      	ldrb	r3, [r0, #9]
		msg->str = str;
   11e3a:	f8c0 8010 	str.w	r8, [r0, #16]
		msg->hdr.params.std.nargs = 3U;
   11e3e:	2203      	movs	r2, #3
   11e40:	f362 1307 	bfi	r3, r2, #4, #4
   11e44:	7243      	strb	r3, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
   11e46:	e9c0 7605 	strd	r7, r6, [r0, #20]
		msg->payload.single.args[2] = arg3;
   11e4a:	61c5      	str	r5, [r0, #28]
		msg_finalize(msg, src_level);
   11e4c:	4649      	mov	r1, r9
}
   11e4e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		msg_finalize(msg, src_level);
   11e52:	f7fb bc77 	b.w	d744 <msg_finalize>
}
   11e56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00011e5a <log_msg_hexdump_data_op>:
static void log_msg_hexdump_data_op(struct log_msg *msg,
				    uint8_t *data,
				    size_t *length,
				    size_t offset,
				    bool put_op)
{
   11e5a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   11e5e:	461c      	mov	r4, r3
	uint32_t available_len = msg->hdr.params.hexdump.length;
   11e60:	8903      	ldrh	r3, [r0, #8]
{
   11e62:	f89d 7020 	ldrb.w	r7, [sp, #32]
   11e66:	460e      	mov	r6, r1
   11e68:	4611      	mov	r1, r2
	uint32_t available_len = msg->hdr.params.hexdump.length;
   11e6a:	f3c3 028d 	ubfx	r2, r3, #2, #14
	uint8_t *head_data;
	uint32_t chunk_len;
	uint32_t req_len;
	uint32_t cpy_len;

	if (offset >= available_len) {
   11e6e:	42a2      	cmp	r2, r4
   11e70:	d803      	bhi.n	11e7a <log_msg_hexdump_data_op+0x20>
		*length = 0;
   11e72:	2300      	movs	r3, #0
   11e74:	600b      	str	r3, [r1, #0]
		offset = 0;
		cont = cont->next;
		req_len -= cpy_len;
		data += cpy_len;
	}
}
   11e76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if ((offset + *length) > available_len) {
   11e7a:	680b      	ldr	r3, [r1, #0]
   11e7c:	4423      	add	r3, r4
   11e7e:	4293      	cmp	r3, r2
		*length = available_len - offset;
   11e80:	bf84      	itt	hi
   11e82:	1b13      	subhi	r3, r2, r4
   11e84:	600b      	strhi	r3, [r1, #0]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   11e86:	2a0c      	cmp	r2, #12
	req_len = *length;
   11e88:	f8d1 9000 	ldr.w	r9, [r1]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   11e8c:	d92a      	bls.n	11ee4 <log_msg_hexdump_data_op+0x8a>
	if (offset < chunk_len) {
   11e8e:	2c07      	cmp	r4, #7
		cont = msg->payload.ext.next;
   11e90:	f8d0 8014 	ldr.w	r8, [r0, #20]
	if (offset < chunk_len) {
   11e94:	d82d      	bhi.n	11ef2 <log_msg_hexdump_data_op+0x98>
		head_data = msg->payload.ext.data.bytes;
   11e96:	3018      	adds	r0, #24
		chunk_len = LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
   11e98:	2208      	movs	r2, #8
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
   11e9a:	454a      	cmp	r2, r9
   11e9c:	bf28      	it	cs
   11e9e:	464a      	movcs	r2, r9
   11ea0:	4615      	mov	r5, r2
			(void)memcpy(&head_data[offset], data, cpy_len);
   11ea2:	4420      	add	r0, r4
		if (put_op) {
   11ea4:	b317      	cbz	r7, 11eec <log_msg_hexdump_data_op+0x92>
			(void)memcpy(&head_data[offset], data, cpy_len);
   11ea6:	4631      	mov	r1, r6
			(void)memcpy(data, &head_data[offset], cpy_len);
   11ea8:	f000 fc7b 	bl	127a2 <memcpy>
		req_len -= cpy_len;
   11eac:	eba9 0905 	sub.w	r9, r9, r5
		data += cpy_len;
   11eb0:	442e      	add	r6, r5
	while ((req_len > 0) && (cont != NULL)) {
   11eb2:	f1b9 0f00 	cmp.w	r9, #0
   11eb6:	d0de      	beq.n	11e76 <log_msg_hexdump_data_op+0x1c>
   11eb8:	f1b8 0f00 	cmp.w	r8, #0
   11ebc:	d0db      	beq.n	11e76 <log_msg_hexdump_data_op+0x1c>
		chunk_len = HEXDUMP_BYTES_CONT_MSG - offset;
   11ebe:	f1c4 051c 	rsb	r5, r4, #28
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
   11ec2:	454d      	cmp	r5, r9
   11ec4:	bf28      	it	cs
   11ec6:	464d      	movcs	r5, r9
			(void)memcpy(&cont->payload.bytes[offset],
   11ec8:	1d20      	adds	r0, r4, #4
   11eca:	4440      	add	r0, r8
   11ecc:	462a      	mov	r2, r5
		if (put_op) {
   11ece:	b1bf      	cbz	r7, 11f00 <log_msg_hexdump_data_op+0xa6>
			(void)memcpy(&cont->payload.bytes[offset],
   11ed0:	4631      	mov	r1, r6
			(void)memcpy(data, &cont->payload.bytes[offset],
   11ed2:	f000 fc66 	bl	127a2 <memcpy>
		req_len -= cpy_len;
   11ed6:	eba9 0905 	sub.w	r9, r9, r5
		cont = cont->next;
   11eda:	f8d8 8000 	ldr.w	r8, [r8]
		data += cpy_len;
   11ede:	442e      	add	r6, r5
		offset = 0;
   11ee0:	2400      	movs	r4, #0
   11ee2:	e7e6      	b.n	11eb2 <log_msg_hexdump_data_op+0x58>
		head_data = msg->payload.single.bytes;
   11ee4:	3014      	adds	r0, #20
	struct log_msg_cont *cont = NULL;
   11ee6:	f04f 0800 	mov.w	r8, #0
   11eea:	e7d6      	b.n	11e9a <log_msg_hexdump_data_op+0x40>
			(void)memcpy(data, &head_data[offset], cpy_len);
   11eec:	4601      	mov	r1, r0
   11eee:	4630      	mov	r0, r6
   11ef0:	e7da      	b.n	11ea8 <log_msg_hexdump_data_op+0x4e>
		offset -= chunk_len;
   11ef2:	3c08      	subs	r4, #8
		while (offset >= chunk_len) {
   11ef4:	2c1b      	cmp	r4, #27
   11ef6:	d9dc      	bls.n	11eb2 <log_msg_hexdump_data_op+0x58>
			cont = cont->next;
   11ef8:	f8d8 8000 	ldr.w	r8, [r8]
			offset -= chunk_len;
   11efc:	3c1c      	subs	r4, #28
   11efe:	e7f9      	b.n	11ef4 <log_msg_hexdump_data_op+0x9a>
			(void)memcpy(data, &cont->payload.bytes[offset],
   11f00:	4601      	mov	r1, r0
   11f02:	4630      	mov	r0, r6
   11f04:	e7e5      	b.n	11ed2 <log_msg_hexdump_data_op+0x78>

00011f06 <log_msg_get>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   11f06:	3004      	adds	r0, #4
   11f08:	f3bf 8f5b 	dmb	ish
   11f0c:	e850 3f00 	ldrex	r3, [r0]
   11f10:	3301      	adds	r3, #1
   11f12:	e840 3200 	strex	r2, r3, [r0]
   11f16:	2a00      	cmp	r2, #0
   11f18:	d1f8      	bne.n	11f0c <log_msg_get+0x6>
   11f1a:	f3bf 8f5b 	dmb	ish
}
   11f1e:	4770      	bx	lr

00011f20 <log_msg_nargs_get>:
	return msg->hdr.params.std.nargs;
   11f20:	7a40      	ldrb	r0, [r0, #9]
}
   11f22:	0900      	lsrs	r0, r0, #4
   11f24:	4770      	bx	lr

00011f26 <log_msg_arg_get>:
	if (arg_idx >= msg->hdr.params.std.nargs) {
   11f26:	7a43      	ldrb	r3, [r0, #9]
   11f28:	ebb1 1f13 	cmp.w	r1, r3, lsr #4
   11f2c:	ea4f 1213 	mov.w	r2, r3, lsr #4
   11f30:	d216      	bcs.n	11f60 <log_msg_arg_get+0x3a>
	if (msg->hdr.params.std.nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
   11f32:	2a03      	cmp	r2, #3
   11f34:	d803      	bhi.n	11f3e <log_msg_arg_get+0x18>
		arg = msg->payload.single.args[arg_idx];
   11f36:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   11f3a:	6940      	ldr	r0, [r0, #20]
   11f3c:	4770      	bx	lr
	if (arg_idx < LOG_MSG_NARGS_HEAD_CHUNK) {
   11f3e:	2901      	cmp	r1, #1
   11f40:	d803      	bhi.n	11f4a <log_msg_arg_get+0x24>
		return msg->payload.ext.data.args[arg_idx];
   11f42:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   11f46:	6980      	ldr	r0, [r0, #24]
   11f48:	4770      	bx	lr
	cont = msg->payload.ext.next;
   11f4a:	6943      	ldr	r3, [r0, #20]
	arg_idx -= LOG_MSG_NARGS_HEAD_CHUNK;
   11f4c:	3902      	subs	r1, #2
	while (arg_idx >= ARGS_CONT_MSG) {
   11f4e:	2906      	cmp	r1, #6
   11f50:	d803      	bhi.n	11f5a <log_msg_arg_get+0x34>
	return cont->payload.args[arg_idx];
   11f52:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   11f56:	6848      	ldr	r0, [r1, #4]
   11f58:	4770      	bx	lr
		cont = cont->next;
   11f5a:	681b      	ldr	r3, [r3, #0]
		arg_idx -= ARGS_CONT_MSG;
   11f5c:	3907      	subs	r1, #7
		cont = cont->next;
   11f5e:	e7f6      	b.n	11f4e <log_msg_arg_get+0x28>
		return 0;
   11f60:	2000      	movs	r0, #0
}
   11f62:	4770      	bx	lr

00011f64 <log_msg_put>:
{
   11f64:	4603      	mov	r3, r0
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   11f66:	1d02      	adds	r2, r0, #4
   11f68:	f3bf 8f5b 	dmb	ish
   11f6c:	e852 1f00 	ldrex	r1, [r2]
   11f70:	3901      	subs	r1, #1
   11f72:	e842 1c00 	strex	ip, r1, [r2]
   11f76:	f1bc 0f00 	cmp.w	ip, #0
   11f7a:	d1f7      	bne.n	11f6c <log_msg_put+0x8>
   11f7c:	f3bf 8f5b 	dmb	ish
	if (msg->hdr.ref_cnt == 0) {
   11f80:	685b      	ldr	r3, [r3, #4]
   11f82:	b90b      	cbnz	r3, 11f88 <log_msg_put+0x24>
		msg_free(msg);
   11f84:	f7fb bcb4 	b.w	d8f0 <msg_free>
}
   11f88:	4770      	bx	lr

00011f8a <log_msg_str_get>:
}
   11f8a:	6900      	ldr	r0, [r0, #16]
   11f8c:	4770      	bx	lr

00011f8e <log_msg_hexdump_data_get>:

void log_msg_hexdump_data_get(struct log_msg *msg,
			      uint8_t *data,
			      size_t *length,
			      size_t offset)
{
   11f8e:	b513      	push	{r0, r1, r4, lr}
	log_msg_hexdump_data_op(msg, data, length, offset, false);
   11f90:	2400      	movs	r4, #0
   11f92:	9400      	str	r4, [sp, #0]
   11f94:	f7ff ff61 	bl	11e5a <log_msg_hexdump_data_op>
}
   11f98:	b002      	add	sp, #8
   11f9a:	bd10      	pop	{r4, pc}

00011f9c <buffer_write>:
{
   11f9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11f9e:	4606      	mov	r6, r0
   11fa0:	460d      	mov	r5, r1
   11fa2:	4614      	mov	r4, r2
   11fa4:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
   11fa6:	4621      	mov	r1, r4
   11fa8:	4628      	mov	r0, r5
   11faa:	463a      	mov	r2, r7
   11fac:	47b0      	blx	r6
	} while (len != 0);
   11fae:	1a24      	subs	r4, r4, r0
		buf += processed;
   11fb0:	4405      	add	r5, r0
	} while (len != 0);
   11fb2:	d1f8      	bne.n	11fa6 <buffer_write+0xa>
}
   11fb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00011fb6 <std_print>:
{
   11fb6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   11fba:	b08e      	sub	sp, #56	; 0x38
   11fbc:	af0e      	add	r7, sp, #56	; 0x38
   11fbe:	4680      	mov	r8, r0
   11fc0:	460d      	mov	r5, r1
	const char *str = log_msg_str_get(msg);
   11fc2:	f7ff ffe2 	bl	11f8a <log_msg_str_get>
   11fc6:	4606      	mov	r6, r0
	uint32_t nargs = log_msg_nargs_get(msg);
   11fc8:	4640      	mov	r0, r8
   11fca:	f7ff ffa9 	bl	11f20 <log_msg_nargs_get>
	log_arg_t *args = alloca(sizeof(log_arg_t)*nargs);
   11fce:	0083      	lsls	r3, r0, #2
   11fd0:	3307      	adds	r3, #7
   11fd2:	f023 0307 	bic.w	r3, r3, #7
   11fd6:	ebad 0d03 	sub.w	sp, sp, r3
	uint32_t nargs = log_msg_nargs_get(msg);
   11fda:	4682      	mov	sl, r0
	log_arg_t *args = alloca(sizeof(log_arg_t)*nargs);
   11fdc:	ac0e      	add	r4, sp, #56	; 0x38
	for (i = 0; i < nargs; i++) {
   11fde:	f04f 0900 	mov.w	r9, #0
   11fe2:	45d1      	cmp	r9, sl
   11fe4:	d116      	bne.n	12014 <std_print+0x5e>
	switch (log_msg_nargs_get(msg)) {
   11fe6:	4640      	mov	r0, r8
   11fe8:	f7ff ff9a 	bl	11f20 <log_msg_nargs_get>
   11fec:	280f      	cmp	r0, #15
   11fee:	d81e      	bhi.n	1202e <std_print+0x78>
   11ff0:	e8df f010 	tbh	[pc, r0, lsl #1]
   11ff4:	00200019 	.word	0x00200019
   11ff8:	002d0026 	.word	0x002d0026
   11ffc:	00410036 	.word	0x00410036
   12000:	005d004e 	.word	0x005d004e
   12004:	0081006e 	.word	0x0081006e
   12008:	00ad0096 	.word	0x00ad0096
   1200c:	00e100c6 	.word	0x00e100c6
   12010:	011d00fe 	.word	0x011d00fe
		args[i] = log_msg_arg_get(msg, i);
   12014:	4649      	mov	r1, r9
   12016:	4640      	mov	r0, r8
   12018:	f7ff ff85 	bl	11f26 <log_msg_arg_get>
   1201c:	f844 0029 	str.w	r0, [r4, r9, lsl #2]
	for (i = 0; i < nargs; i++) {
   12020:	f109 0901 	add.w	r9, r9, #1
   12024:	e7dd      	b.n	11fe2 <std_print+0x2c>
		print_formatted(output, str);
   12026:	4631      	mov	r1, r6
   12028:	4628      	mov	r0, r5
   1202a:	f7fb fc9f 	bl	d96c <print_formatted>
}
   1202e:	46bd      	mov	sp, r7
   12030:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(output, str, args[0]);
   12034:	6822      	ldr	r2, [r4, #0]
   12036:	4631      	mov	r1, r6
   12038:	4628      	mov	r0, r5
   1203a:	f7fb fc97 	bl	d96c <print_formatted>
		break;
   1203e:	e7f6      	b.n	1202e <std_print+0x78>
		print_formatted(output, str, args[0], args[1]);
   12040:	e9d4 2300 	ldrd	r2, r3, [r4]
   12044:	4631      	mov	r1, r6
   12046:	4628      	mov	r0, r5
   12048:	f7fb fc90 	bl	d96c <print_formatted>
		break;
   1204c:	e7ef      	b.n	1202e <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2]);
   1204e:	68a3      	ldr	r3, [r4, #8]
   12050:	9300      	str	r3, [sp, #0]
   12052:	e9d4 2300 	ldrd	r2, r3, [r4]
   12056:	4631      	mov	r1, r6
   12058:	4628      	mov	r0, r5
   1205a:	f7fb fc87 	bl	d96c <print_formatted>
		break;
   1205e:	e7e6      	b.n	1202e <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   12060:	68e3      	ldr	r3, [r4, #12]
   12062:	9301      	str	r3, [sp, #4]
   12064:	68a3      	ldr	r3, [r4, #8]
   12066:	9300      	str	r3, [sp, #0]
   12068:	e9d4 2300 	ldrd	r2, r3, [r4]
   1206c:	4631      	mov	r1, r6
   1206e:	4628      	mov	r0, r5
   12070:	f7fb fc7c 	bl	d96c <print_formatted>
		break;
   12074:	e7db      	b.n	1202e <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   12076:	6923      	ldr	r3, [r4, #16]
   12078:	9302      	str	r3, [sp, #8]
   1207a:	68e3      	ldr	r3, [r4, #12]
   1207c:	9301      	str	r3, [sp, #4]
   1207e:	68a3      	ldr	r3, [r4, #8]
   12080:	9300      	str	r3, [sp, #0]
   12082:	e9d4 2300 	ldrd	r2, r3, [r4]
   12086:	4631      	mov	r1, r6
   12088:	4628      	mov	r0, r5
   1208a:	f7fb fc6f 	bl	d96c <print_formatted>
		break;
   1208e:	e7ce      	b.n	1202e <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   12090:	6963      	ldr	r3, [r4, #20]
   12092:	9303      	str	r3, [sp, #12]
   12094:	6923      	ldr	r3, [r4, #16]
   12096:	9302      	str	r3, [sp, #8]
   12098:	68e3      	ldr	r3, [r4, #12]
   1209a:	9301      	str	r3, [sp, #4]
   1209c:	68a3      	ldr	r3, [r4, #8]
   1209e:	9300      	str	r3, [sp, #0]
   120a0:	e9d4 2300 	ldrd	r2, r3, [r4]
   120a4:	4631      	mov	r1, r6
   120a6:	4628      	mov	r0, r5
   120a8:	f7fb fc60 	bl	d96c <print_formatted>
		break;
   120ac:	e7bf      	b.n	1202e <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   120ae:	69a3      	ldr	r3, [r4, #24]
   120b0:	9304      	str	r3, [sp, #16]
   120b2:	6963      	ldr	r3, [r4, #20]
   120b4:	9303      	str	r3, [sp, #12]
   120b6:	6923      	ldr	r3, [r4, #16]
   120b8:	9302      	str	r3, [sp, #8]
   120ba:	68e3      	ldr	r3, [r4, #12]
   120bc:	9301      	str	r3, [sp, #4]
   120be:	68a3      	ldr	r3, [r4, #8]
   120c0:	9300      	str	r3, [sp, #0]
   120c2:	e9d4 2300 	ldrd	r2, r3, [r4]
   120c6:	4631      	mov	r1, r6
   120c8:	4628      	mov	r0, r5
   120ca:	f7fb fc4f 	bl	d96c <print_formatted>
		break;
   120ce:	e7ae      	b.n	1202e <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   120d0:	69e3      	ldr	r3, [r4, #28]
   120d2:	9305      	str	r3, [sp, #20]
   120d4:	69a3      	ldr	r3, [r4, #24]
   120d6:	9304      	str	r3, [sp, #16]
   120d8:	6963      	ldr	r3, [r4, #20]
   120da:	9303      	str	r3, [sp, #12]
   120dc:	6923      	ldr	r3, [r4, #16]
   120de:	9302      	str	r3, [sp, #8]
   120e0:	68e3      	ldr	r3, [r4, #12]
   120e2:	9301      	str	r3, [sp, #4]
   120e4:	68a3      	ldr	r3, [r4, #8]
   120e6:	9300      	str	r3, [sp, #0]
   120e8:	e9d4 2300 	ldrd	r2, r3, [r4]
   120ec:	4631      	mov	r1, r6
   120ee:	4628      	mov	r0, r5
   120f0:	f7fb fc3c 	bl	d96c <print_formatted>
		break;
   120f4:	e79b      	b.n	1202e <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   120f6:	6a23      	ldr	r3, [r4, #32]
   120f8:	9306      	str	r3, [sp, #24]
   120fa:	69e3      	ldr	r3, [r4, #28]
   120fc:	9305      	str	r3, [sp, #20]
   120fe:	69a3      	ldr	r3, [r4, #24]
   12100:	9304      	str	r3, [sp, #16]
   12102:	6963      	ldr	r3, [r4, #20]
   12104:	9303      	str	r3, [sp, #12]
   12106:	6923      	ldr	r3, [r4, #16]
   12108:	9302      	str	r3, [sp, #8]
   1210a:	68e3      	ldr	r3, [r4, #12]
   1210c:	9301      	str	r3, [sp, #4]
   1210e:	68a3      	ldr	r3, [r4, #8]
   12110:	9300      	str	r3, [sp, #0]
   12112:	e9d4 2300 	ldrd	r2, r3, [r4]
   12116:	4631      	mov	r1, r6
   12118:	4628      	mov	r0, r5
   1211a:	f7fb fc27 	bl	d96c <print_formatted>
		break;
   1211e:	e786      	b.n	1202e <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   12120:	6a63      	ldr	r3, [r4, #36]	; 0x24
   12122:	9307      	str	r3, [sp, #28]
   12124:	6a23      	ldr	r3, [r4, #32]
   12126:	9306      	str	r3, [sp, #24]
   12128:	69e3      	ldr	r3, [r4, #28]
   1212a:	9305      	str	r3, [sp, #20]
   1212c:	69a3      	ldr	r3, [r4, #24]
   1212e:	9304      	str	r3, [sp, #16]
   12130:	6963      	ldr	r3, [r4, #20]
   12132:	9303      	str	r3, [sp, #12]
   12134:	6923      	ldr	r3, [r4, #16]
   12136:	9302      	str	r3, [sp, #8]
   12138:	68e3      	ldr	r3, [r4, #12]
   1213a:	9301      	str	r3, [sp, #4]
   1213c:	68a3      	ldr	r3, [r4, #8]
   1213e:	9300      	str	r3, [sp, #0]
   12140:	e9d4 2300 	ldrd	r2, r3, [r4]
   12144:	4631      	mov	r1, r6
   12146:	4628      	mov	r0, r5
   12148:	f7fb fc10 	bl	d96c <print_formatted>
		break;
   1214c:	e76f      	b.n	1202e <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   1214e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   12150:	9308      	str	r3, [sp, #32]
   12152:	6a63      	ldr	r3, [r4, #36]	; 0x24
   12154:	9307      	str	r3, [sp, #28]
   12156:	6a23      	ldr	r3, [r4, #32]
   12158:	9306      	str	r3, [sp, #24]
   1215a:	69e3      	ldr	r3, [r4, #28]
   1215c:	9305      	str	r3, [sp, #20]
   1215e:	69a3      	ldr	r3, [r4, #24]
   12160:	9304      	str	r3, [sp, #16]
   12162:	6963      	ldr	r3, [r4, #20]
   12164:	9303      	str	r3, [sp, #12]
   12166:	6923      	ldr	r3, [r4, #16]
   12168:	9302      	str	r3, [sp, #8]
   1216a:	68e3      	ldr	r3, [r4, #12]
   1216c:	9301      	str	r3, [sp, #4]
   1216e:	68a3      	ldr	r3, [r4, #8]
   12170:	9300      	str	r3, [sp, #0]
   12172:	e9d4 2300 	ldrd	r2, r3, [r4]
   12176:	4631      	mov	r1, r6
   12178:	4628      	mov	r0, r5
   1217a:	f7fb fbf7 	bl	d96c <print_formatted>
		break;
   1217e:	e756      	b.n	1202e <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   12180:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   12182:	9309      	str	r3, [sp, #36]	; 0x24
   12184:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   12186:	9308      	str	r3, [sp, #32]
   12188:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1218a:	9307      	str	r3, [sp, #28]
   1218c:	6a23      	ldr	r3, [r4, #32]
   1218e:	9306      	str	r3, [sp, #24]
   12190:	69e3      	ldr	r3, [r4, #28]
   12192:	9305      	str	r3, [sp, #20]
   12194:	69a3      	ldr	r3, [r4, #24]
   12196:	9304      	str	r3, [sp, #16]
   12198:	6963      	ldr	r3, [r4, #20]
   1219a:	9303      	str	r3, [sp, #12]
   1219c:	6923      	ldr	r3, [r4, #16]
   1219e:	9302      	str	r3, [sp, #8]
   121a0:	68e3      	ldr	r3, [r4, #12]
   121a2:	9301      	str	r3, [sp, #4]
   121a4:	68a3      	ldr	r3, [r4, #8]
   121a6:	9300      	str	r3, [sp, #0]
   121a8:	e9d4 2300 	ldrd	r2, r3, [r4]
   121ac:	4631      	mov	r1, r6
   121ae:	4628      	mov	r0, r5
   121b0:	f7fb fbdc 	bl	d96c <print_formatted>
		break;
   121b4:	e73b      	b.n	1202e <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   121b6:	6b23      	ldr	r3, [r4, #48]	; 0x30
   121b8:	930a      	str	r3, [sp, #40]	; 0x28
   121ba:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   121bc:	9309      	str	r3, [sp, #36]	; 0x24
   121be:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   121c0:	9308      	str	r3, [sp, #32]
   121c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
   121c4:	9307      	str	r3, [sp, #28]
   121c6:	6a23      	ldr	r3, [r4, #32]
   121c8:	9306      	str	r3, [sp, #24]
   121ca:	69e3      	ldr	r3, [r4, #28]
   121cc:	9305      	str	r3, [sp, #20]
   121ce:	69a3      	ldr	r3, [r4, #24]
   121d0:	9304      	str	r3, [sp, #16]
   121d2:	6963      	ldr	r3, [r4, #20]
   121d4:	9303      	str	r3, [sp, #12]
   121d6:	6923      	ldr	r3, [r4, #16]
   121d8:	9302      	str	r3, [sp, #8]
   121da:	68e3      	ldr	r3, [r4, #12]
   121dc:	9301      	str	r3, [sp, #4]
   121de:	68a3      	ldr	r3, [r4, #8]
   121e0:	9300      	str	r3, [sp, #0]
   121e2:	e9d4 2300 	ldrd	r2, r3, [r4]
   121e6:	4631      	mov	r1, r6
   121e8:	4628      	mov	r0, r5
   121ea:	f7fb fbbf 	bl	d96c <print_formatted>
		break;
   121ee:	e71e      	b.n	1202e <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   121f0:	6b63      	ldr	r3, [r4, #52]	; 0x34
   121f2:	930b      	str	r3, [sp, #44]	; 0x2c
   121f4:	6b23      	ldr	r3, [r4, #48]	; 0x30
   121f6:	930a      	str	r3, [sp, #40]	; 0x28
   121f8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   121fa:	9309      	str	r3, [sp, #36]	; 0x24
   121fc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   121fe:	9308      	str	r3, [sp, #32]
   12200:	6a63      	ldr	r3, [r4, #36]	; 0x24
   12202:	9307      	str	r3, [sp, #28]
   12204:	6a23      	ldr	r3, [r4, #32]
   12206:	9306      	str	r3, [sp, #24]
   12208:	69e3      	ldr	r3, [r4, #28]
   1220a:	9305      	str	r3, [sp, #20]
   1220c:	69a3      	ldr	r3, [r4, #24]
   1220e:	9304      	str	r3, [sp, #16]
   12210:	6963      	ldr	r3, [r4, #20]
   12212:	9303      	str	r3, [sp, #12]
   12214:	6923      	ldr	r3, [r4, #16]
   12216:	9302      	str	r3, [sp, #8]
   12218:	68e3      	ldr	r3, [r4, #12]
   1221a:	9301      	str	r3, [sp, #4]
   1221c:	68a3      	ldr	r3, [r4, #8]
   1221e:	9300      	str	r3, [sp, #0]
   12220:	e9d4 2300 	ldrd	r2, r3, [r4]
   12224:	4631      	mov	r1, r6
   12226:	4628      	mov	r0, r5
   12228:	f7fb fba0 	bl	d96c <print_formatted>
		break;
   1222c:	e6ff      	b.n	1202e <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   1222e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   12230:	930c      	str	r3, [sp, #48]	; 0x30
   12232:	6b63      	ldr	r3, [r4, #52]	; 0x34
   12234:	930b      	str	r3, [sp, #44]	; 0x2c
   12236:	6b23      	ldr	r3, [r4, #48]	; 0x30
   12238:	930a      	str	r3, [sp, #40]	; 0x28
   1223a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1223c:	9309      	str	r3, [sp, #36]	; 0x24
   1223e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   12240:	9308      	str	r3, [sp, #32]
   12242:	6a63      	ldr	r3, [r4, #36]	; 0x24
   12244:	9307      	str	r3, [sp, #28]
   12246:	6a23      	ldr	r3, [r4, #32]
   12248:	9306      	str	r3, [sp, #24]
   1224a:	69e3      	ldr	r3, [r4, #28]
   1224c:	9305      	str	r3, [sp, #20]
   1224e:	69a3      	ldr	r3, [r4, #24]
   12250:	9304      	str	r3, [sp, #16]
   12252:	6963      	ldr	r3, [r4, #20]
   12254:	9303      	str	r3, [sp, #12]
   12256:	6923      	ldr	r3, [r4, #16]
   12258:	9302      	str	r3, [sp, #8]
   1225a:	68e3      	ldr	r3, [r4, #12]
   1225c:	9301      	str	r3, [sp, #4]
   1225e:	68a3      	ldr	r3, [r4, #8]
   12260:	9300      	str	r3, [sp, #0]
   12262:	e9d4 2300 	ldrd	r2, r3, [r4]
   12266:	4631      	mov	r1, r6
   12268:	4628      	mov	r0, r5
   1226a:	f7fb fb7f 	bl	d96c <print_formatted>
}
   1226e:	e6de      	b.n	1202e <std_print+0x78>

00012270 <log_output_flush>:
		     output->control_block->offset,
   12270:	6842      	ldr	r2, [r0, #4]
	buffer_write(output->func, output->buf,
   12272:	6881      	ldr	r1, [r0, #8]
{
   12274:	b510      	push	{r4, lr}
   12276:	4604      	mov	r4, r0
	buffer_write(output->func, output->buf,
   12278:	e9d2 2300 	ldrd	r2, r3, [r2]
   1227c:	6800      	ldr	r0, [r0, #0]
   1227e:	f7ff fe8d 	bl	11f9c <buffer_write>
	output->control_block->offset = 0;
   12282:	6863      	ldr	r3, [r4, #4]
   12284:	2200      	movs	r2, #0
   12286:	601a      	str	r2, [r3, #0]
}
   12288:	bd10      	pop	{r4, pc}

0001228a <out_func>:
{
   1228a:	b538      	push	{r3, r4, r5, lr}
	if (out_ctx->control_block->offset == out_ctx->size) {
   1228c:	684b      	ldr	r3, [r1, #4]
   1228e:	681a      	ldr	r2, [r3, #0]
   12290:	68cb      	ldr	r3, [r1, #12]
   12292:	429a      	cmp	r2, r3
{
   12294:	4605      	mov	r5, r0
   12296:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
   12298:	d102      	bne.n	122a0 <out_func+0x16>
		log_output_flush(out_ctx);
   1229a:	4608      	mov	r0, r1
   1229c:	f7ff ffe8 	bl	12270 <log_output_flush>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   122a0:	6863      	ldr	r3, [r4, #4]
   122a2:	f3bf 8f5b 	dmb	ish
   122a6:	e853 2f00 	ldrex	r2, [r3]
   122aa:	1c51      	adds	r1, r2, #1
   122ac:	e843 1000 	strex	r0, r1, [r3]
   122b0:	2800      	cmp	r0, #0
   122b2:	d1f8      	bne.n	122a6 <out_func+0x1c>
   122b4:	f3bf 8f5b 	dmb	ish
	out_ctx->buf[idx] = (uint8_t)c;
   122b8:	68a3      	ldr	r3, [r4, #8]
   122ba:	549d      	strb	r5, [r3, r2]
}
   122bc:	2000      	movs	r0, #0
   122be:	bd38      	pop	{r3, r4, r5, pc}

000122c0 <z_impl_flash_write>:
{
   122c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	const struct flash_driver_api *api =
   122c4:	6886      	ldr	r6, [r0, #8]
{
   122c6:	4699      	mov	r9, r3
	if (api->write_protection != NULL) {
   122c8:	68f3      	ldr	r3, [r6, #12]
{
   122ca:	4605      	mov	r5, r0
   122cc:	460f      	mov	r7, r1
   122ce:	4690      	mov	r8, r2
	if (api->write_protection != NULL) {
   122d0:	b95b      	cbnz	r3, 122ea <z_impl_flash_write+0x2a>
	rc = api->write(dev, offset, data, len);
   122d2:	6874      	ldr	r4, [r6, #4]
   122d4:	464b      	mov	r3, r9
   122d6:	4642      	mov	r2, r8
   122d8:	4639      	mov	r1, r7
   122da:	4628      	mov	r0, r5
   122dc:	47a0      	blx	r4
	if (api->write_protection != NULL) {
   122de:	68f3      	ldr	r3, [r6, #12]
	rc = api->write(dev, offset, data, len);
   122e0:	4604      	mov	r4, r0
	if (api->write_protection != NULL) {
   122e2:	b943      	cbnz	r3, 122f6 <z_impl_flash_write+0x36>
}
   122e4:	4620      	mov	r0, r4
   122e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		rc = api->write_protection(dev, false);
   122ea:	2100      	movs	r1, #0
   122ec:	4798      	blx	r3
		if (rc) {
   122ee:	4604      	mov	r4, r0
   122f0:	2800      	cmp	r0, #0
   122f2:	d0ee      	beq.n	122d2 <z_impl_flash_write+0x12>
   122f4:	e7f6      	b.n	122e4 <z_impl_flash_write+0x24>
		(void) api->write_protection(dev, true);
   122f6:	2101      	movs	r1, #1
   122f8:	4628      	mov	r0, r5
   122fa:	4798      	blx	r3
   122fc:	e7f2      	b.n	122e4 <z_impl_flash_write+0x24>

000122fe <nvs_flash_rd>:
{
   122fe:	b470      	push	{r4, r5, r6}
	offset += addr & ADDR_OFFS_MASK;
   12300:	6806      	ldr	r6, [r0, #0]
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   12302:	8984      	ldrh	r4, [r0, #12]
	rc = flash_read(fs->flash_device, offset, data, len);
   12304:	6a80      	ldr	r0, [r0, #40]	; 0x28
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   12306:	0c0d      	lsrs	r5, r1, #16
	offset += addr & ADDR_OFFS_MASK;
   12308:	fa16 f181 	uxtah	r1, r6, r1
   1230c:	fb05 1104 	mla	r1, r5, r4, r1
	return api->read(dev, offset, data, len);
   12310:	6884      	ldr	r4, [r0, #8]
   12312:	6824      	ldr	r4, [r4, #0]
   12314:	46a4      	mov	ip, r4
}
   12316:	bc70      	pop	{r4, r5, r6}
   12318:	4760      	bx	ip

0001231a <nvs_flash_block_cmp>:
{
   1231a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1231e:	461c      	mov	r4, r3
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   12320:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   12322:	681d      	ldr	r5, [r3, #0]
   12324:	426d      	negs	r5, r5
{
   12326:	b089      	sub	sp, #36	; 0x24
   12328:	4681      	mov	r9, r0
   1232a:	460e      	mov	r6, r1
   1232c:	4617      	mov	r7, r2
	block_size =
   1232e:	f005 0520 	and.w	r5, r5, #32
	while (len) {
   12332:	b91c      	cbnz	r4, 1233c <nvs_flash_block_cmp+0x22>
	return 0;
   12334:	4620      	mov	r0, r4
}
   12336:	b009      	add	sp, #36	; 0x24
   12338:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		bytes_to_cmp = MIN(block_size, len);
   1233c:	42ac      	cmp	r4, r5
   1233e:	46a0      	mov	r8, r4
   12340:	bf28      	it	cs
   12342:	46a8      	movcs	r8, r5
		rc = nvs_flash_rd(fs, addr, buf, bytes_to_cmp);
   12344:	4643      	mov	r3, r8
   12346:	466a      	mov	r2, sp
   12348:	4631      	mov	r1, r6
   1234a:	4648      	mov	r0, r9
   1234c:	f7ff ffd7 	bl	122fe <nvs_flash_rd>
		if (rc) {
   12350:	2800      	cmp	r0, #0
   12352:	d1f0      	bne.n	12336 <nvs_flash_block_cmp+0x1c>
		rc = memcmp(data8, buf, bytes_to_cmp);
   12354:	4642      	mov	r2, r8
   12356:	4669      	mov	r1, sp
   12358:	4638      	mov	r0, r7
   1235a:	f000 fa11 	bl	12780 <memcmp>
		if (rc) {
   1235e:	b920      	cbnz	r0, 1236a <nvs_flash_block_cmp+0x50>
		len -= bytes_to_cmp;
   12360:	eba4 0408 	sub.w	r4, r4, r8
		addr += bytes_to_cmp;
   12364:	4446      	add	r6, r8
		data8 += bytes_to_cmp;
   12366:	4447      	add	r7, r8
   12368:	e7e3      	b.n	12332 <nvs_flash_block_cmp+0x18>
			return 1;
   1236a:	2001      	movs	r0, #1
   1236c:	e7e3      	b.n	12336 <nvs_flash_block_cmp+0x1c>

0001236e <nvs_flash_cmp_const>:
{
   1236e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12372:	461c      	mov	r4, r3
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   12374:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   12376:	681d      	ldr	r5, [r3, #0]
   12378:	426d      	negs	r5, r5
{
   1237a:	b088      	sub	sp, #32
	block_size =
   1237c:	f005 0520 	and.w	r5, r5, #32
{
   12380:	4607      	mov	r7, r0
   12382:	460e      	mov	r6, r1
	(void)memset(cmp, value, block_size);
   12384:	4668      	mov	r0, sp
{
   12386:	4611      	mov	r1, r2
	(void)memset(cmp, value, block_size);
   12388:	462a      	mov	r2, r5
   1238a:	f000 fa15 	bl	127b8 <memset>
	while (len) {
   1238e:	b91c      	cbnz	r4, 12398 <nvs_flash_cmp_const+0x2a>
	return 0;
   12390:	4620      	mov	r0, r4
}
   12392:	b008      	add	sp, #32
   12394:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		bytes_to_cmp = MIN(block_size, len);
   12398:	42ac      	cmp	r4, r5
   1239a:	46a0      	mov	r8, r4
   1239c:	bf28      	it	cs
   1239e:	46a8      	movcs	r8, r5
		rc = nvs_flash_block_cmp(fs, addr, cmp, bytes_to_cmp);
   123a0:	4643      	mov	r3, r8
   123a2:	466a      	mov	r2, sp
   123a4:	4631      	mov	r1, r6
   123a6:	4638      	mov	r0, r7
   123a8:	f7ff ffb7 	bl	1231a <nvs_flash_block_cmp>
		if (rc) {
   123ac:	2800      	cmp	r0, #0
   123ae:	d1f0      	bne.n	12392 <nvs_flash_cmp_const+0x24>
		len -= bytes_to_cmp;
   123b0:	eba4 0408 	sub.w	r4, r4, r8
		addr += bytes_to_cmp;
   123b4:	4446      	add	r6, r8
   123b6:	e7ea      	b.n	1238e <nvs_flash_cmp_const+0x20>

000123b8 <nvs_ate_crc8_update>:
{
   123b8:	b510      	push	{r4, lr}
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   123ba:	4601      	mov	r1, r0
{
   123bc:	4604      	mov	r4, r0
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   123be:	2207      	movs	r2, #7
   123c0:	20ff      	movs	r0, #255	; 0xff
   123c2:	f7fa faab 	bl	c91c <crc8_ccitt>
	entry->crc8 = crc8;
   123c6:	71e0      	strb	r0, [r4, #7]
}
   123c8:	bd10      	pop	{r4, pc}

000123ca <nvs_sector_advance.isra.0>:
	*addr += (1 << ADDR_SECT_SHIFT);
   123ca:	680b      	ldr	r3, [r1, #0]
   123cc:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
	if ((*addr >> ADDR_SECT_SHIFT) == fs->sector_count) {
   123d0:	0c1a      	lsrs	r2, r3, #16
   123d2:	ebb0 4f13 	cmp.w	r0, r3, lsr #16
		*addr -= (fs->sector_count << ADDR_SECT_SHIFT);
   123d6:	bf08      	it	eq
   123d8:	eba3 4302 	subeq.w	r3, r3, r2, lsl #16
   123dc:	600b      	str	r3, [r1, #0]
}
   123de:	4770      	bx	lr

000123e0 <nvs_al_size.isra.0>:
	if (write_block_size <= 1U) {
   123e0:	7803      	ldrb	r3, [r0, #0]
   123e2:	2b01      	cmp	r3, #1
	return (len + (write_block_size - 1U)) & ~(write_block_size - 1U);
   123e4:	bf81      	itttt	hi
   123e6:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
   123ea:	18c9      	addhi	r1, r1, r3
   123ec:	425b      	neghi	r3, r3
   123ee:	4019      	andhi	r1, r3
}
   123f0:	4608      	mov	r0, r1
   123f2:	4770      	bx	lr

000123f4 <nvs_ate_valid>:
{
   123f4:	b570      	push	{r4, r5, r6, lr}
   123f6:	460c      	mov	r4, r1
   123f8:	4605      	mov	r5, r0
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   123fa:	2108      	movs	r1, #8
   123fc:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   123fe:	f7ff ffef 	bl	123e0 <nvs_al_size.isra.0>
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   12402:	2207      	movs	r2, #7
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   12404:	4606      	mov	r6, r0
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   12406:	4621      	mov	r1, r4
   12408:	20ff      	movs	r0, #255	; 0xff
   1240a:	f7fa fa87 	bl	c91c <crc8_ccitt>
	if (crc8 == entry->crc8) {
   1240e:	79e3      	ldrb	r3, [r4, #7]
   12410:	4283      	cmp	r3, r0
   12412:	d107      	bne.n	12424 <nvs_ate_valid+0x30>
	    (entry->offset >= (fs->sector_size - ate_size))) {
   12414:	89a8      	ldrh	r0, [r5, #12]
   12416:	8863      	ldrh	r3, [r4, #2]
   12418:	1b80      	subs	r0, r0, r6
	if ((nvs_ate_crc8_check(entry)) ||
   1241a:	4283      	cmp	r3, r0
   1241c:	bf2c      	ite	cs
   1241e:	2000      	movcs	r0, #0
   12420:	2001      	movcc	r0, #1
}
   12422:	bd70      	pop	{r4, r5, r6, pc}
		return 0;
   12424:	2000      	movs	r0, #0
   12426:	e7fc      	b.n	12422 <nvs_ate_valid+0x2e>

00012428 <nvs_close_ate_valid>:
{
   12428:	b538      	push	{r3, r4, r5, lr}
   1242a:	4605      	mov	r5, r0
   1242c:	460c      	mov	r4, r1
	if ((!nvs_ate_valid(fs, entry)) || (entry->len != 0U) ||
   1242e:	f7ff ffe1 	bl	123f4 <nvs_ate_valid>
   12432:	b1a0      	cbz	r0, 1245e <nvs_close_ate_valid+0x36>
   12434:	88a0      	ldrh	r0, [r4, #4]
   12436:	b998      	cbnz	r0, 12460 <nvs_close_ate_valid+0x38>
   12438:	8822      	ldrh	r2, [r4, #0]
   1243a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1243e:	429a      	cmp	r2, r3
   12440:	d10d      	bne.n	1245e <nvs_close_ate_valid+0x36>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   12442:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
   12444:	2108      	movs	r1, #8
   12446:	f7ff ffcb 	bl	123e0 <nvs_al_size.isra.0>
	if ((fs->sector_size - entry->offset) % ate_size) {
   1244a:	8862      	ldrh	r2, [r4, #2]
   1244c:	89ab      	ldrh	r3, [r5, #12]
   1244e:	1a9b      	subs	r3, r3, r2
   12450:	fbb3 f2f0 	udiv	r2, r3, r0
   12454:	fb02 3010 	mls	r0, r2, r0, r3
   12458:	fab0 f080 	clz	r0, r0
   1245c:	0940      	lsrs	r0, r0, #5
}
   1245e:	bd38      	pop	{r3, r4, r5, pc}
		return 0;
   12460:	2000      	movs	r0, #0
   12462:	e7fc      	b.n	1245e <nvs_close_ate_valid+0x36>

00012464 <nvs_flash_al_wrt.part.0>:
static int nvs_flash_al_wrt(struct nvs_fs *fs, uint32_t addr, const void *data,
   12464:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   12468:	8985      	ldrh	r5, [r0, #12]
static int nvs_flash_al_wrt(struct nvs_fs *fs, uint32_t addr, const void *data,
   1246a:	4606      	mov	r6, r0
	offset += addr & ADDR_OFFS_MASK;
   1246c:	6800      	ldr	r0, [r0, #0]
static int nvs_flash_al_wrt(struct nvs_fs *fs, uint32_t addr, const void *data,
   1246e:	461c      	mov	r4, r3
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   12470:	0c0b      	lsrs	r3, r1, #16
	offset += addr & ADDR_OFFS_MASK;
   12472:	fa10 f181 	uxtah	r1, r0, r1
   12476:	fb03 1505 	mla	r5, r3, r5, r1
	blen = len & ~(fs->flash_parameters->write_block_size - 1U);
   1247a:	6af3      	ldr	r3, [r6, #44]	; 0x2c
   1247c:	681f      	ldr	r7, [r3, #0]
   1247e:	427f      	negs	r7, r7
	if (blen > 0) {
   12480:	4027      	ands	r7, r4
static int nvs_flash_al_wrt(struct nvs_fs *fs, uint32_t addr, const void *data,
   12482:	b088      	sub	sp, #32
   12484:	4690      	mov	r8, r2
	if (blen > 0) {
   12486:	d008      	beq.n	1249a <nvs_flash_al_wrt.part.0+0x36>
		rc = flash_write(fs->flash_device, offset, data8, blen);
   12488:	6ab0      	ldr	r0, [r6, #40]	; 0x28
	return z_impl_flash_write(dev, offset, data, len);
   1248a:	463b      	mov	r3, r7
   1248c:	4629      	mov	r1, r5
   1248e:	f7ff ff17 	bl	122c0 <z_impl_flash_write>
		if (rc) {
   12492:	b9b8      	cbnz	r0, 124c4 <nvs_flash_al_wrt.part.0+0x60>
		len -= blen;
   12494:	1be4      	subs	r4, r4, r7
		offset += blen;
   12496:	443d      	add	r5, r7
		data8 += blen;
   12498:	44b8      	add	r8, r7
	if (len) {
   1249a:	b1b4      	cbz	r4, 124ca <nvs_flash_al_wrt.part.0+0x66>
		memcpy(buf, data8, len);
   1249c:	4622      	mov	r2, r4
   1249e:	4641      	mov	r1, r8
   124a0:	4668      	mov	r0, sp
   124a2:	f000 f97e 	bl	127a2 <memcpy>
		(void)memset(buf + len, fs->flash_parameters->erase_value,
   124a6:	6af3      	ldr	r3, [r6, #44]	; 0x2c
   124a8:	681a      	ldr	r2, [r3, #0]
   124aa:	7919      	ldrb	r1, [r3, #4]
   124ac:	1b12      	subs	r2, r2, r4
   124ae:	eb0d 0004 	add.w	r0, sp, r4
   124b2:	f000 f981 	bl	127b8 <memset>
		rc = flash_write(fs->flash_device, offset, buf,
   124b6:	e9d6 030a 	ldrd	r0, r3, [r6, #40]	; 0x28
   124ba:	681b      	ldr	r3, [r3, #0]
   124bc:	466a      	mov	r2, sp
   124be:	4629      	mov	r1, r5
   124c0:	f7ff fefe 	bl	122c0 <z_impl_flash_write>
}
   124c4:	b008      	add	sp, #32
   124c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
end:
   124ca:	4620      	mov	r0, r4
   124cc:	e7fa      	b.n	124c4 <nvs_flash_al_wrt.part.0+0x60>

000124ce <nvs_flash_data_wrt>:
{
   124ce:	b538      	push	{r3, r4, r5, lr}
   124d0:	4604      	mov	r4, r0
	if (!len) {
   124d2:	4615      	mov	r5, r2
   124d4:	b12a      	cbz	r2, 124e2 <nvs_flash_data_wrt+0x14>
   124d6:	4613      	mov	r3, r2
   124d8:	460a      	mov	r2, r1
   124da:	6881      	ldr	r1, [r0, #8]
   124dc:	f7ff ffc2 	bl	12464 <nvs_flash_al_wrt.part.0>
   124e0:	4602      	mov	r2, r0
	fs->data_wra += nvs_al_size(fs, len);
   124e2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   124e4:	4629      	mov	r1, r5
   124e6:	f7ff ff7b 	bl	123e0 <nvs_al_size.isra.0>
   124ea:	68a3      	ldr	r3, [r4, #8]
   124ec:	4403      	add	r3, r0
   124ee:	60a3      	str	r3, [r4, #8]
}
   124f0:	4610      	mov	r0, r2
   124f2:	bd38      	pop	{r3, r4, r5, pc}

000124f4 <nvs_flash_ate_wrt>:
{
   124f4:	b510      	push	{r4, lr}
   124f6:	460a      	mov	r2, r1
	if (!len) {
   124f8:	2308      	movs	r3, #8
   124fa:	6841      	ldr	r1, [r0, #4]
{
   124fc:	4604      	mov	r4, r0
   124fe:	f7ff ffb1 	bl	12464 <nvs_flash_al_wrt.part.0>
	fs->ate_wra -= nvs_al_size(fs, sizeof(struct nvs_ate));
   12502:	2108      	movs	r1, #8
   12504:	4602      	mov	r2, r0
   12506:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   12508:	f7ff ff6a 	bl	123e0 <nvs_al_size.isra.0>
   1250c:	6863      	ldr	r3, [r4, #4]
   1250e:	1a1b      	subs	r3, r3, r0
   12510:	6063      	str	r3, [r4, #4]
}
   12512:	4610      	mov	r0, r2
   12514:	bd10      	pop	{r4, pc}

00012516 <nvs_prev_ate>:
{
   12516:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   12518:	4605      	mov	r5, r0
   1251a:	460e      	mov	r6, r1
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   1251c:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   1251e:	2108      	movs	r1, #8
   12520:	f7ff ff5e 	bl	123e0 <nvs_al_size.isra.0>
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   12524:	6831      	ldr	r1, [r6, #0]
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   12526:	4607      	mov	r7, r0
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   12528:	2308      	movs	r3, #8
   1252a:	4628      	mov	r0, r5
   1252c:	f7ff fee7 	bl	122fe <nvs_flash_rd>
	if (rc) {
   12530:	4604      	mov	r4, r0
   12532:	2800      	cmp	r0, #0
   12534:	d138      	bne.n	125a8 <nvs_prev_ate+0x92>
	*addr += ate_size;
   12536:	6833      	ldr	r3, [r6, #0]
	if (((*addr) & ADDR_OFFS_MASK) != (fs->sector_size - ate_size)) {
   12538:	89a8      	ldrh	r0, [r5, #12]
	*addr += ate_size;
   1253a:	443b      	add	r3, r7
	if (((*addr) & ADDR_OFFS_MASK) != (fs->sector_size - ate_size)) {
   1253c:	b29a      	uxth	r2, r3
   1253e:	1bc7      	subs	r7, r0, r7
   12540:	42ba      	cmp	r2, r7
	*addr += ate_size;
   12542:	6033      	str	r3, [r6, #0]
	if (((*addr) & ADDR_OFFS_MASK) != (fs->sector_size - ate_size)) {
   12544:	d130      	bne.n	125a8 <nvs_prev_ate+0x92>
	if (((*addr) >> ADDR_SECT_SHIFT) == 0U) {
   12546:	0c1a      	lsrs	r2, r3, #16
		*addr += ((fs->sector_count - 1) << ADDR_SECT_SHIFT);
   12548:	bf03      	ittte	eq
   1254a:	89e9      	ldrheq	r1, [r5, #14]
   1254c:	f101 31ff 	addeq.w	r1, r1, #4294967295	; 0xffffffff
   12550:	eb03 4101 	addeq.w	r1, r3, r1, lsl #16
		*addr -= (1 << ADDR_SECT_SHIFT);
   12554:	f5a3 3180 	subne.w	r1, r3, #65536	; 0x10000
   12558:	6031      	str	r1, [r6, #0]
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   1255a:	2308      	movs	r3, #8
   1255c:	466a      	mov	r2, sp
   1255e:	4628      	mov	r0, r5
   12560:	f7ff fecd 	bl	122fe <nvs_flash_rd>
	if (rc) {
   12564:	4604      	mov	r4, r0
   12566:	b9f8      	cbnz	r0, 125a8 <nvs_prev_ate+0x92>
	rc = nvs_ate_cmp_const(&close_ate, fs->flash_parameters->erase_value);
   12568:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   1256a:	466a      	mov	r2, sp
   1256c:	7919      	ldrb	r1, [r3, #4]
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   1256e:	4603      	mov	r3, r0
		if (data8[i] != value) {
   12570:	f812 0b01 	ldrb.w	r0, [r2], #1
   12574:	4281      	cmp	r1, r0
   12576:	d10c      	bne.n	12592 <nvs_prev_ate+0x7c>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   12578:	3301      	adds	r3, #1
   1257a:	2b08      	cmp	r3, #8
   1257c:	d1f8      	bne.n	12570 <nvs_prev_ate+0x5a>
		*addr = fs->ate_wra;
   1257e:	686b      	ldr	r3, [r5, #4]
   12580:	e005      	b.n	1258e <nvs_prev_ate+0x78>
		(*addr) &= ADDR_SECT_MASK;
   12582:	6833      	ldr	r3, [r6, #0]
		(*addr) += close_ate.offset;
   12584:	f8bd 2002 	ldrh.w	r2, [sp, #2]
		(*addr) &= ADDR_SECT_MASK;
   12588:	0c1b      	lsrs	r3, r3, #16
   1258a:	041b      	lsls	r3, r3, #16
		(*addr) += close_ate.offset;
   1258c:	4413      	add	r3, r2
		*addr = fs->ate_wra;
   1258e:	6033      	str	r3, [r6, #0]
		return 0;
   12590:	e00a      	b.n	125a8 <nvs_prev_ate+0x92>
	if (nvs_close_ate_valid(fs, &close_ate)) {
   12592:	4669      	mov	r1, sp
   12594:	4628      	mov	r0, r5
   12596:	f7ff ff47 	bl	12428 <nvs_close_ate_valid>
   1259a:	2800      	cmp	r0, #0
   1259c:	d1f1      	bne.n	12582 <nvs_prev_ate+0x6c>
	return nvs_recover_last_ate(fs, addr);
   1259e:	4631      	mov	r1, r6
   125a0:	4628      	mov	r0, r5
   125a2:	f7fb fce3 	bl	df6c <nvs_recover_last_ate>
   125a6:	4604      	mov	r4, r0
}
   125a8:	4620      	mov	r0, r4
   125aa:	b003      	add	sp, #12
   125ac:	bdf0      	pop	{r4, r5, r6, r7, pc}

000125ae <nvs_delete>:
	return nvs_write(fs, id, NULL, 0);
   125ae:	2300      	movs	r3, #0
   125b0:	461a      	mov	r2, r3
   125b2:	f7fc b801 	b.w	e5b8 <nvs_write>

000125b6 <nvs_read>:

ssize_t nvs_read(struct nvs_fs *fs, uint16_t id, void *data, size_t len)
{
   125b6:	b513      	push	{r0, r1, r4, lr}
	int rc;

	rc = nvs_read_hist(fs, id, data, len, 0);
   125b8:	2400      	movs	r4, #0
   125ba:	9400      	str	r4, [sp, #0]
   125bc:	f7fc f8d0 	bl	e760 <nvs_read_hist>
	return rc;
}
   125c0:	b002      	add	sp, #8
   125c2:	bd10      	pop	{r4, pc}

000125c4 <pm_policy_next_state>:
			return pm_min_residency[i];
		}
	}

	LOG_DBG("No suitable power state found!");
	return (struct pm_state_info){PM_STATE_ACTIVE, 0, 0};
   125c4:	2200      	movs	r2, #0
   125c6:	e9c0 2200 	strd	r2, r2, [r0]
   125ca:	6082      	str	r2, [r0, #8]
}
   125cc:	4770      	bx	lr

000125ce <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
   125ce:	6903      	ldr	r3, [r0, #16]
   125d0:	b2c9      	uxtb	r1, r1
   125d2:	220c      	movs	r2, #12
   125d4:	fb01 3302 	mla	r3, r1, r2, r3
   125d8:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
   125da:	f000 0007 	and.w	r0, r0, #7
   125de:	4770      	bx	lr

000125e0 <set_on_state>:
	__asm__ volatile(
   125e0:	f04f 0320 	mov.w	r3, #32
   125e4:	f3ef 8211 	mrs	r2, BASEPRI
   125e8:	f383 8811 	msr	BASEPRI, r3
   125ec:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   125f0:	6803      	ldr	r3, [r0, #0]
   125f2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   125f6:	f043 0302 	orr.w	r3, r3, #2
   125fa:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   125fc:	f382 8811 	msr	BASEPRI, r2
   12600:	f3bf 8f6f 	isb	sy
}
   12604:	4770      	bx	lr

00012606 <stop>:
{
   12606:	4603      	mov	r3, r0
   12608:	b570      	push	{r4, r5, r6, lr}
	struct nrf_clock_control_data *data = dev->data;
   1260a:	6900      	ldr	r0, [r0, #16]
	return &data->subsys[type];
   1260c:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
   1260e:	f04f 0420 	mov.w	r4, #32
   12612:	f3ef 8611 	mrs	r6, BASEPRI
   12616:	f384 8811 	msr	BASEPRI, r4
   1261a:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   1261e:	250c      	movs	r5, #12
   12620:	fb05 0401 	mla	r4, r5, r1, r0
   12624:	6c24      	ldr	r4, [r4, #64]	; 0x40
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   12626:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
   1262a:	d001      	beq.n	12630 <stop+0x2a>
   1262c:	42a2      	cmp	r2, r4
   1262e:	d111      	bne.n	12654 <stop+0x4e>
		*flags = CLOCK_CONTROL_STATUS_OFF;
   12630:	fb05 0001 	mla	r0, r5, r1, r0
   12634:	2201      	movs	r2, #1
   12636:	6402      	str	r2, [r0, #64]	; 0x40
	int err = 0;
   12638:	2000      	movs	r0, #0
	__asm__ volatile(
   1263a:	f386 8811 	msr	BASEPRI, r6
   1263e:	f3bf 8f6f 	isb	sy
	if (err < 0) {
   12642:	b930      	cbnz	r0, 12652 <stop+0x4c>
	get_sub_config(dev, type)->stop();
   12644:	685b      	ldr	r3, [r3, #4]
   12646:	220c      	movs	r2, #12
   12648:	fb02 3101 	mla	r1, r2, r1, r3
   1264c:	684b      	ldr	r3, [r1, #4]
   1264e:	4798      	blx	r3
	return 0;
   12650:	2000      	movs	r0, #0
}
   12652:	bd70      	pop	{r4, r5, r6, pc}
		err = -EPERM;
   12654:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   12658:	e7ef      	b.n	1263a <stop+0x34>

0001265a <api_stop>:
	return stop(dev, subsys, CTX_API);
   1265a:	2280      	movs	r2, #128	; 0x80
   1265c:	f7ff bfd3 	b.w	12606 <stop>

00012660 <async_start>:
{
   12660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12662:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
   12664:	6904      	ldr	r4, [r0, #16]
{
   12666:	4605      	mov	r5, r0
   12668:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
   1266a:	f04f 0020 	mov.w	r0, #32
   1266e:	f3ef 8c11 	mrs	ip, BASEPRI
   12672:	f380 8811 	msr	BASEPRI, r0
   12676:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   1267a:	260c      	movs	r6, #12
   1267c:	fb06 4601 	mla	r6, r6, r1, r4
   12680:	6c30      	ldr	r0, [r6, #64]	; 0x40
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   12682:	f000 0e07 	and.w	lr, r0, #7
   12686:	f1be 0f01 	cmp.w	lr, #1
   1268a:	d110      	bne.n	126ae <async_start+0x4e>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   1268c:	6437      	str	r7, [r6, #64]	; 0x40
	int err = 0;
   1268e:	2600      	movs	r6, #0
	__asm__ volatile(
   12690:	f38c 8811 	msr	BASEPRI, ip
   12694:	f3bf 8f6f 	isb	sy
	if (err < 0) {
   12698:	b93e      	cbnz	r6, 126aa <async_start+0x4a>
	subdata->cb = cb;
   1269a:	200c      	movs	r0, #12
   1269c:	4341      	muls	r1, r0
   1269e:	440c      	add	r4, r1
	subdata->user_data = user_data;
   126a0:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
   126a4:	686b      	ldr	r3, [r5, #4]
   126a6:	585b      	ldr	r3, [r3, r1]
   126a8:	4798      	blx	r3
}
   126aa:	4630      	mov	r0, r6
   126ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   126ae:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
		err = -EALREADY;
   126b2:	4287      	cmp	r7, r0
   126b4:	bf14      	ite	ne
   126b6:	f04f 36ff 	movne.w	r6, #4294967295	; 0xffffffff
   126ba:	f06f 0677 	mvneq.w	r6, #119	; 0x77
   126be:	e7e7      	b.n	12690 <async_start+0x30>

000126c0 <api_start>:
{
   126c0:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
   126c2:	2480      	movs	r4, #128	; 0x80
   126c4:	9400      	str	r4, [sp, #0]
   126c6:	f7ff ffcb 	bl	12660 <async_start>
}
   126ca:	b002      	add	sp, #8
   126cc:	bd10      	pop	{r4, pc}

000126ce <onoff_started_callback>:
	return &data->mgr[type];
   126ce:	6900      	ldr	r0, [r0, #16]
{
   126d0:	b410      	push	{r4}
	return &data->mgr[type];
   126d2:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   126d4:	241c      	movs	r4, #28
   126d6:	fb03 0004 	mla	r0, r3, r4, r0
   126da:	2100      	movs	r1, #0
}
   126dc:	bc10      	pop	{r4}
	notify(mgr, 0);
   126de:	4710      	bx	r2

000126e0 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   126e0:	2000      	movs	r0, #0
   126e2:	f7fd bf6b 	b.w	105bc <nrfx_clock_stop>

000126e6 <blocking_start_callback>:
{
   126e6:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   126e8:	f7fe bc54 	b.w	10f94 <z_impl_k_sem_give>

000126ec <sys_clock_isr>:
/* Weak-linked noop defaults for optional driver interfaces*/

void __weak sys_clock_isr(void *arg)
{
	__ASSERT_NO_MSG(false);
}
   126ec:	4770      	bx	lr

000126ee <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   126ee:	4770      	bx	lr

000126f0 <sys_clock_disable>:
   126f0:	4770      	bx	lr

000126f2 <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   126f2:	2100      	movs	r1, #0
   126f4:	2001      	movs	r0, #1
   126f6:	f7fc bccd 	b.w	f094 <z_arm_fatal_error>

000126fa <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   126fa:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   126fc:	6800      	ldr	r0, [r0, #0]
   126fe:	f7fc bcc9 	b.w	f094 <z_arm_fatal_error>

00012702 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
   12702:	b508      	push	{r3, lr}
	handler();
   12704:	f7fc fcfe 	bl	f104 <z_SysNmiOnReset>
	z_arm_int_exit();
}
   12708:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   1270c:	f7fc bf8c 	b.w	f628 <z_arm_exc_exit>

00012710 <strcpy>:

char *strcpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
   12710:	3901      	subs	r1, #1
   12712:	4603      	mov	r3, r0
   12714:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   12718:	b90a      	cbnz	r2, 1271e <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
   1271a:	701a      	strb	r2, [r3, #0]

	return dest;
}
   1271c:	4770      	bx	lr
		*d = *s;
   1271e:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
   12722:	e7f7      	b.n	12714 <strcpy+0x4>

00012724 <strncpy>:
 *
 * @return pointer to destination buffer <d>
 */

char *strncpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s, size_t n)
{
   12724:	b570      	push	{r4, r5, r6, lr}
   12726:	4605      	mov	r5, r0
   12728:	462b      	mov	r3, r5
	char *dest = d;

	while ((n > 0) && *s != '\0') {
   1272a:	b142      	cbz	r2, 1273e <strncpy+0x1a>
   1272c:	f811 4b01 	ldrb.w	r4, [r1], #1
		*d = *s;
		s++;
		d++;
		n--;
   12730:	1e56      	subs	r6, r2, #1
	while ((n > 0) && *s != '\0') {
   12732:	b92c      	cbnz	r4, 12740 <strncpy+0x1c>
   12734:	442a      	add	r2, r5
	}

	while (n > 0) {
		*d = '\0';
   12736:	f803 4b01 	strb.w	r4, [r3], #1
	while (n > 0) {
   1273a:	429a      	cmp	r2, r3
   1273c:	d1fb      	bne.n	12736 <strncpy+0x12>
		d++;
		n--;
	}

	return dest;
}
   1273e:	bd70      	pop	{r4, r5, r6, pc}
		*d = *s;
   12740:	f805 4b01 	strb.w	r4, [r5], #1
		n--;
   12744:	4632      	mov	r2, r6
   12746:	e7ef      	b.n	12728 <strncpy+0x4>

00012748 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
   12748:	4603      	mov	r3, r0
	size_t n = 0;
   1274a:	2000      	movs	r0, #0

	while (*s != '\0') {
   1274c:	5c1a      	ldrb	r2, [r3, r0]
   1274e:	b902      	cbnz	r2, 12752 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
   12750:	4770      	bx	lr
		n++;
   12752:	3001      	adds	r0, #1
   12754:	e7fa      	b.n	1274c <strlen+0x4>

00012756 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
   12756:	4603      	mov	r3, r0
	size_t n = 0;
   12758:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
   1275a:	5c1a      	ldrb	r2, [r3, r0]
   1275c:	b10a      	cbz	r2, 12762 <strnlen+0xc>
   1275e:	4288      	cmp	r0, r1
   12760:	d100      	bne.n	12764 <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
   12762:	4770      	bx	lr
		n++;
   12764:	3001      	adds	r0, #1
   12766:	e7f8      	b.n	1275a <strnlen+0x4>

00012768 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
   12768:	1e43      	subs	r3, r0, #1
   1276a:	3901      	subs	r1, #1
   1276c:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   12770:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   12774:	4282      	cmp	r2, r0
   12776:	d101      	bne.n	1277c <strcmp+0x14>
   12778:	2a00      	cmp	r2, #0
   1277a:	d1f7      	bne.n	1276c <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
   1277c:	1a10      	subs	r0, r2, r0
   1277e:	4770      	bx	lr

00012780 <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
   12780:	b510      	push	{r4, lr}
   12782:	4603      	mov	r3, r0
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
   12784:	b15a      	cbz	r2, 1279e <memcmp+0x1e>
   12786:	3901      	subs	r1, #1
   12788:	1884      	adds	r4, r0, r2
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
   1278a:	f813 0b01 	ldrb.w	r0, [r3], #1
   1278e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   12792:	42a3      	cmp	r3, r4
   12794:	d001      	beq.n	1279a <memcmp+0x1a>
   12796:	4290      	cmp	r0, r2
   12798:	d0f7      	beq.n	1278a <memcmp+0xa>
		c1++;
		c2++;
	}

	return *c1 - *c2;
   1279a:	1a80      	subs	r0, r0, r2
}
   1279c:	bd10      	pop	{r4, pc}
		return 0;
   1279e:	4610      	mov	r0, r2
   127a0:	e7fc      	b.n	1279c <memcmp+0x1c>

000127a2 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
   127a2:	b510      	push	{r4, lr}
   127a4:	1e43      	subs	r3, r0, #1
   127a6:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
   127a8:	4291      	cmp	r1, r2
   127aa:	d100      	bne.n	127ae <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
   127ac:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
   127ae:	f811 4b01 	ldrb.w	r4, [r1], #1
   127b2:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
   127b6:	e7f7      	b.n	127a8 <memcpy+0x6>

000127b8 <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
   127b8:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
   127ba:	4402      	add	r2, r0
	unsigned char *d_byte = (unsigned char *)buf;
   127bc:	4603      	mov	r3, r0
	while (n > 0) {
   127be:	4293      	cmp	r3, r2
   127c0:	d100      	bne.n	127c4 <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
   127c2:	4770      	bx	lr
		*(d_byte++) = c_byte;
   127c4:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   127c8:	e7f9      	b.n	127be <memset+0x6>

000127ca <_stdout_hook_default>:
}
   127ca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   127ce:	4770      	bx	lr

000127d0 <pm_power_state_set>:
#include <logging/log.h>
LOG_MODULE_DECLARE(soc, CONFIG_SOC_LOG_LEVEL);

/* Invoke Low Power/System Off specific Tasks */
__weak void pm_power_state_set(struct pm_state_info info)
{
   127d0:	b084      	sub	sp, #16
   127d2:	ab04      	add	r3, sp, #16
   127d4:	e903 0007 	stmdb	r3, {r0, r1, r2}
	switch (info.state) {
   127d8:	f89d 3004 	ldrb.w	r3, [sp, #4]
   127dc:	2b06      	cmp	r3, #6
   127de:	d108      	bne.n	127f2 <pm_power_state_set+0x22>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
   127e0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   127e4:	2201      	movs	r2, #1
   127e6:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   127ea:	f3bf 8f4f 	dsb	sy
        __WFE();
   127ee:	bf20      	wfe
    while (true)
   127f0:	e7fd      	b.n	127ee <pm_power_state_set+0x1e>
		break;
	default:
		LOG_DBG("Unsupported power state %u", info.state);
		break;
	}
}
   127f2:	b004      	add	sp, #16
   127f4:	4770      	bx	lr

000127f6 <pm_power_state_exit_post_ops>:

/* Handle SOC specific activity after Low Power Mode Exit */
__weak void pm_power_state_exit_post_ops(struct pm_state_info info)
{
   127f6:	b084      	sub	sp, #16
   127f8:	ab04      	add	r3, sp, #16
   127fa:	e903 0007 	stmdb	r3, {r0, r1, r2}
   127fe:	2300      	movs	r3, #0
   12800:	f383 8811 	msr	BASEPRI, r3
   12804:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   12808:	b004      	add	sp, #16
   1280a:	4770      	bx	lr

0001280c <nrf_gpio_cfg_sense_set>:
    *p_pin = pin_number & 0x1F;
   1280c:	f000 001f 	and.w	r0, r0, #31
   12810:	0080      	lsls	r0, r0, #2
   12812:	f100 40a0 	add.w	r0, r0, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
   12816:	f8d0 3700 	ldr.w	r3, [r0, #1792]	; 0x700
   1281a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   1281e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   12822:	f8c0 3700 	str.w	r3, [r0, #1792]	; 0x700
}
   12826:	4770      	bx	lr

00012828 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   12828:	6843      	ldr	r3, [r0, #4]
   1282a:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   1282c:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
   12830:	600b      	str	r3, [r1, #0]
}
   12832:	2000      	movs	r0, #0
   12834:	4770      	bx	lr

00012836 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   12836:	6843      	ldr	r3, [r0, #4]
   12838:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
   1283a:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
   1283e:	4042      	eors	r2, r0
   12840:	400a      	ands	r2, r1
   12842:	4042      	eors	r2, r0
    p_reg->OUT = value;
   12844:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
   12848:	2000      	movs	r0, #0
   1284a:	4770      	bx	lr

0001284c <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1284c:	6843      	ldr	r3, [r0, #4]
   1284e:	685b      	ldr	r3, [r3, #4]
}
   12850:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
   12852:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
   12856:	4770      	bx	lr

00012858 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   12858:	6843      	ldr	r3, [r0, #4]
   1285a:	685b      	ldr	r3, [r3, #4]
}
   1285c:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   1285e:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
   12862:	4770      	bx	lr

00012864 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   12864:	6843      	ldr	r3, [r0, #4]
   12866:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   12868:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
   1286c:	404b      	eors	r3, r1
    p_reg->OUT = value;
   1286e:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
   12872:	2000      	movs	r0, #0
   12874:	4770      	bx	lr

00012876 <gpio_nrfx_manage_callback>:
	return port->data;
   12876:	6903      	ldr	r3, [r0, #16]
	return list->head;
   12878:	6858      	ldr	r0, [r3, #4]
{
   1287a:	b530      	push	{r4, r5, lr}
	if (!sys_slist_is_empty(callbacks)) {
   1287c:	b158      	cbz	r0, 12896 <gpio_nrfx_manage_callback+0x20>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1287e:	2400      	movs	r4, #0
   12880:	4281      	cmp	r1, r0
   12882:	d112      	bne.n	128aa <gpio_nrfx_manage_callback+0x34>
	return node->next;
   12884:	6808      	ldr	r0, [r1, #0]
	return list->tail;
   12886:	689d      	ldr	r5, [r3, #8]
Z_GENLIST_REMOVE(slist, snode)
   12888:	b954      	cbnz	r4, 128a0 <gpio_nrfx_manage_callback+0x2a>
   1288a:	428d      	cmp	r5, r1
	list->head = node;
   1288c:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   1288e:	d100      	bne.n	12892 <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
   12890:	6098      	str	r0, [r3, #8]
	parent->next = child;
   12892:	2000      	movs	r0, #0
   12894:	6008      	str	r0, [r1, #0]
	if (set) {
   12896:	b96a      	cbnz	r2, 128b4 <gpio_nrfx_manage_callback+0x3e>
	return 0;
   12898:	2000      	movs	r0, #0
}
   1289a:	bd30      	pop	{r4, r5, pc}
   1289c:	4628      	mov	r0, r5
   1289e:	e7ef      	b.n	12880 <gpio_nrfx_manage_callback+0xa>
Z_GENLIST_REMOVE(slist, snode)
   128a0:	428d      	cmp	r5, r1
	parent->next = child;
   128a2:	6020      	str	r0, [r4, #0]
	list->tail = node;
   128a4:	bf08      	it	eq
   128a6:	609c      	streq	r4, [r3, #8]
}
   128a8:	e7f3      	b.n	12892 <gpio_nrfx_manage_callback+0x1c>
	return node->next;
   128aa:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   128ac:	4604      	mov	r4, r0
   128ae:	2d00      	cmp	r5, #0
   128b0:	d1f4      	bne.n	1289c <gpio_nrfx_manage_callback+0x26>
			if (!set) {
   128b2:	b13a      	cbz	r2, 128c4 <gpio_nrfx_manage_callback+0x4e>
Z_GENLIST_PREPEND(slist, snode)
   128b4:	6898      	ldr	r0, [r3, #8]
	parent->next = child;
   128b6:	685a      	ldr	r2, [r3, #4]
   128b8:	600a      	str	r2, [r1, #0]
	list->head = node;
   128ba:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   128bc:	2800      	cmp	r0, #0
   128be:	d1eb      	bne.n	12898 <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
   128c0:	6099      	str	r1, [r3, #8]
}
   128c2:	e7ea      	b.n	1289a <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
   128c4:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   128c8:	e7e7      	b.n	1289a <gpio_nrfx_manage_callback+0x24>

000128ca <is_regular_addr_valid>:
{
   128ca:	b538      	push	{r3, r4, r5, lr}
   128cc:	4604      	mov	r4, r0
   128ce:	460d      	mov	r5, r1
	size_t flash_size = nrfx_nvmc_flash_size_get();
   128d0:	f000 f8d1 	bl	12a76 <nrfx_nvmc_flash_size_get>
	if (addr >= flash_size ||
   128d4:	4284      	cmp	r4, r0
   128d6:	d209      	bcs.n	128ec <is_regular_addr_valid+0x22>
   128d8:	2c00      	cmp	r4, #0
   128da:	db07      	blt.n	128ec <is_regular_addr_valid+0x22>
	    addr < 0 ||
   128dc:	42a8      	cmp	r0, r5
   128de:	d305      	bcc.n	128ec <is_regular_addr_valid+0x22>
	    (addr) + len > flash_size) {
   128e0:	442c      	add	r4, r5
	    len > flash_size ||
   128e2:	4284      	cmp	r4, r0
   128e4:	bf8c      	ite	hi
   128e6:	2000      	movhi	r0, #0
   128e8:	2001      	movls	r0, #1
}
   128ea:	bd38      	pop	{r3, r4, r5, pc}
		return false;
   128ec:	2000      	movs	r0, #0
   128ee:	e7fc      	b.n	128ea <is_regular_addr_valid+0x20>

000128f0 <flash_get_page_info>:

#include <drivers/flash.h>

static int flash_get_page_info(const struct device *dev, off_t offs,
			       uint32_t index, struct flash_pages_info *info)
{
   128f0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   128f4:	461c      	mov	r4, r3
	const struct flash_driver_api *api = dev->api;
   128f6:	6883      	ldr	r3, [r0, #8]
	const struct flash_pages_layout *layout;
	size_t layout_size;
	uint32_t index_jmp;

	info->start_offset = 0;
   128f8:	f04f 0800 	mov.w	r8, #0
	info->index = 0U;

	api->page_layout(dev, &layout, &layout_size);
   128fc:	695b      	ldr	r3, [r3, #20]
	info->start_offset = 0;
   128fe:	f8c4 8000 	str.w	r8, [r4]
{
   12902:	460d      	mov	r5, r1
   12904:	4616      	mov	r6, r2
	info->index = 0U;
   12906:	f8c4 8008 	str.w	r8, [r4, #8]
	api->page_layout(dev, &layout, &layout_size);
   1290a:	aa01      	add	r2, sp, #4
   1290c:	4669      	mov	r1, sp
   1290e:	4798      	blx	r3

	while (layout_size--) {
   12910:	e9dd 7c00 	ldrd	r7, ip, [sp]
   12914:	4640      	mov	r0, r8
		info->size = layout->pages_size;
   12916:	f107 0e04 	add.w	lr, r7, #4
	while (layout_size--) {
   1291a:	4560      	cmp	r0, ip
   1291c:	d104      	bne.n	12928 <flash_get_page_info+0x38>
		}

		layout++;
	}

	return -EINVAL; /* page at offs or idx doesn't exist */
   1291e:	f06f 0015 	mvn.w	r0, #21
}
   12922:	b003      	add	sp, #12
   12924:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		info->size = layout->pages_size;
   12928:	f85e 9030 	ldr.w	r9, [lr, r0, lsl #3]
			index_jmp = index - info->index;
   1292c:	68a1      	ldr	r1, [r4, #8]
			index_jmp = (offs - info->start_offset) / info->size;
   1292e:	6822      	ldr	r2, [r4, #0]
		info->size = layout->pages_size;
   12930:	f8c4 9004 	str.w	r9, [r4, #4]
		if (offs == 0) {
   12934:	b985      	cbnz	r5, 12958 <flash_get_page_info+0x68>
			index_jmp = index - info->index;
   12936:	1a73      	subs	r3, r6, r1
		index_jmp = MIN(index_jmp, layout->pages_count);
   12938:	f857 8030 	ldr.w	r8, [r7, r0, lsl #3]
   1293c:	4543      	cmp	r3, r8
   1293e:	bf28      	it	cs
   12940:	4643      	movcs	r3, r8
		info->start_offset += (index_jmp * info->size);
   12942:	fb03 2209 	mla	r2, r3, r9, r2
		info->index += index_jmp;
   12946:	4419      	add	r1, r3
		if (index_jmp < layout->pages_count) {
   12948:	4598      	cmp	r8, r3
		info->start_offset += (index_jmp * info->size);
   1294a:	6022      	str	r2, [r4, #0]
		info->index += index_jmp;
   1294c:	60a1      	str	r1, [r4, #8]
		if (index_jmp < layout->pages_count) {
   1294e:	f100 0001 	add.w	r0, r0, #1
   12952:	d9e2      	bls.n	1291a <flash_get_page_info+0x2a>
			return 0;
   12954:	2000      	movs	r0, #0
   12956:	e7e4      	b.n	12922 <flash_get_page_info+0x32>
			index_jmp = (offs - info->start_offset) / info->size;
   12958:	1aab      	subs	r3, r5, r2
   1295a:	fbb3 f3f9 	udiv	r3, r3, r9
   1295e:	e7eb      	b.n	12938 <flash_get_page_info+0x48>

00012960 <z_impl_flash_get_page_info_by_offs>:

int z_impl_flash_get_page_info_by_offs(const struct device *dev, off_t offs,
				       struct flash_pages_info *info)
{
   12960:	4613      	mov	r3, r2
	return flash_get_page_info(dev, offs, 0U, info);
   12962:	2200      	movs	r2, #0
   12964:	f7ff bfc4 	b.w	128f0 <flash_get_page_info>

00012968 <uarte_nrfx_config_get>:
	*cfg = get_dev_data(dev)->uart_config;
   12968:	6902      	ldr	r2, [r0, #16]
{
   1296a:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
   1296c:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
   12970:	e883 0003 	stmia.w	r3, {r0, r1}
}
   12974:	2000      	movs	r0, #0
   12976:	4770      	bx	lr

00012978 <uarte_nrfx_err_check>:
	return config->uarte_regs;
   12978:	6843      	ldr	r3, [r0, #4]
   1297a:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   1297c:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   12980:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   12984:	4770      	bx	lr

00012986 <uarte_nrfx_poll_in>:
	return config->uarte_regs;
   12986:	6843      	ldr	r3, [r0, #4]
	return dev->data;
   12988:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
   1298a:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1298c:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   12990:	b148      	cbz	r0, 129a6 <uarte_nrfx_poll_in+0x20>
	*c = data->rx_data;
   12992:	7c52      	ldrb	r2, [r2, #17]
   12994:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   12996:	2000      	movs	r0, #0
   12998:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   1299c:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   129a0:	2201      	movs	r2, #1
   129a2:	601a      	str	r2, [r3, #0]
	return 0;
   129a4:	4770      	bx	lr
		return -1;
   129a6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   129aa:	4770      	bx	lr

000129ac <is_tx_ready.isra.0>:
	return config->uarte_regs;
   129ac:	6802      	ldr	r2, [r0, #0]
static bool is_tx_ready(const struct device *dev)
   129ae:	4603      	mov	r3, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   129b0:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   129b4:	b940      	cbnz	r0, 129c8 <is_tx_ready.isra.0+0x1c>
	bool ppi_endtx = get_dev_config(dev)->flags & UARTE_CFG_FLAG_PPI_ENDTX;
   129b6:	685b      	ldr	r3, [r3, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   129b8:	071b      	lsls	r3, r3, #28
   129ba:	d406      	bmi.n	129ca <is_tx_ready.isra.0+0x1e>
   129bc:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
   129c0:	3800      	subs	r0, #0
   129c2:	bf18      	it	ne
   129c4:	2001      	movne	r0, #1
   129c6:	4770      	bx	lr
   129c8:	2001      	movs	r0, #1
}
   129ca:	4770      	bx	lr

000129cc <uarte_nrfx_isr_int>:
	return config->uarte_regs;
   129cc:	6843      	ldr	r3, [r0, #4]
   129ce:	681b      	ldr	r3, [r3, #0]
    return p_reg->INTENSET & mask;
   129d0:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
   129d4:	05d1      	lsls	r1, r2, #23
   129d6:	d518      	bpl.n	12a0a <uarte_nrfx_isr_int+0x3e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   129d8:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
   129dc:	b1aa      	cbz	r2, 12a0a <uarte_nrfx_isr_int+0x3e>
	__asm__ volatile(
   129de:	f04f 0120 	mov.w	r1, #32
   129e2:	f3ef 8211 	mrs	r2, BASEPRI
   129e6:	f381 8811 	msr	BASEPRI, r1
   129ea:	f3bf 8f6f 	isb	sy
   129ee:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   129f2:	b131      	cbz	r1, 12a02 <uarte_nrfx_isr_int+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   129f4:	2100      	movs	r1, #0
   129f6:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
   129fa:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   129fe:	2101      	movs	r1, #1
   12a00:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
   12a02:	f382 8811 	msr	BASEPRI, r2
   12a06:	f3bf 8f6f 	isb	sy
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
   12a0a:	6842      	ldr	r2, [r0, #4]
   12a0c:	6852      	ldr	r2, [r2, #4]
   12a0e:	06d2      	lsls	r2, r2, #27
   12a10:	d515      	bpl.n	12a3e <uarte_nrfx_isr_int+0x72>
	__asm__ volatile(
   12a12:	f04f 0120 	mov.w	r1, #32
   12a16:	f3ef 8211 	mrs	r2, BASEPRI
   12a1a:	f381 8811 	msr	BASEPRI, r1
   12a1e:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   12a22:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   12a26:	b111      	cbz	r1, 12a2e <uarte_nrfx_isr_int+0x62>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   12a28:	2100      	movs	r1, #0
   12a2a:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    p_reg->INTENCLR = mask;
   12a2e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
   12a32:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
	__asm__ volatile(
   12a36:	f382 8811 	msr	BASEPRI, r2
   12a3a:	f3bf 8f6f 	isb	sy
}
   12a3e:	4770      	bx	lr

00012a40 <nrf52_errata_108>:
            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
   12a40:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   12a44:	f8d3 0130 	ldr.w	r0, [r3, #304]	; 0x130
   12a48:	1c42      	adds	r2, r0, #1
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   12a4a:	bf04      	itt	eq
   12a4c:	f04f 4370 	moveq.w	r3, #4026531840	; 0xf0000000
   12a50:	f893 0fe0 	ldrbeq.w	r0, [r3, #4064]	; 0xfe0
}
   12a54:	1f83      	subs	r3, r0, #6
   12a56:	4258      	negs	r0, r3
   12a58:	4158      	adcs	r0, r3
   12a5a:	4770      	bx	lr

00012a5c <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   12a5c:	4700      	bx	r0

00012a5e <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   12a5e:	f000 b9a6 	b.w	12dae <z_impl_k_busy_wait>

00012a62 <nrfx_clock_enable>:
{
   12a62:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
   12a64:	2000      	movs	r0, #0
   12a66:	f7fc fa89 	bl	ef7c <arch_irq_is_enabled>
   12a6a:	b918      	cbnz	r0, 12a74 <nrfx_clock_enable+0x12>
}
   12a6c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
   12a70:	f7fc ba74 	b.w	ef5c <arch_irq_enable>
   12a74:	bd08      	pop	{r3, pc}

00012a76 <nrfx_nvmc_flash_size_get>:
   12a76:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   12a7a:	691a      	ldr	r2, [r3, #16]
NRF_STATIC_INLINE uint32_t nrf_ficr_codesize_get(NRF_FICR_Type const * p_reg)
{
#if defined(FICR_INFO_CODESIZE_CODESIZE_Msk)
    return p_reg->INFO.CODESIZE;
#else
    return p_reg->CODESIZE;
   12a7c:	6958      	ldr	r0, [r3, #20]
}

uint32_t nrfx_nvmc_flash_size_get(void)
{
    return flash_total_size_get();
}
   12a7e:	4350      	muls	r0, r2
   12a80:	4770      	bx	lr

00012a82 <nrfx_nvmc_flash_page_size_get>:
    return p_reg->CODEPAGESIZE;
   12a82:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   12a86:	6918      	ldr	r0, [r3, #16]

uint32_t nrfx_nvmc_flash_page_size_get(void)
{
    return flash_page_size_get();
}
   12a88:	4770      	bx	lr

00012a8a <nrfx_nvmc_flash_page_count_get>:
    return p_reg->CODESIZE;
   12a8a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   12a8e:	6958      	ldr	r0, [r3, #20]

uint32_t nrfx_nvmc_flash_page_count_get(void)
{
    return flash_page_count_get();
}
   12a90:	4770      	bx	lr

00012a92 <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
   12a92:	f7fd bec9 	b.w	10828 <_DoInit>

00012a96 <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
   12a96:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
   12a98:	f7ff fffb 	bl	12a92 <SEGGER_RTT_Init>

	return 0;
}
   12a9c:	2000      	movs	r0, #0
   12a9e:	bd08      	pop	{r3, pc}

00012aa0 <z_device_state_init>:
}
   12aa0:	4770      	bx	lr

00012aa2 <z_device_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   12aa2:	b138      	cbz	r0, 12ab4 <z_device_ready+0x12>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   12aa4:	68c3      	ldr	r3, [r0, #12]
   12aa6:	8818      	ldrh	r0, [r3, #0]
   12aa8:	f3c0 0008 	ubfx	r0, r0, #0, #9
   12aac:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
   12ab0:	4258      	negs	r0, r3
   12ab2:	4158      	adcs	r0, r3
}
   12ab4:	4770      	bx	lr

00012ab6 <k_mem_slab_init>:
{
   12ab6:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
   12ab8:	2400      	movs	r4, #0
   12aba:	6184      	str	r4, [r0, #24]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   12abc:	ea41 0402 	orr.w	r4, r1, r2
   12ac0:	f014 0403 	ands.w	r4, r4, #3
	slab->block_size = block_size;
   12ac4:	e9c0 3202 	strd	r3, r2, [r0, #8]
	slab->buffer = buffer;
   12ac8:	6101      	str	r1, [r0, #16]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   12aca:	d10c      	bne.n	12ae6 <k_mem_slab_init+0x30>
	slab->free_list = NULL;
   12acc:	6144      	str	r4, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   12ace:	42a3      	cmp	r3, r4
   12ad0:	d103      	bne.n	12ada <k_mem_slab_init+0x24>
	list->tail = (sys_dnode_t *)list;
   12ad2:	e9c0 0000 	strd	r0, r0, [r0]
}
   12ad6:	2000      	movs	r0, #0
}
   12ad8:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
   12ada:	6945      	ldr	r5, [r0, #20]
   12adc:	600d      	str	r5, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
   12ade:	3401      	adds	r4, #1
		slab->free_list = p;
   12ae0:	6141      	str	r1, [r0, #20]
		p += slab->block_size;
   12ae2:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
   12ae4:	e7f3      	b.n	12ace <k_mem_slab_init+0x18>
		return -EINVAL;
   12ae6:	f06f 0015 	mvn.w	r0, #21
	return rc;
   12aea:	e7f5      	b.n	12ad8 <k_mem_slab_init+0x22>

00012aec <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   12aec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12aee:	4604      	mov	r4, r0
   12af0:	460d      	mov	r5, r1
	__asm__ volatile(
   12af2:	f04f 0320 	mov.w	r3, #32
   12af6:	f3ef 8611 	mrs	r6, BASEPRI
   12afa:	f383 8811 	msr	BASEPRI, r3
   12afe:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
   12b02:	6947      	ldr	r7, [r0, #20]
   12b04:	b977      	cbnz	r7, 12b24 <k_mem_slab_free+0x38>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   12b06:	f000 f8f6 	bl	12cf6 <z_unpend_first_thread>

		if (pending_thread != NULL) {
   12b0a:	b158      	cbz	r0, 12b24 <k_mem_slab_free+0x38>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   12b0c:	682a      	ldr	r2, [r5, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   12b0e:	6142      	str	r2, [r0, #20]
   12b10:	6787      	str	r7, [r0, #120]	; 0x78
			z_ready_thread(pending_thread);
   12b12:	f000 f8a9 	bl	12c68 <z_ready_thread>
			z_reschedule(&slab->lock, key);
   12b16:	4631      	mov	r1, r6
   12b18:	f104 0008 	add.w	r0, r4, #8
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
   12b1c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&slab->lock, key);
   12b20:	f7fe bac6 	b.w	110b0 <z_reschedule>
	**(char ***) mem = slab->free_list;
   12b24:	682b      	ldr	r3, [r5, #0]
   12b26:	6962      	ldr	r2, [r4, #20]
   12b28:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   12b2a:	682b      	ldr	r3, [r5, #0]
   12b2c:	6163      	str	r3, [r4, #20]
	slab->num_used--;
   12b2e:	69a3      	ldr	r3, [r4, #24]
   12b30:	3b01      	subs	r3, #1
   12b32:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
   12b34:	f386 8811 	msr	BASEPRI, r6
   12b38:	f3bf 8f6f 	isb	sy
}
   12b3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00012b3e <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   12b3e:	f3ef 8005 	mrs	r0, IPSR
}
   12b42:	3800      	subs	r0, #0
   12b44:	bf18      	it	ne
   12b46:	2001      	movne	r0, #1
   12b48:	4770      	bx	lr

00012b4a <z_impl_k_thread_name_set>:
}
   12b4a:	f06f 0057 	mvn.w	r0, #87	; 0x57
   12b4e:	4770      	bx	lr

00012b50 <k_thread_name_get>:
}
   12b50:	2000      	movs	r0, #0
   12b52:	4770      	bx	lr

00012b54 <z_pm_save_idle_exit>:
{
   12b54:	b508      	push	{r3, lr}
	pm_system_resume();
   12b56:	f7fb fe8d 	bl	e874 <pm_system_resume>
}
   12b5a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
   12b5e:	f7ff bdc6 	b.w	126ee <sys_clock_idle_exit>

00012b62 <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
   12b62:	f990 300e 	ldrsb.w	r3, [r0, #14]
   12b66:	428b      	cmp	r3, r1
   12b68:	d001      	beq.n	12b6e <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
   12b6a:	f7fe bc55 	b.w	11418 <z_set_prio>
}
   12b6e:	2000      	movs	r0, #0
   12b70:	4770      	bx	lr

00012b72 <z_impl_k_mutex_init>:
{
   12b72:	4603      	mov	r3, r0
	mutex->owner = NULL;
   12b74:	2000      	movs	r0, #0
	mutex->lock_count = 0U;
   12b76:	e9c3 0002 	strd	r0, r0, [r3, #8]
   12b7a:	e9c3 3300 	strd	r3, r3, [r3]
}
   12b7e:	4770      	bx	lr

00012b80 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   12b80:	b13a      	cbz	r2, 12b92 <z_impl_k_sem_init+0x12>
   12b82:	428a      	cmp	r2, r1
   12b84:	d305      	bcc.n	12b92 <z_impl_k_sem_init+0x12>
	sem->limit = limit;
   12b86:	e9c0 1202 	strd	r1, r2, [r0, #8]
   12b8a:	e9c0 0000 	strd	r0, r0, [r0]
	return 0;
   12b8e:	2000      	movs	r0, #0
   12b90:	4770      	bx	lr
		return -EINVAL;
   12b92:	f06f 0015 	mvn.w	r0, #21
}
   12b96:	4770      	bx	lr

00012b98 <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
   12b98:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   12b9c:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   12b9e:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   12ba0:	2300      	movs	r3, #0
	node->prev = NULL;
   12ba2:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dnode_init(node);
}
   12ba6:	4770      	bx	lr

00012ba8 <unpend_thread_no_timeout>:
{
   12ba8:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
   12baa:	f7ff fff5 	bl	12b98 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   12bae:	7b43      	ldrb	r3, [r0, #13]
   12bb0:	f023 0302 	bic.w	r3, r3, #2
   12bb4:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
   12bb6:	2300      	movs	r3, #0
   12bb8:	6083      	str	r3, [r0, #8]
}
   12bba:	bd08      	pop	{r3, pc}

00012bbc <z_unpend_thread_no_timeout>:
{
   12bbc:	b508      	push	{r3, lr}
	__asm__ volatile(
   12bbe:	f04f 0320 	mov.w	r3, #32
   12bc2:	f3ef 8111 	mrs	r1, BASEPRI
   12bc6:	f383 8811 	msr	BASEPRI, r3
   12bca:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   12bce:	f7ff ffeb 	bl	12ba8 <unpend_thread_no_timeout>
	__asm__ volatile(
   12bd2:	f381 8811 	msr	BASEPRI, r1
   12bd6:	f3bf 8f6f 	isb	sy
}
   12bda:	bd08      	pop	{r3, pc}

00012bdc <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   12bdc:	4603      	mov	r3, r0
   12bde:	b920      	cbnz	r0, 12bea <z_reschedule_irqlock+0xe>
   12be0:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key)) {
   12be4:	b90a      	cbnz	r2, 12bea <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
   12be6:	f7fc b965 	b.w	eeb4 <arch_swap>
   12bea:	f383 8811 	msr	BASEPRI, r3
   12bee:	f3bf 8f6f 	isb	sy
}
   12bf2:	4770      	bx	lr

00012bf4 <z_reschedule_unlocked>:
	__asm__ volatile(
   12bf4:	f04f 0320 	mov.w	r3, #32
   12bf8:	f3ef 8011 	mrs	r0, BASEPRI
   12bfc:	f383 8811 	msr	BASEPRI, r3
   12c00:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   12c04:	f7ff bfea 	b.w	12bdc <z_reschedule_irqlock>

00012c08 <z_priq_dumb_best>:
{
   12c08:	4603      	mov	r3, r0
	return list->head == list;
   12c0a:	6800      	ldr	r0, [r0, #0]
}
   12c0c:	4283      	cmp	r3, r0
   12c0e:	bf08      	it	eq
   12c10:	2000      	moveq	r0, #0
   12c12:	4770      	bx	lr

00012c14 <add_to_waitq_locked>:
{
   12c14:	b538      	push	{r3, r4, r5, lr}
   12c16:	4604      	mov	r4, r0
   12c18:	460d      	mov	r5, r1
	unready_thread(thread);
   12c1a:	f7fe fa8f 	bl	1113c <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   12c1e:	7b63      	ldrb	r3, [r4, #13]
   12c20:	f043 0302 	orr.w	r3, r3, #2
   12c24:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   12c26:	b195      	cbz	r5, 12c4e <add_to_waitq_locked+0x3a>
   12c28:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
   12c2a:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   12c2c:	429d      	cmp	r5, r3
   12c2e:	d015      	beq.n	12c5c <add_to_waitq_locked+0x48>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   12c30:	b1a3      	cbz	r3, 12c5c <add_to_waitq_locked+0x48>
	int32_t b1 = thread_1->base.prio;
   12c32:	f994 100e 	ldrsb.w	r1, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   12c36:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
   12c3a:	4291      	cmp	r1, r2
   12c3c:	d008      	beq.n	12c50 <add_to_waitq_locked+0x3c>
		return b2 - b1;
   12c3e:	1a52      	subs	r2, r2, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
   12c40:	2a00      	cmp	r2, #0
   12c42:	dd05      	ble.n	12c50 <add_to_waitq_locked+0x3c>
	sys_dnode_t *const prev = successor->prev;
   12c44:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   12c46:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   12c4a:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   12c4c:	605c      	str	r4, [r3, #4]
}
   12c4e:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
   12c50:	686a      	ldr	r2, [r5, #4]
   12c52:	4293      	cmp	r3, r2
   12c54:	d002      	beq.n	12c5c <add_to_waitq_locked+0x48>
   12c56:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   12c58:	2b00      	cmp	r3, #0
   12c5a:	d1ec      	bne.n	12c36 <add_to_waitq_locked+0x22>
	sys_dnode_t *const tail = list->tail;
   12c5c:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
   12c5e:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
   12c62:	601c      	str	r4, [r3, #0]
	list->tail = node;
   12c64:	606c      	str	r4, [r5, #4]
}
   12c66:	e7f2      	b.n	12c4e <add_to_waitq_locked+0x3a>

00012c68 <z_ready_thread>:
{
   12c68:	b510      	push	{r4, lr}
   12c6a:	f04f 0320 	mov.w	r3, #32
   12c6e:	f3ef 8411 	mrs	r4, BASEPRI
   12c72:	f383 8811 	msr	BASEPRI, r3
   12c76:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
   12c7a:	f7fe fb79 	bl	11370 <ready_thread>
	__asm__ volatile(
   12c7e:	f384 8811 	msr	BASEPRI, r4
   12c82:	f3bf 8f6f 	isb	sy
}
   12c86:	bd10      	pop	{r4, pc}

00012c88 <z_thread_timeout>:
{
   12c88:	b510      	push	{r4, lr}
   12c8a:	4601      	mov	r1, r0
	__asm__ volatile(
   12c8c:	f04f 0320 	mov.w	r3, #32
   12c90:	f3ef 8411 	mrs	r4, BASEPRI
   12c94:	f383 8811 	msr	BASEPRI, r3
   12c98:	f3bf 8f6f 	isb	sy
		if (!killed) {
   12c9c:	f810 3c0b 	ldrb.w	r3, [r0, #-11]
   12ca0:	f013 0f28 	tst.w	r3, #40	; 0x28
   12ca4:	d10d      	bne.n	12cc2 <z_thread_timeout+0x3a>
			if (thread->base.pended_on != NULL) {
   12ca6:	f851 3c10 	ldr.w	r3, [r1, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
   12caa:	3818      	subs	r0, #24
			if (thread->base.pended_on != NULL) {
   12cac:	b10b      	cbz	r3, 12cb2 <z_thread_timeout+0x2a>
				unpend_thread_no_timeout(thread);
   12cae:	f7ff ff7b 	bl	12ba8 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   12cb2:	f811 3c0b 	ldrb.w	r3, [r1, #-11]
   12cb6:	f023 0314 	bic.w	r3, r3, #20
   12cba:	f801 3c0b 	strb.w	r3, [r1, #-11]
			ready_thread(thread);
   12cbe:	f7fe fb57 	bl	11370 <ready_thread>
	__asm__ volatile(
   12cc2:	f384 8811 	msr	BASEPRI, r4
   12cc6:	f3bf 8f6f 	isb	sy
}
   12cca:	bd10      	pop	{r4, pc}

00012ccc <z_unpend1_no_timeout>:
{
   12ccc:	b510      	push	{r4, lr}
	__asm__ volatile(
   12cce:	f04f 0320 	mov.w	r3, #32
   12cd2:	f3ef 8411 	mrs	r4, BASEPRI
   12cd6:	f383 8811 	msr	BASEPRI, r3
   12cda:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
   12cde:	f7ff ff93 	bl	12c08 <z_priq_dumb_best>
		if (thread != NULL) {
   12ce2:	4601      	mov	r1, r0
   12ce4:	b108      	cbz	r0, 12cea <z_unpend1_no_timeout+0x1e>
			unpend_thread_no_timeout(thread);
   12ce6:	f7ff ff5f 	bl	12ba8 <unpend_thread_no_timeout>
	__asm__ volatile(
   12cea:	f384 8811 	msr	BASEPRI, r4
   12cee:	f3bf 8f6f 	isb	sy
}
   12cf2:	4608      	mov	r0, r1
   12cf4:	bd10      	pop	{r4, pc}

00012cf6 <z_unpend_first_thread>:
{
   12cf6:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   12cf8:	f04f 0320 	mov.w	r3, #32
   12cfc:	f3ef 8511 	mrs	r5, BASEPRI
   12d00:	f383 8811 	msr	BASEPRI, r3
   12d04:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
   12d08:	f7ff ff7e 	bl	12c08 <z_priq_dumb_best>
		if (thread != NULL) {
   12d0c:	4604      	mov	r4, r0
   12d0e:	b120      	cbz	r0, 12d1a <z_unpend_first_thread+0x24>
			unpend_thread_no_timeout(thread);
   12d10:	f7ff ff4a 	bl	12ba8 <unpend_thread_no_timeout>
   12d14:	3018      	adds	r0, #24
   12d16:	f000 f806 	bl	12d26 <z_abort_timeout>
	__asm__ volatile(
   12d1a:	f385 8811 	msr	BASEPRI, r5
   12d1e:	f3bf 8f6f 	isb	sy
}
   12d22:	4620      	mov	r0, r4
   12d24:	bd38      	pop	{r3, r4, r5, pc}

00012d26 <z_abort_timeout>:
{
   12d26:	b510      	push	{r4, lr}
	__asm__ volatile(
   12d28:	f04f 0220 	mov.w	r2, #32
   12d2c:	f3ef 8411 	mrs	r4, BASEPRI
   12d30:	f382 8811 	msr	BASEPRI, r2
   12d34:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
   12d38:	6803      	ldr	r3, [r0, #0]
   12d3a:	b13b      	cbz	r3, 12d4c <z_abort_timeout+0x26>
			remove_timeout(to);
   12d3c:	f7fe fd06 	bl	1174c <remove_timeout>
			ret = 0;
   12d40:	2000      	movs	r0, #0
	__asm__ volatile(
   12d42:	f384 8811 	msr	BASEPRI, r4
   12d46:	f3bf 8f6f 	isb	sy
}
   12d4a:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
   12d4c:	f06f 0015 	mvn.w	r0, #21
   12d50:	e7f7      	b.n	12d42 <z_abort_timeout+0x1c>

00012d52 <z_get_next_timeout_expiry>:
{
   12d52:	b510      	push	{r4, lr}
	__asm__ volatile(
   12d54:	f04f 0320 	mov.w	r3, #32
   12d58:	f3ef 8411 	mrs	r4, BASEPRI
   12d5c:	f383 8811 	msr	BASEPRI, r3
   12d60:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
   12d64:	f7fe fcca 	bl	116fc <next_timeout>
	__asm__ volatile(
   12d68:	f384 8811 	msr	BASEPRI, r4
   12d6c:	f3bf 8f6f 	isb	sy
}
   12d70:	bd10      	pop	{r4, pc}

00012d72 <z_set_timeout_expiry>:
{
   12d72:	b570      	push	{r4, r5, r6, lr}
   12d74:	4604      	mov	r4, r0
   12d76:	460d      	mov	r5, r1
	__asm__ volatile(
   12d78:	f04f 0320 	mov.w	r3, #32
   12d7c:	f3ef 8611 	mrs	r6, BASEPRI
   12d80:	f383 8811 	msr	BASEPRI, r3
   12d84:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
   12d88:	f7fe fcb8 	bl	116fc <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   12d8c:	2801      	cmp	r0, #1
   12d8e:	dd05      	ble.n	12d9c <z_set_timeout_expiry+0x2a>
   12d90:	42a0      	cmp	r0, r4
   12d92:	db03      	blt.n	12d9c <z_set_timeout_expiry+0x2a>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
   12d94:	4629      	mov	r1, r5
   12d96:	4620      	mov	r0, r4
   12d98:	f7fc f832 	bl	ee00 <sys_clock_set_timeout>
	__asm__ volatile(
   12d9c:	f386 8811 	msr	BASEPRI, r6
   12da0:	f3bf 8f6f 	isb	sy
}
   12da4:	bd70      	pop	{r4, r5, r6, pc}

00012da6 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   12da6:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   12da8:	f7fe fdc0 	bl	1192c <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   12dac:	bd08      	pop	{r3, pc}

00012dae <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   12dae:	b108      	cbz	r0, 12db4 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   12db0:	f7fc bdc2 	b.w	f938 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   12db4:	4770      	bx	lr

00012db6 <k_timer_init>:
	timer->status = 0U;
   12db6:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
   12db8:	e9c0 1208 	strd	r1, r2, [r0, #32]
	sys_dlist_init(&w->waitq);
   12dbc:	f100 0218 	add.w	r2, r0, #24
	list->tail = (sys_dnode_t *)list;
   12dc0:	e9c0 2206 	strd	r2, r2, [r0, #24]
	node->prev = NULL;
   12dc4:	e9c0 3300 	strd	r3, r3, [r0]
	timer->status = 0U;
   12dc8:	6303      	str	r3, [r0, #48]	; 0x30
	timer->user_data = NULL;
   12dca:	6343      	str	r3, [r0, #52]	; 0x34
}
   12dcc:	4770      	bx	lr

00012dce <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   12dce:	b510      	push	{r4, lr}
   12dd0:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	int inactive = z_abort_timeout(&timer->timeout) != 0;
   12dd2:	f7ff ffa8 	bl	12d26 <z_abort_timeout>

	if (inactive) {
   12dd6:	b9b0      	cbnz	r0, 12e06 <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
   12dd8:	6a63      	ldr	r3, [r4, #36]	; 0x24
   12dda:	b10b      	cbz	r3, 12de0 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   12ddc:	4620      	mov	r0, r4
   12dde:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
   12de0:	f104 0018 	add.w	r0, r4, #24
   12de4:	f7ff ff72 	bl	12ccc <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
   12de8:	b168      	cbz	r0, 12e06 <z_impl_k_timer_stop+0x38>
			z_ready_thread(pending_thread);
   12dea:	f7ff ff3d 	bl	12c68 <z_ready_thread>
	__asm__ volatile(
   12dee:	f04f 0320 	mov.w	r3, #32
   12df2:	f3ef 8011 	mrs	r0, BASEPRI
   12df6:	f383 8811 	msr	BASEPRI, r3
   12dfa:	f3bf 8f6f 	isb	sy
			z_reschedule_unlocked();
		}
	}
}
   12dfe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void) z_reschedule_irqlock(arch_irq_lock());
   12e02:	f7ff beeb 	b.w	12bdc <z_reschedule_irqlock>
   12e06:	bd10      	pop	{r4, pc}

00012e08 <z_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
   12e08:	f7fd ba3c 	b.w	10284 <SystemInit>
