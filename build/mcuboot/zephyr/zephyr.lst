
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
   0:	40 54 00 20 f1 1f 00 00 1d 4e 00 00 45 20 00 00     @T. .....N..E ..
  10:	45 20 00 00 45 20 00 00 45 20 00 00 00 00 00 00     E ..E ..E ......
	...
  2c:	25 1e 00 00 45 20 00 00 00 00 00 00 00 00 00 00     %...E ..........
  3c:	09 4e 00 00                                         .N..

00000040 <_irq_vector_table>:
  40:	c9 1f 00 00 c9 1f 00 00 c9 1f 00 00 c9 1f 00 00     ................
  50:	c9 1f 00 00 c9 1f 00 00 c9 1f 00 00 c9 1f 00 00     ................
  60:	c9 1f 00 00 c9 1f 00 00 c9 1f 00 00 c9 1f 00 00     ................
  70:	c9 1f 00 00 c9 1f 00 00 c9 1f 00 00 c9 1f 00 00     ................
  80:	c9 1f 00 00 c9 1f 00 00 c9 1f 00 00 c9 1f 00 00     ................
  90:	c9 1f 00 00 c9 1f 00 00 c9 1f 00 00 c9 1f 00 00     ................
  a0:	c9 1f 00 00 c9 1f 00 00 c9 1f 00 00 c9 1f 00 00     ................
  b0:	c9 1f 00 00 c9 1f 00 00 c9 1f 00 00 c9 1f 00 00     ................
  c0:	c9 1f 00 00 c9 1f 00 00 c9 1f 00 00 c9 1f 00 00     ................
  d0:	c9 1f 00 00 c9 1f 00 00 c9 1f 00 00                 ............

Disassembly of section text:

000000dc <__aeabi_uldivmod>:
      dc:	b953      	cbnz	r3, f4 <__aeabi_uldivmod+0x18>
      de:	b94a      	cbnz	r2, f4 <__aeabi_uldivmod+0x18>
      e0:	2900      	cmp	r1, #0
      e2:	bf08      	it	eq
      e4:	2800      	cmpeq	r0, #0
      e6:	bf1c      	itt	ne
      e8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
      ec:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
      f0:	f000 b974 	b.w	3dc <__aeabi_idiv0>
      f4:	f1ad 0c08 	sub.w	ip, sp, #8
      f8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
      fc:	f000 f806 	bl	10c <__udivmoddi4>
     100:	f8dd e004 	ldr.w	lr, [sp, #4]
     104:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     108:	b004      	add	sp, #16
     10a:	4770      	bx	lr

0000010c <__udivmoddi4>:
     10c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     110:	9e08      	ldr	r6, [sp, #32]
     112:	460d      	mov	r5, r1
     114:	4604      	mov	r4, r0
     116:	4688      	mov	r8, r1
     118:	2b00      	cmp	r3, #0
     11a:	d14d      	bne.n	1b8 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x6e>
     11c:	428a      	cmp	r2, r1
     11e:	4694      	mov	ip, r2
     120:	d968      	bls.n	1f4 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0xaa>
     122:	fab2 f282 	clz	r2, r2
     126:	b152      	cbz	r2, 13e <__udivmoddi4+0x32>
     128:	fa01 f302 	lsl.w	r3, r1, r2
     12c:	f1c2 0120 	rsb	r1, r2, #32
     130:	fa20 f101 	lsr.w	r1, r0, r1
     134:	fa0c fc02 	lsl.w	ip, ip, r2
     138:	ea41 0803 	orr.w	r8, r1, r3
     13c:	4094      	lsls	r4, r2
     13e:	ea4f 451c 	mov.w	r5, ip, lsr #16
     142:	0c21      	lsrs	r1, r4, #16
     144:	fbb8 fef5 	udiv	lr, r8, r5
     148:	fa1f f78c 	uxth.w	r7, ip
     14c:	fb05 831e 	mls	r3, r5, lr, r8
     150:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
     154:	fb0e f107 	mul.w	r1, lr, r7
     158:	4299      	cmp	r1, r3
     15a:	d90b      	bls.n	174 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x2a>
     15c:	eb1c 0303 	adds.w	r3, ip, r3
     160:	f10e 30ff 	add.w	r0, lr, #4294967295	; 0xffffffff
     164:	f080 811e 	bcs.w	3a4 <CONFIG_FLASH_SIZE+0x1a4>
     168:	4299      	cmp	r1, r3
     16a:	f240 811b 	bls.w	3a4 <CONFIG_FLASH_SIZE+0x1a4>
     16e:	f1ae 0e02 	sub.w	lr, lr, #2
     172:	4463      	add	r3, ip
     174:	1a5b      	subs	r3, r3, r1
     176:	b2a4      	uxth	r4, r4
     178:	fbb3 f0f5 	udiv	r0, r3, r5
     17c:	fb05 3310 	mls	r3, r5, r0, r3
     180:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     184:	fb00 f707 	mul.w	r7, r0, r7
     188:	42a7      	cmp	r7, r4
     18a:	d90a      	bls.n	1a2 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x58>
     18c:	eb1c 0404 	adds.w	r4, ip, r4
     190:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
     194:	f080 8108 	bcs.w	3a8 <CONFIG_FLASH_SIZE+0x1a8>
     198:	42a7      	cmp	r7, r4
     19a:	f240 8105 	bls.w	3a8 <CONFIG_FLASH_SIZE+0x1a8>
     19e:	4464      	add	r4, ip
     1a0:	3802      	subs	r0, #2
     1a2:	1be4      	subs	r4, r4, r7
     1a4:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     1a8:	2100      	movs	r1, #0
     1aa:	b11e      	cbz	r6, 1b4 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x6a>
     1ac:	40d4      	lsrs	r4, r2
     1ae:	2300      	movs	r3, #0
     1b0:	e9c6 4300 	strd	r4, r3, [r6]
     1b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     1b8:	428b      	cmp	r3, r1
     1ba:	d908      	bls.n	1ce <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x84>
     1bc:	2e00      	cmp	r6, #0
     1be:	f000 80ee 	beq.w	39e <CONFIG_FLASH_SIZE+0x19e>
     1c2:	2100      	movs	r1, #0
     1c4:	e9c6 0500 	strd	r0, r5, [r6]
     1c8:	4608      	mov	r0, r1
     1ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     1ce:	fab3 f183 	clz	r1, r3
     1d2:	2900      	cmp	r1, #0
     1d4:	d14a      	bne.n	26c <CONFIG_FLASH_SIZE+0x6c>
     1d6:	42ab      	cmp	r3, r5
     1d8:	d302      	bcc.n	1e0 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x96>
     1da:	4282      	cmp	r2, r0
     1dc:	f200 80f9 	bhi.w	3d2 <CONFIG_FLASH_SIZE+0x1d2>
     1e0:	1a84      	subs	r4, r0, r2
     1e2:	eb65 0303 	sbc.w	r3, r5, r3
     1e6:	2001      	movs	r0, #1
     1e8:	4698      	mov	r8, r3
     1ea:	2e00      	cmp	r6, #0
     1ec:	d0e2      	beq.n	1b4 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x6a>
     1ee:	e9c6 4800 	strd	r4, r8, [r6]
     1f2:	e7df      	b.n	1b4 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x6a>
     1f4:	b902      	cbnz	r2, 1f8 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0xae>
     1f6:	deff      	udf	#255	; 0xff
     1f8:	fab2 f282 	clz	r2, r2
     1fc:	2a00      	cmp	r2, #0
     1fe:	f040 8091 	bne.w	324 <CONFIG_FLASH_SIZE+0x124>
     202:	eba1 050c 	sub.w	r5, r1, ip
     206:	ea4f 471c 	mov.w	r7, ip, lsr #16
     20a:	fa1f fe8c 	uxth.w	lr, ip
     20e:	2101      	movs	r1, #1
     210:	fbb5 f3f7 	udiv	r3, r5, r7
     214:	fb07 5013 	mls	r0, r7, r3, r5
     218:	0c25      	lsrs	r5, r4, #16
     21a:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
     21e:	fb0e f003 	mul.w	r0, lr, r3
     222:	42a8      	cmp	r0, r5
     224:	d908      	bls.n	238 <CONFIG_FLASH_SIZE+0x38>
     226:	eb1c 0505 	adds.w	r5, ip, r5
     22a:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
     22e:	d202      	bcs.n	236 <CONFIG_FLASH_SIZE+0x36>
     230:	42a8      	cmp	r0, r5
     232:	f200 80cb 	bhi.w	3cc <CONFIG_FLASH_SIZE+0x1cc>
     236:	4643      	mov	r3, r8
     238:	1a2d      	subs	r5, r5, r0
     23a:	b2a4      	uxth	r4, r4
     23c:	fbb5 f0f7 	udiv	r0, r5, r7
     240:	fb07 5510 	mls	r5, r7, r0, r5
     244:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
     248:	fb0e fe00 	mul.w	lr, lr, r0
     24c:	45a6      	cmp	lr, r4
     24e:	d908      	bls.n	262 <CONFIG_FLASH_SIZE+0x62>
     250:	eb1c 0404 	adds.w	r4, ip, r4
     254:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
     258:	d202      	bcs.n	260 <CONFIG_FLASH_SIZE+0x60>
     25a:	45a6      	cmp	lr, r4
     25c:	f200 80bb 	bhi.w	3d6 <CONFIG_FLASH_SIZE+0x1d6>
     260:	4628      	mov	r0, r5
     262:	eba4 040e 	sub.w	r4, r4, lr
     266:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
     26a:	e79e      	b.n	1aa <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x60>
     26c:	f1c1 0720 	rsb	r7, r1, #32
     270:	408b      	lsls	r3, r1
     272:	fa22 fc07 	lsr.w	ip, r2, r7
     276:	ea4c 0c03 	orr.w	ip, ip, r3
     27a:	fa20 f407 	lsr.w	r4, r0, r7
     27e:	fa05 f301 	lsl.w	r3, r5, r1
     282:	431c      	orrs	r4, r3
     284:	40fd      	lsrs	r5, r7
     286:	ea4f 491c 	mov.w	r9, ip, lsr #16
     28a:	fa00 f301 	lsl.w	r3, r0, r1
     28e:	fbb5 f8f9 	udiv	r8, r5, r9
     292:	0c20      	lsrs	r0, r4, #16
     294:	fa1f fe8c 	uxth.w	lr, ip
     298:	fb09 5518 	mls	r5, r9, r8, r5
     29c:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
     2a0:	fb08 f00e 	mul.w	r0, r8, lr
     2a4:	42a8      	cmp	r0, r5
     2a6:	fa02 f201 	lsl.w	r2, r2, r1
     2aa:	d90b      	bls.n	2c4 <CONFIG_FLASH_SIZE+0xc4>
     2ac:	eb1c 0505 	adds.w	r5, ip, r5
     2b0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
     2b4:	f080 8088 	bcs.w	3c8 <CONFIG_FLASH_SIZE+0x1c8>
     2b8:	42a8      	cmp	r0, r5
     2ba:	f240 8085 	bls.w	3c8 <CONFIG_FLASH_SIZE+0x1c8>
     2be:	f1a8 0802 	sub.w	r8, r8, #2
     2c2:	4465      	add	r5, ip
     2c4:	1a2d      	subs	r5, r5, r0
     2c6:	b2a4      	uxth	r4, r4
     2c8:	fbb5 f0f9 	udiv	r0, r5, r9
     2cc:	fb09 5510 	mls	r5, r9, r0, r5
     2d0:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
     2d4:	fb00 fe0e 	mul.w	lr, r0, lr
     2d8:	45ae      	cmp	lr, r5
     2da:	d908      	bls.n	2ee <CONFIG_FLASH_SIZE+0xee>
     2dc:	eb1c 0505 	adds.w	r5, ip, r5
     2e0:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
     2e4:	d26c      	bcs.n	3c0 <CONFIG_FLASH_SIZE+0x1c0>
     2e6:	45ae      	cmp	lr, r5
     2e8:	d96a      	bls.n	3c0 <CONFIG_FLASH_SIZE+0x1c0>
     2ea:	3802      	subs	r0, #2
     2ec:	4465      	add	r5, ip
     2ee:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
     2f2:	fba0 9402 	umull	r9, r4, r0, r2
     2f6:	eba5 050e 	sub.w	r5, r5, lr
     2fa:	42a5      	cmp	r5, r4
     2fc:	46c8      	mov	r8, r9
     2fe:	46a6      	mov	lr, r4
     300:	d356      	bcc.n	3b0 <CONFIG_FLASH_SIZE+0x1b0>
     302:	d053      	beq.n	3ac <CONFIG_FLASH_SIZE+0x1ac>
     304:	b15e      	cbz	r6, 31e <CONFIG_FLASH_SIZE+0x11e>
     306:	ebb3 0208 	subs.w	r2, r3, r8
     30a:	eb65 050e 	sbc.w	r5, r5, lr
     30e:	fa05 f707 	lsl.w	r7, r5, r7
     312:	fa22 f301 	lsr.w	r3, r2, r1
     316:	40cd      	lsrs	r5, r1
     318:	431f      	orrs	r7, r3
     31a:	e9c6 7500 	strd	r7, r5, [r6]
     31e:	2100      	movs	r1, #0
     320:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     324:	f1c2 0320 	rsb	r3, r2, #32
     328:	fa20 f103 	lsr.w	r1, r0, r3
     32c:	fa0c fc02 	lsl.w	ip, ip, r2
     330:	fa25 f303 	lsr.w	r3, r5, r3
     334:	4095      	lsls	r5, r2
     336:	430d      	orrs	r5, r1
     338:	ea4f 471c 	mov.w	r7, ip, lsr #16
     33c:	fa1f fe8c 	uxth.w	lr, ip
     340:	fbb3 f1f7 	udiv	r1, r3, r7
     344:	fb07 3011 	mls	r0, r7, r1, r3
     348:	0c2b      	lsrs	r3, r5, #16
     34a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
     34e:	fb01 f00e 	mul.w	r0, r1, lr
     352:	4298      	cmp	r0, r3
     354:	fa04 f402 	lsl.w	r4, r4, r2
     358:	d908      	bls.n	36c <CONFIG_FLASH_SIZE+0x16c>
     35a:	eb1c 0303 	adds.w	r3, ip, r3
     35e:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
     362:	d22f      	bcs.n	3c4 <CONFIG_FLASH_SIZE+0x1c4>
     364:	4298      	cmp	r0, r3
     366:	d92d      	bls.n	3c4 <CONFIG_FLASH_SIZE+0x1c4>
     368:	3902      	subs	r1, #2
     36a:	4463      	add	r3, ip
     36c:	1a1b      	subs	r3, r3, r0
     36e:	b2ad      	uxth	r5, r5
     370:	fbb3 f0f7 	udiv	r0, r3, r7
     374:	fb07 3310 	mls	r3, r7, r0, r3
     378:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     37c:	fb00 f30e 	mul.w	r3, r0, lr
     380:	42ab      	cmp	r3, r5
     382:	d908      	bls.n	396 <CONFIG_FLASH_SIZE+0x196>
     384:	eb1c 0505 	adds.w	r5, ip, r5
     388:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
     38c:	d216      	bcs.n	3bc <CONFIG_FLASH_SIZE+0x1bc>
     38e:	42ab      	cmp	r3, r5
     390:	d914      	bls.n	3bc <CONFIG_FLASH_SIZE+0x1bc>
     392:	3802      	subs	r0, #2
     394:	4465      	add	r5, ip
     396:	1aed      	subs	r5, r5, r3
     398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
     39c:	e738      	b.n	210 <CONFIG_FLASH_SIZE+0x10>
     39e:	4631      	mov	r1, r6
     3a0:	4630      	mov	r0, r6
     3a2:	e707      	b.n	1b4 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x6a>
     3a4:	4686      	mov	lr, r0
     3a6:	e6e5      	b.n	174 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x2a>
     3a8:	4618      	mov	r0, r3
     3aa:	e6fa      	b.n	1a2 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x58>
     3ac:	454b      	cmp	r3, r9
     3ae:	d2a9      	bcs.n	304 <CONFIG_FLASH_SIZE+0x104>
     3b0:	ebb9 0802 	subs.w	r8, r9, r2
     3b4:	eb64 0e0c 	sbc.w	lr, r4, ip
     3b8:	3801      	subs	r0, #1
     3ba:	e7a3      	b.n	304 <CONFIG_FLASH_SIZE+0x104>
     3bc:	4640      	mov	r0, r8
     3be:	e7ea      	b.n	396 <CONFIG_FLASH_SIZE+0x196>
     3c0:	4620      	mov	r0, r4
     3c2:	e794      	b.n	2ee <CONFIG_FLASH_SIZE+0xee>
     3c4:	4641      	mov	r1, r8
     3c6:	e7d1      	b.n	36c <CONFIG_FLASH_SIZE+0x16c>
     3c8:	46d0      	mov	r8, sl
     3ca:	e77b      	b.n	2c4 <CONFIG_FLASH_SIZE+0xc4>
     3cc:	3b02      	subs	r3, #2
     3ce:	4465      	add	r5, ip
     3d0:	e732      	b.n	238 <CONFIG_FLASH_SIZE+0x38>
     3d2:	4608      	mov	r0, r1
     3d4:	e709      	b.n	1ea <CONFIG_NRF52_ANOMALY_132_DELAY_US+0xa0>
     3d6:	4464      	add	r4, ip
     3d8:	3802      	subs	r0, #2
     3da:	e742      	b.n	262 <CONFIG_FLASH_SIZE+0x62>

000003dc <__aeabi_idiv0>:
     3dc:	4770      	bx	lr
     3de:	bf00      	nop

000003e0 <main>:
    return detect_value == expected;
}
#endif

void main(void)
{
     3e0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
}

NRF_STATIC_INLINE void nrf_wdt_reload_request_set(NRF_WDT_Type *        p_reg,
                                                  nrf_wdt_rr_register_t rr_register)
{
    p_reg->RR[rr_register] = NRF_WDT_RR_VALUE;
     3e2:	4b31      	ldr	r3, [pc, #196]	; (4a8 <FIH_LABEL_FIH_CALL_END_262+0x7c>)
     3e4:	4a31      	ldr	r2, [pc, #196]	; (4ac <FIH_LABEL_FIH_CALL_END_262+0x80>)
     3e6:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
    fih_int fih_rc = FIH_FAILURE;

    MCUBOOT_WATCHDOG_FEED();

#if !defined(MCUBOOT_DIRECT_XIP)
    BOOT_LOG_INF("Starting bootloader");
     3ea:	4831      	ldr	r0, [pc, #196]	; (4b0 <FIH_LABEL_FIH_CALL_END_262+0x84>)
     3ec:	f8c3 2604 	str.w	r2, [r3, #1540]	; 0x604
     3f0:	2149      	movs	r1, #73	; 0x49
     3f2:	f8c3 2608 	str.w	r2, [r3, #1544]	; 0x608
     3f6:	f8c3 260c 	str.w	r2, [r3, #1548]	; 0x60c
     3fa:	f8c3 2610 	str.w	r2, [r3, #1552]	; 0x610
     3fe:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614
     402:	f8c3 2618 	str.w	r2, [r3, #1560]	; 0x618
     406:	f8c3 261c 	str.w	r2, [r3, #1564]	; 0x61c
     40a:	f004 fbad 	bl	4b68 <z_log_minimal_printk>
#ifdef CONFIG_MCUBOOT_INDICATION_LED
    /* LED init */
    led_init();
#endif

    os_heap_init();
     40e:	f000 f87d 	bl	50c <os_heap_init>
    ZEPHYR_BOOT_LOG_START();

    (void)rc;

#if (!defined(CONFIG_XTENSA) && defined(DT_CHOSEN_ZEPHYR_FLASH_CONTROLLER_LABEL))
    if (!flash_device_get_binding(DT_CHOSEN_ZEPHYR_FLASH_CONTROLLER_LABEL)) {
     412:	4828      	ldr	r0, [pc, #160]	; (4b4 <FIH_LABEL_FIH_CALL_END_262+0x88>)
     414:	f000 f85e 	bl	4d4 <flash_device_get_binding>
     418:	b928      	cbnz	r0, 426 <FIH_LABEL_FIH_CALL_START_249>
        BOOT_LOG_ERR("Flash device %s not found",
     41a:	4a26      	ldr	r2, [pc, #152]	; (4b4 <FIH_LABEL_FIH_CALL_END_262+0x88>)
     41c:	4826      	ldr	r0, [pc, #152]	; (4b8 <FIH_LABEL_FIH_CALL_END_262+0x8c>)
     41e:	2145      	movs	r1, #69	; 0x45
     420:	f004 fba2 	bl	4b68 <z_log_minimal_printk>
		     DT_CHOSEN_ZEPHYR_FLASH_CONTROLLER_LABEL);
        while (1)
     424:	e7fe      	b.n	424 <CONFIG_MPSL_SIGNAL_STACK_SIZE+0x24>

00000426 <FIH_LABEL_FIH_CALL_START_249>:
        wait_for_usb_dfu(K_MSEC(CONFIG_BOOT_USB_DFU_WAIT_DELAY_MS));
        BOOT_LOG_INF("USB DFU wait time elapsed");
    }
#endif

    FIH_CALL(boot_go, fih_rc, &rsp);
     426:	a801      	add	r0, sp, #4
     428:	f000 fcd0 	bl	dcc <boot_go>

0000042c <FIH_LABEL_FIH_CALL_END_262>:
    if (fih_not_eq(fih_rc, FIH_SUCCESS)) {
     42c:	4b23      	ldr	r3, [pc, #140]	; (4bc <FIH_LABEL_FIH_CALL_END_262+0x90>)
     42e:	681b      	ldr	r3, [r3, #0]
     430:	4283      	cmp	r3, r0
     432:	d004      	beq.n	43e <FIH_LABEL_FIH_CALL_END_262+0x12>
        BOOT_LOG_ERR("Unable to find bootable image");
     434:	4822      	ldr	r0, [pc, #136]	; (4c0 <FIH_LABEL_FIH_CALL_END_262+0x94>)
     436:	2145      	movs	r1, #69	; 0x45
     438:	f004 fb96 	bl	4b68 <z_log_minimal_printk>
        FIH_PANIC;
     43c:	e7fe      	b.n	43c <FIH_LABEL_FIH_CALL_END_262+0x10>
    }

    BOOT_LOG_INF("Bootloader chainload address offset: 0x%x",
     43e:	9a03      	ldr	r2, [sp, #12]
     440:	4820      	ldr	r0, [pc, #128]	; (4c4 <FIH_LABEL_FIH_CALL_END_262+0x98>)
     442:	2149      	movs	r1, #73	; 0x49
     444:	f004 fb90 	bl	4b68 <z_log_minimal_printk>
                 rsp.br_image_off);

#if defined(MCUBOOT_DIRECT_XIP)
    BOOT_LOG_INF("Jumping to the image slot");
#else
    BOOT_LOG_INF("Jumping to the first image slot");
     448:	481f      	ldr	r0, [pc, #124]	; (4c8 <FIH_LABEL_FIH_CALL_END_262+0x9c>)
     44a:	2149      	movs	r1, #73	; 0x49
     44c:	f004 fb8c 	bl	4b68 <z_log_minimal_printk>
/* There is only one instance of MCUBoot */
#define PROTECT_SIZE (PM_MCUBOOT_PRIMARY_ADDRESS - PM_MCUBOOT_ADDRESS)
#define PROTECT_ADDR PM_MCUBOOT_ADDRESS
#endif

    rc = fprotect_area(PROTECT_ADDR, PROTECT_SIZE);
     450:	f44f 4140 	mov.w	r1, #49152	; 0xc000
     454:	2000      	movs	r0, #0
     456:	f004 ff41 	bl	52dc <fprotect_area>

    if (rc != 0) {
     45a:	b120      	cbz	r0, 466 <FIH_LABEL_FIH_CALL_END_262+0x3a>
        BOOT_LOG_ERR("Protect mcuboot flash failed, cancel startup.");
     45c:	481b      	ldr	r0, [pc, #108]	; (4cc <FIH_LABEL_FIH_CALL_END_262+0xa0>)
     45e:	2145      	movs	r1, #69	; 0x45
     460:	f004 fb82 	bl	4b68 <z_log_minimal_printk>
        while (1)
     464:	e7fe      	b.n	464 <FIH_LABEL_FIH_CALL_END_262+0x38>
    rc = flash_device_base(rsp->br_flash_dev_id, &flash_base);
     466:	4669      	mov	r1, sp
     468:	f89d 0008 	ldrb.w	r0, [sp, #8]
     46c:	f000 f83e 	bl	4ec <flash_device_base>
    vt = (struct arm_vector_table *)(flash_base +
     470:	9b00      	ldr	r3, [sp, #0]
     472:	9c03      	ldr	r4, [sp, #12]
     474:	441c      	add	r4, r3
                                     rsp->br_hdr->ih_hdr_size);
     476:	9b01      	ldr	r3, [sp, #4]
     478:	891d      	ldrh	r5, [r3, #8]
    sys_clock_disable();
     47a:	f004 fcc6 	bl	4e0a <sys_clock_disable>
                                     rsp->br_image_off +
     47e:	1966      	adds	r6, r4, r5
    nrf_cleanup_peripheral();
     480:	f000 ff40 	bl	1304 <nrf_cleanup_peripheral>
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
     484:	f04f 0220 	mov.w	r2, #32
     488:	f3ef 8311 	mrs	r3, BASEPRI
     48c:	f382 8811 	msr	BASEPRI, r2
     490:	f3bf 8f6f 	isb	sy
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
     494:	5963      	ldr	r3, [r4, r5]
     496:	f383 8808 	msr	MSP, r3
    ((void (*)(void))vt->reset)();
     49a:	6873      	ldr	r3, [r6, #4]
     49c:	4798      	blx	r3

    ZEPHYR_BOOT_LOG_STOP();

    do_boot(&rsp);

    BOOT_LOG_ERR("Never should get here");
     49e:	480c      	ldr	r0, [pc, #48]	; (4d0 <FIH_LABEL_FIH_CALL_END_262+0xa4>)
     4a0:	2145      	movs	r1, #69	; 0x45
     4a2:	f004 fb61 	bl	4b68 <z_log_minimal_printk>
    while (1)
     4a6:	e7fe      	b.n	4a6 <FIH_LABEL_FIH_CALL_END_262+0x7a>
     4a8:	40010000 	.word	0x40010000
     4ac:	6e524635 	.word	0x6e524635
     4b0:	000071b8 	.word	0x000071b8
     4b4:	000071d1 	.word	0x000071d1
     4b8:	000071e4 	.word	0x000071e4
     4bc:	200000dc 	.word	0x200000dc
     4c0:	00007203 	.word	0x00007203
     4c4:	00007226 	.word	0x00007226
     4c8:	00007255 	.word	0x00007255
     4cc:	0000727a 	.word	0x0000727a
     4d0:	000072ad 	.word	0x000072ad

000004d4 <flash_device_get_binding>:
#endif

static const struct device *flash_dev;

const struct device *flash_device_get_binding(char *dev_name)
{
     4d4:	b510      	push	{r4, lr}
    if (!flash_dev) {
     4d6:	4c04      	ldr	r4, [pc, #16]	; (4e8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE>)
     4d8:	6823      	ldr	r3, [r4, #0]
     4da:	b913      	cbnz	r3, 4e2 <flash_device_get_binding+0xe>
		/* coverity[OVERRUN] */
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
     4dc:	f003 ff16 	bl	430c <z_impl_device_get_binding>
        flash_dev = device_get_binding(dev_name);
     4e0:	6020      	str	r0, [r4, #0]
    }
    return flash_dev;
}
     4e2:	6820      	ldr	r0, [r4, #0]
     4e4:	bd10      	pop	{r4, pc}
     4e6:	bf00      	nop
     4e8:	200000d8 	.word	0x200000d8

000004ec <flash_device_base>:

int flash_device_base(uint8_t fd_id, uintptr_t *ret)
{
     4ec:	b508      	push	{r3, lr}
    if (fd_id != FLASH_DEVICE_ID) {
     4ee:	4602      	mov	r2, r0
     4f0:	b138      	cbz	r0, 502 <flash_device_base+0x16>
        BOOT_LOG_ERR("invalid flash ID %d; expected %d",
     4f2:	4805      	ldr	r0, [pc, #20]	; (508 <flash_device_base+0x1c>)
     4f4:	2300      	movs	r3, #0
     4f6:	2145      	movs	r1, #69	; 0x45
     4f8:	f004 fb36 	bl	4b68 <z_log_minimal_printk>
                     fd_id, FLASH_DEVICE_ID);
        return -EINVAL;
     4fc:	f06f 0015 	mvn.w	r0, #21
    }
    *ret = FLASH_DEVICE_BASE;
    return 0;
}
     500:	bd08      	pop	{r3, pc}
    *ret = FLASH_DEVICE_BASE;
     502:	6008      	str	r0, [r1, #0]
    return 0;
     504:	e7fc      	b.n	500 <flash_device_base+0x14>
     506:	bf00      	nop
     508:	000072d0 	.word	0x000072d0

0000050c <os_heap_init>:
/*
 * Initialize mbedtls to be able to use the local heap.
 */
void os_heap_init(void)
{
    mbedtls_memory_buffer_alloc_init(mempool, sizeof(mempool));
     50c:	4802      	ldr	r0, [pc, #8]	; (518 <os_heap_init+0xc>)
     50e:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
     512:	f003 b9c5 	b.w	38a0 <mbedtls_memory_buffer_alloc_init>
     516:	bf00      	nop
     518:	20000f0c 	.word	0x20000f0c

0000051c <bootutil_img_validate>:
fih_int
bootutil_img_validate(struct enc_key_data *enc_state, int image_index,
                      struct image_header *hdr, const struct flash_area *fap,
                      uint8_t *tmp_buf, uint32_t tmp_buf_sz, uint8_t *seed,
                      int seed_len, uint8_t *out_hash)
{
     51c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     520:	b0f9      	sub	sp, #484	; 0x1e4
     522:	e9dd 4884 	ldrd	r4, r8, [sp, #528]	; 0x210
    uint32_t off;
    uint16_t len;
    uint16_t type;
    int sha256_valid = 0;
#ifdef EXPECTED_SIG_TLV
    fih_int valid_signature = FIH_FAILURE;
     526:	f8df a1e4 	ldr.w	sl, [pc, #484]	; 70c <FIH_LABEL_FIH_CALL_END_646+0x2c>
#if defined(MCUBOOT_USE_MBED_TLS)
typedef mbedtls_sha256_context bootutil_sha256_context;

static inline void bootutil_sha256_init(bootutil_sha256_context *ctx)
{
    mbedtls_sha256_init(ctx);
     52a:	a838      	add	r0, sp, #224	; 0xe0
     52c:	f8da 6000 	ldr.w	r6, [sl]
{
     530:	4617      	mov	r7, r2
     532:	461d      	mov	r5, r3
     534:	f006 faa6 	bl	6a84 <mbedtls_sha256_init>
    (void)mbedtls_sha256_starts_ret(ctx, 0);
     538:	2100      	movs	r1, #0
     53a:	a838      	add	r0, sp, #224	; 0xe0
     53c:	f003 fac0 	bl	3ac0 <mbedtls_sha256_starts_ret>
    if (seed && (seed_len > 0)) {
     540:	b13c      	cbz	r4, 552 <bootutil_img_validate+0x36>
     542:	f1b8 0f00 	cmp.w	r8, #0
     546:	dd04      	ble.n	552 <bootutil_img_validate+0x36>

static inline int bootutil_sha256_update(bootutil_sha256_context *ctx,
                                         const void *data,
                                         uint32_t data_len)
{
    return mbedtls_sha256_update_ret(ctx, data, data_len);
     548:	4642      	mov	r2, r8
     54a:	4621      	mov	r1, r4
     54c:	a838      	add	r0, sp, #224	; 0xe0
     54e:	f006 fa9d 	bl	6a8c <mbedtls_sha256_update_ret>
    size += hdr->ih_protect_tlv_size;
     552:	897b      	ldrh	r3, [r7, #10]
    size = hdr_size = hdr->ih_hdr_size;
     554:	f8b7 8008 	ldrh.w	r8, [r7, #8]
     558:	4498      	add	r8, r3
    size += hdr->ih_protect_tlv_size;
     55a:	68fb      	ldr	r3, [r7, #12]
    for (off = 0; off < size; off += blk_sz) {
     55c:	f04f 0900 	mov.w	r9, #0
    size += hdr->ih_protect_tlv_size;
     560:	4498      	add	r8, r3
    for (off = 0; off < size; off += blk_sz) {
     562:	45c8      	cmp	r8, r9
     564:	d84b      	bhi.n	5fe <FIH_LABEL_FIH_CALL_END_311+0x10>
}

static inline int bootutil_sha256_finish(bootutil_sha256_context *ctx,
                                          uint8_t *output)
{
    return mbedtls_sha256_finish_ret(ctx, output);
     566:	a90d      	add	r1, sp, #52	; 0x34
     568:	a838      	add	r0, sp, #224	; 0xe0
     56a:	f006 facc 	bl	6b06 <mbedtls_sha256_finish_ret>
            tmp_buf_sz, hash, seed, seed_len);
    if (rc) {
        goto out;
    }

    if (out_hash) {
     56e:	9b86      	ldr	r3, [sp, #536]	; 0x218
     570:	b123      	cbz	r3, 57c <bootutil_img_validate+0x60>
        memcpy(out_hash, hash, 32);
     572:	2220      	movs	r2, #32
     574:	a90d      	add	r1, sp, #52	; 0x34
     576:	4618      	mov	r0, r3
     578:	f004 fc85 	bl	4e86 <memcpy>
    }

    rc = bootutil_tlv_iter_begin(&it, hdr, fap, IMAGE_TLV_ANY, false);
     57c:	2300      	movs	r3, #0
     57e:	9300      	str	r3, [sp, #0]
     580:	462a      	mov	r2, r5
     582:	f64f 73ff 	movw	r3, #65535	; 0xffff
     586:	4639      	mov	r1, r7
     588:	a807      	add	r0, sp, #28
     58a:	f003 ffaf 	bl	44ec <bootutil_tlv_iter_begin>
    if (rc) {
     58e:	4604      	mov	r4, r0
     590:	2800      	cmp	r0, #0
     592:	f040 80b5 	bne.w	700 <FIH_LABEL_FIH_CALL_END_646+0x20>
             * can be multiple signatures, each preceded by a key.
             */
#endif /* !MCUBOOT_HW_KEY */
        } else if (type == EXPECTED_SIG_TLV) {
            /* Ignore this signature if it is out of bounds. */
            if (key_id < 0 || key_id >= bootutil_key_cnt) {
     596:	f8df 9178 	ldr.w	r9, [pc, #376]	; 710 <FIH_LABEL_FIH_CALL_END_646+0x30>
    int sha256_valid = 0;
     59a:	4680      	mov	r8, r0
    int key_id = -1;
     59c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
        rc = bootutil_tlv_iter_next(&it, &off, &len, &type);
     5a0:	f10d 0316 	add.w	r3, sp, #22
     5a4:	aa05      	add	r2, sp, #20
     5a6:	a906      	add	r1, sp, #24
     5a8:	a807      	add	r0, sp, #28
     5aa:	f003 ffeb 	bl	4584 <bootutil_tlv_iter_next>
        if (rc < 0) {
     5ae:	1e04      	subs	r4, r0, #0
     5b0:	f2c0 80a6 	blt.w	700 <FIH_LABEL_FIH_CALL_END_646+0x20>
        } else if (rc > 0) {
     5b4:	f040 8097 	bne.w	6e6 <FIH_LABEL_FIH_CALL_END_646+0x6>
        if (type == IMAGE_TLV_SHA256) {
     5b8:	f8bd b016 	ldrh.w	fp, [sp, #22]
     5bc:	f1bb 0f10 	cmp.w	fp, #16
     5c0:	d134      	bne.n	62c <FIH_LABEL_FIH_CALL_END_311+0x3e>
            if (len != sizeof(hash)) {
     5c2:	f8bd 8014 	ldrh.w	r8, [sp, #20]
     5c6:	f1b8 0f20 	cmp.w	r8, #32
     5ca:	f040 8097 	bne.w	6fc <FIH_LABEL_FIH_CALL_END_646+0x1c>
            rc = LOAD_IMAGE_DATA(hdr, fap, off, buf, sizeof(hash));
     5ce:	9906      	ldr	r1, [sp, #24]
     5d0:	4643      	mov	r3, r8
     5d2:	aa38      	add	r2, sp, #224	; 0xe0
     5d4:	4628      	mov	r0, r5
     5d6:	f004 faf5 	bl	4bc4 <flash_area_read>
            if (rc) {
     5da:	4604      	mov	r4, r0
     5dc:	2800      	cmp	r0, #0
     5de:	f040 808f 	bne.w	700 <FIH_LABEL_FIH_CALL_END_646+0x20>

000005e2 <FIH_LABEL_FIH_CALL_START_292>:
            FIH_CALL(boot_fih_memequal, fih_rc, hash, buf, sizeof(hash));
     5e2:	4642      	mov	r2, r8
     5e4:	a938      	add	r1, sp, #224	; 0xe0
     5e6:	a80d      	add	r0, sp, #52	; 0x34
     5e8:	f004 f817 	bl	461a <boot_fih_memequal>
     5ec:	4604      	mov	r4, r0

000005ee <FIH_LABEL_FIH_CALL_END_311>:
            if (fih_not_eq(fih_rc, FIH_SUCCESS)) {
     5ee:	4b49      	ldr	r3, [pc, #292]	; (714 <FIH_LABEL_FIH_CALL_END_646+0x34>)
     5f0:	681b      	ldr	r3, [r3, #0]
     5f2:	4283      	cmp	r3, r0
     5f4:	f040 8084 	bne.w	700 <FIH_LABEL_FIH_CALL_END_646+0x20>
            sha256_valid = 1;
     5f8:	f04f 0801 	mov.w	r8, #1
     5fc:	e7d0      	b.n	5a0 <bootutil_img_validate+0x84>
        blk_sz = size - off;
     5fe:	f8dd b20c 	ldr.w	fp, [sp, #524]	; 0x20c
        rc = flash_area_read(fap, off, tmp_buf, blk_sz);
     602:	9a82      	ldr	r2, [sp, #520]	; 0x208
        blk_sz = size - off;
     604:	eba8 0309 	sub.w	r3, r8, r9
        if (blk_sz > tmp_buf_sz) {
     608:	459b      	cmp	fp, r3
     60a:	bf28      	it	cs
     60c:	469b      	movcs	fp, r3
        rc = flash_area_read(fap, off, tmp_buf, blk_sz);
     60e:	465b      	mov	r3, fp
     610:	4649      	mov	r1, r9
     612:	4628      	mov	r0, r5
     614:	f004 fad6 	bl	4bc4 <flash_area_read>
        if (rc) {
     618:	4604      	mov	r4, r0
     61a:	2800      	cmp	r0, #0
     61c:	d170      	bne.n	700 <FIH_LABEL_FIH_CALL_END_646+0x20>
    return mbedtls_sha256_update_ret(ctx, data, data_len);
     61e:	9982      	ldr	r1, [sp, #520]	; 0x208
     620:	465a      	mov	r2, fp
     622:	a838      	add	r0, sp, #224	; 0xe0
     624:	f006 fa32 	bl	6a8c <mbedtls_sha256_update_ret>
    for (off = 0; off < size; off += blk_sz) {
     628:	44d9      	add	r9, fp
     62a:	e79a      	b.n	562 <bootutil_img_validate+0x46>
        } else if (type == IMAGE_TLV_KEYHASH) {
     62c:	f1bb 0f01 	cmp.w	fp, #1
     630:	d136      	bne.n	6a0 <FIH_LABEL_FIH_CALL_END_311+0xb2>
            if (len > 32) {
     632:	f8bd 3014 	ldrh.w	r3, [sp, #20]
     636:	2b20      	cmp	r3, #32
     638:	d860      	bhi.n	6fc <FIH_LABEL_FIH_CALL_END_646+0x1c>
            rc = LOAD_IMAGE_DATA(hdr, fap, off, buf, len);
     63a:	9906      	ldr	r1, [sp, #24]
     63c:	aa38      	add	r2, sp, #224	; 0xe0
     63e:	4628      	mov	r0, r5
     640:	f004 fac0 	bl	4bc4 <flash_area_read>
            if (rc) {
     644:	4604      	mov	r4, r0
     646:	2800      	cmp	r0, #0
     648:	d15a      	bne.n	700 <FIH_LABEL_FIH_CALL_END_646+0x20>
            key_id = bootutil_find_key(buf, len);
     64a:	f89d b014 	ldrb.w	fp, [sp, #20]
    if (keyhash_len > 32) {
     64e:	f1bb 0f20 	cmp.w	fp, #32
     652:	d903      	bls.n	65c <FIH_LABEL_FIH_CALL_END_311+0x6e>
        return -1;
     654:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
            key_id = bootutil_find_key(buf, len);
     658:	4627      	mov	r7, r4
     65a:	e7a1      	b.n	5a0 <bootutil_img_validate+0x84>
    for (i = 0; i < bootutil_key_cnt; i++) {
     65c:	f8d9 3000 	ldr.w	r3, [r9]
     660:	4f2d      	ldr	r7, [pc, #180]	; (718 <FIH_LABEL_FIH_CALL_END_646+0x38>)
     662:	9303      	str	r3, [sp, #12]
     664:	9b03      	ldr	r3, [sp, #12]
     666:	429c      	cmp	r4, r3
     668:	daf4      	bge.n	654 <FIH_LABEL_FIH_CALL_END_311+0x66>
    mbedtls_sha256_init(ctx);
     66a:	a81d      	add	r0, sp, #116	; 0x74
     66c:	f006 fa0a 	bl	6a84 <mbedtls_sha256_init>
    (void)mbedtls_sha256_starts_ret(ctx, 0);
     670:	2100      	movs	r1, #0
     672:	a81d      	add	r0, sp, #116	; 0x74
     674:	f003 fa24 	bl	3ac0 <mbedtls_sha256_starts_ret>
        bootutil_sha256_update(&sha256_ctx, key->key, *key->len);
     678:	687a      	ldr	r2, [r7, #4]
    return mbedtls_sha256_update_ret(ctx, data, data_len);
     67a:	f857 1b08 	ldr.w	r1, [r7], #8
     67e:	6812      	ldr	r2, [r2, #0]
     680:	a81d      	add	r0, sp, #116	; 0x74
     682:	f006 fa03 	bl	6a8c <mbedtls_sha256_update_ret>
    return mbedtls_sha256_finish_ret(ctx, output);
     686:	a915      	add	r1, sp, #84	; 0x54
     688:	a81d      	add	r0, sp, #116	; 0x74
     68a:	f006 fa3c 	bl	6b06 <mbedtls_sha256_finish_ret>
        if (!memcmp(hash, keyhash, keyhash_len)) {
     68e:	465a      	mov	r2, fp
     690:	a938      	add	r1, sp, #224	; 0xe0
     692:	a815      	add	r0, sp, #84	; 0x54
     694:	f004 fbe6 	bl	4e64 <memcmp>
     698:	2800      	cmp	r0, #0
     69a:	d0dd      	beq.n	658 <FIH_LABEL_FIH_CALL_END_311+0x6a>
    for (i = 0; i < bootutil_key_cnt; i++) {
     69c:	3401      	adds	r4, #1
     69e:	e7e1      	b.n	664 <FIH_LABEL_FIH_CALL_END_311+0x76>
        } else if (type == EXPECTED_SIG_TLV) {
     6a0:	f1bb 0f20 	cmp.w	fp, #32
     6a4:	f47f af7c 	bne.w	5a0 <bootutil_img_validate+0x84>
            if (key_id < 0 || key_id >= bootutil_key_cnt) {
     6a8:	2f00      	cmp	r7, #0
     6aa:	db19      	blt.n	6e0 <FIH_LABEL_FIH_CALL_END_646>
     6ac:	f8d9 3000 	ldr.w	r3, [r9]
     6b0:	42bb      	cmp	r3, r7
     6b2:	dd15      	ble.n	6e0 <FIH_LABEL_FIH_CALL_END_646>
                key_id = -1;
                continue;
            }
            if (!EXPECTED_SIG_LEN(len) || len > sizeof(buf)) {
     6b4:	f8bd 3014 	ldrh.w	r3, [sp, #20]
     6b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
     6bc:	d11e      	bne.n	6fc <FIH_LABEL_FIH_CALL_END_646+0x1c>
                rc = -1;
                goto out;
            }
            rc = LOAD_IMAGE_DATA(hdr, fap, off, buf, len);
     6be:	9906      	ldr	r1, [sp, #24]
     6c0:	aa38      	add	r2, sp, #224	; 0xe0
     6c2:	4628      	mov	r0, r5
     6c4:	f004 fa7e 	bl	4bc4 <flash_area_read>
            if (rc) {
     6c8:	4604      	mov	r4, r0
     6ca:	b9c8      	cbnz	r0, 700 <FIH_LABEL_FIH_CALL_END_646+0x20>

000006cc <FIH_LABEL_FIH_CALL_START_624>:
                goto out;
            }
            FIH_CALL(bootutil_verify_sig, valid_signature, hash, sizeof(hash),
     6cc:	b2ff      	uxtb	r7, r7
     6ce:	f8bd 3014 	ldrh.w	r3, [sp, #20]
     6d2:	9700      	str	r7, [sp, #0]
     6d4:	aa38      	add	r2, sp, #224	; 0xe0
     6d6:	4659      	mov	r1, fp
     6d8:	a80d      	add	r0, sp, #52	; 0x34
     6da:	f000 f81f 	bl	71c <bootutil_verify_sig>
     6de:	4606      	mov	r6, r0

000006e0 <FIH_LABEL_FIH_CALL_END_646>:
                key_id = -1;
     6e0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
     6e4:	e75c      	b.n	5a0 <bootutil_img_validate+0x84>
#endif /* MCUBOOT_HW_ROLLBACK_PROT */
        }
    }

    rc = !sha256_valid;
    if (rc) {
     6e6:	f1b8 0f00 	cmp.w	r8, #0
     6ea:	d00d      	beq.n	708 <FIH_LABEL_FIH_CALL_END_646+0x28>
        goto out;
    }
#ifdef EXPECTED_SIG_TLV
    fih_rc = fih_int_encode_zero_equality(fih_not_eq(valid_signature,
     6ec:	4b09      	ldr	r3, [pc, #36]	; (714 <FIH_LABEL_FIH_CALL_END_646+0x34>)
 * value that is not FIH_SUCCESS
 */
__attribute__((always_inline)) inline
fih_int fih_int_encode_zero_equality(int x)
{
    if (x) {
     6ee:	681b      	ldr	r3, [r3, #0]
     6f0:	42b3      	cmp	r3, r6
     6f2:	d001      	beq.n	6f8 <FIH_LABEL_FIH_CALL_END_646+0x18>
        return FIH_FAILURE;
     6f4:	f8da 6000 	ldr.w	r6, [sl]
                rc = -1;
     6f8:	4634      	mov	r4, r6
     6fa:	e001      	b.n	700 <FIH_LABEL_FIH_CALL_END_646+0x20>
     6fc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    if (rc) {
        fih_rc = fih_int_encode(rc);
    }

    FIH_RET(fih_rc);
}
     700:	4620      	mov	r0, r4
     702:	b079      	add	sp, #484	; 0x1e4
     704:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     708:	2401      	movs	r4, #1
    FIH_RET(fih_rc);
     70a:	e7f9      	b.n	700 <FIH_LABEL_FIH_CALL_END_646+0x20>
     70c:	20000000 	.word	0x20000000
     710:	00006ec8 	.word	0x00006ec8
     714:	200000dc 	.word	0x200000dc
     718:	00006ecc 	.word	0x00006ecc

0000071c <bootutil_verify_sig>:
}

fih_int
bootutil_verify_sig(uint8_t *hash, uint32_t hlen, uint8_t *sig, size_t slen,
  uint8_t key_id)
{
     71c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     720:	4691      	mov	r9, r2
     722:	f5ad 7d4b 	sub.w	sp, sp, #812	; 0x32c
    int rc;
    fih_int fih_rc = FIH_FAILURE;
    uint8_t *cp;
    uint8_t *end;

    mbedtls_rsa_init(&ctx, 0, 0);
     726:	2200      	movs	r2, #0
{
     728:	4698      	mov	r8, r3
    fih_int fih_rc = FIH_FAILURE;
     72a:	4b6b      	ldr	r3, [pc, #428]	; (8d8 <FIH_LABEL_FIH_CALL_END_674+0x4>)
{
     72c:	f89d 6350 	ldrb.w	r6, [sp, #848]	; 0x350
    fih_int fih_rc = FIH_FAILURE;
     730:	681d      	ldr	r5, [r3, #0]
{
     732:	4607      	mov	r7, r0
     734:	468a      	mov	sl, r1
    mbedtls_rsa_init(&ctx, 0, 0);
     736:	a827      	add	r0, sp, #156	; 0x9c
     738:	4611      	mov	r1, r2
     73a:	f006 f95f 	bl	69fc <mbedtls_rsa_init>

    cp = (uint8_t *)bootutil_keys[key_id].key;
     73e:	4b67      	ldr	r3, [pc, #412]	; (8dc <FIH_LABEL_FIH_CALL_END_674+0x8>)
     740:	f853 4036 	ldr.w	r4, [r3, r6, lsl #3]
     744:	9402      	str	r4, [sp, #8]
    end = cp + *bootutil_keys[key_id].len;
     746:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
    if ((rc = mbedtls_asn1_get_tag(p, end, &len,
     74a:	aa8a      	add	r2, sp, #552	; 0x228
    end = cp + *bootutil_keys[key_id].len;
     74c:	685b      	ldr	r3, [r3, #4]
     74e:	6819      	ldr	r1, [r3, #0]
     750:	440c      	add	r4, r1
    if ((rc = mbedtls_asn1_get_tag(p, end, &len,
     752:	2330      	movs	r3, #48	; 0x30
     754:	4621      	mov	r1, r4
     756:	a802      	add	r0, sp, #8
     758:	f004 ff1e 	bl	5598 <mbedtls_asn1_get_tag>
     75c:	bb68      	cbnz	r0, 7ba <bootutil_verify_sig+0x9e>
    if (*p + len != end) {
     75e:	9b02      	ldr	r3, [sp, #8]
     760:	9a8a      	ldr	r2, [sp, #552]	; 0x228
     762:	4413      	add	r3, r2
     764:	429c      	cmp	r4, r3
     766:	d128      	bne.n	7ba <bootutil_verify_sig+0x9e>
    if ((rc = mbedtls_asn1_get_mpi(p, end, &ctx->N)) != 0 ||
     768:	aa29      	add	r2, sp, #164	; 0xa4
     76a:	4621      	mov	r1, r4
     76c:	a802      	add	r0, sp, #8
     76e:	f004 ff27 	bl	55c0 <mbedtls_asn1_get_mpi>
     772:	bb10      	cbnz	r0, 7ba <bootutil_verify_sig+0x9e>
      (rc = mbedtls_asn1_get_mpi(p, end, &ctx->E)) != 0) {
     774:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
     778:	465a      	mov	r2, fp
     77a:	4621      	mov	r1, r4
     77c:	a802      	add	r0, sp, #8
     77e:	f004 ff1f 	bl	55c0 <mbedtls_asn1_get_mpi>
    if ((rc = mbedtls_asn1_get_mpi(p, end, &ctx->N)) != 0 ||
     782:	4606      	mov	r6, r0
     784:	b9c8      	cbnz	r0, 7ba <bootutil_verify_sig+0x9e>
    ctx->len = mbedtls_mpi_size(&ctx->N);
     786:	a829      	add	r0, sp, #164	; 0xa4
     788:	f005 fa2a 	bl	5be0 <mbedtls_mpi_size>
    if (*p != end) {
     78c:	9b02      	ldr	r3, [sp, #8]
    ctx->len = mbedtls_mpi_size(&ctx->N);
     78e:	9028      	str	r0, [sp, #160]	; 0xa0
    if (*p != end) {
     790:	429c      	cmp	r4, r3
     792:	d112      	bne.n	7ba <bootutil_verify_sig+0x9e>
    rc = mbedtls_rsa_import(ctx, &ctx->N, NULL, NULL, NULL, &ctx->E);
     794:	e9cd 6b00 	strd	r6, fp, [sp]
     798:	4633      	mov	r3, r6
     79a:	4632      	mov	r2, r6
     79c:	a929      	add	r1, sp, #164	; 0xa4
     79e:	a827      	add	r0, sp, #156	; 0x9c
     7a0:	f006 f8e8 	bl	6974 <mbedtls_rsa_import>
    if (rc != 0) {
     7a4:	b948      	cbnz	r0, 7ba <bootutil_verify_sig+0x9e>
    rc = mbedtls_rsa_check_pubkey(ctx);
     7a6:	a827      	add	r0, sp, #156	; 0x9c
     7a8:	f003 f928 	bl	39fc <mbedtls_rsa_check_pubkey>
    if (rc != 0) {
     7ac:	b928      	cbnz	r0, 7ba <bootutil_verify_sig+0x9e>
    ctx->len = mbedtls_mpi_size(&ctx->N);
     7ae:	a829      	add	r0, sp, #164	; 0xa4
     7b0:	f005 fa16 	bl	5be0 <mbedtls_mpi_size>

    rc = bootutil_parse_rsakey(&ctx, &cp, end);
    if (rc || slen != ctx.len) {
     7b4:	4580      	cmp	r8, r0
    ctx->len = mbedtls_mpi_size(&ctx->N);
     7b6:	9028      	str	r0, [sp, #160]	; 0xa0
    if (rc || slen != ctx.len) {
     7b8:	d00a      	beq.n	7d0 <FIH_LABEL_FIH_CALL_START_228>
        mbedtls_rsa_free(&ctx);
     7ba:	a827      	add	r0, sp, #156	; 0x9c
     7bc:	f006 f929 	bl	6a12 <mbedtls_rsa_free>
        goto out;
    }
    FIH_CALL(bootutil_cmp_rsasig, fih_rc, &ctx, hash, hlen, sig);

out:
    mbedtls_rsa_free(&ctx);
     7c0:	a827      	add	r0, sp, #156	; 0x9c
     7c2:	f006 f926 	bl	6a12 <mbedtls_rsa_free>

    FIH_RET(fih_rc);
}
     7c6:	4628      	mov	r0, r5
     7c8:	f50d 7d4b 	add.w	sp, sp, #812	; 0x32c
     7cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000007d0 <FIH_LABEL_FIH_CALL_START_228>:
    if (ctx->len != PSS_EMLEN || PSS_EMLEN > MBEDTLS_MPI_MAX_SIZE) {
     7d0:	f5b8 7f80 	cmp.w	r8, #256	; 0x100
     7d4:	d002      	beq.n	7dc <FIH_LABEL_FIH_CALL_END_289+0x2>
     7d6:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff

000007da <FIH_LABEL_FIH_CALL_END_289>:
    FIH_CALL(bootutil_cmp_rsasig, fih_rc, &ctx, hash, hlen, sig);
     7da:	e7f1      	b.n	7c0 <bootutil_verify_sig+0xa4>
    if (hlen != PSS_HLEN) {
     7dc:	f1ba 0f20 	cmp.w	sl, #32
     7e0:	d1f9      	bne.n	7d6 <FIH_LABEL_FIH_CALL_START_228+0x6>
    if (mbedtls_rsa_public(ctx, sig, em)) {
     7e2:	aa8a      	add	r2, sp, #552	; 0x228
     7e4:	4649      	mov	r1, r9
     7e6:	a827      	add	r0, sp, #156	; 0x9c
     7e8:	f003 f92c 	bl	3a44 <mbedtls_rsa_public>
     7ec:	4604      	mov	r4, r0
     7ee:	2800      	cmp	r0, #0
     7f0:	d1f1      	bne.n	7d6 <FIH_LABEL_FIH_CALL_START_228+0x6>
    if (em[PSS_EMLEN - 1] != 0xbc) {
     7f2:	f89d 3327 	ldrb.w	r3, [sp, #807]	; 0x327
     7f6:	2bbc      	cmp	r3, #188	; 0xbc
     7f8:	d1ed      	bne.n	7d6 <FIH_LABEL_FIH_CALL_START_228+0x6>
    uint8_t counter[4] = { 0, 0, 0, 0 };
     7fa:	f50d 78a4 	add.w	r8, sp, #328	; 0x148
     7fe:	9003      	str	r0, [sp, #12]
    int count = PSS_MASK_LEN;
     800:	26df      	movs	r6, #223	; 0xdf
     802:	4645      	mov	r5, r8
    mbedtls_sha256_init(ctx);
     804:	a80c      	add	r0, sp, #48	; 0x30
     806:	f006 f93d 	bl	6a84 <mbedtls_sha256_init>
    (void)mbedtls_sha256_starts_ret(ctx, 0);
     80a:	2100      	movs	r1, #0
     80c:	a80c      	add	r0, sp, #48	; 0x30
     80e:	f003 f957 	bl	3ac0 <mbedtls_sha256_starts_ret>
    return mbedtls_sha256_update_ret(ctx, data, data_len);
     812:	2220      	movs	r2, #32
     814:	f20d 3107 	addw	r1, sp, #775	; 0x307
     818:	a80c      	add	r0, sp, #48	; 0x30
     81a:	f006 f937 	bl	6a8c <mbedtls_sha256_update_ret>
     81e:	2204      	movs	r2, #4
     820:	a903      	add	r1, sp, #12
     822:	a80c      	add	r0, sp, #48	; 0x30
     824:	f006 f932 	bl	6a8c <mbedtls_sha256_update_ret>
    return mbedtls_sha256_finish_ret(ctx, output);
     828:	a904      	add	r1, sp, #16
     82a:	a80c      	add	r0, sp, #48	; 0x30
     82c:	f006 f96b 	bl	6b06 <mbedtls_sha256_finish_ret>
        if (bytes > count)
     830:	2e1f      	cmp	r6, #31
        counter[3]++;
     832:	f89d 300f 	ldrb.w	r3, [sp, #15]
        if (bytes > count)
     836:	bfd4      	ite	le
     838:	46b1      	movle	r9, r6
     83a:	f04f 0920 	movgt.w	r9, #32
        counter[3]++;
     83e:	3301      	adds	r3, #1
        memcpy(mask, htmp, bytes);
     840:	4640      	mov	r0, r8
     842:	464a      	mov	r2, r9
     844:	a904      	add	r1, sp, #16
        count -= bytes;
     846:	eba6 0609 	sub.w	r6, r6, r9
        counter[3]++;
     84a:	f88d 300f 	strb.w	r3, [sp, #15]
        memcpy(mask, htmp, bytes);
     84e:	f004 fb1a 	bl	4e86 <memcpy>
    while (count > 0) {
     852:	2e00      	cmp	r6, #0
        mask += bytes;
     854:	44c8      	add	r8, r9
    while (count > 0) {
     856:	dcd5      	bgt.n	804 <CONFIG_BOOT_SIGNATURE_TYPE_RSA_LEN+0x4>
    for (i = 0; i < PSS_MASK_LEN; i++) {
     858:	4628      	mov	r0, r5
     85a:	ae8a      	add	r6, sp, #552	; 0x228
     85c:	462a      	mov	r2, r5
     85e:	23df      	movs	r3, #223	; 0xdf
        db_mask[i] ^= em[i];
     860:	7811      	ldrb	r1, [r2, #0]
     862:	f816 cb01 	ldrb.w	ip, [r6], #1
    for (i = 0; i < PSS_MASK_LEN; i++) {
     866:	3b01      	subs	r3, #1
        db_mask[i] ^= em[i];
     868:	ea81 010c 	eor.w	r1, r1, ip
     86c:	f802 1b01 	strb.w	r1, [r2], #1
    for (i = 0; i < PSS_MASK_LEN; i++) {
     870:	d1f6      	bne.n	860 <CONFIG_BOOT_SIGNATURE_TYPE_RSA_LEN+0x60>
    db_mask[0] &= 0x7F;
     872:	782b      	ldrb	r3, [r5, #0]
     874:	f003 037f 	and.w	r3, r3, #127	; 0x7f
     878:	702b      	strb	r3, [r5, #0]
        if (db_mask[i] != 0) {
     87a:	f810 6b01 	ldrb.w	r6, [r0], #1
     87e:	2e00      	cmp	r6, #0
     880:	d1a9      	bne.n	7d6 <FIH_LABEL_FIH_CALL_START_228+0x6>
    for (i = 0; i < PSS_MASK_ZERO_COUNT; i++) {
     882:	3401      	adds	r4, #1
     884:	2cbe      	cmp	r4, #190	; 0xbe
     886:	d1f8      	bne.n	87a <CONFIG_BOOT_SIGNATURE_TYPE_RSA_LEN+0x7a>
    if (db_mask[PSS_MASK_ONE_POS] != 1) {
     888:	f895 30be 	ldrb.w	r3, [r5, #190]	; 0xbe
     88c:	2b01      	cmp	r3, #1
     88e:	d1a2      	bne.n	7d6 <FIH_LABEL_FIH_CALL_START_228+0x6>
    mbedtls_sha256_init(ctx);
     890:	a80c      	add	r0, sp, #48	; 0x30
     892:	f006 f8f7 	bl	6a84 <mbedtls_sha256_init>
    (void)mbedtls_sha256_starts_ret(ctx, 0);
     896:	4631      	mov	r1, r6
     898:	a80c      	add	r0, sp, #48	; 0x30
     89a:	f003 f911 	bl	3ac0 <mbedtls_sha256_starts_ret>
    return mbedtls_sha256_update_ret(ctx, data, data_len);
     89e:	4910      	ldr	r1, [pc, #64]	; (8e0 <FIH_LABEL_FIH_CALL_END_674+0xc>)
     8a0:	2208      	movs	r2, #8
     8a2:	a80c      	add	r0, sp, #48	; 0x30
     8a4:	f006 f8f2 	bl	6a8c <mbedtls_sha256_update_ret>
     8a8:	4639      	mov	r1, r7
     8aa:	2220      	movs	r2, #32
     8ac:	a80c      	add	r0, sp, #48	; 0x30
     8ae:	f006 f8ed 	bl	6a8c <mbedtls_sha256_update_ret>
     8b2:	2220      	movs	r2, #32
     8b4:	f20d 2107 	addw	r1, sp, #519	; 0x207
     8b8:	a80c      	add	r0, sp, #48	; 0x30
     8ba:	f006 f8e7 	bl	6a8c <mbedtls_sha256_update_ret>
    return mbedtls_sha256_finish_ret(ctx, output);
     8be:	a904      	add	r1, sp, #16
     8c0:	a80c      	add	r0, sp, #48	; 0x30
     8c2:	f006 f920 	bl	6b06 <mbedtls_sha256_finish_ret>

000008c6 <FIH_LABEL_FIH_CALL_START_653>:
    FIH_CALL(boot_fih_memequal, fih_rc, h2, &em[PSS_HASH_OFFSET], PSS_HLEN);
     8c6:	2220      	movs	r2, #32
     8c8:	f20d 3107 	addw	r1, sp, #775	; 0x307
     8cc:	a804      	add	r0, sp, #16
     8ce:	f003 fea4 	bl	461a <boot_fih_memequal>
     8d2:	4605      	mov	r5, r0

000008d4 <FIH_LABEL_FIH_CALL_END_674>:
    if (rc) {
     8d4:	e781      	b.n	7da <FIH_LABEL_FIH_CALL_END_289>
     8d6:	bf00      	nop
     8d8:	20000000 	.word	0x20000000
     8dc:	00006ecc 	.word	0x00006ecc
     8e0:	000072f6 	.word	0x000072f6

000008e4 <boot_read_swap_size>:
    return -1;
}

int
boot_read_swap_size(int image_index, uint32_t *swap_size)
{
     8e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     8e8:	b086      	sub	sp, #24
    uint8_t areas[2] = {
     8ea:	2302      	movs	r3, #2
        if (memcmp(magic, boot_img_magic, BOOT_MAGIC_SZ) == 0) {
     8ec:	f8df 8070 	ldr.w	r8, [pc, #112]	; 960 <boot_read_swap_size+0x7c>
    uint8_t areas[2] = {
     8f0:	f8ad 3000 	strh.w	r3, [sp]
{
     8f4:	460d      	mov	r5, r1
     8f6:	466f      	mov	r7, sp
    for (i = 0; i < sizeof(areas) / sizeof(areas[0]); i++) {
     8f8:	2600      	movs	r6, #0
        rc = flash_area_open(areas[i], fap);
     8fa:	f817 0b01 	ldrb.w	r0, [r7], #1
     8fe:	a901      	add	r1, sp, #4
     900:	f001 f86e 	bl	19e0 <flash_area_open>
        if (rc != 0) {
     904:	4604      	mov	r4, r0
     906:	b9d8      	cbnz	r0, 940 <boot_read_swap_size+0x5c>
        off = boot_magic_off(*fap);
     908:	9801      	ldr	r0, [sp, #4]
    return fap->fa_size - BOOT_MAGIC_SZ;
     90a:	6881      	ldr	r1, [r0, #8]
        rc = flash_area_read(*fap, off, magic, BOOT_MAGIC_SZ);
     90c:	2310      	movs	r3, #16
     90e:	aa02      	add	r2, sp, #8
     910:	3910      	subs	r1, #16
     912:	f004 f957 	bl	4bc4 <flash_area_read>
        if (rc != 0) {
     916:	4604      	mov	r4, r0
     918:	b128      	cbz	r0, 926 <boot_read_swap_size+0x42>

    rc = boot_find_status(image_index, &fap);
    if (rc == 0) {
        off = boot_swap_size_off(fap);
        rc = flash_area_read(fap, off, swap_size, sizeof *swap_size);
        flash_area_close(fap);
     91a:	9801      	ldr	r0, [sp, #4]
     91c:	f004 f951 	bl	4bc2 <flash_area_close>
     920:	e00e      	b.n	940 <boot_read_swap_size+0x5c>
     922:	2601      	movs	r6, #1
     924:	e7e9      	b.n	8fa <boot_read_swap_size+0x16>
        if (memcmp(magic, boot_img_magic, BOOT_MAGIC_SZ) == 0) {
     926:	2210      	movs	r2, #16
     928:	4641      	mov	r1, r8
     92a:	a802      	add	r0, sp, #8
     92c:	f004 fa9a 	bl	4e64 <memcmp>
     930:	b150      	cbz	r0, 948 <boot_read_swap_size+0x64>
        flash_area_close(*fap);
     932:	9801      	ldr	r0, [sp, #4]
     934:	f004 f945 	bl	4bc2 <flash_area_close>
    for (i = 0; i < sizeof(areas) / sizeof(areas[0]); i++) {
     938:	2e00      	cmp	r6, #0
     93a:	d0f2      	beq.n	922 <boot_read_swap_size+0x3e>
    return -1;
     93c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    }

    return rc;
}
     940:	4620      	mov	r0, r4
     942:	b006      	add	sp, #24
     944:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return boot_swap_info_off(fap) - BOOT_MAX_ALIGN;
     948:	9801      	ldr	r0, [sp, #4]
     94a:	f004 fd1b 	bl	5384 <boot_swap_info_off>
        rc = flash_area_read(fap, off, swap_size, sizeof *swap_size);
     94e:	2304      	movs	r3, #4
     950:	f1a0 0108 	sub.w	r1, r0, #8
     954:	462a      	mov	r2, r5
     956:	9801      	ldr	r0, [sp, #4]
     958:	f004 f934 	bl	4bc4 <flash_area_read>
     95c:	4604      	mov	r4, r0
     95e:	e7dc      	b.n	91a <boot_read_swap_size+0x36>
     960:	00007080 	.word	0x00007080

00000964 <boot_validate_slot.isra.0>:
 *         FIH_SUCCESS                      if image was successfully validated
 *         1 (or its fih_int encoded form)  if no bootloable image was found
 *         FIH_FAILURE                      on any errors
 */
static fih_int
boot_validate_slot(struct boot_loader_state *state, int slot,
     964:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
                   struct boot_status *bs)
{
    const struct flash_area *fap;
    struct image_header *hdr;
    int area_id;
    fih_int fih_rc = FIH_FAILURE;
     968:	4b38      	ldr	r3, [pc, #224]	; (a4c <FIH_LABEL_FIH_CALL_END_291+0x80>)
boot_validate_slot(struct boot_loader_state *state, int slot,
     96a:	b088      	sub	sp, #32
     96c:	4606      	mov	r6, r0
    int rc;

    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
     96e:	2000      	movs	r0, #0
boot_validate_slot(struct boot_loader_state *state, int slot,
     970:	460d      	mov	r5, r1
    fih_int fih_rc = FIH_FAILURE;
     972:	681c      	ldr	r4, [r3, #0]
    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
     974:	f003 fdb1 	bl	44da <flash_area_id_from_multi_image_slot>
    rc = flash_area_open(area_id, &fap);
     978:	a906      	add	r1, sp, #24
     97a:	b2c0      	uxtb	r0, r0
     97c:	f001 f830 	bl	19e0 <flash_area_open>
    if (rc != 0) {
     980:	2800      	cmp	r0, #0
     982:	d157      	bne.n	a34 <FIH_LABEL_FIH_CALL_END_291+0x68>
    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
     984:	4629      	mov	r1, r5
     986:	f003 fda8 	bl	44da <flash_area_id_from_multi_image_slot>
     ((swap_type) == BOOT_SWAP_TYPE_PERM))

static inline struct image_header*
boot_img_hdr(struct boot_loader_state *state, size_t slot)
{
    return &BOOT_IMG(state, slot).hdr;
     98a:	242c      	movs	r4, #44	; 0x2c
    rc = flash_area_open(area_id, &fap);
     98c:	a907      	add	r1, sp, #28
     98e:	b2c0      	uxtb	r0, r0
     990:	fb04 6405 	mla	r4, r4, r5, r6
     994:	f001 f824 	bl	19e0 <flash_area_open>
    if (rc != 0) {
     998:	2800      	cmp	r0, #0
     99a:	d036      	beq.n	a0a <FIH_LABEL_FIH_CALL_END_291+0x3e>
        FIH_RET(fih_rc);
    }

    hdr = boot_img_hdr(state, slot);
    if (boot_check_header_erased(state, slot) == 0 ||
        (hdr->ih_flags & IMAGE_F_NON_BOOTABLE)) {
     99c:	f04f 082c 	mov.w	r8, #44	; 0x2c
     9a0:	fb08 f805 	mul.w	r8, r8, r5
     9a4:	eb06 0708 	add.w	r7, r6, r8
     9a8:	6939      	ldr	r1, [r7, #16]
    if (boot_check_header_erased(state, slot) == 0 ||
     9aa:	f011 0110 	ands.w	r1, r1, #16
     9ae:	d137      	bne.n	a20 <FIH_LABEL_FIH_CALL_END_291+0x54>

000009b0 <FIH_LABEL_FIH_CALL_START_235>:
    FIH_CALL(bootutil_img_validate, fih_rc, BOOT_CURR_ENC(state), image_index,
     9b0:	f44f 7380 	mov.w	r3, #256	; 0x100
     9b4:	9301      	str	r3, [sp, #4]
     9b6:	4b26      	ldr	r3, [pc, #152]	; (a50 <FIH_LABEL_FIH_CALL_END_291+0x84>)
     9b8:	9300      	str	r3, [sp, #0]
     9ba:	4622      	mov	r2, r4
     9bc:	e9cd 1103 	strd	r1, r1, [sp, #12]
     9c0:	9b06      	ldr	r3, [sp, #24]
     9c2:	9102      	str	r1, [sp, #8]
     9c4:	4608      	mov	r0, r1
     9c6:	f7ff fda9 	bl	51c <bootutil_img_validate>
     9ca:	4604      	mov	r4, r0

000009cc <FIH_LABEL_FIH_CALL_END_291>:
    if (hdr->ih_magic != IMAGE_MAGIC) {
     9cc:	4b21      	ldr	r3, [pc, #132]	; (a54 <FIH_LABEL_FIH_CALL_END_291+0x88>)
     9ce:	f856 2008 	ldr.w	r2, [r6, r8]
                       fih_rc, BOOT_CURR_IMG(state), slot);
    if (fih_eq(fih_rc, BOOT_HOOK_REGULAR))
    {
        FIH_CALL(boot_image_check, fih_rc, state, hdr, fap, bs);
    }
    if (!boot_is_header_valid(hdr, fap) || fih_not_eq(fih_rc, FIH_SUCCESS)) {
     9d2:	9806      	ldr	r0, [sp, #24]
    if (hdr->ih_magic != IMAGE_MAGIC) {
     9d4:	429a      	cmp	r2, r3
     9d6:	d10c      	bne.n	9f2 <FIH_LABEL_FIH_CALL_END_291+0x26>
    if (!boot_u32_safe_add(&size, hdr->ih_img_size, hdr->ih_hdr_size)) {
     9d8:	893a      	ldrh	r2, [r7, #8]
     9da:	68fb      	ldr	r3, [r7, #12]
    if (a > UINT32_MAX - b) {
     9dc:	43d1      	mvns	r1, r2
     9de:	428b      	cmp	r3, r1
     9e0:	d807      	bhi.n	9f2 <FIH_LABEL_FIH_CALL_END_291+0x26>
        *dest = a + b;
     9e2:	4413      	add	r3, r2
    if (size >= fap->fa_size) {
     9e4:	6882      	ldr	r2, [r0, #8]
     9e6:	4293      	cmp	r3, r2
     9e8:	d203      	bcs.n	9f2 <FIH_LABEL_FIH_CALL_END_291+0x26>
    if (!boot_is_header_valid(hdr, fap) || fih_not_eq(fih_rc, FIH_SUCCESS)) {
     9ea:	4b1b      	ldr	r3, [pc, #108]	; (a58 <FIH_LABEL_FIH_CALL_END_291+0x8c>)
     9ec:	681b      	ldr	r3, [r3, #0]
     9ee:	42a3      	cmp	r3, r4
     9f0:	d01d      	beq.n	a2e <FIH_LABEL_FIH_CALL_END_291+0x62>
        if ((slot != BOOT_PRIMARY_SLOT) || ARE_SLOTS_EQUIVALENT()) {
     9f2:	b345      	cbz	r5, a46 <FIH_LABEL_FIH_CALL_END_291+0x7a>
            flash_area_erase(fap, 0, fap->fa_size);
     9f4:	6882      	ldr	r2, [r0, #8]
     9f6:	2100      	movs	r1, #0
     9f8:	f004 f933 	bl	4c62 <flash_area_erase>
            /* Image is invalid, erase it to prevent further unnecessary
             * attempts to validate and boot it.
             */
        }
#if !defined(__BOOTSIM__)
        BOOT_LOG_ERR("Image in the %s slot is not valid!",
     9fc:	4a17      	ldr	r2, [pc, #92]	; (a5c <FIH_LABEL_FIH_CALL_END_291+0x90>)
     9fe:	4818      	ldr	r0, [pc, #96]	; (a60 <FIH_LABEL_FIH_CALL_END_291+0x94>)
     a00:	2145      	movs	r1, #69	; 0x45
     a02:	f004 f8b1 	bl	4b68 <z_log_minimal_printk>
        fih_rc = fih_int_encode(1);
     a06:	2401      	movs	r4, #1
     a08:	e011      	b.n	a2e <FIH_LABEL_FIH_CALL_END_291+0x62>
    erased_val = flash_area_erased_val(fap);
     a0a:	9807      	ldr	r0, [sp, #28]
     a0c:	f004 f961 	bl	4cd2 <flash_area_erased_val>
     a10:	4607      	mov	r7, r0
    flash_area_close(fap);
     a12:	9807      	ldr	r0, [sp, #28]
     a14:	f004 f8d5 	bl	4bc2 <flash_area_close>
boot_data_is_set_to(uint8_t val, void *data, size_t len)
     a18:	1e63      	subs	r3, r4, #1
     a1a:	1ce2      	adds	r2, r4, #3
    for (i = 0; i < len; i++) {
     a1c:	4293      	cmp	r3, r2
     a1e:	d10d      	bne.n	a3c <FIH_LABEL_FIH_CALL_END_291+0x70>
        if (slot != BOOT_PRIMARY_SLOT) {
     a20:	2d00      	cmp	r5, #0
     a22:	d0f0      	beq.n	a06 <FIH_LABEL_FIH_CALL_END_291+0x3a>
            swap_erase_trailer_sectors(state, fap);
     a24:	9906      	ldr	r1, [sp, #24]
     a26:	4630      	mov	r0, r6
     a28:	f003 feee 	bl	4808 <swap_erase_trailer_sectors>
        fih_rc = fih_int_encode(1);
     a2c:	462c      	mov	r4, r5
        fih_rc = fih_int_encode(1);
        goto out;
    }

out:
    flash_area_close(fap);
     a2e:	9806      	ldr	r0, [sp, #24]
     a30:	f004 f8c7 	bl	4bc2 <flash_area_close>

    FIH_RET(fih_rc);
}
     a34:	4620      	mov	r0, r4
     a36:	b008      	add	sp, #32
     a38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if (val != p[i]) {
     a3c:	f813 1f01 	ldrb.w	r1, [r3, #1]!
     a40:	42b9      	cmp	r1, r7
     a42:	d0eb      	beq.n	a1c <FIH_LABEL_FIH_CALL_END_291+0x50>
     a44:	e7aa      	b.n	99c <boot_validate_slot.isra.0+0x38>
        BOOT_LOG_ERR("Image in the %s slot is not valid!",
     a46:	4a07      	ldr	r2, [pc, #28]	; (a64 <FIH_LABEL_FIH_CALL_END_291+0x98>)
     a48:	e7d9      	b.n	9fe <FIH_LABEL_FIH_CALL_END_291+0x32>
     a4a:	bf00      	nop
     a4c:	20000000 	.word	0x20000000
     a50:	2000270c 	.word	0x2000270c
     a54:	96f3b83d 	.word	0x96f3b83d
     a58:	200000dc 	.word	0x200000dc
     a5c:	000072fe 	.word	0x000072fe
     a60:	00007310 	.word	0x00007310
     a64:	00007308 	.word	0x00007308

00000a68 <boot_swap_image>:
 *
 * @return                      0 on success; nonzero on failure.
 */
static int
boot_swap_image(struct boot_loader_state *state, struct boot_status *bs)
{
     a68:	b573      	push	{r0, r1, r4, r5, r6, lr}
     a6a:	460d      	mov	r5, r1
     a6c:	4604      	mov	r4, r0
    uint8_t image_index;
    int rc;

    /* FIXME: just do this if asked by user? */

    size = copy_size = 0;
     a6e:	2100      	movs	r1, #0
    image_index = BOOT_CURR_IMG(state);

    if (boot_status_is_reset(bs)) {
     a70:	4628      	mov	r0, r5
    size = copy_size = 0;
     a72:	e9cd 1100 	strd	r1, r1, [sp]
    if (boot_status_is_reset(bs)) {
     a76:	f003 fe86 	bl	4786 <boot_status_is_reset>
     a7a:	b330      	cbz	r0, aca <boot_swap_image+0x62>
        /*
         * No swap ever happened, so need to find the largest image which
         * will be used to determine the amount of sectors to swap.
         */
        hdr = boot_img_hdr(state, BOOT_PRIMARY_SLOT);
        if (hdr->ih_magic == IMAGE_MAGIC) {
     a7c:	4e16      	ldr	r6, [pc, #88]	; (ad8 <boot_swap_image+0x70>)
     a7e:	6823      	ldr	r3, [r4, #0]
     a80:	42b3      	cmp	r3, r6
     a82:	d103      	bne.n	a8c <boot_swap_image+0x24>
            rc = boot_read_image_size(state, BOOT_PRIMARY_SLOT, &copy_size);
     a84:	aa01      	add	r2, sp, #4
     a86:	4620      	mov	r0, r4
     a88:	f003 fe12 	bl	46b0 <boot_read_image_size.isra.0>
            memset(bs->enckey[0], 0xff, BOOT_ENC_KEY_SIZE);
        }
#endif

        hdr = boot_img_hdr(state, BOOT_SECONDARY_SLOT);
        if (hdr->ih_magic == IMAGE_MAGIC) {
     a8c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
     a8e:	42b3      	cmp	r3, r6
     a90:	d104      	bne.n	a9c <boot_swap_image+0x34>
            rc = boot_read_image_size(state, BOOT_SECONDARY_SLOT, &size);
     a92:	466a      	mov	r2, sp
     a94:	2101      	movs	r1, #1
     a96:	4620      	mov	r0, r4
     a98:	f003 fe0a 	bl	46b0 <boot_read_image_size.isra.0>
        } else {
            memset(bs->enckey[1], 0xff, BOOT_ENC_KEY_SIZE);
        }
#endif

        if (size > copy_size) {
     a9c:	e9dd 3200 	ldrd	r3, r2, [sp]
     aa0:	4293      	cmp	r3, r2
            copy_size = size;
     aa2:	bf88      	it	hi
     aa4:	9301      	strhi	r3, [sp, #4]
        }

        bs->swap_size = copy_size;
     aa6:	9b01      	ldr	r3, [sp, #4]
     aa8:	60ab      	str	r3, [r5, #8]
            }
        }
#endif
    }

    swap_run(state, bs, copy_size);
     aaa:	9a01      	ldr	r2, [sp, #4]
     aac:	4629      	mov	r1, r5
     aae:	4620      	mov	r0, r4
     ab0:	f000 fb2e 	bl	1110 <swap_run>

#ifdef MCUBOOT_VALIDATE_PRIMARY_SLOT
    extern int boot_status_fails;
    if (boot_status_fails > 0) {
     ab4:	4b09      	ldr	r3, [pc, #36]	; (adc <boot_swap_image+0x74>)
     ab6:	681a      	ldr	r2, [r3, #0]
     ab8:	2a00      	cmp	r2, #0
     aba:	dd03      	ble.n	ac4 <boot_swap_image+0x5c>
        BOOT_LOG_WRN("%d status write fails performing the swap",
     abc:	4808      	ldr	r0, [pc, #32]	; (ae0 <boot_swap_image+0x78>)
     abe:	2157      	movs	r1, #87	; 0x57
     ac0:	f004 f852 	bl	4b68 <z_log_minimal_printk>
                     boot_status_fails);
    }
#endif

    return 0;
}
     ac4:	2000      	movs	r0, #0
     ac6:	b002      	add	sp, #8
     ac8:	bd70      	pop	{r4, r5, r6, pc}
        rc = boot_read_swap_size(image_index, &bs->swap_size);
     aca:	f105 0108 	add.w	r1, r5, #8
     ace:	f7ff ff09 	bl	8e4 <boot_read_swap_size>
        copy_size = bs->swap_size;
     ad2:	68ab      	ldr	r3, [r5, #8]
     ad4:	9301      	str	r3, [sp, #4]
     ad6:	e7e8      	b.n	aaa <boot_swap_image+0x42>
     ad8:	96f3b83d 	.word	0x96f3b83d
     adc:	20000d40 	.word	0x20000d40
     ae0:	00007338 	.word	0x00007338

00000ae4 <boot_copy_region>:
{
     ae4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        rc = flash_area_read(fap_src, off_src + bytes_copied, buf, chunk_sz);
     ae8:	f8df b070 	ldr.w	fp, [pc, #112]	; b5c <boot_copy_region+0x78>
     aec:	4c1c      	ldr	r4, [pc, #112]	; (b60 <boot_copy_region+0x7c>)
     aee:	4d1d      	ldr	r5, [pc, #116]	; (b64 <boot_copy_region+0x80>)
{
     af0:	4688      	mov	r8, r1
     af2:	4691      	mov	r9, r2
     af4:	469a      	mov	sl, r3
    bytes_copied = 0;
     af6:	2600      	movs	r6, #0
    while (bytes_copied < sz) {
     af8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
     afa:	429e      	cmp	r6, r3
     afc:	d301      	bcc.n	b02 <boot_copy_region+0x1e>
    return 0;
     afe:	2000      	movs	r0, #0
     b00:	e00f      	b.n	b22 <boot_copy_region+0x3e>
        if (sz - bytes_copied > sizeof buf) {
     b02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
        rc = flash_area_read(fap_src, off_src + bytes_copied, buf, chunk_sz);
     b04:	4a15      	ldr	r2, [pc, #84]	; (b5c <boot_copy_region+0x78>)
        if (sz - bytes_copied > sizeof buf) {
     b06:	1b9f      	subs	r7, r3, r6
     b08:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
     b0c:	bf28      	it	cs
     b0e:	f44f 6780 	movcs.w	r7, #1024	; 0x400
        rc = flash_area_read(fap_src, off_src + bytes_copied, buf, chunk_sz);
     b12:	463b      	mov	r3, r7
     b14:	eb06 010a 	add.w	r1, r6, sl
     b18:	4640      	mov	r0, r8
     b1a:	f004 f853 	bl	4bc4 <flash_area_read>
        if (rc != 0) {
     b1e:	b110      	cbz	r0, b26 <boot_copy_region+0x42>
            return BOOT_EFLASH;
     b20:	2001      	movs	r0, #1
}
     b22:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        rc = flash_area_write(fap_dst, off_dst + bytes_copied, buf, chunk_sz);
     b26:	990a      	ldr	r1, [sp, #40]	; 0x28
     b28:	463b      	mov	r3, r7
     b2a:	465a      	mov	r2, fp
     b2c:	1871      	adds	r1, r6, r1
     b2e:	4648      	mov	r0, r9
     b30:	f004 f864 	bl	4bfc <flash_area_write>
        if (rc != 0) {
     b34:	2800      	cmp	r0, #0
     b36:	d1f3      	bne.n	b20 <boot_copy_region+0x3c>
     b38:	f8c4 5600 	str.w	r5, [r4, #1536]	; 0x600
        bytes_copied += chunk_sz;
     b3c:	443e      	add	r6, r7
     b3e:	f8c4 5604 	str.w	r5, [r4, #1540]	; 0x604
     b42:	f8c4 5608 	str.w	r5, [r4, #1544]	; 0x608
     b46:	f8c4 560c 	str.w	r5, [r4, #1548]	; 0x60c
     b4a:	f8c4 5610 	str.w	r5, [r4, #1552]	; 0x610
     b4e:	f8c4 5614 	str.w	r5, [r4, #1556]	; 0x614
     b52:	f8c4 5618 	str.w	r5, [r4, #1560]	; 0x618
     b56:	f8c4 561c 	str.w	r5, [r4, #1564]	; 0x61c
        MCUBOOT_WATCHDOG_FEED();
     b5a:	e7cd      	b.n	af8 <boot_copy_region+0x14>
     b5c:	20000140 	.word	0x20000140
     b60:	40010000 	.word	0x40010000
     b64:	6e524635 	.word	0x6e524635

00000b68 <context_boot_go>:
#endif
}

fih_int
context_boot_go(struct boot_loader_state *state, struct boot_rsp *rsp)
{
     b68:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    size_t slot;
    struct boot_status bs;
    int rc = -1;
    fih_int fih_rc = FIH_FAILURE;
     b6c:	4b8f      	ldr	r3, [pc, #572]	; (dac <FIH_LABEL_FIH_CALL_END_2399+0x42>)
{
     b6e:	b085      	sub	sp, #20
     b70:	4604      	mov	r4, r0
    TARGET_STATIC boot_sector_t secondary_slot_sectors[BOOT_IMAGE_NUMBER][BOOT_MAX_IMG_SECTORS];
#if MCUBOOT_SWAP_USING_SCRATCH
    TARGET_STATIC boot_sector_t scratch_sectors[BOOT_MAX_IMG_SECTORS];
#endif

    memset(state, 0, sizeof(struct boot_loader_state));
     b72:	2260      	movs	r2, #96	; 0x60
{
     b74:	460f      	mov	r7, r1
    memset(state, 0, sizeof(struct boot_loader_state));
     b76:	2100      	movs	r1, #0
    fih_int fih_rc = FIH_FAILURE;
     b78:	681e      	ldr	r6, [r3, #0]
    memset(state, 0, sizeof(struct boot_loader_state));
     b7a:	f004 f98f 	bl	4e9c <memset>
        boot_enc_zeroize(BOOT_CURR_ENC(state));
#endif

        image_index = BOOT_CURR_IMG(state);

        BOOT_IMG(state, BOOT_PRIMARY_SLOT).sectors =
     b7e:	4b8c      	ldr	r3, [pc, #560]	; (db0 <FIH_LABEL_FIH_CALL_END_2399+0x46>)
     b80:	6263      	str	r3, [r4, #36]	; 0x24

        /* Open primary and secondary image areas for the duration
         * of this call.
         */
        for (slot = 0; slot < BOOT_NUM_SLOTS; slot++) {
            fa_id = flash_area_id_from_multi_image_slot(image_index, slot);
     b82:	2100      	movs	r1, #0
        BOOT_IMG(state, BOOT_SECONDARY_SLOT).sectors =
     b84:	4b8b      	ldr	r3, [pc, #556]	; (db4 <FIH_LABEL_FIH_CALL_END_2399+0x4a>)
     b86:	6523      	str	r3, [r4, #80]	; 0x50
            fa_id = flash_area_id_from_multi_image_slot(image_index, slot);
     b88:	4608      	mov	r0, r1
     b8a:	f003 fca6 	bl	44da <flash_area_id_from_multi_image_slot>
            rc = flash_area_open(fa_id, &BOOT_IMG_AREA(state, slot));
     b8e:	f104 0120 	add.w	r1, r4, #32
     b92:	b2c0      	uxtb	r0, r0
     b94:	f000 ff24 	bl	19e0 <flash_area_open>
            fa_id = flash_area_id_from_multi_image_slot(image_index, slot);
     b98:	2101      	movs	r1, #1
     b9a:	2000      	movs	r0, #0
     b9c:	f003 fc9d 	bl	44da <flash_area_id_from_multi_image_slot>
            rc = flash_area_open(fa_id, &BOOT_IMG_AREA(state, slot));
     ba0:	f104 014c 	add.w	r1, r4, #76	; 0x4c
     ba4:	b2c0      	uxtb	r0, r0
     ba6:	f000 ff1b 	bl	19e0 <flash_area_open>
     baa:	4605      	mov	r5, r0
    rc = boot_read_sectors(state);
     bac:	4620      	mov	r0, r4
     bae:	f003 fdc0 	bl	4732 <boot_read_sectors>
    if (rc != 0) {
     bb2:	4680      	mov	r8, r0
     bb4:	b968      	cbnz	r0, bd2 <context_boot_go+0x6a>
    rc = boot_read_image_headers(state, false, NULL);
     bb6:	2200      	movs	r2, #0
     bb8:	4611      	mov	r1, r2
     bba:	4620      	mov	r0, r4
     bbc:	f003 fd60 	bl	4680 <boot_read_image_headers>
    if (rc != 0) {
     bc0:	4680      	mov	r8, r0
     bc2:	b300      	cbz	r0, c06 <context_boot_go+0x9e>
        BOOT_LOG_WRN("Failed reading image headers; Image=%u",
     bc4:	487c      	ldr	r0, [pc, #496]	; (db8 <FIH_LABEL_FIH_CALL_END_2399+0x4e>)
     bc6:	2200      	movs	r2, #0
     bc8:	2157      	movs	r1, #87	; 0x57
            BOOT_LOG_WRN("Failed reading boot status; Image=%u",
     bca:	f003 ffcd 	bl	4b68 <z_log_minimal_printk>
        BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
     bce:	2301      	movs	r3, #1
     bd0:	e091      	b.n	cf6 <FIH_LABEL_FIH_CALL_END_2186+0xe>
        BOOT_LOG_WRN("Failed reading sectors; BOOT_MAX_IMG_SECTORS=%d"
     bd2:	487a      	ldr	r0, [pc, #488]	; (dbc <FIH_LABEL_FIH_CALL_END_2399+0x52>)
     bd4:	2280      	movs	r2, #128	; 0x80
     bd6:	2157      	movs	r1, #87	; 0x57
     bd8:	f003 ffc6 	bl	4b68 <z_log_minimal_printk>
        BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
     bdc:	2301      	movs	r3, #1
        if (rc == BOOT_EFLASH)
     bde:	4598      	cmp	r8, r3
        BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
     be0:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
        if (rc == BOOT_EFLASH)
     be4:	d1e7      	bne.n	bb6 <context_boot_go+0x4e>
#endif

        /* Determine swap type and complete swap if it has been aborted. */
        boot_prepare_image_for_update(state, &bs);

        if (BOOT_IS_UPGRADE(BOOT_SWAP_TYPE(state))) {
     be6:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
        /* Indicate that swap is not aborted */
        boot_status_reset(&bs);
#endif /* (BOOT_IMAGE_NUMBER > 1) */

        /* Set the previously determined swap type */
        bs.swap_type = BOOT_SWAP_TYPE(state);
     bea:	f88d 3007 	strb.w	r3, [sp, #7]

        switch (BOOT_SWAP_TYPE(state)) {
     bee:	2b04      	cmp	r3, #4
     bf0:	f200 8084 	bhi.w	cfc <FIH_LABEL_FIH_CALL_END_2186+0x14>
     bf4:	2b01      	cmp	r3, #1
     bf6:	f200 8088 	bhi.w	d0a <FIH_LABEL_FIH_CALL_END_2186+0x22>
     bfa:	f000 809f 	beq.w	d3c <FIH_LABEL_FIH_CALL_END_2186+0x54>
            }
#endif /* !MCUBOOT_OVERWRITE_ONLY */
            break;

        default:
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_PANIC;
     bfe:	23ff      	movs	r3, #255	; 0xff
     c00:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
     c04:	e09a      	b.n	d3c <FIH_LABEL_FIH_CALL_END_2186+0x54>
    if (boot_slots_compatible(state)) {
     c06:	4620      	mov	r0, r4
     c08:	f000 f99a 	bl	f40 <boot_slots_compatible>
     c0c:	2800      	cmp	r0, #0
     c0e:	d0de      	beq.n	bce <context_boot_go+0x66>
        boot_status_reset(bs);
     c10:	4668      	mov	r0, sp
     c12:	f003 fdaf 	bl	4774 <boot_status_reset>
        rc = swap_read_status(state, bs);
     c16:	4669      	mov	r1, sp
     c18:	4620      	mov	r0, r4
     c1a:	f003 fe4a 	bl	48b2 <swap_read_status>
        if (rc != 0) {
     c1e:	b118      	cbz	r0, c28 <context_boot_go+0xc0>
            BOOT_LOG_WRN("Failed reading boot status; Image=%u",
     c20:	4867      	ldr	r0, [pc, #412]	; (dc0 <FIH_LABEL_FIH_CALL_END_2399+0x56>)
     c22:	4642      	mov	r2, r8
     c24:	2157      	movs	r1, #87	; 0x57
     c26:	e7d0      	b.n	bca <context_boot_go+0x62>
        rc = boot_read_image_headers(state, !boot_status_is_reset(bs), bs);
     c28:	4668      	mov	r0, sp
     c2a:	f003 fdac 	bl	4786 <boot_status_is_reset>
     c2e:	f080 0101 	eor.w	r1, r0, #1
     c32:	466a      	mov	r2, sp
     c34:	b2c9      	uxtb	r1, r1
     c36:	4620      	mov	r0, r4
     c38:	f003 fd22 	bl	4680 <boot_read_image_headers>
        if (rc != 0) {
     c3c:	4602      	mov	r2, r0
     c3e:	2800      	cmp	r0, #0
     c40:	d1c0      	bne.n	bc4 <context_boot_go+0x5c>
        if (!boot_status_is_reset(bs)) {
     c42:	4668      	mov	r0, sp
     c44:	f003 fd9f 	bl	4786 <boot_status_is_reset>
     c48:	4680      	mov	r8, r0
     c4a:	bb60      	cbnz	r0, ca6 <context_boot_go+0x13e>
    rc = boot_swap_image(state, bs);
     c4c:	4669      	mov	r1, sp
     c4e:	4620      	mov	r0, r4
     c50:	f7ff ff0a 	bl	a68 <boot_swap_image>
    BOOT_SWAP_TYPE(state) = bs->swap_type;
     c54:	f89d 3007 	ldrb.w	r3, [sp, #7]
     c58:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    if (bs->swap_type == BOOT_SWAP_TYPE_REVERT ||
     c5c:	3b03      	subs	r3, #3
     c5e:	2b01      	cmp	r3, #1
     c60:	d806      	bhi.n	c70 <context_boot_go+0x108>
        rc = swap_set_image_ok(BOOT_CURR_IMG(state));
     c62:	4640      	mov	r0, r8
     c64:	f003 fe72 	bl	494c <swap_set_image_ok>
        if (rc != 0) {
     c68:	b110      	cbz	r0, c70 <context_boot_go+0x108>
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_PANIC;
     c6a:	23ff      	movs	r3, #255	; 0xff
     c6c:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    if (BOOT_IS_UPGRADE(bs->swap_type)) {
     c70:	f89d 3007 	ldrb.w	r3, [sp, #7]
     c74:	3b02      	subs	r3, #2
     c76:	2b02      	cmp	r3, #2
     c78:	d80b      	bhi.n	c92 <context_boot_go+0x12a>
        rc = swap_set_copy_done(BOOT_CURR_IMG(state));
     c7a:	2000      	movs	r0, #0
     c7c:	f003 fe54 	bl	4928 <swap_set_copy_done>
        if (rc != 0) {
     c80:	b138      	cbz	r0, c92 <context_boot_go+0x12a>
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_PANIC;
     c82:	23ff      	movs	r3, #255	; 0xff
     c84:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
        BOOT_LOG_ERR("panic!");
     c88:	484e      	ldr	r0, [pc, #312]	; (dc4 <FIH_LABEL_FIH_CALL_END_2399+0x5a>)
     c8a:	2145      	movs	r1, #69	; 0x45
     c8c:	f003 ff6c 	bl	4b68 <z_log_minimal_printk>
        while (1) {}
     c90:	e7fe      	b.n	c90 <context_boot_go+0x128>
    if (BOOT_SWAP_TYPE(state) == BOOT_SWAP_TYPE_PANIC) {
     c92:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
     c96:	2bff      	cmp	r3, #255	; 0xff
     c98:	d0f6      	beq.n	c88 <context_boot_go+0x120>
            rc = boot_read_image_headers(state, false, bs);
     c9a:	466a      	mov	r2, sp
     c9c:	2100      	movs	r1, #0
     c9e:	4620      	mov	r0, r4
     ca0:	f003 fcee 	bl	4680 <boot_read_image_headers>
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
     ca4:	e793      	b.n	bce <context_boot_go+0x66>
            if (bs->swap_type == BOOT_SWAP_TYPE_NONE) {
     ca6:	f89d 9007 	ldrb.w	r9, [sp, #7]
     caa:	f1b9 0f01 	cmp.w	r9, #1
     cae:	d117      	bne.n	ce0 <FIH_LABEL_FIH_CALL_START_2166>
    swap_type = boot_swap_type_multi(BOOT_CURR_IMG(state));
     cb0:	4610      	mov	r0, r2
     cb2:	f002 f935 	bl	2f20 <boot_swap_type_multi>
    if (BOOT_IS_UPGRADE(swap_type)) {
     cb6:	1e83      	subs	r3, r0, #2
     cb8:	2b02      	cmp	r3, #2
    swap_type = boot_swap_type_multi(BOOT_CURR_IMG(state));
     cba:	4680      	mov	r8, r0
    if (BOOT_IS_UPGRADE(swap_type)) {
     cbc:	d80d      	bhi.n	cda <FIH_LABEL_FIH_CALL_END_2101+0x14>

00000cbe <FIH_LABEL_FIH_CALL_START_2077>:
        FIH_CALL(boot_validate_slot, fih_rc, state, BOOT_SECONDARY_SLOT, bs);
     cbe:	4649      	mov	r1, r9
     cc0:	4620      	mov	r0, r4
     cc2:	f7ff fe4f 	bl	964 <boot_validate_slot.isra.0>

00000cc6 <FIH_LABEL_FIH_CALL_END_2101>:
        if (fih_not_eq(fih_rc, FIH_SUCCESS)) {
     cc6:	4b40      	ldr	r3, [pc, #256]	; (dc8 <FIH_LABEL_FIH_CALL_END_2399+0x5e>)
     cc8:	681b      	ldr	r3, [r3, #0]
     cca:	4298      	cmp	r0, r3
     ccc:	d005      	beq.n	cda <FIH_LABEL_FIH_CALL_END_2101+0x14>
                swap_type = BOOT_SWAP_TYPE_FAIL;
     cce:	2801      	cmp	r0, #1
     cd0:	bf0c      	ite	eq
     cd2:	f04f 0801 	moveq.w	r8, #1
     cd6:	f04f 0805 	movne.w	r8, #5
                BOOT_SWAP_TYPE(state) = boot_validated_swap_type(state, bs);
     cda:	f884 8058 	strb.w	r8, [r4, #88]	; 0x58
     cde:	e782      	b.n	be6 <context_boot_go+0x7e>

00000ce0 <FIH_LABEL_FIH_CALL_START_2166>:
                FIH_CALL(boot_validate_slot, fih_rc,
     ce0:	2101      	movs	r1, #1
     ce2:	4620      	mov	r0, r4
     ce4:	f7ff fe3e 	bl	964 <boot_validate_slot.isra.0>

00000ce8 <FIH_LABEL_FIH_CALL_END_2186>:
                if (fih_not_eq(fih_rc, FIH_SUCCESS)) {
     ce8:	4b37      	ldr	r3, [pc, #220]	; (dc8 <FIH_LABEL_FIH_CALL_END_2399+0x5e>)
     cea:	681b      	ldr	r3, [r3, #0]
     cec:	4298      	cmp	r0, r3
                    BOOT_SWAP_TYPE(state) = bs->swap_type;
     cee:	bf0c      	ite	eq
     cf0:	f89d 3007 	ldrbeq.w	r3, [sp, #7]
                    BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_FAIL;
     cf4:	2305      	movne	r3, #5
        BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
     cf6:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
     cfa:	e774      	b.n	be6 <context_boot_go+0x7e>
        switch (BOOT_SWAP_TYPE(state)) {
     cfc:	2b05      	cmp	r3, #5
     cfe:	f47f af7e 	bne.w	bfe <context_boot_go+0x96>
            rc = swap_set_image_ok(BOOT_CURR_IMG(state));
     d02:	2000      	movs	r0, #0
     d04:	f003 fe22 	bl	494c <swap_set_image_ok>
     d08:	e013      	b.n	d32 <FIH_LABEL_FIH_CALL_END_2186+0x4a>
        rc = boot_swap_image(state, bs);
     d0a:	4669      	mov	r1, sp
     d0c:	4620      	mov	r0, r4
     d0e:	f7ff feab 	bl	a68 <boot_swap_image>
    swap_type = BOOT_SWAP_TYPE(state);
     d12:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
    if (swap_type == BOOT_SWAP_TYPE_REVERT ||
     d16:	1eda      	subs	r2, r3, #3
     d18:	2a01      	cmp	r2, #1
        rc = boot_swap_image(state, bs);
     d1a:	4605      	mov	r5, r0
    if (swap_type == BOOT_SWAP_TYPE_REVERT ||
     d1c:	d80c      	bhi.n	d38 <FIH_LABEL_FIH_CALL_END_2186+0x50>
        rc = swap_set_image_ok(BOOT_CURR_IMG(state));
     d1e:	2000      	movs	r0, #0
     d20:	f003 fe14 	bl	494c <swap_set_image_ok>
        if (rc != 0) {
     d24:	4605      	mov	r5, r0
     d26:	2800      	cmp	r0, #0
     d28:	f47f af69 	bne.w	bfe <context_boot_go+0x96>
        rc = swap_set_copy_done(BOOT_CURR_IMG(state));
     d2c:	2000      	movs	r0, #0
     d2e:	f003 fdfb 	bl	4928 <swap_set_copy_done>
            if (rc != 0) {
     d32:	4605      	mov	r5, r0
     d34:	b110      	cbz	r0, d3c <FIH_LABEL_FIH_CALL_END_2186+0x54>
     d36:	e762      	b.n	bfe <context_boot_go+0x96>
    if (BOOT_IS_UPGRADE(swap_type)) {
     d38:	2b02      	cmp	r3, #2
     d3a:	d0f7      	beq.n	d2c <FIH_LABEL_FIH_CALL_END_2186+0x44>
        }

        if (BOOT_SWAP_TYPE(state) == BOOT_SWAP_TYPE_PANIC) {
     d3c:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
     d40:	2bff      	cmp	r3, #255	; 0xff
     d42:	d104      	bne.n	d4e <FIH_LABEL_FIH_CALL_END_2186+0x66>
            BOOT_LOG_ERR("panic!");
     d44:	481f      	ldr	r0, [pc, #124]	; (dc4 <FIH_LABEL_FIH_CALL_END_2399+0x5a>)
     d46:	2145      	movs	r1, #69	; 0x45
     d48:	f003 ff0e 	bl	4b68 <z_log_minimal_printk>
            assert(0);

            /* Loop forever... */
            FIH_PANIC;
     d4c:	e7fe      	b.n	d4c <FIH_LABEL_FIH_CALL_END_2186+0x64>
    /* Iterate over all the images. At this point all required update operations
     * have finished. By the end of the loop each image in the primary slot will
     * have been re-validated.
     */
    IMAGES_ITER(BOOT_CURR_IMG(state)) {
        if (BOOT_SWAP_TYPE(state) != BOOT_SWAP_TYPE_NONE) {
     d4e:	2b01      	cmp	r3, #1
     d50:	d006      	beq.n	d60 <FIH_LABEL_FIH_CALL_START_2383>
            /* Attempt to read an image header from each slot. Ensure that image
             * headers in slots are aligned with headers in boot_data.
             */
            rc = boot_read_image_headers(state, false, &bs);
     d52:	466a      	mov	r2, sp
     d54:	2100      	movs	r1, #0
     d56:	4620      	mov	r0, r4
     d58:	f003 fc92 	bl	4680 <boot_read_image_headers>
            if (rc != 0) {
     d5c:	4605      	mov	r5, r0
     d5e:	b9c0      	cbnz	r0, d92 <FIH_LABEL_FIH_CALL_END_2399+0x28>

00000d60 <FIH_LABEL_FIH_CALL_START_2383>:
	 * primary.
	 */
	if (BOOT_CURR_IMG(state) == 0)
#endif
	{
            FIH_CALL(boot_validate_slot, fih_rc, state, BOOT_PRIMARY_SLOT, NULL);
     d60:	2100      	movs	r1, #0
     d62:	4620      	mov	r0, r4
     d64:	f7ff fdfe 	bl	964 <boot_validate_slot.isra.0>
     d68:	4606      	mov	r6, r0

00000d6a <FIH_LABEL_FIH_CALL_END_2399>:
            if (fih_not_eq(fih_rc, FIH_SUCCESS)) {
     d6a:	f8df 805c 	ldr.w	r8, [pc, #92]	; dc8 <FIH_LABEL_FIH_CALL_END_2399+0x5e>
     d6e:	f8d8 3000 	ldr.w	r3, [r8]
     d72:	4298      	cmp	r0, r3
     d74:	d10d      	bne.n	d92 <FIH_LABEL_FIH_CALL_END_2399+0x28>
    /*
     * Since the boot_status struct stores plaintext encryption keys, reset
     * them here to avoid the possibility of jumping into an image that could
     * easily recover them.
     */
    memset(&bs, 0, sizeof(struct boot_status));
     d76:	2210      	movs	r2, #16
     d78:	2100      	movs	r1, #0
     d7a:	4668      	mov	r0, sp
     d7c:	f004 f88e 	bl	4e9c <memset>
    rsp->br_flash_dev_id = BOOT_IMG_AREA(state, active_slot)->fa_device_id;
     d80:	6a23      	ldr	r3, [r4, #32]

    fill_rsp(state, NULL, rsp);

    fih_rc = FIH_SUCCESS;
     d82:	f8d8 6000 	ldr.w	r6, [r8]
    rsp->br_flash_dev_id = BOOT_IMG_AREA(state, active_slot)->fa_device_id;
     d86:	785a      	ldrb	r2, [r3, #1]
     d88:	713a      	strb	r2, [r7, #4]
    rsp->br_image_off = boot_img_slot_off(state, active_slot);
     d8a:	685b      	ldr	r3, [r3, #4]
     d8c:	60bb      	str	r3, [r7, #8]
    rsp->br_hdr = boot_img_hdr(state, active_slot);
     d8e:	603c      	str	r4, [r7, #0]
        rc = boot_add_shared_data(state, BOOT_PRIMARY_SLOT);
     d90:	2500      	movs	r5, #0
            flash_area_close(BOOT_IMG_AREA(state, BOOT_NUM_SLOTS - 1 - slot));
     d92:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
     d94:	f003 ff15 	bl	4bc2 <flash_area_close>
     d98:	6a20      	ldr	r0, [r4, #32]
     d9a:	f003 ff12 	bl	4bc2 <flash_area_close>
    if (rc) {
        fih_rc = fih_int_encode(rc);
    }

    FIH_RET(fih_rc);
}
     d9e:	2d00      	cmp	r5, #0
     da0:	bf14      	ite	ne
     da2:	4628      	movne	r0, r5
     da4:	4630      	moveq	r0, r6
     da6:	b005      	add	sp, #20
     da8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
     dac:	20000000 	.word	0x20000000
     db0:	20000540 	.word	0x20000540
     db4:	20000940 	.word	0x20000940
     db8:	000073a9 	.word	0x000073a9
     dbc:	00007367 	.word	0x00007367
     dc0:	000073d5 	.word	0x000073d5
     dc4:	000073ff 	.word	0x000073ff
     dc8:	200000dc 	.word	0x200000dc

00000dcc <boot_go>:
 *
 * @return                      FIH_SUCCESS on success; nonzero on failure.
 */
fih_int
boot_go(struct boot_rsp *rsp)
{
     dcc:	b508      	push	{r3, lr}
     dce:	4601      	mov	r1, r0

00000dd0 <FIH_LABEL_FIH_CALL_START_3006>:
    fih_int fih_rc = FIH_FAILURE;
    FIH_CALL(context_boot_go, fih_rc, &boot_data, rsp);
     dd0:	4801      	ldr	r0, [pc, #4]	; (dd8 <FIH_LABEL_FIH_CALL_END_3022+0x2>)
     dd2:	f7ff fec9 	bl	b68 <context_boot_go>

00000dd6 <FIH_LABEL_FIH_CALL_END_3022>:
    FIH_RET(fih_rc);
}
     dd6:	bd08      	pop	{r3, pc}
     dd8:	200000e0 	.word	0x200000e0

00000ddc <boot_read_image_header>:
static uint32_t g_last_idx = UINT32_MAX;

int
boot_read_image_header(struct boot_loader_state *state, int slot,
                       struct image_header *out_hdr, struct boot_status *bs)
{
     ddc:	b573      	push	{r0, r1, r4, r5, r6, lr}
     dde:	4616      	mov	r6, r2
#if (BOOT_IMAGE_NUMBER == 1)
    (void)state;
#endif

    off = 0;
    if (bs) {
     de0:	461c      	mov	r4, r3
     de2:	b333      	cbz	r3, e32 <boot_read_image_header+0x56>

static inline size_t
boot_img_sector_size(const struct boot_loader_state *state,
                     size_t slot, size_t sector)
{
    return BOOT_IMG(state, slot).sectors[sector].fs_size;
     de4:	6a43      	ldr	r3, [r0, #36]	; 0x24
     de6:	685d      	ldr	r5, [r3, #4]
        sz = boot_img_sector_size(state, BOOT_PRIMARY_SLOT, 0);
        if (bs->op == BOOT_STATUS_OP_MOVE) {
     de8:	7963      	ldrb	r3, [r4, #5]
     dea:	2b01      	cmp	r3, #1
     dec:	d115      	bne.n	e1a <boot_read_image_header+0x3e>
            if (slot == 0 && bs->idx > g_last_idx) {
     dee:	bb01      	cbnz	r1, e32 <boot_read_image_header+0x56>
     df0:	4b1f      	ldr	r3, [pc, #124]	; (e70 <boot_read_image_header+0x94>)
     df2:	6822      	ldr	r2, [r4, #0]
     df4:	681b      	ldr	r3, [r3, #0]
    off = 0;
     df6:	429a      	cmp	r2, r3
     df8:	bf98      	it	ls
     dfa:	2500      	movls	r5, #0
                }
            }
        }
    }

    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
     dfc:	2000      	movs	r0, #0
     dfe:	f003 fb6c 	bl	44da <flash_area_id_from_multi_image_slot>
    rc = flash_area_open(area_id, &fap);
     e02:	a901      	add	r1, sp, #4
     e04:	b2c0      	uxtb	r0, r0
     e06:	f000 fdeb 	bl	19e0 <flash_area_open>
    if (rc != 0) {
     e0a:	b1f0      	cbz	r0, e4a <boot_read_image_header+0x6e>
        rc = BOOT_EFLASH;
     e0c:	2501      	movs	r5, #1
    }

    rc = 0;

done:
    flash_area_close(fap);
     e0e:	9801      	ldr	r0, [sp, #4]
     e10:	f003 fed7 	bl	4bc2 <flash_area_close>
    return rc;
}
     e14:	4628      	mov	r0, r5
     e16:	b002      	add	sp, #8
     e18:	bd70      	pop	{r4, r5, r6, pc}
        } else if (bs->op == BOOT_STATUS_OP_SWAP) {
     e1a:	2b02      	cmp	r3, #2
     e1c:	d109      	bne.n	e32 <boot_read_image_header+0x56>
            if (bs->idx > 1 && bs->idx <= g_last_idx) {
     e1e:	6823      	ldr	r3, [r4, #0]
     e20:	2b01      	cmp	r3, #1
     e22:	d908      	bls.n	e36 <boot_read_image_header+0x5a>
     e24:	4a12      	ldr	r2, [pc, #72]	; (e70 <boot_read_image_header+0x94>)
     e26:	6812      	ldr	r2, [r2, #0]
     e28:	4293      	cmp	r3, r2
     e2a:	d802      	bhi.n	e32 <boot_read_image_header+0x56>
                if (slot == 0) {
     e2c:	fab1 f181 	clz	r1, r1
     e30:	0949      	lsrs	r1, r1, #5
    off = 0;
     e32:	2500      	movs	r5, #0
     e34:	e7e2      	b.n	dfc <boot_read_image_header+0x20>
            } else if (bs->idx == 1) {
     e36:	d1fc      	bne.n	e32 <boot_read_image_header+0x56>
                if (slot == 0) {
     e38:	2900      	cmp	r1, #0
     e3a:	d0df      	beq.n	dfc <boot_read_image_header+0x20>
                if (slot == 1 && bs->state == 2) {
     e3c:	2901      	cmp	r1, #1
     e3e:	d1f8      	bne.n	e32 <boot_read_image_header+0x56>
     e40:	7921      	ldrb	r1, [r4, #4]
     e42:	3902      	subs	r1, #2
     e44:	bf18      	it	ne
     e46:	2101      	movne	r1, #1
     e48:	e7f3      	b.n	e32 <boot_read_image_header+0x56>
    rc = flash_area_read(fap, off, out_hdr, sizeof *out_hdr);
     e4a:	4629      	mov	r1, r5
     e4c:	9801      	ldr	r0, [sp, #4]
     e4e:	2320      	movs	r3, #32
     e50:	4632      	mov	r2, r6
     e52:	f003 feb7 	bl	4bc4 <flash_area_read>
    if (rc != 0) {
     e56:	4605      	mov	r5, r0
     e58:	2800      	cmp	r0, #0
     e5a:	d1d7      	bne.n	e0c <boot_read_image_header+0x30>
    if (bs != NULL && out_hdr->ih_magic != IMAGE_MAGIC) {
     e5c:	2c00      	cmp	r4, #0
     e5e:	d0d6      	beq.n	e0e <boot_read_image_header+0x32>
     e60:	6835      	ldr	r5, [r6, #0]
     e62:	4804      	ldr	r0, [pc, #16]	; (e74 <boot_read_image_header+0x98>)
     e64:	1a2d      	subs	r5, r5, r0
     e66:	bf18      	it	ne
     e68:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
     e6c:	e7cf      	b.n	e0e <boot_read_image_header+0x32>
     e6e:	bf00      	nop
     e70:	20000004 	.word	0x20000004
     e74:	96f3b83d 	.word	0x96f3b83d

00000e78 <swap_read_status_bytes>:

int
swap_read_status_bytes(const struct flash_area *fap,
        struct boot_loader_state *state, struct boot_status *bs)
{
     e78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     e7c:	4607      	mov	r7, r0
     e7e:	b085      	sub	sp, #20
     e80:	460c      	mov	r4, r1
    int rc;
    int last_rc;
    int erased_sections;
    int i;

    max_entries = boot_status_entries(BOOT_CURR_IMG(state), fap);
     e82:	4601      	mov	r1, r0
     e84:	2000      	movs	r0, #0
{
     e86:	4616      	mov	r6, r2
    max_entries = boot_status_entries(BOOT_CURR_IMG(state), fap);
     e88:	f003 fbce 	bl	4628 <boot_status_entries>
    if (max_entries < 0) {
     e8c:	1e05      	subs	r5, r0, #0
     e8e:	db51      	blt.n	f34 <swap_read_status_bytes+0xbc>
    erased_sections = 0;
    found_idx = -1;
    /* skip erased sectors at the end */
    last_rc = 1;
    write_sz = BOOT_WRITE_SZ(state);
    off = boot_status_off(fap);
     e90:	4638      	mov	r0, r7
    write_sz = BOOT_WRITE_SZ(state);
     e92:	6de4      	ldr	r4, [r4, #92]	; 0x5c
    off = boot_status_off(fap);
     e94:	f003 fbd5 	bl	4642 <boot_status_off>
    for (i = max_entries; i > 0; i--) {
     e98:	fa5f f984 	uxtb.w	r9, r4
     e9c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
     ea0:	fb09 0808 	mla	r8, r9, r8, r0
    erased_sections = 0;
     ea4:	f04f 0a00 	mov.w	sl, #0
    last_rc = 1;
     ea8:	f04f 0b01 	mov.w	fp, #1
    found_idx = -1;
     eac:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    for (i = max_entries; i > 0; i--) {
     eb0:	b99d      	cbnz	r5, eda <swap_read_status_bytes+0x62>
            }
        }
        last_rc = rc;
    }

    if (erased_sections > 1) {
     eb2:	f1ba 0f01 	cmp.w	sl, #1
     eb6:	dd03      	ble.n	ec0 <swap_read_status_bytes+0x48>
        /* This means there was an error writing status on the last
         * swap. Tell user and move on to validation!
         */
#if !defined(__BOOTSIM__)
        BOOT_LOG_ERR("Detected inconsistent status!");
     eb8:	4820      	ldr	r0, [pc, #128]	; (f3c <swap_read_status_bytes+0xc4>)
     eba:	2145      	movs	r1, #69	; 0x45
     ebc:	f003 fe54 	bl	4b68 <z_log_minimal_printk>
        assert(0);
#endif
    }

    move_entries = BOOT_MAX_IMG_SECTORS * BOOT_STATUS_MOVE_STATE_COUNT;
    if (found_idx == -1) {
     ec0:	1c63      	adds	r3, r4, #1
     ec2:	d006      	beq.n	ed2 <swap_read_status_bytes+0x5a>
        /* no swap status found; nothing to do */
    } else if (found_idx < move_entries) {
     ec4:	2c7f      	cmp	r4, #127	; 0x7f
     ec6:	dc2a      	bgt.n	f1e <swap_read_status_bytes+0xa6>
        bs->op = BOOT_STATUS_OP_MOVE;
        bs->idx = (found_idx  / BOOT_STATUS_MOVE_STATE_COUNT) + BOOT_STATUS_IDX_0;
     ec8:	3401      	adds	r4, #1
        bs->state = (found_idx % BOOT_STATUS_MOVE_STATE_COUNT) + BOOT_STATUS_STATE_0;;
     eca:	f240 1301 	movw	r3, #257	; 0x101
        bs->idx = (found_idx  / BOOT_STATUS_MOVE_STATE_COUNT) + BOOT_STATUS_IDX_0;
     ece:	6034      	str	r4, [r6, #0]
        bs->state = (found_idx % BOOT_STATUS_MOVE_STATE_COUNT) + BOOT_STATUS_STATE_0;;
     ed0:	80b3      	strh	r3, [r6, #4]
        bs->idx = ((found_idx - move_entries) / BOOT_STATUS_SWAP_STATE_COUNT) + BOOT_STATUS_IDX_0;
        bs->state = ((found_idx - move_entries) % BOOT_STATUS_SWAP_STATE_COUNT) + BOOT_STATUS_STATE_0;
    }

    return 0;
}
     ed2:	4628      	mov	r0, r5
     ed4:	b005      	add	sp, #20
     ed6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        rc = flash_area_read(fap, off + (i - 1) * write_sz, &status, 1);
     eda:	1e6b      	subs	r3, r5, #1
     edc:	9300      	str	r3, [sp, #0]
     ede:	f10d 020f 	add.w	r2, sp, #15
     ee2:	2301      	movs	r3, #1
     ee4:	4641      	mov	r1, r8
     ee6:	4638      	mov	r0, r7
     ee8:	f003 fe6c 	bl	4bc4 <flash_area_read>
        if (rc < 0) {
     eec:	1e03      	subs	r3, r0, #0
     eee:	9301      	str	r3, [sp, #4]
     ef0:	db22      	blt.n	f38 <swap_read_status_bytes+0xc0>
        if (bootutil_buffer_is_erased(fap, &status, 1)) {
     ef2:	2201      	movs	r2, #1
     ef4:	f10d 010f 	add.w	r1, sp, #15
     ef8:	4638      	mov	r0, r7
     efa:	f004 fa54 	bl	53a6 <bootutil_buffer_is_erased>
     efe:	9b01      	ldr	r3, [sp, #4]
     f00:	b140      	cbz	r0, f14 <swap_read_status_bytes+0x9c>
            if (rc != last_rc) {
     f02:	455b      	cmp	r3, fp
     f04:	d001      	beq.n	f0a <swap_read_status_bytes+0x92>
                erased_sections++;
     f06:	f10a 0a01 	add.w	sl, sl, #1
            if (found_idx == -1) {
     f0a:	9d00      	ldr	r5, [sp, #0]
     f0c:	eba8 0809 	sub.w	r8, r8, r9
     f10:	469b      	mov	fp, r3
     f12:	e7cd      	b.n	eb0 <swap_read_status_bytes+0x38>
     f14:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
     f18:	bf08      	it	eq
     f1a:	462c      	moveq	r4, r5
     f1c:	e7f5      	b.n	f0a <swap_read_status_bytes+0x92>
        bs->op = BOOT_STATUS_OP_SWAP;
     f1e:	2302      	movs	r3, #2
        bs->idx = ((found_idx - move_entries) / BOOT_STATUS_SWAP_STATE_COUNT) + BOOT_STATUS_IDX_0;
     f20:	3c80      	subs	r4, #128	; 0x80
        bs->op = BOOT_STATUS_OP_SWAP;
     f22:	7173      	strb	r3, [r6, #5]
        bs->idx = ((found_idx - move_entries) / BOOT_STATUS_SWAP_STATE_COUNT) + BOOT_STATUS_IDX_0;
     f24:	1063      	asrs	r3, r4, #1
        bs->state = ((found_idx - move_entries) % BOOT_STATUS_SWAP_STATE_COUNT) + BOOT_STATUS_STATE_0;
     f26:	f004 0401 	and.w	r4, r4, #1
        bs->idx = ((found_idx - move_entries) / BOOT_STATUS_SWAP_STATE_COUNT) + BOOT_STATUS_IDX_0;
     f2a:	3301      	adds	r3, #1
        bs->state = ((found_idx - move_entries) % BOOT_STATUS_SWAP_STATE_COUNT) + BOOT_STATUS_STATE_0;
     f2c:	3401      	adds	r4, #1
        bs->idx = ((found_idx - move_entries) / BOOT_STATUS_SWAP_STATE_COUNT) + BOOT_STATUS_IDX_0;
     f2e:	6033      	str	r3, [r6, #0]
        bs->state = ((found_idx - move_entries) % BOOT_STATUS_SWAP_STATE_COUNT) + BOOT_STATUS_STATE_0;
     f30:	7134      	strb	r4, [r6, #4]
     f32:	e7ce      	b.n	ed2 <swap_read_status_bytes+0x5a>
        return BOOT_EBADARGS;
     f34:	2507      	movs	r5, #7
     f36:	e7cc      	b.n	ed2 <swap_read_status_bytes+0x5a>
            return BOOT_EFLASH;
     f38:	2501      	movs	r5, #1
     f3a:	e7ca      	b.n	ed2 <swap_read_status_bytes+0x5a>
     f3c:	0000740b 	.word	0x0000740b

00000f40 <boot_slots_compatible>:
    return BOOT_IMG(state, slot).num_sectors;
     f40:	6a81      	ldr	r1, [r0, #40]	; 0x28
     f42:	6d42      	ldr	r2, [r0, #84]	; 0x54
    size_t sector_sz_sec = 0;
    size_t i;

    num_sectors_pri = boot_img_num_sectors(state, BOOT_PRIMARY_SLOT);
    num_sectors_sec = boot_img_num_sectors(state, BOOT_SECONDARY_SLOT);
    if ((num_sectors_pri != num_sectors_sec) &&
     f44:	428a      	cmp	r2, r1
{
     f46:	b538      	push	{r3, r4, r5, lr}
    if ((num_sectors_pri != num_sectors_sec) &&
     f48:	d008      	beq.n	f5c <boot_slots_compatible+0x1c>
            (num_sectors_pri != (num_sectors_sec + 1))) {
     f4a:	1c53      	adds	r3, r2, #1
    if ((num_sectors_pri != num_sectors_sec) &&
     f4c:	428b      	cmp	r3, r1
     f4e:	d005      	beq.n	f5c <boot_slots_compatible+0x1c>
        BOOT_LOG_WRN("Cannot upgrade: not a compatible amount of sectors");
     f50:	4813      	ldr	r0, [pc, #76]	; (fa0 <boot_slots_compatible+0x60>)
     f52:	2157      	movs	r1, #87	; 0x57

    for (i = 0; i < num_sectors_sec; i++) {
        sector_sz_pri = boot_img_sector_size(state, BOOT_PRIMARY_SLOT, i);
        sector_sz_sec = boot_img_sector_size(state, BOOT_SECONDARY_SLOT, i);
        if (sector_sz_pri != sector_sz_sec) {
            BOOT_LOG_WRN("Cannot upgrade: not same sector layout");
     f54:	f003 fe08 	bl	4b68 <z_log_minimal_printk>
            return 0;
     f58:	2000      	movs	r0, #0
        }
    }

    return 1;
#endif /* PM_S1_ADDRESS */
}
     f5a:	bd38      	pop	{r3, r4, r5, pc}
    if (num_sectors_pri > BOOT_MAX_IMG_SECTORS) {
     f5c:	2980      	cmp	r1, #128	; 0x80
     f5e:	d91c      	bls.n	f9a <boot_slots_compatible+0x5a>
        BOOT_LOG_WRN("Cannot upgrade: more sectors than allowed");
     f60:	4810      	ldr	r0, [pc, #64]	; (fa4 <boot_slots_compatible+0x64>)
     f62:	2157      	movs	r1, #87	; 0x57
     f64:	e7f6      	b.n	f54 <boot_slots_compatible+0x14>
    return BOOT_IMG(state, slot).sectors[sector].fs_size;
     f66:	6a44      	ldr	r4, [r0, #36]	; 0x24
     f68:	6d05      	ldr	r5, [r0, #80]	; 0x50
     f6a:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
     f6e:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
     f72:	6864      	ldr	r4, [r4, #4]
        if (sector_sz_pri != sector_sz_sec) {
     f74:	686d      	ldr	r5, [r5, #4]
     f76:	42ac      	cmp	r4, r5
     f78:	d002      	beq.n	f80 <boot_slots_compatible+0x40>
            BOOT_LOG_WRN("Cannot upgrade: not same sector layout");
     f7a:	480b      	ldr	r0, [pc, #44]	; (fa8 <boot_slots_compatible+0x68>)
     f7c:	2157      	movs	r1, #87	; 0x57
     f7e:	e7e9      	b.n	f54 <boot_slots_compatible+0x14>
    for (i = 0; i < num_sectors_sec; i++) {
     f80:	3301      	adds	r3, #1
     f82:	429a      	cmp	r2, r3
     f84:	d1ef      	bne.n	f66 <boot_slots_compatible+0x26>
    if (num_sectors_pri > num_sectors_sec) {
     f86:	4291      	cmp	r1, r2
     f88:	d905      	bls.n	f96 <boot_slots_compatible+0x56>
     f8a:	6a43      	ldr	r3, [r0, #36]	; 0x24
     f8c:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        if (sector_sz_pri != boot_img_sector_size(state, BOOT_PRIMARY_SLOT, i)) {
     f90:	6853      	ldr	r3, [r2, #4]
     f92:	42a3      	cmp	r3, r4
     f94:	d1f1      	bne.n	f7a <boot_slots_compatible+0x3a>
    return 1;
     f96:	2001      	movs	r0, #1
     f98:	e7df      	b.n	f5a <boot_slots_compatible+0x1a>
    for (i = 0; i < num_sectors_sec; i++) {
     f9a:	2300      	movs	r3, #0
    size_t sector_sz_pri = 0;
     f9c:	461c      	mov	r4, r3
     f9e:	e7f0      	b.n	f82 <boot_slots_compatible+0x42>
     fa0:	0000742e 	.word	0x0000742e
     fa4:	00007466 	.word	0x00007466
     fa8:	00007495 	.word	0x00007495

00000fac <swap_status_source>:
                 (state)->copy_done,                                \
                 (state)->image_ok)

int
swap_status_source(struct boot_loader_state *state)
{
     fac:	b500      	push	{lr}
     fae:	b089      	sub	sp, #36	; 0x24
    (void)state;
#endif

    image_index = BOOT_CURR_IMG(state);

    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_PRIMARY(image_index),
     fb0:	a904      	add	r1, sp, #16
     fb2:	2002      	movs	r0, #2
     fb4:	f004 fa5a 	bl	546c <boot_read_swap_state_by_id>
            &state_primary_slot);
    assert(rc == 0);

    BOOT_LOG_SWAP_STATE("Primary image", &state_primary_slot);
     fb8:	f89d 2010 	ldrb.w	r2, [sp, #16]
     fbc:	2a01      	cmp	r2, #1
     fbe:	d041      	beq.n	1044 <CONFIG_FPROTECT_BLOCK_SIZE+0x44>
     fc0:	4b25      	ldr	r3, [pc, #148]	; (1058 <CONFIG_FPROTECT_BLOCK_SIZE+0x58>)
     fc2:	4926      	ldr	r1, [pc, #152]	; (105c <CONFIG_FPROTECT_BLOCK_SIZE+0x5c>)
     fc4:	2a03      	cmp	r2, #3
     fc6:	bf18      	it	ne
     fc8:	460b      	movne	r3, r1
     fca:	f89d 2013 	ldrb.w	r2, [sp, #19]
     fce:	9202      	str	r2, [sp, #8]
     fd0:	f89d 2012 	ldrb.w	r2, [sp, #18]
     fd4:	9201      	str	r2, [sp, #4]
     fd6:	f89d 2011 	ldrb.w	r2, [sp, #17]
     fda:	4821      	ldr	r0, [pc, #132]	; (1060 <CONFIG_FPROTECT_BLOCK_SIZE+0x60>)
     fdc:	9200      	str	r2, [sp, #0]
     fde:	2149      	movs	r1, #73	; 0x49
     fe0:	4a20      	ldr	r2, [pc, #128]	; (1064 <CONFIG_FPROTECT_BLOCK_SIZE+0x64>)
     fe2:	f003 fdc1 	bl	4b68 <z_log_minimal_printk>

    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_SECONDARY(image_index),
     fe6:	a906      	add	r1, sp, #24
     fe8:	2005      	movs	r0, #5
     fea:	f004 fa3f 	bl	546c <boot_read_swap_state_by_id>
            &state_secondary_slot);
    assert(rc == 0);

    BOOT_LOG_SWAP_STATE("Secondary image", &state_secondary_slot);
     fee:	f89d 2018 	ldrb.w	r2, [sp, #24]
     ff2:	2a01      	cmp	r2, #1
     ff4:	d028      	beq.n	1048 <CONFIG_FPROTECT_BLOCK_SIZE+0x48>
     ff6:	4b18      	ldr	r3, [pc, #96]	; (1058 <CONFIG_FPROTECT_BLOCK_SIZE+0x58>)
     ff8:	4918      	ldr	r1, [pc, #96]	; (105c <CONFIG_FPROTECT_BLOCK_SIZE+0x5c>)
     ffa:	2a03      	cmp	r2, #3
     ffc:	bf18      	it	ne
     ffe:	460b      	movne	r3, r1
    1000:	f89d 201b 	ldrb.w	r2, [sp, #27]
    1004:	9202      	str	r2, [sp, #8]
    1006:	f89d 201a 	ldrb.w	r2, [sp, #26]
    100a:	9201      	str	r2, [sp, #4]
    100c:	f89d 2019 	ldrb.w	r2, [sp, #25]
    1010:	9200      	str	r2, [sp, #0]
    1012:	4813      	ldr	r0, [pc, #76]	; (1060 <CONFIG_FPROTECT_BLOCK_SIZE+0x60>)
    1014:	4a14      	ldr	r2, [pc, #80]	; (1068 <CONFIG_FPROTECT_BLOCK_SIZE+0x68>)
    1016:	2149      	movs	r1, #73	; 0x49
    1018:	f003 fda6 	bl	4b68 <z_log_minimal_printk>

    if (state_primary_slot.magic == BOOT_MAGIC_GOOD &&
    101c:	f89d 3010 	ldrb.w	r3, [sp, #16]
    1020:	2b01      	cmp	r3, #1
    1022:	d113      	bne.n	104c <CONFIG_FPROTECT_BLOCK_SIZE+0x4c>
    1024:	f89d 3012 	ldrb.w	r3, [sp, #18]
    1028:	2b03      	cmp	r3, #3
    102a:	d10f      	bne.n	104c <CONFIG_FPROTECT_BLOCK_SIZE+0x4c>
            state_primary_slot.copy_done == BOOT_FLAG_UNSET &&
    102c:	f89d 3018 	ldrb.w	r3, [sp, #24]
    1030:	2b01      	cmp	r3, #1
    1032:	d00b      	beq.n	104c <CONFIG_FPROTECT_BLOCK_SIZE+0x4c>
            state_secondary_slot.magic != BOOT_MAGIC_GOOD) {

        source = BOOT_STATUS_SOURCE_PRIMARY_SLOT;

        BOOT_LOG_INF("Boot source: primary slot");
    1034:	480d      	ldr	r0, [pc, #52]	; (106c <CONFIG_FPROTECT_BLOCK_SIZE+0x6c>)
    1036:	2149      	movs	r1, #73	; 0x49
    1038:	f003 fd96 	bl	4b68 <z_log_minimal_printk>
        return source;
    103c:	2002      	movs	r0, #2
    }

    BOOT_LOG_INF("Boot source: none");
    return BOOT_STATUS_SOURCE_NONE;
}
    103e:	b009      	add	sp, #36	; 0x24
    1040:	f85d fb04 	ldr.w	pc, [sp], #4
    BOOT_LOG_SWAP_STATE("Primary image", &state_primary_slot);
    1044:	4b0a      	ldr	r3, [pc, #40]	; (1070 <CONFIG_FPROTECT_BLOCK_SIZE+0x70>)
    1046:	e7c0      	b.n	fca <swap_status_source+0x1e>
    BOOT_LOG_SWAP_STATE("Secondary image", &state_secondary_slot);
    1048:	4b09      	ldr	r3, [pc, #36]	; (1070 <CONFIG_FPROTECT_BLOCK_SIZE+0x70>)
    104a:	e7d9      	b.n	1000 <CONFIG_FPROTECT_BLOCK_SIZE>
    BOOT_LOG_INF("Boot source: none");
    104c:	4809      	ldr	r0, [pc, #36]	; (1074 <CONFIG_FPROTECT_BLOCK_SIZE+0x74>)
    104e:	2149      	movs	r1, #73	; 0x49
    1050:	f003 fd8a 	bl	4b68 <z_log_minimal_printk>
    return BOOT_STATUS_SOURCE_NONE;
    1054:	2000      	movs	r0, #0
    1056:	e7f2      	b.n	103e <CONFIG_FPROTECT_BLOCK_SIZE+0x3e>
    1058:	000074c6 	.word	0x000074c6
    105c:	000074cc 	.word	0x000074cc
    1060:	000074de 	.word	0x000074de
    1064:	000074d0 	.word	0x000074d0
    1068:	0000751f 	.word	0x0000751f
    106c:	0000752f 	.word	0x0000752f
    1070:	000074c1 	.word	0x000074c1
    1074:	0000754e 	.word	0x0000754e

00001078 <fixup_revert>:
 * upgrade (by initializing the secondary slot).
 */
void
fixup_revert(const struct boot_loader_state *state, struct boot_status *bs,
        const struct flash_area *fap_sec)
{
    1078:	b570      	push	{r4, r5, r6, lr}
#if (BOOT_IMAGE_NUMBER == 1)
    (void)state;
#endif

    /* No fixup required */
    if (bs->swap_type != BOOT_SWAP_TYPE_REVERT ||
    107a:	684b      	ldr	r3, [r1, #4]
{
    107c:	4614      	mov	r4, r2
    if (bs->swap_type != BOOT_SWAP_TYPE_REVERT ||
    107e:	4a1e      	ldr	r2, [pc, #120]	; (10f8 <fixup_revert+0x80>)
    1080:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
    1084:	4293      	cmp	r3, r2
{
    1086:	b086      	sub	sp, #24
    1088:	4606      	mov	r6, r0
    108a:	460d      	mov	r5, r1
    if (bs->swap_type != BOOT_SWAP_TYPE_REVERT ||
    108c:	d12f      	bne.n	10ee <fixup_revert+0x76>
        bs->op != BOOT_STATUS_OP_MOVE ||
    108e:	680b      	ldr	r3, [r1, #0]
    1090:	2b01      	cmp	r3, #1
    1092:	d12c      	bne.n	10ee <fixup_revert+0x76>
        bs->idx != BOOT_STATUS_IDX_0) {
        return;
    }

    rc = boot_read_swap_state(fap_sec, &swap_state);
    1094:	a904      	add	r1, sp, #16
    1096:	4620      	mov	r0, r4
    1098:	f001 fef2 	bl	2e80 <boot_read_swap_state>
    assert(rc == 0);

    BOOT_LOG_SWAP_STATE("Secondary image", &swap_state);
    109c:	f89d 2010 	ldrb.w	r2, [sp, #16]
    10a0:	2a01      	cmp	r2, #1
    10a2:	d026      	beq.n	10f2 <fixup_revert+0x7a>
    10a4:	4b15      	ldr	r3, [pc, #84]	; (10fc <fixup_revert+0x84>)
    10a6:	4916      	ldr	r1, [pc, #88]	; (1100 <fixup_revert+0x88>)
    10a8:	2a03      	cmp	r2, #3
    10aa:	bf18      	it	ne
    10ac:	460b      	movne	r3, r1
    10ae:	f89d 2013 	ldrb.w	r2, [sp, #19]
    10b2:	9202      	str	r2, [sp, #8]
    10b4:	f89d 2012 	ldrb.w	r2, [sp, #18]
    10b8:	9201      	str	r2, [sp, #4]
    10ba:	f89d 2011 	ldrb.w	r2, [sp, #17]
    10be:	9200      	str	r2, [sp, #0]
    10c0:	4810      	ldr	r0, [pc, #64]	; (1104 <fixup_revert+0x8c>)
    10c2:	4a11      	ldr	r2, [pc, #68]	; (1108 <fixup_revert+0x90>)
    10c4:	2149      	movs	r1, #73	; 0x49
    10c6:	f003 fd4f 	bl	4b68 <z_log_minimal_printk>

    if (swap_state.magic == BOOT_MAGIC_UNSET) {
    10ca:	f89d 3010 	ldrb.w	r3, [sp, #16]
    10ce:	2b03      	cmp	r3, #3
    10d0:	d10d      	bne.n	10ee <fixup_revert+0x76>
        rc = swap_erase_trailer_sectors(state, fap_sec);
    10d2:	4621      	mov	r1, r4
    10d4:	4630      	mov	r0, r6
    10d6:	f003 fb97 	bl	4808 <swap_erase_trailer_sectors>
        assert(rc == 0);

        rc = boot_write_image_ok(fap_sec);
    10da:	4620      	mov	r0, r4
    10dc:	f004 f9bd 	bl	545a <boot_write_image_ok>
        assert(rc == 0);

        rc = boot_write_swap_size(fap_sec, bs->swap_size);
    10e0:	68a9      	ldr	r1, [r5, #8]
    10e2:	4620      	mov	r0, r4
    10e4:	f003 fabd 	bl	4662 <boot_write_swap_size>
        assert(rc == 0);

        rc = boot_write_magic(fap_sec);
    10e8:	4620      	mov	r0, r4
    10ea:	f001 febb 	bl	2e64 <boot_write_magic>
        assert(rc == 0);
    }
}
    10ee:	b006      	add	sp, #24
    10f0:	bd70      	pop	{r4, r5, r6, pc}
    BOOT_LOG_SWAP_STATE("Secondary image", &swap_state);
    10f2:	4b06      	ldr	r3, [pc, #24]	; (110c <fixup_revert+0x94>)
    10f4:	e7db      	b.n	10ae <fixup_revert+0x36>
    10f6:	bf00      	nop
    10f8:	04000100 	.word	0x04000100
    10fc:	000074c6 	.word	0x000074c6
    1100:	000074cc 	.word	0x000074cc
    1104:	000074de 	.word	0x000074de
    1108:	0000751f 	.word	0x0000751f
    110c:	000074c1 	.word	0x000074c1

00001110 <swap_run>:

void
swap_run(struct boot_loader_state *state, struct boot_status *bs,
         uint32_t copy_size)
{
    1110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1114:	6a43      	ldr	r3, [r0, #36]	; 0x24
    1116:	460c      	mov	r4, r1
    1118:	685e      	ldr	r6, [r3, #4]
    111a:	b089      	sub	sp, #36	; 0x24
    111c:	4605      	mov	r5, r0
    111e:	2101      	movs	r1, #1
    uint8_t image_index;
    const struct flash_area *fap_pri;
    const struct flash_area *fap_sec;
    int rc;

    sz = 0;
    1120:	2300      	movs	r3, #0
    g_last_idx = 0;

    sector_sz = boot_img_sector_size(state, BOOT_PRIMARY_SLOT, 0);
    while (1) {
        sz += sector_sz;
    1122:	4433      	add	r3, r6
        /* Skip to next sector because all sectors will be moved up. */
        g_last_idx++;
        if (sz >= copy_size) {
    1124:	429a      	cmp	r2, r3
    1126:	4608      	mov	r0, r1
    1128:	f101 0101 	add.w	r1, r1, #1
    112c:	d8f9      	bhi.n	1122 <swap_run+0x12>
    112e:	4b72      	ldr	r3, [pc, #456]	; (12f8 <swap_run+0x1e8>)
    1130:	6018      	str	r0, [r3, #0]
    }

    /*
     * When starting a new swap upgrade, check that there is enough space.
     */
    if (boot_status_is_reset(bs)) {
    1132:	4620      	mov	r0, r4
    1134:	f003 fb27 	bl	4786 <boot_status_is_reset>
    1138:	b1b8      	cbz	r0, 116a <swap_run+0x5a>
        sz = 0;
        trailer_sz = boot_trailer_sz(BOOT_WRITE_SZ(state));
    113a:	6de8      	ldr	r0, [r5, #92]	; 0x5c
    113c:	f003 fa6f 	bl	461e <boot_trailer_sz>
        first_trailer_idx = boot_img_num_sectors(state, BOOT_PRIMARY_SLOT) - 1;
    1140:	6aab      	ldr	r3, [r5, #40]	; 0x28
        sz = 0;
    1142:	2200      	movs	r2, #0
        first_trailer_idx = boot_img_num_sectors(state, BOOT_PRIMARY_SLOT) - 1;
    1144:	3b01      	subs	r3, #1

        while (1) {
            sz += sector_sz;
    1146:	4432      	add	r2, r6
            if  (sz >= trailer_sz) {
    1148:	4282      	cmp	r2, r0
    114a:	d201      	bcs.n	1150 <swap_run+0x40>
                break;
            }
            first_trailer_idx--;
    114c:	3b01      	subs	r3, #1
            sz += sector_sz;
    114e:	e7fa      	b.n	1146 <swap_run+0x36>
        }

        if (g_last_idx >= first_trailer_idx) {
    1150:	4a69      	ldr	r2, [pc, #420]	; (12f8 <swap_run+0x1e8>)
    1152:	6812      	ldr	r2, [r2, #0]
    1154:	429a      	cmp	r2, r3
    1156:	d308      	bcc.n	116a <swap_run+0x5a>
            BOOT_LOG_WRN("Not enough free space to run swap upgrade");
    1158:	4868      	ldr	r0, [pc, #416]	; (12fc <swap_run+0x1ec>)
    115a:	2157      	movs	r1, #87	; 0x57
    115c:	f003 fd04 	bl	4b68 <z_log_minimal_printk>
            bs->swap_type = BOOT_SWAP_TYPE_NONE;
    1160:	2301      	movs	r3, #1
    1162:	71e3      	strb	r3, [r4, #7]
        idx++;
    }

    flash_area_close(fap_pri);
    flash_area_close(fap_sec);
}
    1164:	b009      	add	sp, #36	; 0x24
    1166:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    rc = flash_area_open(FLASH_AREA_IMAGE_PRIMARY(image_index), &fap_pri);
    116a:	a906      	add	r1, sp, #24
    116c:	2002      	movs	r0, #2
    116e:	f000 fc37 	bl	19e0 <flash_area_open>
    rc = flash_area_open(FLASH_AREA_IMAGE_SECONDARY(image_index), &fap_sec);
    1172:	a907      	add	r1, sp, #28
    1174:	2005      	movs	r0, #5
    1176:	f000 fc33 	bl	19e0 <flash_area_open>
    fixup_revert(state, bs, fap_sec);
    117a:	9a07      	ldr	r2, [sp, #28]
    117c:	4621      	mov	r1, r4
    117e:	4628      	mov	r0, r5
    1180:	f7ff ff7a 	bl	1078 <fixup_revert>
    if (bs->op == BOOT_STATUS_OP_MOVE) {
    1184:	7963      	ldrb	r3, [r4, #5]
    1186:	2b01      	cmp	r3, #1
    1188:	d108      	bne.n	119c <swap_run+0x8c>
        idx = g_last_idx;
    118a:	4b5b      	ldr	r3, [pc, #364]	; (12f8 <swap_run+0x1e8>)
    BOOT_STATUS_ASSERT(rc == 0);
    118c:	f8df b170 	ldr.w	fp, [pc, #368]	; 1300 <swap_run+0x1f0>
        idx = g_last_idx;
    1190:	681f      	ldr	r7, [r3, #0]
            if (idx <= (g_last_idx - bs->idx + 1)) {
    1192:	4b59      	ldr	r3, [pc, #356]	; (12f8 <swap_run+0x1e8>)
    1194:	681b      	ldr	r3, [r3, #0]
        while (idx > 0) {
    1196:	b9a7      	cbnz	r7, 11c2 <swap_run+0xb2>
        bs->idx = BOOT_STATUS_IDX_0;
    1198:	2301      	movs	r3, #1
    119a:	6023      	str	r3, [r4, #0]
    bs->op = BOOT_STATUS_OP_SWAP;
    119c:	f04f 0302 	mov.w	r3, #2
        BOOT_STATUS_ASSERT(rc == 0);
    11a0:	f8df 815c 	ldr.w	r8, [pc, #348]	; 1300 <swap_run+0x1f0>
    bs->op = BOOT_STATUS_OP_SWAP;
    11a4:	7163      	strb	r3, [r4, #5]
    idx = 1;
    11a6:	2701      	movs	r7, #1
    while (idx <= g_last_idx) {
    11a8:	4b53      	ldr	r3, [pc, #332]	; (12f8 <swap_run+0x1e8>)
            boot_swap_sectors(idx, sector_sz, state, bs, fap_pri, fap_sec);
    11aa:	f8dd 9018 	ldr.w	r9, [sp, #24]
    while (idx <= g_last_idx) {
    11ae:	681b      	ldr	r3, [r3, #0]
    11b0:	429f      	cmp	r7, r3
    11b2:	d94a      	bls.n	124a <swap_run+0x13a>
    flash_area_close(fap_pri);
    11b4:	4648      	mov	r0, r9
    11b6:	f003 fd04 	bl	4bc2 <flash_area_close>
    flash_area_close(fap_sec);
    11ba:	9807      	ldr	r0, [sp, #28]
    11bc:	f003 fd01 	bl	4bc2 <flash_area_close>
    11c0:	e7d0      	b.n	1164 <swap_run+0x54>
            if (idx <= (g_last_idx - bs->idx + 1)) {
    11c2:	6822      	ldr	r2, [r4, #0]
    11c4:	3301      	adds	r3, #1
    11c6:	1a9b      	subs	r3, r3, r2
    11c8:	429f      	cmp	r7, r3
    11ca:	d83c      	bhi.n	1246 <swap_run+0x136>

static inline uint32_t
boot_img_sector_off(const struct boot_loader_state *state, size_t slot,
                    size_t sector)
{
    return BOOT_IMG(state, slot).sectors[sector].fs_off -
    11cc:	6a6b      	ldr	r3, [r5, #36]	; 0x24
                boot_move_sector_up(idx, sector_sz, state, bs, fap_pri, fap_sec);
    11ce:	f8dd 8018 	ldr.w	r8, [sp, #24]
           BOOT_IMG(state, slot).sectors[0].fs_off;
    11d2:	6819      	ldr	r1, [r3, #0]
    return BOOT_IMG(state, slot).sectors[sector].fs_off -
    11d4:	f853 0037 	ldr.w	r0, [r3, r7, lsl #3]
    11d8:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
    if (bs->idx == BOOT_STATUS_IDX_0) {
    11dc:	2a01      	cmp	r2, #1
    11de:	f853 3c08 	ldr.w	r3, [r3, #-8]
    11e2:	eba0 0901 	sub.w	r9, r0, r1
    11e6:	eba3 0a01 	sub.w	sl, r3, r1
    11ea:	d112      	bne.n	1212 <swap_run+0x102>
        if (bs->source != BOOT_STATUS_SOURCE_PRIMARY_SLOT) {
    11ec:	68e2      	ldr	r2, [r4, #12]
                boot_move_sector_up(idx, sector_sz, state, bs, fap_pri, fap_sec);
    11ee:	9b07      	ldr	r3, [sp, #28]
        if (bs->source != BOOT_STATUS_SOURCE_PRIMARY_SLOT) {
    11f0:	2a02      	cmp	r2, #2
    11f2:	d00a      	beq.n	120a <swap_run+0xfa>
            rc = swap_erase_trailer_sectors(state, fap_pri);
    11f4:	4641      	mov	r1, r8
    11f6:	4628      	mov	r0, r5
    11f8:	9303      	str	r3, [sp, #12]
    11fa:	f003 fb05 	bl	4808 <swap_erase_trailer_sectors>
            rc = swap_status_init(state, fap_pri, bs);
    11fe:	4622      	mov	r2, r4
    1200:	4641      	mov	r1, r8
    1202:	4628      	mov	r0, r5
    1204:	f003 fb36 	bl	4874 <swap_status_init>
    1208:	9b03      	ldr	r3, [sp, #12]
        rc = swap_erase_trailer_sectors(state, fap_sec);
    120a:	4619      	mov	r1, r3
    120c:	4628      	mov	r0, r5
    120e:	f003 fafb 	bl	4808 <swap_erase_trailer_sectors>
    rc = boot_erase_region(fap_pri, new_off, sz);
    1212:	4632      	mov	r2, r6
    1214:	4649      	mov	r1, r9
    1216:	4640      	mov	r0, r8
    1218:	f003 faf4 	bl	4804 <boot_erase_region>
    rc = boot_copy_region(state, fap_pri, fap_pri, old_off, new_off, sz);
    121c:	4653      	mov	r3, sl
    121e:	4642      	mov	r2, r8
    1220:	4641      	mov	r1, r8
    1222:	e9cd 9600 	strd	r9, r6, [sp]
    1226:	4628      	mov	r0, r5
    1228:	f7ff fc5c 	bl	ae4 <boot_copy_region>
    rc = boot_write_status(state, bs);
    122c:	4621      	mov	r1, r4
    122e:	4628      	mov	r0, r5
    1230:	f003 fab6 	bl	47a0 <boot_write_status>
    bs->idx++;
    1234:	6823      	ldr	r3, [r4, #0]
    1236:	3301      	adds	r3, #1
    1238:	6023      	str	r3, [r4, #0]
    BOOT_STATUS_ASSERT(rc == 0);
    123a:	b120      	cbz	r0, 1246 <swap_run+0x136>
    123c:	f8db 3000 	ldr.w	r3, [fp]
    1240:	3301      	adds	r3, #1
    1242:	f8cb 3000 	str.w	r3, [fp]
            idx--;
    1246:	3f01      	subs	r7, #1
    1248:	e7a3      	b.n	1192 <swap_run+0x82>
        if (idx >= bs->idx) {
    124a:	6823      	ldr	r3, [r4, #0]
    124c:	429f      	cmp	r7, r3
    124e:	d351      	bcc.n	12f4 <swap_run+0x1e4>
    1250:	6a6a      	ldr	r2, [r5, #36]	; 0x24
            boot_swap_sectors(idx, sector_sz, state, bs, fap_pri, fap_sec);
    1252:	f8dd a01c 	ldr.w	sl, [sp, #28]
    1256:	f852 1037 	ldr.w	r1, [r2, r7, lsl #3]
    125a:	9104      	str	r1, [sp, #16]
    125c:	00fb      	lsls	r3, r7, #3
           BOOT_IMG(state, slot).sectors[0].fs_off;
    125e:	6811      	ldr	r1, [r2, #0]
    1260:	9103      	str	r1, [sp, #12]
    return BOOT_IMG(state, slot).sectors[sector].fs_off -
    1262:	3b08      	subs	r3, #8
    1264:	6d29      	ldr	r1, [r5, #80]	; 0x50
    1266:	58c8      	ldr	r0, [r1, r3]
    1268:	6809      	ldr	r1, [r1, #0]
    126a:	eba0 0b01 	sub.w	fp, r0, r1
    if (bs->state == BOOT_STATUS_STATE_0) {
    126e:	7921      	ldrb	r1, [r4, #4]
    1270:	2901      	cmp	r1, #1
    1272:	d13d      	bne.n	12f0 <swap_run+0x1e0>
    1274:	58d1      	ldr	r1, [r2, r3]
    1276:	9b03      	ldr	r3, [sp, #12]
        rc = boot_erase_region(fap_pri, pri_off, sz);
    1278:	4632      	mov	r2, r6
    127a:	1ac9      	subs	r1, r1, r3
    127c:	4648      	mov	r0, r9
    127e:	9105      	str	r1, [sp, #20]
    1280:	f003 fac0 	bl	4804 <boot_erase_region>
        rc = boot_copy_region(state, fap_sec, fap_pri, sec_off, pri_off, sz);
    1284:	9905      	ldr	r1, [sp, #20]
    1286:	9100      	str	r1, [sp, #0]
    1288:	465b      	mov	r3, fp
    128a:	464a      	mov	r2, r9
    128c:	4651      	mov	r1, sl
    128e:	9601      	str	r6, [sp, #4]
    1290:	4628      	mov	r0, r5
    1292:	f7ff fc27 	bl	ae4 <boot_copy_region>
        rc = boot_write_status(state, bs);
    1296:	4621      	mov	r1, r4
    1298:	4628      	mov	r0, r5
    129a:	f003 fa81 	bl	47a0 <boot_write_status>
        bs->state = BOOT_STATUS_STATE_1;
    129e:	f04f 0302 	mov.w	r3, #2
    12a2:	7123      	strb	r3, [r4, #4]
        BOOT_STATUS_ASSERT(rc == 0);
    12a4:	b120      	cbz	r0, 12b0 <swap_run+0x1a0>
    12a6:	f8d8 3000 	ldr.w	r3, [r8]
    12aa:	3301      	adds	r3, #1
    12ac:	f8c8 3000 	str.w	r3, [r8]
        rc = boot_erase_region(fap_sec, sec_off, sz);
    12b0:	4632      	mov	r2, r6
    12b2:	4659      	mov	r1, fp
    12b4:	4650      	mov	r0, sl
    12b6:	f003 faa5 	bl	4804 <boot_erase_region>
        rc = boot_copy_region(state, fap_pri, fap_sec, pri_up_off, sec_off, sz);
    12ba:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
    12be:	4649      	mov	r1, r9
    12c0:	1a9b      	subs	r3, r3, r2
    12c2:	e9cd b600 	strd	fp, r6, [sp]
    12c6:	4652      	mov	r2, sl
    12c8:	4628      	mov	r0, r5
    12ca:	f7ff fc0b 	bl	ae4 <boot_copy_region>
        rc = boot_write_status(state, bs);
    12ce:	4621      	mov	r1, r4
    12d0:	4628      	mov	r0, r5
    12d2:	f003 fa65 	bl	47a0 <boot_write_status>
        bs->idx++;
    12d6:	6823      	ldr	r3, [r4, #0]
    12d8:	3301      	adds	r3, #1
    12da:	6023      	str	r3, [r4, #0]
        bs->state = BOOT_STATUS_STATE_0;
    12dc:	f04f 0301 	mov.w	r3, #1
    12e0:	7123      	strb	r3, [r4, #4]
        BOOT_STATUS_ASSERT(rc == 0);
    12e2:	b138      	cbz	r0, 12f4 <swap_run+0x1e4>
    12e4:	f8d8 3000 	ldr.w	r3, [r8]
    12e8:	3301      	adds	r3, #1
    12ea:	f8c8 3000 	str.w	r3, [r8]
    12ee:	e001      	b.n	12f4 <swap_run+0x1e4>
    if (bs->state == BOOT_STATUS_STATE_1) {
    12f0:	2902      	cmp	r1, #2
    12f2:	d0dd      	beq.n	12b0 <swap_run+0x1a0>
        idx++;
    12f4:	3701      	adds	r7, #1
    12f6:	e757      	b.n	11a8 <swap_run+0x98>
    12f8:	20000004 	.word	0x20000004
    12fc:	00007565 	.word	0x00007565
    1300:	20000d40 	.word	0x20000d40

00001304 <nrf_cleanup_peripheral>:
    return (uint32_t)p_reg + task;
}

NRF_STATIC_INLINE void nrf_rtc_task_trigger(NRF_RTC_Type * p_reg, nrf_rtc_task_t task)
{
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    1304:	4a11      	ldr	r2, [pc, #68]	; (134c <nrf_cleanup_peripheral+0x48>)
    p_reg->EVTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    1306:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    130a:	2101      	movs	r1, #1
    130c:	6051      	str	r1, [r2, #4]
    p_reg->EVTENCLR = mask;
    130e:	f8c2 3348 	str.w	r3, [r2, #840]	; 0x348
    p_reg->INTENCLR = mask;
    1312:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    1316:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    131a:	6051      	str	r1, [r2, #4]
    p_reg->EVTENCLR = mask;
    131c:	f8c2 3348 	str.w	r3, [r2, #840]	; 0x348
    p_reg->INTENCLR = mask;
    1320:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    1324:	f502 3298 	add.w	r2, r2, #77824	; 0x13000
    1328:	6051      	str	r1, [r2, #4]
    p_reg->EVTENCLR = mask;
    132a:	f8c2 3348 	str.w	r3, [r2, #840]	; 0x348
    p_reg->INTENCLR = mask;
    132e:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
}

NRF_STATIC_INLINE void nrf_uarte_disable(NRF_UARTE_Type * p_reg)
{
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    1332:	f5a2 3208 	sub.w	r2, r2, #139264	; 0x22000
    1336:	2100      	movs	r1, #0
    1338:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    p_reg->INTENCLR = mask;
    133c:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_clock_int_disable(NRF_CLOCK_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
    1340:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    1344:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
#if defined(NRF_UARTE1)
    nrf_uarte_disable(NRF_UARTE1);
    nrf_uarte_int_disable(NRF_UARTE1, 0xFFFFFFFF);
#endif
    nrf_cleanup_clock();
}
    1348:	4770      	bx	lr
    134a:	bf00      	nop
    134c:	4000b000 	.word	0x4000b000

00001350 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
    1350:	680b      	ldr	r3, [r1, #0]
    1352:	3301      	adds	r3, #1
    1354:	600b      	str	r3, [r1, #0]
	return _char_out(c);
    1356:	4b01      	ldr	r3, [pc, #4]	; (135c <char_out+0xc>)
    1358:	681b      	ldr	r3, [r3, #0]
    135a:	4718      	bx	r3
    135c:	20000008 	.word	0x20000008

00001360 <__printk_hook_install>:
	_char_out = fn;
    1360:	4b01      	ldr	r3, [pc, #4]	; (1368 <__printk_hook_install+0x8>)
    1362:	6018      	str	r0, [r3, #0]
}
    1364:	4770      	bx	lr
    1366:	bf00      	nop
    1368:	20000008 	.word	0x20000008

0000136c <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
    136c:	b507      	push	{r0, r1, r2, lr}
    136e:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
    1370:	2100      	movs	r1, #0
{
    1372:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
    1374:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	cbvprintf(char_out, &ctx, fmt, ap);
    1376:	4803      	ldr	r0, [pc, #12]	; (1384 <vprintk+0x18>)
    1378:	a901      	add	r1, sp, #4
    137a:	f000 f8e5 	bl	1548 <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
    137e:	b003      	add	sp, #12
    1380:	f85d fb04 	ldr.w	pc, [sp], #4
    1384:	00001351 	.word	0x00001351

00001388 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    1388:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    138c:	f8b0 9018 	ldrh.w	r9, [r0, #24]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    1390:	f019 0808 	ands.w	r8, r9, #8
{
    1394:	4604      	mov	r4, r0
    1396:	4693      	mov	fp, r2
	if (processing) {
    1398:	d00d      	beq.n	13b6 <process_event+0x2e>
		if (evt == EVT_COMPLETE) {
    139a:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    139c:	bf0c      	ite	eq
    139e:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
    13a2:	f049 0920 	orrne.w	r9, r9, #32
    13a6:	f8a0 9018 	strh.w	r9, [r0, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    13aa:	f38b 8811 	msr	BASEPRI, fp
    13ae:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
    13b2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    13b6:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
    13ba:	2902      	cmp	r1, #2
    13bc:	d107      	bne.n	13ce <process_event+0x46>
			evt = process_recheck(mgr);
    13be:	4620      	mov	r0, r4
    13c0:	f003 fb26 	bl	4a10 <process_recheck>
		if (evt == EVT_NOP) {
    13c4:	2800      	cmp	r0, #0
    13c6:	d0f0      	beq.n	13aa <process_event+0x22>
		if (evt == EVT_COMPLETE) {
    13c8:	2801      	cmp	r0, #1
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    13ca:	8b23      	ldrh	r3, [r4, #24]
		if (evt == EVT_COMPLETE) {
    13cc:	d14e      	bne.n	146c <process_event+0xe4>
			res = mgr->last_res;
    13ce:	6967      	ldr	r7, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    13d0:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
    13d2:	2f00      	cmp	r7, #0
    13d4:	da15      	bge.n	1402 <process_event+0x7a>
		*clients = mgr->clients;
    13d6:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    13d8:	f021 0107 	bic.w	r1, r1, #7
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
	list->tail = NULL;
    13dc:	e9c4 8800 	strd	r8, r8, [r4]
    13e0:	f041 0101 	orr.w	r1, r1, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
    13e4:	8321      	strh	r1, [r4, #24]
		onoff_transition_fn transit = NULL;
    13e6:	2600      	movs	r6, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    13e8:	8b21      	ldrh	r1, [r4, #24]
    13ea:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    13ee:	45ca      	cmp	sl, r9
    13f0:	d002      	beq.n	13f8 <process_event+0x70>
		if (do_monitors
    13f2:	68a3      	ldr	r3, [r4, #8]
    13f4:	2b00      	cmp	r3, #0
    13f6:	d15a      	bne.n	14ae <process_event+0x126>
		    || !sys_slist_is_empty(&clients)
    13f8:	b90d      	cbnz	r5, 13fe <process_event+0x76>
		    || (transit != NULL)) {
    13fa:	2e00      	cmp	r6, #0
    13fc:	d071      	beq.n	14e2 <process_event+0x15a>
    13fe:	2300      	movs	r3, #0
    1400:	e056      	b.n	14b0 <process_event+0x128>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    1402:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    1406:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    1408:	2a01      	cmp	r2, #1
    140a:	d81e      	bhi.n	144a <process_event+0xc2>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    140c:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
    1410:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
    1412:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1414:	b289      	uxth	r1, r1
    1416:	e9c4 8800 	strd	r8, r8, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    141a:	d10a      	bne.n	1432 <process_event+0xaa>
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    141c:	b13d      	cbz	r5, 142e <process_event+0xa6>
    141e:	8b63      	ldrh	r3, [r4, #26]
    1420:	462a      	mov	r2, r5

#define SYS_SLIST_STATIC_INIT(ptr_to_list) {NULL, NULL}

static inline sys_snode_t *z_snode_next_peek(sys_snode_t *node)
{
	return node->next;
    1422:	6812      	ldr	r2, [r2, #0]
				mgr->refs += 1U;
    1424:	3301      	adds	r3, #1
    1426:	b29b      	uxth	r3, r3
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    1428:	2a00      	cmp	r2, #0
    142a:	d1fa      	bne.n	1422 <process_event+0x9a>
    142c:	8363      	strh	r3, [r4, #26]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    142e:	f041 0102 	orr.w	r1, r1, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
    1432:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    1434:	4620      	mov	r0, r4
    1436:	f003 faeb 	bl	4a10 <process_recheck>
    143a:	4606      	mov	r6, r0
    143c:	2800      	cmp	r0, #0
    143e:	d0d3      	beq.n	13e8 <process_event+0x60>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    1440:	8b23      	ldrh	r3, [r4, #24]
    1442:	f043 0320 	orr.w	r3, r3, #32
    1446:	8323      	strh	r3, [r4, #24]
    1448:	e7cd      	b.n	13e6 <process_event+0x5e>
	} else if (state == ONOFF_STATE_TO_OFF) {
    144a:	2b04      	cmp	r3, #4
    144c:	d10c      	bne.n	1468 <process_event+0xe0>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    144e:	f021 0107 	bic.w	r1, r1, #7
    1452:	b289      	uxth	r1, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
    1454:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    1456:	4620      	mov	r0, r4
    1458:	f003 fada 	bl	4a10 <process_recheck>
    145c:	4605      	mov	r5, r0
    145e:	2800      	cmp	r0, #0
    1460:	d0c1      	beq.n	13e6 <process_event+0x5e>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    1462:	f041 0120 	orr.w	r1, r1, #32
    1466:	8321      	strh	r1, [r4, #24]
    1468:	2500      	movs	r5, #0
    146a:	e7bc      	b.n	13e6 <process_event+0x5e>
		} else if (evt == EVT_START) {
    146c:	2803      	cmp	r0, #3
    146e:	d109      	bne.n	1484 <process_event+0xfc>
			transit = mgr->transitions->start;
    1470:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1472:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->start;
    1476:	6816      	ldr	r6, [r2, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1478:	f043 0306 	orr.w	r3, r3, #6
	mgr->flags = (state & ONOFF_STATE_MASK)
    147c:	8323      	strh	r3, [r4, #24]
}
    147e:	2500      	movs	r5, #0
		res = 0;
    1480:	462f      	mov	r7, r5
    1482:	e7b1      	b.n	13e8 <process_event+0x60>
		} else if (evt == EVT_STOP) {
    1484:	2804      	cmp	r0, #4
    1486:	d106      	bne.n	1496 <process_event+0x10e>
			transit = mgr->transitions->stop;
    1488:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    148a:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->stop;
    148e:	6856      	ldr	r6, [r2, #4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1490:	f043 0304 	orr.w	r3, r3, #4
    1494:	e7f2      	b.n	147c <process_event+0xf4>
		} else if (evt == EVT_RESET) {
    1496:	2805      	cmp	r0, #5
    1498:	d106      	bne.n	14a8 <process_event+0x120>
			transit = mgr->transitions->reset;
    149a:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    149c:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->reset;
    14a0:	6896      	ldr	r6, [r2, #8]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    14a2:	f043 0305 	orr.w	r3, r3, #5
    14a6:	e7e9      	b.n	147c <process_event+0xf4>
    14a8:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
    14aa:	462e      	mov	r6, r5
    14ac:	e7e8      	b.n	1480 <process_event+0xf8>
				   && !sys_slist_is_empty(&mgr->monitors);
    14ae:	2301      	movs	r3, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    14b0:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    14b4:	8321      	strh	r1, [r4, #24]
    14b6:	f38b 8811 	msr	BASEPRI, fp
    14ba:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
    14be:	b9fb      	cbnz	r3, 1500 <process_event+0x178>
	while (!sys_slist_is_empty(list)) {
    14c0:	bb85      	cbnz	r5, 1524 <process_event+0x19c>
			if (transit != NULL) {
    14c2:	b116      	cbz	r6, 14ca <process_event+0x142>
				transit(mgr, transition_complete);
    14c4:	491f      	ldr	r1, [pc, #124]	; (1544 <process_event+0x1bc>)
    14c6:	4620      	mov	r0, r4
    14c8:	47b0      	blx	r6
	__asm__ volatile(
    14ca:	f04f 0320 	mov.w	r3, #32
    14ce:	f3ef 8b11 	mrs	fp, BASEPRI
    14d2:	f383 8811 	msr	BASEPRI, r3
    14d6:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    14da:	8b23      	ldrh	r3, [r4, #24]
    14dc:	f023 0308 	bic.w	r3, r3, #8
    14e0:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    14e2:	8b23      	ldrh	r3, [r4, #24]
    14e4:	06da      	lsls	r2, r3, #27
    14e6:	d525      	bpl.n	1534 <process_event+0x1ac>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    14e8:	f023 0310 	bic.w	r3, r3, #16
    14ec:	8323      	strh	r3, [r4, #24]
			evt = EVT_COMPLETE;
    14ee:	2101      	movs	r1, #1
		state = mgr->flags & ONOFF_STATE_MASK;
    14f0:	f8b4 9018 	ldrh.w	r9, [r4, #24]
    14f4:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
    14f8:	2900      	cmp	r1, #0
    14fa:	f47f af5e 	bne.w	13ba <process_event+0x32>
out:
    14fe:	e754      	b.n	13aa <process_event+0x22>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    1500:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    1502:	2900      	cmp	r1, #0
    1504:	d0dc      	beq.n	14c0 <process_event+0x138>
	return node->next;
    1506:	f8d1 9000 	ldr.w	r9, [r1]
		mon->callback(mgr, mon, state, res);
    150a:	f8d1 b004 	ldr.w	fp, [r1, #4]
    150e:	463b      	mov	r3, r7
    1510:	4652      	mov	r2, sl
    1512:	4620      	mov	r0, r4
    1514:	47d8      	blx	fp
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    1516:	f1b9 0f00 	cmp.w	r9, #0
    151a:	d0d1      	beq.n	14c0 <process_event+0x138>
    151c:	4649      	mov	r1, r9
    151e:	f8d9 9000 	ldr.w	r9, [r9]
    1522:	e7f2      	b.n	150a <process_event+0x182>
    1524:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
    1526:	463b      	mov	r3, r7
    1528:	4652      	mov	r2, sl
    152a:	4620      	mov	r0, r4
    152c:	682d      	ldr	r5, [r5, #0]
    152e:	f003 fa8b 	bl	4a48 <notify_one>
    1532:	e7c5      	b.n	14c0 <process_event+0x138>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    1534:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    1538:	bf1e      	ittt	ne
    153a:	f023 0320 	bicne.w	r3, r3, #32
    153e:	8323      	strhne	r3, [r4, #24]
			evt = EVT_RECHECK;
    1540:	2102      	movne	r1, #2
    1542:	e7d5      	b.n	14f0 <process_event+0x168>
    1544:	00004a75 	.word	0x00004a75

00001548 <cbvprintf>:
 * @param ap Variable parameters
 *
 * @return printed byte count if CONFIG_CBPRINTF_LIBC_SUBSTS is set
 */
int cbvprintf(cbprintf_cb out, void *ctx, const char *fmt, va_list ap)
{
    1548:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    154c:	b08f      	sub	sp, #60	; 0x3c
    154e:	461d      	mov	r5, r3
	char *prefix, *data;
	int min_width, precision, data_len;
	char padding_mode, length_mod, special;

	/* we pre-increment in the loop  afterwards */
	fmt--;
    1550:	1e53      	subs	r3, r2, #1
{
    1552:	9001      	str	r0, [sp, #4]
    1554:	468a      	mov	sl, r1
	fmt--;
    1556:	9302      	str	r3, [sp, #8]
	size_t count = 0;
    1558:	f04f 0800 	mov.w	r8, #0

start:
	while (*++fmt != '%') {
    155c:	9b02      	ldr	r3, [sp, #8]
    155e:	7858      	ldrb	r0, [r3, #1]
    1560:	2825      	cmp	r0, #37	; 0x25
    1562:	f103 0401 	add.w	r4, r3, #1
    1566:	d120      	bne.n	15aa <cbvprintf+0x62>
	prefix = "";
	padding_mode = 0;
	length_mod = 0;
	special = 0;

	for (fmt++ ; ; fmt++) {
    1568:	461e      	mov	r6, r3
	special = 0;
    156a:	2100      	movs	r1, #0
	precision = -1;
    156c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
	for (fmt++ ; ; fmt++) {
    1570:	3602      	adds	r6, #2
	length_mod = 0;
    1572:	460b      	mov	r3, r1
	padding_mode = 0;
    1574:	9103      	str	r1, [sp, #12]
	min_width = -1;
    1576:	463c      	mov	r4, r7
				precision = 10 * precision + *fmt - '0';
			} else {
				if (min_width < 0) {
					min_width = 0;
				}
				min_width = 10 * min_width + *fmt - '0';
    1578:	f04f 0c0a 	mov.w	ip, #10
		switch (*fmt) {
    157c:	7832      	ldrb	r2, [r6, #0]
    157e:	9602      	str	r6, [sp, #8]
    1580:	2a39      	cmp	r2, #57	; 0x39
    1582:	f106 0601 	add.w	r6, r6, #1
    1586:	d859      	bhi.n	163c <cbvprintf+0xf4>
    1588:	2a1f      	cmp	r2, #31
    158a:	d818      	bhi.n	15be <cbvprintf+0x76>
    158c:	2a00      	cmp	r2, #0
    158e:	f000 81fe 	beq.w	198e <cbvprintf+0x446>
			precision = 0;
			break;
		}

		default:
			OUTC('%');
    1592:	9b01      	ldr	r3, [sp, #4]
    1594:	4651      	mov	r1, sl
    1596:	2025      	movs	r0, #37	; 0x25
    1598:	4798      	blx	r3
			OUTC(*fmt);
    159a:	9b02      	ldr	r3, [sp, #8]
    159c:	4651      	mov	r1, sl
    159e:	7818      	ldrb	r0, [r3, #0]
    15a0:	9b01      	ldr	r3, [sp, #4]
    15a2:	4798      	blx	r3
    15a4:	f108 0802 	add.w	r8, r8, #2
			goto start;
    15a8:	e7d8      	b.n	155c <cbvprintf+0x14>
		if (*fmt == '\0') {
    15aa:	2800      	cmp	r0, #0
    15ac:	f000 81ef 	beq.w	198e <cbvprintf+0x446>
		OUTC(*fmt);
    15b0:	9b01      	ldr	r3, [sp, #4]
    15b2:	4651      	mov	r1, sl
    15b4:	4798      	blx	r3
    15b6:	f108 0801 	add.w	r8, r8, #1
	while (*++fmt != '%') {
    15ba:	9402      	str	r4, [sp, #8]
    15bc:	e7ce      	b.n	155c <cbvprintf+0x14>
		switch (*fmt) {
    15be:	f1a2 0020 	sub.w	r0, r2, #32
    15c2:	2819      	cmp	r0, #25
    15c4:	d8e5      	bhi.n	1592 <cbvprintf+0x4a>
    15c6:	f20f 0e08 	addw	lr, pc, #8
    15ca:	f85e f020 	ldr.w	pc, [lr, r0, lsl #2]
    15ce:	bf00      	nop
    15d0:	00001639 	.word	0x00001639
    15d4:	00001593 	.word	0x00001593
    15d8:	00001593 	.word	0x00001593
    15dc:	00001639 	.word	0x00001639
    15e0:	00001593 	.word	0x00001593
    15e4:	000016bd 	.word	0x000016bd
    15e8:	00001593 	.word	0x00001593
    15ec:	00001593 	.word	0x00001593
    15f0:	00001593 	.word	0x00001593
    15f4:	00001593 	.word	0x00001593
    15f8:	000016ff 	.word	0x000016ff
    15fc:	00001639 	.word	0x00001639
    1600:	00001593 	.word	0x00001593
    1604:	00001711 	.word	0x00001711
    1608:	000016cb 	.word	0x000016cb
    160c:	00001593 	.word	0x00001593
    1610:	000016d7 	.word	0x000016d7
    1614:	000016f3 	.word	0x000016f3
    1618:	000016f3 	.word	0x000016f3
    161c:	000016f3 	.word	0x000016f3
    1620:	000016f3 	.word	0x000016f3
    1624:	000016f3 	.word	0x000016f3
    1628:	000016f3 	.word	0x000016f3
    162c:	000016f3 	.word	0x000016f3
    1630:	000016f3 	.word	0x000016f3
    1634:	000016f3 	.word	0x000016f3
    1638:	4611      	mov	r1, r2
    163a:	e79f      	b.n	157c <cbvprintf+0x34>
    163c:	2a58      	cmp	r2, #88	; 0x58
    163e:	f000 8117 	beq.w	1870 <cbvprintf+0x328>
    1642:	f1a2 0063 	sub.w	r0, r2, #99	; 0x63
    1646:	fa5f fe80 	uxtb.w	lr, r0
    164a:	f1be 0f17 	cmp.w	lr, #23
    164e:	d8a0      	bhi.n	1592 <cbvprintf+0x4a>
    1650:	2817      	cmp	r0, #23
    1652:	d89e      	bhi.n	1592 <cbvprintf+0x4a>
    1654:	f20f 0e04 	addw	lr, pc, #4
    1658:	f85e f020 	ldr.w	pc, [lr, r0, lsl #2]
    165c:	000018cd 	.word	0x000018cd
    1660:	00001737 	.word	0x00001737
    1664:	00001593 	.word	0x00001593
    1668:	00001593 	.word	0x00001593
    166c:	00001593 	.word	0x00001593
    1670:	00001717 	.word	0x00001717
    1674:	00001737 	.word	0x00001737
    1678:	00001593 	.word	0x00001593
    167c:	00001593 	.word	0x00001593
    1680:	00001717 	.word	0x00001717
    1684:	00001593 	.word	0x00001593
    1688:	00001593 	.word	0x00001593
    168c:	00001593 	.word	0x00001593
    1690:	0000181d 	.word	0x0000181d
    1694:	00001593 	.word	0x00001593
    1698:	00001593 	.word	0x00001593
    169c:	000018af 	.word	0x000018af
    16a0:	00001593 	.word	0x00001593
    16a4:	00001737 	.word	0x00001737
    16a8:	00001593 	.word	0x00001593
    16ac:	00001593 	.word	0x00001593
    16b0:	0000181d 	.word	0x0000181d
    16b4:	00001593 	.word	0x00001593
    16b8:	00001717 	.word	0x00001717
			OUTC('%');
    16bc:	9b01      	ldr	r3, [sp, #4]
    16be:	4651      	mov	r1, sl
    16c0:	2025      	movs	r0, #37	; 0x25
    16c2:	4798      	blx	r3
    16c4:	f108 0801 	add.w	r8, r8, #1
			goto start;
    16c8:	e748      	b.n	155c <cbvprintf+0x14>
			padding_mode &= (char)~PAD_ZERO;
    16ca:	9a03      	ldr	r2, [sp, #12]
    16cc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    16d0:	9203      	str	r2, [sp, #12]
			precision = 0;
    16d2:	2700      	movs	r7, #0
			continue;
    16d4:	e752      	b.n	157c <cbvprintf+0x34>
			if (min_width < 0 && precision < 0 && !padding_mode) {
    16d6:	2c00      	cmp	r4, #0
    16d8:	da0b      	bge.n	16f2 <cbvprintf+0x1aa>
    16da:	2f00      	cmp	r7, #0
    16dc:	da0b      	bge.n	16f6 <cbvprintf+0x1ae>
    16de:	9803      	ldr	r0, [sp, #12]
    16e0:	2800      	cmp	r0, #0
    16e2:	f000 814c 	beq.w	197e <cbvprintf+0x436>
				min_width = 10 * min_width + *fmt - '0';
    16e6:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
    16ea:	fb0c 2404 	mla	r4, ip, r4, r2
    16ee:	3c30      	subs	r4, #48	; 0x30
    16f0:	e744      	b.n	157c <cbvprintf+0x34>
			if (precision >= 0) {
    16f2:	2f00      	cmp	r7, #0
    16f4:	dbf7      	blt.n	16e6 <cbvprintf+0x19e>
				precision = 10 * precision + *fmt - '0';
    16f6:	fb0c 2707 	mla	r7, ip, r7, r2
    16fa:	3f30      	subs	r7, #48	; 0x30
    16fc:	e73e      	b.n	157c <cbvprintf+0x34>
			if (precision >= 0) {
    16fe:	2f00      	cmp	r7, #0
				precision = va_arg(ap, int);
    1700:	f855 2b04 	ldr.w	r2, [r5], #4
			if (precision >= 0) {
    1704:	f280 813d 	bge.w	1982 <cbvprintf+0x43a>
				if (min_width < 0) {
    1708:	2a00      	cmp	r2, #0
    170a:	f280 813c 	bge.w	1986 <cbvprintf+0x43e>
					min_width = -min_width;
    170e:	4254      	negs	r4, r2
		switch (*fmt) {
    1710:	2202      	movs	r2, #2
				padding_mode = PAD_ZERO;
    1712:	9203      	str	r2, [sp, #12]
    1714:	e732      	b.n	157c <cbvprintf+0x34>
			if (*fmt == 'h' && length_mod == 'h') {
    1716:	2a68      	cmp	r2, #104	; 0x68
    1718:	d103      	bne.n	1722 <cbvprintf+0x1da>
    171a:	2b68      	cmp	r3, #104	; 0x68
    171c:	d106      	bne.n	172c <cbvprintf+0x1e4>
				length_mod = 'H';
    171e:	2348      	movs	r3, #72	; 0x48
    1720:	e72c      	b.n	157c <cbvprintf+0x34>
			} else if (*fmt == 'l' && length_mod == 'l') {
    1722:	2a6c      	cmp	r2, #108	; 0x6c
    1724:	d102      	bne.n	172c <cbvprintf+0x1e4>
    1726:	2b6c      	cmp	r3, #108	; 0x6c
    1728:	f000 812f 	beq.w	198a <cbvprintf+0x442>
			} else if (length_mod == '\0') {
    172c:	2b00      	cmp	r3, #0
    172e:	f47f af30 	bne.w	1592 <cbvprintf+0x4a>
    1732:	4613      	mov	r3, r2
		switch (*fmt) {
    1734:	e722      	b.n	157c <cbvprintf+0x34>
			if (length_mod == 'z') {
    1736:	2b7a      	cmp	r3, #122	; 0x7a
    1738:	d106      	bne.n	1748 <cbvprintf+0x200>
				d = va_arg(ap, long);
    173a:	f855 6b04 	ldr.w	r6, [r5], #4
    173e:	ea4f 79e6 	mov.w	r9, r6, asr #31
			if (*fmt != 'u' && (int_value_type)d < 0) {
    1742:	2a75      	cmp	r2, #117	; 0x75
    1744:	d11a      	bne.n	177c <cbvprintf+0x234>
    1746:	e012      	b.n	176e <cbvprintf+0x226>
			} else if (length_mod == 'l') {
    1748:	2b6c      	cmp	r3, #108	; 0x6c
    174a:	d0f6      	beq.n	173a <cbvprintf+0x1f2>
			} else if (length_mod == 'L') {
    174c:	2b4c      	cmp	r3, #76	; 0x4c
    174e:	d108      	bne.n	1762 <cbvprintf+0x21a>
				long long lld = va_arg(ap, long long);
    1750:	3507      	adds	r5, #7
    1752:	f025 0307 	bic.w	r3, r5, #7
    1756:	461d      	mov	r5, r3
				d = (uint_value_type) lld;
    1758:	f8d3 9004 	ldr.w	r9, [r3, #4]
    175c:	f855 6b08 	ldr.w	r6, [r5], #8
    1760:	e7ef      	b.n	1742 <cbvprintf+0x1fa>
			} else if (*fmt == 'u') {
    1762:	2a75      	cmp	r2, #117	; 0x75
				precision = va_arg(ap, int);
    1764:	f855 6b04 	ldr.w	r6, [r5], #4
			} else if (*fmt == 'u') {
    1768:	d106      	bne.n	1778 <cbvprintf+0x230>
				d = va_arg(ap, unsigned int);
    176a:	f04f 0900 	mov.w	r9, #0
			} else if (special == ' ') {
    176e:	2920      	cmp	r1, #32
    1770:	d14d      	bne.n	180e <cbvprintf+0x2c6>
				prefix = " ";
    1772:	4b89      	ldr	r3, [pc, #548]	; (1998 <cbvprintf+0x450>)
				min_width--;
    1774:	3c01      	subs	r4, #1
    1776:	e009      	b.n	178c <cbvprintf+0x244>
				d = va_arg(ap, int);
    1778:	ea4f 79e6 	mov.w	r9, r6, asr #31
			if (*fmt != 'u' && (int_value_type)d < 0) {
    177c:	f1b9 0f00 	cmp.w	r9, #0
    1780:	daf5      	bge.n	176e <cbvprintf+0x226>
				d = -d;
    1782:	4276      	negs	r6, r6
				prefix = "-";
    1784:	4b85      	ldr	r3, [pc, #532]	; (199c <cbvprintf+0x454>)
				d = -d;
    1786:	eb69 0949 	sbc.w	r9, r9, r9, lsl #1
				min_width--;
    178a:	3c01      	subs	r4, #1
	prefix = "";
    178c:	9300      	str	r3, [sp, #0]
	int i = 0;
    178e:	ab0d      	add	r3, sp, #52	; 0x34
    1790:	9305      	str	r3, [sp, #20]
    1792:	f04f 0b00 	mov.w	fp, #0
		unsigned int c = num % base;
    1796:	4630      	mov	r0, r6
    1798:	4649      	mov	r1, r9
    179a:	220a      	movs	r2, #10
    179c:	2300      	movs	r3, #0
    179e:	f8cd b010 	str.w	fp, [sp, #16]
    17a2:	f7fe fc9b 	bl	dc <__aeabi_uldivmod>
		buftop[--i] = c + '0';
    17a6:	9b05      	ldr	r3, [sp, #20]
    17a8:	f8cd 901c 	str.w	r9, [sp, #28]
    17ac:	3230      	adds	r2, #48	; 0x30
    17ae:	f803 2901 	strb.w	r2, [r3], #-1
		num /= base;
    17b2:	4630      	mov	r0, r6
    17b4:	e9cd 3605 	strd	r3, r6, [sp, #20]
    17b8:	4649      	mov	r1, r9
    17ba:	2300      	movs	r3, #0
    17bc:	220a      	movs	r2, #10
    17be:	f7fe fc8d 	bl	dc <__aeabi_uldivmod>
	} while (num);
    17c2:	9b06      	ldr	r3, [sp, #24]
    17c4:	2b0a      	cmp	r3, #10
    17c6:	9b07      	ldr	r3, [sp, #28]
    17c8:	f173 0300 	sbcs.w	r3, r3, #0
		buftop[--i] = c + '0';
    17cc:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
		num /= base;
    17d0:	4606      	mov	r6, r0
    17d2:	4689      	mov	r9, r1
	} while (num);
    17d4:	d2df      	bcs.n	1796 <cbvprintf+0x24e>
	return -i;
    17d6:	9b04      	ldr	r3, [sp, #16]
    17d8:	f1c3 0b01 	rsb	fp, r3, #1
			data = buf + sizeof(buf) - data_len;
    17dc:	3338      	adds	r3, #56	; 0x38
			data = buf + sizeof(buf) - data_len;
    17de:	eb0d 0603 	add.w	r6, sp, r3
		}

		if (precision < 0 && (padding_mode & PAD_ZERO)) {
    17e2:	2f00      	cmp	r7, #0
			data = buf + sizeof(buf) - data_len;
    17e4:	f1a6 0604 	sub.w	r6, r6, #4
		if (precision < 0 && (padding_mode & PAD_ZERO)) {
    17e8:	da04      	bge.n	17f4 <cbvprintf+0x2ac>
    17ea:	9b03      	ldr	r3, [sp, #12]
    17ec:	f013 0f01 	tst.w	r3, #1
    17f0:	bf18      	it	ne
    17f2:	4627      	movne	r7, r4
		precision -= data_len;
		if (precision > 0) {
			min_width -= precision;
		}

		if (!(padding_mode & PAD_TAIL)) {
    17f4:	9b03      	ldr	r3, [sp, #12]
		precision -= data_len;
    17f6:	eba7 090b 	sub.w	r9, r7, fp
		if (precision > 0) {
    17fa:	f1b9 0f00 	cmp.w	r9, #0
		min_width -= data_len;
    17fe:	bfd4      	ite	le
    1800:	eba4 040b 	suble.w	r4, r4, fp
			min_width -= precision;
    1804:	1be4      	subgt	r4, r4, r7
		if (!(padding_mode & PAD_TAIL)) {
    1806:	0798      	lsls	r0, r3, #30
    1808:	d47d      	bmi.n	1906 <cbvprintf+0x3be>
    180a:	4627      	mov	r7, r4
    180c:	e06e      	b.n	18ec <cbvprintf+0x3a4>
			} else if (special == '+') {
    180e:	292b      	cmp	r1, #43	; 0x2b
				prefix = "+";
    1810:	bf0a      	itet	eq
    1812:	4b63      	ldreq	r3, [pc, #396]	; (19a0 <cbvprintf+0x458>)
	prefix = "";
    1814:	4b63      	ldrne	r3, [pc, #396]	; (19a4 <cbvprintf+0x45c>)
				min_width--;
    1816:	f104 34ff 	addeq.w	r4, r4, #4294967295	; 0xffffffff
    181a:	e7b7      	b.n	178c <cbvprintf+0x244>
			if (*fmt == 'p') {
    181c:	2a70      	cmp	r2, #112	; 0x70
    181e:	d127      	bne.n	1870 <cbvprintf+0x328>
				x = (uintptr_t)va_arg(ap, void *);
    1820:	f855 0b04 	ldr.w	r0, [r5], #4
    1824:	2300      	movs	r3, #0
				if (x == (uint_value_type)0) {
    1826:	2800      	cmp	r0, #0
    1828:	d058      	beq.n	18dc <cbvprintf+0x394>
				prefix = (*fmt & 0x20) ? "0x" : "0X";
    182a:	495f      	ldr	r1, [pc, #380]	; (19a8 <cbvprintf+0x460>)
    182c:	9100      	str	r1, [sp, #0]
				min_width -= 2;
    182e:	3c02      	subs	r4, #2
			data_len = convert_value(x, 16, ALPHA(*fmt),
    1830:	f002 0260 	and.w	r2, r2, #96	; 0x60
    1834:	f1a2 0939 	sub.w	r9, r2, #57	; 0x39
	int i = 0;
    1838:	f10d 0e34 	add.w	lr, sp, #52	; 0x34
    183c:	2600      	movs	r6, #0
		unsigned int c = num % base;
    183e:	f000 020f 	and.w	r2, r0, #15
		if (c >= 10) {
    1842:	2a09      	cmp	r2, #9
			c += alpha;
    1844:	bf88      	it	hi
    1846:	444a      	addhi	r2, r9
		buftop[--i] = c + '0';
    1848:	3230      	adds	r2, #48	; 0x30
    184a:	f80e 2901 	strb.w	r2, [lr], #-1
	} while (num);
    184e:	2810      	cmp	r0, #16
		num /= base;
    1850:	ea4f 1210 	mov.w	r2, r0, lsr #4
    1854:	ea42 7203 	orr.w	r2, r2, r3, lsl #28
    1858:	ea4f 1113 	mov.w	r1, r3, lsr #4
	} while (num);
    185c:	f173 0300 	sbcs.w	r3, r3, #0
		buftop[--i] = c + '0';
    1860:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
	} while (num);
    1864:	d21f      	bcs.n	18a6 <cbvprintf+0x35e>
	return -i;
    1866:	f1c6 0b01 	rsb	fp, r6, #1
			data = buf + sizeof(buf) - data_len;
    186a:	f106 0338 	add.w	r3, r6, #56	; 0x38
    186e:	e7b6      	b.n	17de <cbvprintf+0x296>
			} else if (length_mod == 'l') {
    1870:	2b6c      	cmp	r3, #108	; 0x6c
    1872:	d103      	bne.n	187c <cbvprintf+0x334>
				x = va_arg(ap, unsigned int);
    1874:	f855 0b04 	ldr.w	r0, [r5], #4
    1878:	2300      	movs	r3, #0
    187a:	e008      	b.n	188e <cbvprintf+0x346>
			} else if (length_mod == 'L') {
    187c:	2b4c      	cmp	r3, #76	; 0x4c
    187e:	d1f9      	bne.n	1874 <cbvprintf+0x32c>
				x = va_arg(ap, unsigned long long);
    1880:	3507      	adds	r5, #7
    1882:	f025 0307 	bic.w	r3, r5, #7
    1886:	461d      	mov	r5, r3
    1888:	685b      	ldr	r3, [r3, #4]
    188a:	f855 0b08 	ldr.w	r0, [r5], #8
			if (special == '#') {
    188e:	2923      	cmp	r1, #35	; 0x23
    1890:	d106      	bne.n	18a0 <cbvprintf+0x358>
				prefix = (*fmt & 0x20) ? "0x" : "0X";
    1892:	4e46      	ldr	r6, [pc, #280]	; (19ac <cbvprintf+0x464>)
    1894:	4944      	ldr	r1, [pc, #272]	; (19a8 <cbvprintf+0x460>)
    1896:	f012 0f20 	tst.w	r2, #32
    189a:	bf08      	it	eq
    189c:	4631      	moveq	r1, r6
    189e:	e7c5      	b.n	182c <cbvprintf+0x2e4>
	prefix = "";
    18a0:	4940      	ldr	r1, [pc, #256]	; (19a4 <cbvprintf+0x45c>)
    18a2:	9100      	str	r1, [sp, #0]
    18a4:	e7c4      	b.n	1830 <cbvprintf+0x2e8>
		buftop[--i] = c + '0';
    18a6:	4666      	mov	r6, ip
		num /= base;
    18a8:	4610      	mov	r0, r2
    18aa:	460b      	mov	r3, r1
    18ac:	e7c7      	b.n	183e <cbvprintf+0x2f6>
			data = va_arg(ap, char *);
    18ae:	f855 6b04 	ldr.w	r6, [r5], #4
			data_len = strlen(data);
    18b2:	4630      	mov	r0, r6
    18b4:	f003 fac3 	bl	4e3e <strlen>
			if (precision >= 0 && data_len > precision) {
    18b8:	2f00      	cmp	r7, #0
			data_len = strlen(data);
    18ba:	4683      	mov	fp, r0
			if (precision >= 0 && data_len > precision) {
    18bc:	db02      	blt.n	18c4 <cbvprintf+0x37c>
    18be:	42b8      	cmp	r0, r7
    18c0:	bfa8      	it	ge
    18c2:	46bb      	movge	fp, r7
    18c4:	4b37      	ldr	r3, [pc, #220]	; (19a4 <cbvprintf+0x45c>)
    18c6:	9300      	str	r3, [sp, #0]
    18c8:	2700      	movs	r7, #0
    18ca:	e793      	b.n	17f4 <cbvprintf+0x2ac>
			buf[0] = c;
    18cc:	f855 3b04 	ldr.w	r3, [r5], #4
    18d0:	f88d 3020 	strb.w	r3, [sp, #32]
			data_len = 1;
    18d4:	f04f 0b01 	mov.w	fp, #1
			data = buf;
    18d8:	ae08      	add	r6, sp, #32
    18da:	e7f3      	b.n	18c4 <cbvprintf+0x37c>
					data = "(nil)";
    18dc:	4e34      	ldr	r6, [pc, #208]	; (19b0 <cbvprintf+0x468>)
					data_len = 5;
    18de:	f04f 0b05 	mov.w	fp, #5
    18e2:	e7ef      	b.n	18c4 <cbvprintf+0x37c>
			while (--min_width >= 0) {
				OUTC(' ');
    18e4:	9b01      	ldr	r3, [sp, #4]
    18e6:	4651      	mov	r1, sl
    18e8:	2020      	movs	r0, #32
    18ea:	4798      	blx	r3
			while (--min_width >= 0) {
    18ec:	3f01      	subs	r7, #1
    18ee:	d5f9      	bpl.n	18e4 <cbvprintf+0x39c>
    18f0:	1e63      	subs	r3, r4, #1
    18f2:	1c59      	adds	r1, r3, #1
    18f4:	bfac      	ite	ge
    18f6:	4622      	movge	r2, r4
    18f8:	2200      	movlt	r2, #0
    18fa:	f1c4 0400 	rsb	r4, r4, #0
    18fe:	bfb8      	it	lt
    1900:	2400      	movlt	r4, #0
    1902:	4490      	add	r8, r2
    1904:	441c      	add	r4, r3
    1906:	9f00      	ldr	r7, [sp, #0]
    1908:	eba8 0307 	sub.w	r3, r8, r7
    190c:	e004      	b.n	1918 <cbvprintf+0x3d0>
    190e:	9300      	str	r3, [sp, #0]
			}
		}
		while (*prefix) {
			OUTC(*prefix++);
    1910:	4651      	mov	r1, sl
    1912:	9b01      	ldr	r3, [sp, #4]
    1914:	4798      	blx	r3
    1916:	9b00      	ldr	r3, [sp, #0]
    1918:	eb03 0807 	add.w	r8, r3, r7
		while (*prefix) {
    191c:	f817 0b01 	ldrb.w	r0, [r7], #1
    1920:	2800      	cmp	r0, #0
    1922:	d1f4      	bne.n	190e <cbvprintf+0x3c6>
		precision -= data_len;
    1924:	464f      	mov	r7, r9
		}
		while (--precision >= 0) {
    1926:	3f01      	subs	r7, #1
    1928:	d519      	bpl.n	195e <cbvprintf+0x416>
    192a:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
    192e:	3301      	adds	r3, #1
    1930:	bfb8      	it	lt
    1932:	f04f 0900 	movlt.w	r9, #0
    1936:	465f      	mov	r7, fp
			OUTC('0');
		}
		while (--data_len >= 0) {
    1938:	3f01      	subs	r7, #1
    193a:	d515      	bpl.n	1968 <cbvprintf+0x420>
    193c:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
    1940:	3301      	adds	r3, #1
    1942:	bfb8      	it	lt
    1944:	f04f 0b00 	movlt.w	fp, #0
    1948:	44d9      	add	r9, fp
    194a:	4626      	mov	r6, r4
			OUTC(*data++);
		}
		while (--min_width >= 0) {
    194c:	3e01      	subs	r6, #1
    194e:	d511      	bpl.n	1974 <cbvprintf+0x42c>
    1950:	1e63      	subs	r3, r4, #1
    1952:	3301      	adds	r3, #1
    1954:	bfb8      	it	lt
    1956:	2400      	movlt	r4, #0
    1958:	44a1      	add	r9, r4
    195a:	44c8      	add	r8, r9
    195c:	e5fe      	b.n	155c <cbvprintf+0x14>
			OUTC('0');
    195e:	9b01      	ldr	r3, [sp, #4]
    1960:	4651      	mov	r1, sl
    1962:	2030      	movs	r0, #48	; 0x30
    1964:	4798      	blx	r3
    1966:	e7de      	b.n	1926 <cbvprintf+0x3de>
			OUTC(*data++);
    1968:	f816 0b01 	ldrb.w	r0, [r6], #1
    196c:	9b01      	ldr	r3, [sp, #4]
    196e:	4651      	mov	r1, sl
    1970:	4798      	blx	r3
    1972:	e7e1      	b.n	1938 <cbvprintf+0x3f0>
			OUTC(' ');
    1974:	9b01      	ldr	r3, [sp, #4]
    1976:	4651      	mov	r1, sl
    1978:	2020      	movs	r0, #32
    197a:	4798      	blx	r3
    197c:	e7e6      	b.n	194c <cbvprintf+0x404>
				padding_mode = PAD_ZERO;
    197e:	2201      	movs	r2, #1
    1980:	e6c7      	b.n	1712 <cbvprintf+0x1ca>
				precision = va_arg(ap, int);
    1982:	4617      	mov	r7, r2
    1984:	e5fa      	b.n	157c <cbvprintf+0x34>
    1986:	4614      	mov	r4, r2
    1988:	e5f8      	b.n	157c <cbvprintf+0x34>
				length_mod = 'L';
    198a:	234c      	movs	r3, #76	; 0x4c
    198c:	e5f6      	b.n	157c <cbvprintf+0x34>
		}

		goto start;
	}
}
    198e:	4640      	mov	r0, r8
    1990:	b00f      	add	sp, #60	; 0x3c
    1992:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1996:	bf00      	nop
    1998:	00007a4f 	.word	0x00007a4f
    199c:	000076a2 	.word	0x000076a2
    19a0:	000076a4 	.word	0x000076a4
    19a4:	00007d92 	.word	0x00007d92
    19a8:	000076a9 	.word	0x000076a9
    19ac:	000076a6 	.word	0x000076a6
    19b0:	000076ac 	.word	0x000076ac

000019b4 <get_flash_area_from_id>:
extern const struct flash_area *flash_map;
extern const int flash_map_entries;

static struct flash_area const *get_flash_area_from_id(int idx)
{
	for (int i = 0; i < flash_map_entries; i++) {
    19b4:	4b08      	ldr	r3, [pc, #32]	; (19d8 <get_flash_area_from_id+0x24>)
{
    19b6:	b530      	push	{r4, r5, lr}
	for (int i = 0; i < flash_map_entries; i++) {
    19b8:	681c      	ldr	r4, [r3, #0]
		if (flash_map[i].fa_id == idx) {
    19ba:	4b08      	ldr	r3, [pc, #32]	; (19dc <get_flash_area_from_id+0x28>)
{
    19bc:	4601      	mov	r1, r0
    19be:	681a      	ldr	r2, [r3, #0]
	for (int i = 0; i < flash_map_entries; i++) {
    19c0:	2300      	movs	r3, #0
    19c2:	429c      	cmp	r4, r3
    19c4:	dc01      	bgt.n	19ca <get_flash_area_from_id+0x16>
			return &flash_map[i];
		}
	}

	return NULL;
    19c6:	2000      	movs	r0, #0
}
    19c8:	bd30      	pop	{r4, r5, pc}
		if (flash_map[i].fa_id == idx) {
    19ca:	4610      	mov	r0, r2
    19cc:	3210      	adds	r2, #16
    19ce:	7805      	ldrb	r5, [r0, #0]
    19d0:	428d      	cmp	r5, r1
    19d2:	d0f9      	beq.n	19c8 <get_flash_area_from_id+0x14>
	for (int i = 0; i < flash_map_entries; i++) {
    19d4:	3301      	adds	r3, #1
    19d6:	e7f4      	b.n	19c2 <get_flash_area_from_id+0xe>
    19d8:	00006fa0 	.word	0x00006fa0
    19dc:	2000000c 	.word	0x2000000c

000019e0 <flash_area_open>:

int flash_area_open(uint8_t id, const struct flash_area **fap)
{
	const struct flash_area *area;

	if (flash_map == NULL) {
    19e0:	4b08      	ldr	r3, [pc, #32]	; (1a04 <flash_area_open+0x24>)
    19e2:	681b      	ldr	r3, [r3, #0]
{
    19e4:	b510      	push	{r4, lr}
    19e6:	460c      	mov	r4, r1
	if (flash_map == NULL) {
    19e8:	b12b      	cbz	r3, 19f6 <flash_area_open+0x16>
		return -EACCES;
	}

	area = get_flash_area_from_id(id);
    19ea:	f7ff ffe3 	bl	19b4 <get_flash_area_from_id>
	if (area == NULL) {
    19ee:	b128      	cbz	r0, 19fc <flash_area_open+0x1c>
		return -ENOENT;
	}

	*fap = area;
    19f0:	6020      	str	r0, [r4, #0]
	return 0;
    19f2:	2000      	movs	r0, #0
}
    19f4:	bd10      	pop	{r4, pc}
		return -EACCES;
    19f6:	f06f 000c 	mvn.w	r0, #12
    19fa:	e7fb      	b.n	19f4 <flash_area_open+0x14>
		return -ENOENT;
    19fc:	f06f 0001 	mvn.w	r0, #1
    1a00:	e7f8      	b.n	19f4 <flash_area_open+0x14>
    1a02:	bf00      	nop
    1a04:	2000000c 	.word	0x2000000c

00001a08 <flash_area_get_sectors>:

	return true;
}

int flash_area_get_sectors(int idx, uint32_t *cnt, struct flash_sector *ret)
{
    1a08:	b530      	push	{r4, r5, lr}
    1a0a:	b089      	sub	sp, #36	; 0x24
    1a0c:	460c      	mov	r4, r1
    1a0e:	4615      	mov	r5, r2
	cb_data->area_idx = idx;
    1a10:	9001      	str	r0, [sp, #4]
	fa = get_flash_area_from_id(idx);
    1a12:	f7ff ffcf 	bl	19b4 <get_flash_area_from_id>
	if (fa == NULL) {
    1a16:	b1b8      	cbz	r0, 1a48 <flash_area_get_sectors+0x40>
	cb_data->area_off = fa->fa_off;
    1a18:	6843      	ldr	r3, [r0, #4]
    1a1a:	9302      	str	r3, [sp, #8]
	cb_data->area_len = fa->fa_size;
    1a1c:	6883      	ldr	r3, [r0, #8]
	cb_data->ret_len = *cnt;
    1a1e:	6822      	ldr	r2, [r4, #0]
	flash_dev = device_get_binding(fa->fa_dev_name);
    1a20:	68c0      	ldr	r0, [r0, #12]
	cb_data->ret = ret;
    1a22:	e9cd 3503 	strd	r3, r5, [sp, #12]
	cb_data->ret_idx = 0U;
    1a26:	2300      	movs	r3, #0
	cb_data->status = 0;
    1a28:	e9cd 2306 	strd	r2, r3, [sp, #24]
	cb_data->ret_idx = 0U;
    1a2c:	9305      	str	r3, [sp, #20]
	flash_dev = device_get_binding(fa->fa_dev_name);
    1a2e:	f003 f8a8 	bl	4b82 <device_get_binding>
	if (flash_dev == NULL) {
    1a32:	b160      	cbz	r0, 1a4e <flash_area_get_sectors+0x46>
	flash_page_foreach(flash_dev, cb, cb_data);
    1a34:	4907      	ldr	r1, [pc, #28]	; (1a54 <flash_area_get_sectors+0x4c>)
    1a36:	aa01      	add	r2, sp, #4
    1a38:	f003 faae 	bl	4f98 <flash_page_foreach>
	if (cb_data->status == 0) {
    1a3c:	9807      	ldr	r0, [sp, #28]
    1a3e:	b908      	cbnz	r0, 1a44 <flash_area_get_sectors+0x3c>
		*cnt = cb_data->ret_idx;
    1a40:	9b05      	ldr	r3, [sp, #20]
    1a42:	6023      	str	r3, [r4, #0]
	struct layout_data data;

	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
}
    1a44:	b009      	add	sp, #36	; 0x24
    1a46:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
    1a48:	f06f 0015 	mvn.w	r0, #21
    1a4c:	e7fa      	b.n	1a44 <flash_area_get_sectors+0x3c>
		return -ENODEV;
    1a4e:	f06f 0012 	mvn.w	r0, #18
	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
    1a52:	e7f7      	b.n	1a44 <flash_area_get_sectors+0x3c>
    1a54:	00004b87 	.word	0x00004b87

00001a58 <console_out>:
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
    1a58:	280a      	cmp	r0, #10
{
    1a5a:	b538      	push	{r3, r4, r5, lr}
    1a5c:	4d06      	ldr	r5, [pc, #24]	; (1a78 <console_out+0x20>)
    1a5e:	4604      	mov	r4, r0
	if ('\n' == c) {
    1a60:	d103      	bne.n	1a6a <console_out+0x12>
		uart_poll_out(uart_console_dev, '\r');
    1a62:	6828      	ldr	r0, [r5, #0]
    1a64:	210d      	movs	r1, #13
    1a66:	f003 f93d 	bl	4ce4 <uart_poll_out>
	}
	uart_poll_out(uart_console_dev, c);
    1a6a:	6828      	ldr	r0, [r5, #0]
    1a6c:	b2e1      	uxtb	r1, r4
    1a6e:	f003 f939 	bl	4ce4 <uart_poll_out>

	return c;
}
    1a72:	4620      	mov	r0, r4
    1a74:	bd38      	pop	{r3, r4, r5, pc}
    1a76:	bf00      	nop
    1a78:	20000d44 	.word	0x20000d44

00001a7c <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
    1a7c:	b510      	push	{r4, lr}
    1a7e:	4807      	ldr	r0, [pc, #28]	; (1a9c <uart_console_init+0x20>)
	__stdout_hook_install(console_out);
    1a80:	4c07      	ldr	r4, [pc, #28]	; (1aa0 <uart_console_init+0x24>)
    1a82:	f002 fc43 	bl	430c <z_impl_device_get_binding>

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
    1a86:	4b07      	ldr	r3, [pc, #28]	; (1aa4 <uart_console_init+0x28>)
    1a88:	6018      	str	r0, [r3, #0]
	__stdout_hook_install(console_out);
    1a8a:	4620      	mov	r0, r4
    1a8c:	f000 fda8 	bl	25e0 <__stdout_hook_install>
	__printk_hook_install(console_out);
    1a90:	4620      	mov	r0, r4
    1a92:	f7ff fc65 	bl	1360 <__printk_hook_install>

	uart_console_hook_install();

	return 0;
}
    1a96:	2000      	movs	r0, #0
    1a98:	bd10      	pop	{r4, pc}
    1a9a:	bf00      	nop
    1a9c:	000076b2 	.word	0x000076b2
    1aa0:	00001a59 	.word	0x00001a59
    1aa4:	20000d44 	.word	0x20000d44

00001aa8 <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
    1aa8:	4b08      	ldr	r3, [pc, #32]	; (1acc <onoff_stop+0x24>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    1aaa:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    1aac:	1ac3      	subs	r3, r0, r3
{
    1aae:	460d      	mov	r5, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    1ab0:	4907      	ldr	r1, [pc, #28]	; (1ad0 <onoff_stop+0x28>)
	size_t offset = (size_t)(mgr - data->mgr);
    1ab2:	109b      	asrs	r3, r3, #2
{
    1ab4:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    1ab6:	4359      	muls	r1, r3
    1ab8:	4806      	ldr	r0, [pc, #24]	; (1ad4 <onoff_stop+0x2c>)
    1aba:	2240      	movs	r2, #64	; 0x40
    1abc:	f003 f931 	bl	4d22 <stop>
	notify(mgr, res);
    1ac0:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    1ac2:	4601      	mov	r1, r0
	notify(mgr, res);
    1ac4:	4620      	mov	r0, r4
}
    1ac6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    1aca:	4718      	bx	r3
    1acc:	20000d5c 	.word	0x20000d5c
    1ad0:	b6db6db7 	.word	0xb6db6db7
    1ad4:	00006c98 	.word	0x00006c98

00001ad8 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    1ad8:	b573      	push	{r0, r1, r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    1ada:	4c0c      	ldr	r4, [pc, #48]	; (1b0c <onoff_start+0x34>)
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    1adc:	4a0c      	ldr	r2, [pc, #48]	; (1b10 <onoff_start+0x38>)
    1ade:	2340      	movs	r3, #64	; 0x40
	size_t offset = (size_t)(mgr - data->mgr);
    1ae0:	1b04      	subs	r4, r0, r4
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    1ae2:	9300      	str	r3, [sp, #0]
{
    1ae4:	460d      	mov	r5, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    1ae6:	460b      	mov	r3, r1
    1ae8:	490a      	ldr	r1, [pc, #40]	; (1b14 <onoff_start+0x3c>)
	size_t offset = (size_t)(mgr - data->mgr);
    1aea:	10a4      	asrs	r4, r4, #2
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    1aec:	4361      	muls	r1, r4
{
    1aee:	4606      	mov	r6, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    1af0:	4809      	ldr	r0, [pc, #36]	; (1b18 <onoff_start+0x40>)
    1af2:	f003 f943 	bl	4d7c <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    1af6:	1e01      	subs	r1, r0, #0
    1af8:	da05      	bge.n	1b06 <onoff_start+0x2e>
		notify(mgr, err);
    1afa:	4630      	mov	r0, r6
    1afc:	462b      	mov	r3, r5
	}
}
    1afe:	b002      	add	sp, #8
    1b00:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		notify(mgr, err);
    1b04:	4718      	bx	r3
}
    1b06:	b002      	add	sp, #8
    1b08:	bd70      	pop	{r4, r5, r6, pc}
    1b0a:	bf00      	nop
    1b0c:	20000d5c 	.word	0x20000d5c
    1b10:	00004df1 	.word	0x00004df1
    1b14:	b6db6db7 	.word	0xb6db6db7
    1b18:	00006c98 	.word	0x00006c98

00001b1c <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    1b1c:	2200      	movs	r2, #0
{
    1b1e:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    1b20:	2101      	movs	r1, #1
{
    1b22:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    1b24:	4610      	mov	r0, r2
    1b26:	f000 f9ab 	bl	1e80 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
    1b2a:	2000      	movs	r0, #0
    1b2c:	f000 f98a 	bl	1e44 <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
    1b30:	480f      	ldr	r0, [pc, #60]	; (1b70 <clk_init+0x54>)
    1b32:	f001 fbd5 	bl	32e0 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    1b36:	4b0f      	ldr	r3, [pc, #60]	; (1b74 <clk_init+0x58>)
    1b38:	4298      	cmp	r0, r3
    1b3a:	d115      	bne.n	1b68 <clk_init+0x4c>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    1b3c:	f003 fcca 	bl	54d4 <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
    1b40:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
    1b42:	490d      	ldr	r1, [pc, #52]	; (1b78 <clk_init+0x5c>)
    1b44:	4630      	mov	r0, r6
    1b46:	f002 ffb2 	bl	4aae <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    1b4a:	2800      	cmp	r0, #0
    1b4c:	db0b      	blt.n	1b66 <clk_init+0x4a>
	struct nrf_clock_control_data *data = dev->data;
    1b4e:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    1b50:	4909      	ldr	r1, [pc, #36]	; (1b78 <clk_init+0x5c>)
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    1b52:	2501      	movs	r5, #1
    1b54:	6435      	str	r5, [r6, #64]	; 0x40
		err = onoff_manager_init(get_onoff_manager(dev, i),
    1b56:	f104 001c 	add.w	r0, r4, #28
    1b5a:	f002 ffa8 	bl	4aae <onoff_manager_init>
		if (err < 0) {
    1b5e:	2800      	cmp	r0, #0
    1b60:	db01      	blt.n	1b66 <clk_init+0x4a>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    1b62:	64e5      	str	r5, [r4, #76]	; 0x4c
	}

	return 0;
    1b64:	2000      	movs	r0, #0
}
    1b66:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    1b68:	f06f 0004 	mvn.w	r0, #4
    1b6c:	e7fb      	b.n	1b66 <clk_init+0x4a>
    1b6e:	bf00      	nop
    1b70:	00001bb1 	.word	0x00001bb1
    1b74:	0bad0000 	.word	0x0bad0000
    1b78:	00006f04 	.word	0x00006f04

00001b7c <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    1b7c:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    1b7e:	230c      	movs	r3, #12
    1b80:	4809      	ldr	r0, [pc, #36]	; (1ba8 <clkstarted_handle.constprop.0+0x2c>)
    1b82:	434b      	muls	r3, r1
static void clkstarted_handle(const struct device *dev,
    1b84:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
    1b86:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
    1b88:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	sub_data->cb = NULL;
    1b8c:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
    1b8e:	3340      	adds	r3, #64	; 0x40
	sub_data->cb = NULL;
    1b90:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
    1b92:	4418      	add	r0, r3
    1b94:	f003 f8b2 	bl	4cfc <set_on_state>
	if (callback) {
    1b98:	b12d      	cbz	r5, 1ba6 <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
    1b9a:	4632      	mov	r2, r6
    1b9c:	462b      	mov	r3, r5
    1b9e:	4803      	ldr	r0, [pc, #12]	; (1bac <clkstarted_handle.constprop.0+0x30>)
}
    1ba0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    1ba4:	4718      	bx	r3
}
    1ba6:	bd70      	pop	{r4, r5, r6, pc}
    1ba8:	20000d5c 	.word	0x20000d5c
    1bac:	00006c98 	.word	0x00006c98

00001bb0 <clock_event_handler>:
	switch (event) {
    1bb0:	b110      	cbz	r0, 1bb8 <clock_event_handler+0x8>
    1bb2:	2801      	cmp	r0, #1
    1bb4:	d004      	beq.n	1bc0 <clock_event_handler+0x10>
    1bb6:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    1bb8:	4b03      	ldr	r3, [pc, #12]	; (1bc8 <clock_event_handler+0x18>)
    1bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    1bbc:	075b      	lsls	r3, r3, #29
    1bbe:	d101      	bne.n	1bc4 <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    1bc0:	f7ff bfdc 	b.w	1b7c <clkstarted_handle.constprop.0>
}
    1bc4:	4770      	bx	lr
    1bc6:	bf00      	nop
    1bc8:	20000d5c 	.word	0x20000d5c

00001bcc <generic_hfclk_start>:
{
    1bcc:	b508      	push	{r3, lr}
    1bce:	f04f 0320 	mov.w	r3, #32
    1bd2:	f3ef 8111 	mrs	r1, BASEPRI
    1bd6:	f383 8811 	msr	BASEPRI, r3
    1bda:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    1bde:	4a12      	ldr	r2, [pc, #72]	; (1c28 <generic_hfclk_start+0x5c>)
    1be0:	6813      	ldr	r3, [r2, #0]
    1be2:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
    1be6:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
    1bea:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    1bec:	d00c      	beq.n	1c08 <generic_hfclk_start+0x3c>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    1bee:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    1bf2:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    1bf6:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    1bfa:	f013 0301 	ands.w	r3, r3, #1
    1bfe:	d003      	beq.n	1c08 <generic_hfclk_start+0x3c>
			set_on_state(get_hf_flags());
    1c00:	480a      	ldr	r0, [pc, #40]	; (1c2c <generic_hfclk_start+0x60>)
    1c02:	f003 f87b 	bl	4cfc <set_on_state>
			already_started = true;
    1c06:	2301      	movs	r3, #1
	__asm__ volatile(
    1c08:	f381 8811 	msr	BASEPRI, r1
    1c0c:	f3bf 8f6f 	isb	sy
	if (already_started) {
    1c10:	b123      	cbz	r3, 1c1c <generic_hfclk_start+0x50>
}
    1c12:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    1c16:	2000      	movs	r0, #0
    1c18:	f7ff bfb0 	b.w	1b7c <clkstarted_handle.constprop.0>
}
    1c1c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    1c20:	2001      	movs	r0, #1
    1c22:	f001 bb6d 	b.w	3300 <nrfx_clock_start>
    1c26:	bf00      	nop
    1c28:	20000dac 	.word	0x20000dac
    1c2c:	20000d9c 	.word	0x20000d9c

00001c30 <lfclk_start>:
{
    1c30:	b510      	push	{r4, lr}
	if (!once) {
    1c32:	4c07      	ldr	r4, [pc, #28]	; (1c50 <lfclk_start+0x20>)
    1c34:	7823      	ldrb	r3, [r4, #0]
    1c36:	b92b      	cbnz	r3, 1c44 <lfclk_start+0x14>
		arch_syscall_invoke1(*(uintptr_t *)&usec_to_wait, K_SYSCALL_K_BUSY_WAIT);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_busy_wait(usec_to_wait);
    1c38:	f44f 70a5 	mov.w	r0, #330	; 0x14a
    1c3c:	f004 fffe 	bl	6c3c <z_impl_k_busy_wait>
		once = true;
    1c40:	2301      	movs	r3, #1
    1c42:	7023      	strb	r3, [r4, #0]
}
    1c44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    1c48:	2000      	movs	r0, #0
    1c4a:	f001 bb59 	b.w	3300 <nrfx_clock_start>
    1c4e:	bf00      	nop
    1c50:	2000280c 	.word	0x2000280c

00001c54 <generic_hfclk_stop>:
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    1c54:	4b09      	ldr	r3, [pc, #36]	; (1c7c <generic_hfclk_stop+0x28>)
    1c56:	f3bf 8f5b 	dmb	ish
    1c5a:	e853 2f00 	ldrex	r2, [r3]
    1c5e:	f022 0102 	bic.w	r1, r2, #2
    1c62:	e843 1000 	strex	r0, r1, [r3]
    1c66:	2800      	cmp	r0, #0
    1c68:	d1f7      	bne.n	1c5a <generic_hfclk_stop+0x6>
    1c6a:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    1c6e:	07d3      	lsls	r3, r2, #31
    1c70:	d402      	bmi.n	1c78 <generic_hfclk_stop+0x24>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    1c72:	2001      	movs	r0, #1
    1c74:	f001 bb8c 	b.w	3390 <nrfx_clock_stop>
}
    1c78:	4770      	bx	lr
    1c7a:	bf00      	nop
    1c7c:	20000dac 	.word	0x20000dac

00001c80 <z_nrf_clock_control_lf_on>:
{
    1c80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    1c84:	4937      	ldr	r1, [pc, #220]	; (1d64 <z_nrf_clock_control_lf_on+0xe4>)
    1c86:	f3bf 8f5b 	dmb	ish
    1c8a:	4607      	mov	r7, r0
    1c8c:	2201      	movs	r2, #1
    1c8e:	e851 3f00 	ldrex	r3, [r1]
    1c92:	e841 2000 	strex	r0, r2, [r1]
    1c96:	2800      	cmp	r0, #0
    1c98:	d1f9      	bne.n	1c8e <z_nrf_clock_control_lf_on+0xe>
    1c9a:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
    1c9e:	b933      	cbnz	r3, 1cae <z_nrf_clock_control_lf_on+0x2e>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    1ca0:	4931      	ldr	r1, [pc, #196]	; (1d68 <z_nrf_clock_control_lf_on+0xe8>)
		err = onoff_request(mgr, &cli);
    1ca2:	4832      	ldr	r0, [pc, #200]	; (1d6c <z_nrf_clock_control_lf_on+0xec>)
    1ca4:	604b      	str	r3, [r1, #4]
    1ca6:	60cb      	str	r3, [r1, #12]
    1ca8:	608a      	str	r2, [r1, #8]
    1caa:	f002 ff13 	bl	4ad4 <onoff_request>
	switch (start_mode) {
    1cae:	1e7b      	subs	r3, r7, #1
    1cb0:	2b01      	cmp	r3, #1
    1cb2:	d831      	bhi.n	1d18 <z_nrf_clock_control_lf_on+0x98>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    1cb4:	2f01      	cmp	r7, #1
    1cb6:	d107      	bne.n	1cc8 <z_nrf_clock_control_lf_on+0x48>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    1cb8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1cbc:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    1cc0:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    1cc4:	2b01      	cmp	r3, #1
    1cc6:	d027      	beq.n	1d18 <z_nrf_clock_control_lf_on+0x98>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    1cc8:	f004 ffb2 	bl	6c30 <k_is_in_isr>
    1ccc:	4604      	mov	r4, r0
    1cce:	b918      	cbnz	r0, 1cd8 <z_nrf_clock_control_lf_on+0x58>
 */
static inline bool k_is_pre_kernel(void)
{
	extern bool z_sys_post_kernel; /* in init.c */

	return !z_sys_post_kernel;
    1cd0:	4b27      	ldr	r3, [pc, #156]	; (1d70 <z_nrf_clock_control_lf_on+0xf0>)
	int key = isr_mode ? irq_lock() : 0;
    1cd2:	781b      	ldrb	r3, [r3, #0]
    1cd4:	2b00      	cmp	r3, #0
    1cd6:	d13d      	bne.n	1d54 <z_nrf_clock_control_lf_on+0xd4>
	__asm__ volatile(
    1cd8:	f04f 0320 	mov.w	r3, #32
    1cdc:	f3ef 8611 	mrs	r6, BASEPRI
    1ce0:	f383 8811 	msr	BASEPRI, r3
    1ce4:	f3bf 8f6f 	isb	sy
    1ce8:	2401      	movs	r4, #1
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1cea:	f8df 9088 	ldr.w	r9, [pc, #136]	; 1d74 <z_nrf_clock_control_lf_on+0xf4>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    1cee:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    p_reg->LFCLKSRC = (uint32_t)(source);
    1cf2:	f04f 0801 	mov.w	r8, #1
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    1cf6:	f8d5 3418 	ldr.w	r3, [r5, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    1cfa:	f8d5 2418 	ldr.w	r2, [r5, #1048]	; 0x418
    1cfe:	03d2      	lsls	r2, r2, #15
    1d00:	d50c      	bpl.n	1d1c <z_nrf_clock_control_lf_on+0x9c>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    1d02:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
    1d06:	2b01      	cmp	r3, #1
    1d08:	d001      	beq.n	1d0e <z_nrf_clock_control_lf_on+0x8e>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    1d0a:	2f01      	cmp	r7, #1
    1d0c:	d106      	bne.n	1d1c <z_nrf_clock_control_lf_on+0x9c>
	if (isr_mode) {
    1d0e:	b1dc      	cbz	r4, 1d48 <z_nrf_clock_control_lf_on+0xc8>
	__asm__ volatile(
    1d10:	f386 8811 	msr	BASEPRI, r6
    1d14:	f3bf 8f6f 	isb	sy
}
    1d18:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    1d1c:	4630      	mov	r0, r6
    1d1e:	f000 f8fb 	bl	1f18 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    1d22:	f8d5 3518 	ldr.w	r3, [r5, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    1d26:	2b00      	cmp	r3, #0
    1d28:	d1e5      	bne.n	1cf6 <z_nrf_clock_control_lf_on+0x76>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    1d2a:	f8d5 2104 	ldr.w	r2, [r5, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
    1d2e:	2a00      	cmp	r2, #0
    1d30:	d0e1      	beq.n	1cf6 <z_nrf_clock_control_lf_on+0x76>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    1d32:	f8c5 3104 	str.w	r3, [r5, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    1d36:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
    1d3a:	f8c5 8518 	str.w	r8, [r5, #1304]	; 0x518
    1d3e:	f8c9 8180 	str.w	r8, [r9, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    1d42:	f8c5 8008 	str.w	r8, [r5, #8]
}
    1d46:	e7d6      	b.n	1cf6 <z_nrf_clock_control_lf_on+0x76>
    p_reg->INTENSET = mask;
    1d48:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1d4c:	2202      	movs	r2, #2
    1d4e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    1d52:	e7e1      	b.n	1d18 <z_nrf_clock_control_lf_on+0x98>
    p_reg->INTENCLR = mask;
    1d54:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1d58:	2202      	movs	r2, #2
    1d5a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
    1d5e:	4606      	mov	r6, r0
}
    1d60:	e7c3      	b.n	1cea <z_nrf_clock_control_lf_on+0x6a>
    1d62:	bf00      	nop
    1d64:	20000db0 	.word	0x20000db0
    1d68:	20000d4c 	.word	0x20000d4c
    1d6c:	20000d78 	.word	0x20000d78
    1d70:	20002c3f 	.word	0x20002c3f
    1d74:	e000e100 	.word	0xe000e100

00001d78 <rtc_nrf_isr>:
 * probably better abstract that at some point (e.g. query and reset
 * it by pointer at runtime, maybe?) so we don't have this leaky
 * symbol.
 */
void rtc_nrf_isr(const void *arg)
{
    1d78:	b570      	push	{r4, r5, r6, lr}
    1d7a:	4d15      	ldr	r5, [pc, #84]	; (1dd0 <rtc_nrf_isr+0x58>)
    return p_reg->INTENSET & mask;
    1d7c:	4c15      	ldr	r4, [pc, #84]	; (1dd4 <rtc_nrf_isr+0x5c>)
	ARG_UNUSED(arg);

	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    1d7e:	2600      	movs	r6, #0
    1d80:	682b      	ldr	r3, [r5, #0]
    1d82:	2000      	movs	r0, #0
    1d84:	b106      	cbz	r6, 1d88 <rtc_nrf_isr+0x10>
				handler(chan, cc_val,
					cc_data[chan].user_context);
			}
		}
	}
}
    1d86:	bd70      	pop	{r4, r5, r6, pc}
    1d88:	f8d4 2304 	ldr.w	r2, [r4, #772]	; 0x304
		if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan)) &&
    1d8c:	03d2      	lsls	r2, r2, #15
    1d8e:	d5fa      	bpl.n	1d86 <rtc_nrf_isr+0xe>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    1d90:	f8d4 2140 	ldr.w	r2, [r4, #320]	; 0x140
    1d94:	2a00      	cmp	r2, #0
    1d96:	d0f6      	beq.n	1d86 <rtc_nrf_isr+0xe>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    1d98:	f8c4 6140 	str.w	r6, [r4, #320]	; 0x140
    1d9c:	f8d4 2140 	ldr.w	r2, [r4, #320]	; 0x140
    p_reg->EVTENCLR = mask;
    1da0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    1da4:	f8c4 2348 	str.w	r2, [r4, #840]	; 0x348
    return p_reg->CC[ch];
    1da8:	f8d4 1540 	ldr.w	r1, [r4, #1344]	; 0x540
     return p_reg->COUNTER;
    1dac:	f8d4 6504 	ldr.w	r6, [r4, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    1db0:	1a72      	subs	r2, r6, r1
    1db2:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
				cc_val = now;
    1db6:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
    1dba:	bf88      	it	hi
    1dbc:	4631      	movhi	r1, r6
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    1dbe:	2601      	movs	r6, #1
			if (handler) {
    1dc0:	b11b      	cbz	r3, 1dca <rtc_nrf_isr+0x52>
				handler(chan, cc_val,
    1dc2:	686a      	ldr	r2, [r5, #4]
    1dc4:	6028      	str	r0, [r5, #0]
    1dc6:	4798      	blx	r3
    1dc8:	e7da      	b.n	1d80 <rtc_nrf_isr+0x8>
    1dca:	602b      	str	r3, [r5, #0]
}
    1dcc:	e7db      	b.n	1d86 <rtc_nrf_isr+0xe>
    1dce:	bf00      	nop
    1dd0:	20000db8 	.word	0x20000db8
    1dd4:	40011000 	.word	0x40011000

00001dd8 <sys_clock_driver_init>:

	atomic_or(&alloc_mask, BIT(chan));
}

int sys_clock_driver_init(const struct device *dev)
{
    1dd8:	b538      	push	{r3, r4, r5, lr}
    p_reg->PRESCALER = val;
    1dda:	4c0f      	ldr	r4, [pc, #60]	; (1e18 <sys_clock_driver_init+0x40>)
    1ddc:	2500      	movs	r5, #0
    p_reg->INTENSET = mask;
    1dde:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    p_reg->PRESCALER = val;
    1de2:	f8c4 5508 	str.w	r5, [r4, #1288]	; 0x508
    p_reg->INTENSET = mask;
    1de6:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    1dea:	4b0c      	ldr	r3, [pc, #48]	; (1e1c <sys_clock_driver_init+0x44>)
    1dec:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    1df0:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
	}

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    1df4:	2101      	movs	r1, #1
    1df6:	462a      	mov	r2, r5
    1df8:	2011      	movs	r0, #17
    1dfa:	f000 f841 	bl	1e80 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    1dfe:	2011      	movs	r0, #17
    1e00:	f000 f820 	bl	1e44 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    1e04:	2301      	movs	r3, #1

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    1e06:	4a06      	ldr	r2, [pc, #24]	; (1e20 <sys_clock_driver_init+0x48>)
    1e08:	60a3      	str	r3, [r4, #8]
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		compare_set(0, counter() + CYC_PER_TICK,
			    sys_clock_timeout_handler, NULL);
	}

	z_nrf_clock_control_lf_on(mode);
    1e0a:	2002      	movs	r0, #2
    1e0c:	6023      	str	r3, [r4, #0]
	int_mask = BIT_MASK(CHAN_COUNT);
    1e0e:	6013      	str	r3, [r2, #0]
	z_nrf_clock_control_lf_on(mode);
    1e10:	f7ff ff36 	bl	1c80 <z_nrf_clock_control_lf_on>

	return 0;
}
    1e14:	4628      	mov	r0, r5
    1e16:	bd38      	pop	{r3, r4, r5, pc}
    1e18:	40011000 	.word	0x40011000
    1e1c:	e000e100 	.word	0xe000e100
    1e20:	20000dc0 	.word	0x20000dc0

00001e24 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
    1e24:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    1e28:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    1e2a:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    1e2e:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    1e32:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    1e34:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    1e38:	2902      	cmp	r1, #2
    beq _oops
    1e3a:	d0ff      	beq.n	1e3c <_oops>

00001e3c <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    1e3c:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    1e3e:	f002 ffe9 	bl	4e14 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    1e42:	bd01      	pop	{r0, pc}

00001e44 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    1e44:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    1e46:	2b00      	cmp	r3, #0
    1e48:	db08      	blt.n	1e5c <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1e4a:	2201      	movs	r2, #1
    1e4c:	f000 001f 	and.w	r0, r0, #31
    1e50:	fa02 f000 	lsl.w	r0, r2, r0
    1e54:	095b      	lsrs	r3, r3, #5
    1e56:	4a02      	ldr	r2, [pc, #8]	; (1e60 <arch_irq_enable+0x1c>)
    1e58:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    1e5c:	4770      	bx	lr
    1e5e:	bf00      	nop
    1e60:	e000e100 	.word	0xe000e100

00001e64 <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    1e64:	4b05      	ldr	r3, [pc, #20]	; (1e7c <arch_irq_is_enabled+0x18>)
    1e66:	0942      	lsrs	r2, r0, #5
    1e68:	f000 001f 	and.w	r0, r0, #31
    1e6c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    1e70:	2301      	movs	r3, #1
    1e72:	fa03 f000 	lsl.w	r0, r3, r0
}
    1e76:	4010      	ands	r0, r2
    1e78:	4770      	bx	lr
    1e7a:	bf00      	nop
    1e7c:	e000e100 	.word	0xe000e100

00001e80 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    1e80:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    1e82:	2b00      	cmp	r3, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1e84:	bfa8      	it	ge
    1e86:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
		prio += _IRQ_PRIO_OFFSET;
    1e8a:	f101 0101 	add.w	r1, r1, #1
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1e8e:	bfb8      	it	lt
    1e90:	4b06      	ldrlt	r3, [pc, #24]	; (1eac <z_arm_irq_priority_set+0x2c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1e92:	ea4f 1141 	mov.w	r1, r1, lsl #5
    1e96:	bfac      	ite	ge
    1e98:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1e9c:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1ea0:	b2c9      	uxtb	r1, r1
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1ea2:	bfb4      	ite	lt
    1ea4:	5419      	strblt	r1, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1ea6:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
}
    1eaa:	4770      	bx	lr
    1eac:	e000ed14 	.word	0xe000ed14

00001eb0 <z_check_thread_stack_fail>:
			fault_addr, psp)) {
		/* Thread stack corruption */
		return thread->stack_info.start;
	}
#else
	if (IS_MPU_GUARD_VIOLATION((uint32_t)z_main_stack,
    1eb0:	f110 0f16 	cmn.w	r0, #22
    1eb4:	4b07      	ldr	r3, [pc, #28]	; (1ed4 <z_check_thread_stack_fail+0x24>)
    1eb6:	d008      	beq.n	1eca <z_check_thread_stack_fail+0x1a>
    1eb8:	4298      	cmp	r0, r3
    1eba:	d308      	bcc.n	1ece <z_check_thread_stack_fail+0x1e>
    1ebc:	3320      	adds	r3, #32
    1ebe:	4283      	cmp	r3, r0
    1ec0:	d905      	bls.n	1ece <z_check_thread_stack_fail+0x1e>
    1ec2:	428b      	cmp	r3, r1
    1ec4:	d903      	bls.n	1ece <z_check_thread_stack_fail+0x1e>
			guard_len,
			fault_addr, psp)) {
		/* Thread stack corruption */
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
    1ec6:	4804      	ldr	r0, [pc, #16]	; (1ed8 <z_check_thread_stack_fail+0x28>)
    1ec8:	4770      	bx	lr
	if (IS_MPU_GUARD_VIOLATION((uint32_t)z_main_stack,
    1eca:	3320      	adds	r3, #32
    1ecc:	e7f9      	b.n	1ec2 <z_check_thread_stack_fail+0x12>
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
    1ece:	2000      	movs	r0, #0
}
    1ed0:	4770      	bx	lr
    1ed2:	bf00      	nop
    1ed4:	20002c40 	.word	0x20002c40
    1ed8:	20002c60 	.word	0x20002c60

00001edc <z_arm_switch_to_main_no_multithreading>:

#if !defined(CONFIG_MULTITHREADING) && defined(CONFIG_CPU_CORTEX_M)

FUNC_NORETURN void z_arm_switch_to_main_no_multithreading(
	k_thread_entry_t main_entry, void *p1, void *p2, void *p3)
{
    1edc:	4604      	mov	r4, r0
	 */
	register void *p1_inreg __asm__("r0") = p1;
	register void *p2_inreg __asm__("r1") = p2;
	register void *p3_inreg __asm__("r2") = p3;

	__asm__ volatile (
    1ede:	2520      	movs	r5, #32
	register void *p1_inreg __asm__("r0") = p1;
    1ee0:	4608      	mov	r0, r1
	register void *p2_inreg __asm__("r1") = p2;
    1ee2:	4611      	mov	r1, r2
	register void *p3_inreg __asm__("r2") = p3;
    1ee4:	461a      	mov	r2, r3
	__asm__ volatile (
    1ee6:	4b08      	ldr	r3, [pc, #32]	; (1f08 <loop+0x4>)
    1ee8:	f383 8809 	msr	PSP, r3
    1eec:	b663      	cpsie	if
    1eee:	f04f 0300 	mov.w	r3, #0
    1ef2:	f383 8811 	msr	BASEPRI, r3
    1ef6:	f3bf 8f6f 	isb	sy
    1efa:	47a0      	blx	r4
    1efc:	f385 8811 	msr	BASEPRI, r5
    1f00:	f3bf 8f6f 	isb	sy

00001f04 <loop>:
    1f04:	e7fe      	b.n	1f04 <loop>
	, [_psplim]"r" (psplim)
#endif
	:
	);

	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    1f06:	bf00      	nop
    1f08:	20005460 	.word	0x20005460

00001f0c <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    1f0c:	4901      	ldr	r1, [pc, #4]	; (1f14 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    1f0e:	2210      	movs	r2, #16
	str	r2, [r1]
    1f10:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    1f12:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    1f14:	e000ed10 	.word	0xe000ed10

00001f18 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    1f18:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    1f1a:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    1f1c:	f381 8811 	msr	BASEPRI, r1

	wfe
    1f20:	bf20      	wfe

	msr	BASEPRI, r0
    1f22:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    1f26:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    1f28:	4770      	bx	lr
    1f2a:	bf00      	nop

00001f2c <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    1f2c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    1f2e:	4605      	mov	r5, r0

	if (esf != NULL) {
    1f30:	460c      	mov	r4, r1
    1f32:	b1c9      	cbz	r1, 1f68 <z_arm_fatal_error+0x3c>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    1f34:	688b      	ldr	r3, [r1, #8]
    1f36:	9300      	str	r3, [sp, #0]
    1f38:	e9d1 2300 	ldrd	r2, r3, [r1]
    1f3c:	480e      	ldr	r0, [pc, #56]	; (1f78 <z_arm_fatal_error+0x4c>)
    1f3e:	2145      	movs	r1, #69	; 0x45
    1f40:	f002 fe12 	bl	4b68 <z_log_minimal_printk>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    1f44:	6963      	ldr	r3, [r4, #20]
    1f46:	9300      	str	r3, [sp, #0]
    1f48:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
    1f4c:	480b      	ldr	r0, [pc, #44]	; (1f7c <z_arm_fatal_error+0x50>)
    1f4e:	2145      	movs	r1, #69	; 0x45
    1f50:	f002 fe0a 	bl	4b68 <z_log_minimal_printk>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    1f54:	69e2      	ldr	r2, [r4, #28]
    1f56:	480a      	ldr	r0, [pc, #40]	; (1f80 <z_arm_fatal_error+0x54>)
    1f58:	2145      	movs	r1, #69	; 0x45
    1f5a:	f002 fe05 	bl	4b68 <z_log_minimal_printk>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    1f5e:	69a2      	ldr	r2, [r4, #24]
    1f60:	4808      	ldr	r0, [pc, #32]	; (1f84 <z_arm_fatal_error+0x58>)
    1f62:	2145      	movs	r1, #69	; 0x45
    1f64:	f002 fe00 	bl	4b68 <z_log_minimal_printk>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    1f68:	4621      	mov	r1, r4
    1f6a:	4628      	mov	r0, r5
}
    1f6c:	b003      	add	sp, #12
    1f6e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	z_fatal_error(reason, esf);
    1f72:	f002 b9f5 	b.w	4360 <z_fatal_error>
    1f76:	bf00      	nop
    1f78:	000076e3 	.word	0x000076e3
    1f7c:	00007717 	.word	0x00007717
    1f80:	0000774b 	.word	0x0000774b
    1f84:	0000775f 	.word	0x0000775f

00001f88 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    1f88:	bf30      	wfi
    b z_SysNmiOnReset
    1f8a:	f7ff bffd 	b.w	1f88 <z_SysNmiOnReset>
    1f8e:	bf00      	nop

00001f90 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    1f90:	4a0b      	ldr	r2, [pc, #44]	; (1fc0 <z_arm_prep_c+0x30>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
    1f92:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    1f94:	4b0b      	ldr	r3, [pc, #44]	; (1fc4 <z_arm_prep_c+0x34>)
    1f96:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    1f9a:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    1f9c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1fa0:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    1fa4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    1fa8:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    1fac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    1fb0:	f002 fa14 	bl	43dc <z_bss_zero>
	z_data_copy();
    1fb4:	f002 fa6a 	bl	448c <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    1fb8:	f000 fa5a 	bl	2470 <z_arm_interrupt_init>
	z_cstart();
    1fbc:	f002 fa30 	bl	4420 <z_cstart>
    1fc0:	00000000 	.word	0x00000000
    1fc4:	e000ed00 	.word	0xe000ed00

00001fc8 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    1fc8:	b501      	push	{r0, lr}
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    1fca:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    1fce:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    1fd2:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    1fd6:	4904      	ldr	r1, [pc, #16]	; (1fe8 <_isr_wrapper+0x20>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    1fd8:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    1fda:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    1fdc:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    1fde:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    1fe2:	4902      	ldr	r1, [pc, #8]	; (1fec <_isr_wrapper+0x24>)
	bx r1
    1fe4:	4708      	bx	r1
    1fe6:	0000      	.short	0x0000
	ldr r1, =_sw_isr_table
    1fe8:	00006d10 	.word	0x00006d10
	ldr r1, =z_arm_int_exit
    1fec:	000023e5 	.word	0x000023e5

00001ff0 <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    1ff0:	2000      	movs	r0, #0
    msr CONTROL, r0
    1ff2:	f380 8814 	msr	CONTROL, r0
    isb
    1ff6:	f3bf 8f6f 	isb	sy
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
    1ffa:	f004 fe23 	bl	6c44 <z_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    1ffe:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    2000:	490d      	ldr	r1, [pc, #52]	; (2038 <__start+0x48>)
    str r0, [r1]
    2002:	6008      	str	r0, [r1, #0]
    dsb
    2004:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    2008:	480c      	ldr	r0, [pc, #48]	; (203c <__start+0x4c>)
    msr msp, r0
    200a:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    200e:	f000 f9fd 	bl	240c <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    2012:	2020      	movs	r0, #32
    msr BASEPRI, r0
    2014:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    2018:	4809      	ldr	r0, [pc, #36]	; (2040 <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    201a:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
    201e:	1840      	adds	r0, r0, r1
    msr PSP, r0
    2020:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    2024:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    2028:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    202a:	4308      	orrs	r0, r1
    msr CONTROL, r0
    202c:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    2030:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    2034:	f7ff ffac 	bl	1f90 <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
    2038:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    203c:	20005440 	.word	0x20005440
    ldr r0, =z_interrupt_stacks
    2040:	20005460 	.word	0x20005460

00002044 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    2044:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    2048:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    204c:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    204e:	4672      	mov	r2, lr
	bl z_arm_fault
    2050:	f000 f918 	bl	2284 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    2054:	bd01      	pop	{r0, pc}
    2056:	bf00      	nop

00002058 <mem_manage_fault>:
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
			      bool *recoverable)
{
    2058:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    205c:	4c2e      	ldr	r4, [pc, #184]	; (2118 <mem_manage_fault+0xc0>)
{
    205e:	4607      	mov	r7, r0
    2060:	4688      	mov	r8, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
    2062:	482e      	ldr	r0, [pc, #184]	; (211c <mem_manage_fault+0xc4>)
    2064:	2145      	movs	r1, #69	; 0x45
{
    2066:	4615      	mov	r5, r2
	PR_FAULT_INFO("***** MPU FAULT *****");
    2068:	f002 fd7e 	bl	4b68 <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    206c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    206e:	06de      	lsls	r6, r3, #27
    2070:	d503      	bpl.n	207a <mem_manage_fault+0x22>
		PR_FAULT_INFO("  Stacking error (context area might be"
    2072:	482b      	ldr	r0, [pc, #172]	; (2120 <mem_manage_fault+0xc8>)
    2074:	2145      	movs	r1, #69	; 0x45
    2076:	f002 fd77 	bl	4b68 <z_log_minimal_printk>
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    207a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    207c:	0718      	lsls	r0, r3, #28
    207e:	d503      	bpl.n	2088 <mem_manage_fault+0x30>
		PR_FAULT_INFO("  Unstacking error");
    2080:	4828      	ldr	r0, [pc, #160]	; (2124 <mem_manage_fault+0xcc>)
    2082:	2145      	movs	r1, #69	; 0x45
    2084:	f002 fd70 	bl	4b68 <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    2088:	4c23      	ldr	r4, [pc, #140]	; (2118 <mem_manage_fault+0xc0>)
    208a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    208c:	0799      	lsls	r1, r3, #30
    208e:	d421      	bmi.n	20d4 <mem_manage_fault+0x7c>
	uint32_t mmfar = -EINVAL;
    2090:	f06f 0615 	mvn.w	r6, #21
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    2094:	4c20      	ldr	r4, [pc, #128]	; (2118 <mem_manage_fault+0xc0>)
    2096:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2098:	07db      	lsls	r3, r3, #31
    209a:	d503      	bpl.n	20a4 <mem_manage_fault+0x4c>
		PR_FAULT_INFO("  Instruction Access Violation");
    209c:	4822      	ldr	r0, [pc, #136]	; (2128 <mem_manage_fault+0xd0>)
    209e:	2145      	movs	r1, #69	; 0x45
    20a0:	f002 fd62 	bl	4b68 <z_log_minimal_printk>
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    20a4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    20a6:	0698      	lsls	r0, r3, #26
    20a8:	d503      	bpl.n	20b2 <mem_manage_fault+0x5a>
		PR_FAULT_INFO(
    20aa:	4820      	ldr	r0, [pc, #128]	; (212c <mem_manage_fault+0xd4>)
    20ac:	2145      	movs	r1, #69	; 0x45
    20ae:	f002 fd5b 	bl	4b68 <z_log_minimal_printk>
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    20b2:	4b19      	ldr	r3, [pc, #100]	; (2118 <mem_manage_fault+0xc0>)
    20b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    20b6:	06d1      	lsls	r1, r2, #27
    20b8:	d421      	bmi.n	20fe <mem_manage_fault+0xa6>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    20ba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    20bc:	0792      	lsls	r2, r2, #30
    20be:	d41e      	bmi.n	20fe <mem_manage_fault+0xa6>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    20c0:	2000      	movs	r0, #0
		"without stack guard, user-mode or null-pointer detection\n");
#endif /* CONFIG_MPU_STACK_GUARD || CONFIG_USERSPACE */
	}

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    20c2:	4a15      	ldr	r2, [pc, #84]	; (2118 <mem_manage_fault+0xc0>)
    20c4:	6a93      	ldr	r3, [r2, #40]	; 0x28
    20c6:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    20ca:	6293      	str	r3, [r2, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
    20cc:	2300      	movs	r3, #0
    20ce:	702b      	strb	r3, [r5, #0]

	return reason;
}
    20d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		PR_FAULT_INFO("  Data Access Violation");
    20d4:	4816      	ldr	r0, [pc, #88]	; (2130 <mem_manage_fault+0xd8>)
    20d6:	2145      	movs	r1, #69	; 0x45
    20d8:	f002 fd46 	bl	4b68 <z_log_minimal_printk>
		uint32_t temp = SCB->MMFAR;
    20dc:	6b66      	ldr	r6, [r4, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    20de:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    20e0:	061a      	lsls	r2, r3, #24
    20e2:	d5d5      	bpl.n	2090 <mem_manage_fault+0x38>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    20e4:	4813      	ldr	r0, [pc, #76]	; (2134 <mem_manage_fault+0xdc>)
    20e6:	4632      	mov	r2, r6
    20e8:	2145      	movs	r1, #69	; 0x45
    20ea:	f002 fd3d 	bl	4b68 <z_log_minimal_printk>
			if (from_hard_fault != 0) {
    20ee:	f1b8 0f00 	cmp.w	r8, #0
    20f2:	d0cf      	beq.n	2094 <mem_manage_fault+0x3c>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    20f4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    20f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    20fa:	62a3      	str	r3, [r4, #40]	; 0x28
    20fc:	e7ca      	b.n	2094 <mem_manage_fault+0x3c>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
    20fe:	685b      	ldr	r3, [r3, #4]
    2100:	051b      	lsls	r3, r3, #20
    2102:	d5dd      	bpl.n	20c0 <mem_manage_fault+0x68>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
    2104:	4639      	mov	r1, r7
    2106:	4630      	mov	r0, r6
    2108:	f7ff fed2 	bl	1eb0 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
    210c:	2800      	cmp	r0, #0
    210e:	d0d7      	beq.n	20c0 <mem_manage_fault+0x68>
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    2110:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
    2114:	2002      	movs	r0, #2
    2116:	e7d4      	b.n	20c2 <mem_manage_fault+0x6a>
    2118:	e000ed00 	.word	0xe000ed00
    211c:	00007792 	.word	0x00007792
    2120:	000077ad 	.word	0x000077ad
    2124:	000077e5 	.word	0x000077e5
    2128:	00007835 	.word	0x00007835
    212c:	00007859 	.word	0x00007859
    2130:	000077fd 	.word	0x000077fd
    2134:	0000781a 	.word	0x0000781a

00002138 <usage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
    2138:	b510      	push	{r4, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    213a:	4c1d      	ldr	r4, [pc, #116]	; (21b0 <usage_fault.constprop.0+0x78>)
	PR_FAULT_INFO("***** USAGE FAULT *****");
    213c:	481d      	ldr	r0, [pc, #116]	; (21b4 <usage_fault.constprop.0+0x7c>)
    213e:	2145      	movs	r1, #69	; 0x45
    2140:	f002 fd12 	bl	4b68 <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    2144:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2146:	019b      	lsls	r3, r3, #6
    2148:	d503      	bpl.n	2152 <usage_fault.constprop.0+0x1a>
		PR_FAULT_INFO("  Division by zero");
    214a:	481b      	ldr	r0, [pc, #108]	; (21b8 <usage_fault.constprop.0+0x80>)
    214c:	2145      	movs	r1, #69	; 0x45
    214e:	f002 fd0b 	bl	4b68 <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    2152:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2154:	01dc      	lsls	r4, r3, #7
    2156:	d503      	bpl.n	2160 <usage_fault.constprop.0+0x28>
		PR_FAULT_INFO("  Unaligned memory access");
    2158:	4818      	ldr	r0, [pc, #96]	; (21bc <usage_fault.constprop.0+0x84>)
    215a:	2145      	movs	r1, #69	; 0x45
    215c:	f002 fd04 	bl	4b68 <z_log_minimal_printk>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    2160:	4c13      	ldr	r4, [pc, #76]	; (21b0 <usage_fault.constprop.0+0x78>)
    2162:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2164:	0318      	lsls	r0, r3, #12
    2166:	d503      	bpl.n	2170 <usage_fault.constprop.0+0x38>
		PR_FAULT_INFO("  No coprocessor instructions");
    2168:	4815      	ldr	r0, [pc, #84]	; (21c0 <usage_fault.constprop.0+0x88>)
    216a:	2145      	movs	r1, #69	; 0x45
    216c:	f002 fcfc 	bl	4b68 <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    2170:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2172:	0359      	lsls	r1, r3, #13
    2174:	d503      	bpl.n	217e <usage_fault.constprop.0+0x46>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    2176:	4813      	ldr	r0, [pc, #76]	; (21c4 <usage_fault.constprop.0+0x8c>)
    2178:	2145      	movs	r1, #69	; 0x45
    217a:	f002 fcf5 	bl	4b68 <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    217e:	4c0c      	ldr	r4, [pc, #48]	; (21b0 <usage_fault.constprop.0+0x78>)
    2180:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2182:	039a      	lsls	r2, r3, #14
    2184:	d503      	bpl.n	218e <usage_fault.constprop.0+0x56>
		PR_FAULT_INFO("  Illegal use of the EPSR");
    2186:	4810      	ldr	r0, [pc, #64]	; (21c8 <usage_fault.constprop.0+0x90>)
    2188:	2145      	movs	r1, #69	; 0x45
    218a:	f002 fced 	bl	4b68 <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    218e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2190:	03db      	lsls	r3, r3, #15
    2192:	d503      	bpl.n	219c <usage_fault.constprop.0+0x64>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    2194:	480d      	ldr	r0, [pc, #52]	; (21cc <usage_fault.constprop.0+0x94>)
    2196:	2145      	movs	r1, #69	; 0x45
    2198:	f002 fce6 	bl	4b68 <z_log_minimal_printk>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    219c:	4a04      	ldr	r2, [pc, #16]	; (21b0 <usage_fault.constprop.0+0x78>)
    219e:	6a93      	ldr	r3, [r2, #40]	; 0x28
    21a0:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    21a4:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    21a8:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
    21aa:	2000      	movs	r0, #0
    21ac:	bd10      	pop	{r4, pc}
    21ae:	bf00      	nop
    21b0:	e000ed00 	.word	0xe000ed00
    21b4:	0000788d 	.word	0x0000788d
    21b8:	000078aa 	.word	0x000078aa
    21bc:	000078c2 	.word	0x000078c2
    21c0:	000078e1 	.word	0x000078e1
    21c4:	00007904 	.word	0x00007904
    21c8:	0000792e 	.word	0x0000792e
    21cc:	0000794d 	.word	0x0000794d

000021d0 <bus_fault.constprop.0>:
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    21d0:	b570      	push	{r4, r5, r6, lr}
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    21d2:	4c23      	ldr	r4, [pc, #140]	; (2260 <bus_fault.constprop.0+0x90>)
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    21d4:	4606      	mov	r6, r0
    21d6:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
    21d8:	4822      	ldr	r0, [pc, #136]	; (2264 <bus_fault.constprop.0+0x94>)
    21da:	2145      	movs	r1, #69	; 0x45
    21dc:	f002 fcc4 	bl	4b68 <z_log_minimal_printk>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    21e0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    21e2:	04d9      	lsls	r1, r3, #19
    21e4:	d503      	bpl.n	21ee <bus_fault.constprop.0+0x1e>
		PR_FAULT_INFO("  Stacking error");
    21e6:	4820      	ldr	r0, [pc, #128]	; (2268 <bus_fault.constprop.0+0x98>)
    21e8:	2145      	movs	r1, #69	; 0x45
    21ea:	f002 fcbd 	bl	4b68 <z_log_minimal_printk>
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    21ee:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    21f0:	051a      	lsls	r2, r3, #20
    21f2:	d503      	bpl.n	21fc <bus_fault.constprop.0+0x2c>
		PR_FAULT_INFO("  Unstacking error");
    21f4:	481d      	ldr	r0, [pc, #116]	; (226c <bus_fault.constprop.0+0x9c>)
    21f6:	2145      	movs	r1, #69	; 0x45
    21f8:	f002 fcb6 	bl	4b68 <z_log_minimal_printk>
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    21fc:	4c18      	ldr	r4, [pc, #96]	; (2260 <bus_fault.constprop.0+0x90>)
    21fe:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2200:	059b      	lsls	r3, r3, #22
    2202:	d510      	bpl.n	2226 <bus_fault.constprop.0+0x56>
		PR_FAULT_INFO("  Precise data bus error");
    2204:	481a      	ldr	r0, [pc, #104]	; (2270 <bus_fault.constprop.0+0xa0>)
    2206:	2145      	movs	r1, #69	; 0x45
    2208:	f002 fcae 	bl	4b68 <z_log_minimal_printk>
		STORE_xFAR(bfar, SCB->BFAR);
    220c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    220e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2210:	0418      	lsls	r0, r3, #16
    2212:	d508      	bpl.n	2226 <bus_fault.constprop.0+0x56>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    2214:	4817      	ldr	r0, [pc, #92]	; (2274 <bus_fault.constprop.0+0xa4>)
    2216:	2145      	movs	r1, #69	; 0x45
    2218:	f002 fca6 	bl	4b68 <z_log_minimal_printk>
			if (from_hard_fault != 0) {
    221c:	b11e      	cbz	r6, 2226 <bus_fault.constprop.0+0x56>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    221e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2220:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    2224:	62a3      	str	r3, [r4, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    2226:	4c0e      	ldr	r4, [pc, #56]	; (2260 <bus_fault.constprop.0+0x90>)
    2228:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    222a:	0559      	lsls	r1, r3, #21
    222c:	d503      	bpl.n	2236 <bus_fault.constprop.0+0x66>
		PR_FAULT_INFO("  Imprecise data bus error");
    222e:	4812      	ldr	r0, [pc, #72]	; (2278 <bus_fault.constprop.0+0xa8>)
    2230:	2145      	movs	r1, #69	; 0x45
    2232:	f002 fc99 	bl	4b68 <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    2236:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2238:	05da      	lsls	r2, r3, #23
    223a:	d50b      	bpl.n	2254 <bus_fault.constprop.0+0x84>
		PR_FAULT_INFO("  Instruction bus error");
    223c:	480f      	ldr	r0, [pc, #60]	; (227c <bus_fault.constprop.0+0xac>)
    223e:	2145      	movs	r1, #69	; 0x45
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    2240:	f002 fc92 	bl	4b68 <z_log_minimal_printk>
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    2244:	4a06      	ldr	r2, [pc, #24]	; (2260 <bus_fault.constprop.0+0x90>)
    2246:	6a93      	ldr	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    2248:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    224a:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    224e:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    2250:	7028      	strb	r0, [r5, #0]
}
    2252:	bd70      	pop	{r4, r5, r6, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    2254:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2256:	049b      	lsls	r3, r3, #18
    2258:	d5f4      	bpl.n	2244 <bus_fault.constprop.0+0x74>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    225a:	4809      	ldr	r0, [pc, #36]	; (2280 <bus_fault.constprop.0+0xb0>)
    225c:	2145      	movs	r1, #69	; 0x45
    225e:	e7ef      	b.n	2240 <bus_fault.constprop.0+0x70>
    2260:	e000ed00 	.word	0xe000ed00
    2264:	0000797d 	.word	0x0000797d
    2268:	00007998 	.word	0x00007998
    226c:	000077e5 	.word	0x000077e5
    2270:	000079ae 	.word	0x000079ae
    2274:	000079cc 	.word	0x000079cc
    2278:	000079e6 	.word	0x000079e6
    227c:	00007a06 	.word	0x00007a06
    2280:	00007859 	.word	0x00007859

00002284 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    2284:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    2288:	4b49      	ldr	r3, [pc, #292]	; (23b0 <z_arm_fault+0x12c>)
    228a:	685e      	ldr	r6, [r3, #4]
{
    228c:	b08a      	sub	sp, #40	; 0x28
    228e:	460f      	mov	r7, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    2290:	f3c6 0408 	ubfx	r4, r6, #0, #9
    2294:	2500      	movs	r5, #0
    2296:	f385 8811 	msr	BASEPRI, r5
    229a:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    229e:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    22a2:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    22a6:	d107      	bne.n	22b8 <z_arm_fault+0x34>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    22a8:	f002 030c 	and.w	r3, r2, #12
    22ac:	2b08      	cmp	r3, #8
    22ae:	d105      	bne.n	22bc <z_arm_fault+0x38>
		PR_EXC("SPSEL in thread mode does not indicate PSP");
    22b0:	4840      	ldr	r0, [pc, #256]	; (23b4 <z_arm_fault+0x130>)
    22b2:	2145      	movs	r1, #69	; 0x45
    22b4:	f002 fc58 	bl	4b68 <z_log_minimal_printk>
		return NULL;
    22b8:	462f      	mov	r7, r5
    22ba:	e003      	b.n	22c4 <z_arm_fault+0x40>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    22bc:	0712      	lsls	r2, r2, #28
    22be:	d401      	bmi.n	22c4 <z_arm_fault+0x40>
			ptr_esf = (z_arch_esf_t *)msp;
    22c0:	4607      	mov	r7, r0
			*nested_exc = true;
    22c2:	2501      	movs	r5, #1
	*recoverable = false;
    22c4:	f04f 0800 	mov.w	r8, #0
	switch (fault) {
    22c8:	1ee3      	subs	r3, r4, #3
	*recoverable = false;
    22ca:	f88d 8007 	strb.w	r8, [sp, #7]
	switch (fault) {
    22ce:	2b09      	cmp	r3, #9
    22d0:	d85b      	bhi.n	238a <z_arm_fault+0x106>
    22d2:	e8df f003 	tbb	[pc, r3]
    22d6:	4f05      	.short	0x4f05
    22d8:	5a5a3353 	.word	0x5a5a3353
    22dc:	575a5a5a 	.word	0x575a5a5a
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    22e0:	4e33      	ldr	r6, [pc, #204]	; (23b0 <z_arm_fault+0x12c>)
	PR_FAULT_INFO("***** HARD FAULT *****");
    22e2:	4835      	ldr	r0, [pc, #212]	; (23b8 <z_arm_fault+0x134>)
    22e4:	2145      	movs	r1, #69	; 0x45
    22e6:	f002 fc3f 	bl	4b68 <z_log_minimal_printk>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    22ea:	6af4      	ldr	r4, [r6, #44]	; 0x2c
	*recoverable = false;
    22ec:	f88d 8007 	strb.w	r8, [sp, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    22f0:	f014 0402 	ands.w	r4, r4, #2
    22f4:	d005      	beq.n	2302 <z_arm_fault+0x7e>
		PR_EXC("  Bus fault on vector table read");
    22f6:	4831      	ldr	r0, [pc, #196]	; (23bc <z_arm_fault+0x138>)
    22f8:	2145      	movs	r1, #69	; 0x45
	PR_FAULT_INFO(
    22fa:	f002 fc35 	bl	4b68 <z_log_minimal_printk>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    22fe:	2400      	movs	r4, #0
}
    2300:	e01f      	b.n	2342 <z_arm_fault+0xbe>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    2302:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    2304:	005b      	lsls	r3, r3, #1
    2306:	d51c      	bpl.n	2342 <z_arm_fault+0xbe>
		PR_EXC("  Fault escalation (see below)");
    2308:	482d      	ldr	r0, [pc, #180]	; (23c0 <z_arm_fault+0x13c>)
    230a:	2145      	movs	r1, #69	; 0x45
    230c:	f002 fc2c 	bl	4b68 <z_log_minimal_printk>
		if (SCB_MMFSR != 0) {
    2310:	f896 3028 	ldrb.w	r3, [r6, #40]	; 0x28
    2314:	b133      	cbz	r3, 2324 <z_arm_fault+0xa0>
			reason = mem_manage_fault(esf, 1, recoverable);
    2316:	f10d 0207 	add.w	r2, sp, #7
    231a:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
    231c:	4638      	mov	r0, r7
    231e:	f7ff fe9b 	bl	2058 <mem_manage_fault>
    2322:	e00d      	b.n	2340 <z_arm_fault+0xbc>
		} else if (SCB_BFSR != 0) {
    2324:	f896 3029 	ldrb.w	r3, [r6, #41]	; 0x29
    2328:	b12b      	cbz	r3, 2336 <z_arm_fault+0xb2>
			reason = bus_fault(esf, 1, recoverable);
    232a:	f10d 0107 	add.w	r1, sp, #7
    232e:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
    2330:	f7ff ff4e 	bl	21d0 <bus_fault.constprop.0>
    2334:	e004      	b.n	2340 <z_arm_fault+0xbc>
		} else if (SCB_UFSR != 0) {
    2336:	8d73      	ldrh	r3, [r6, #42]	; 0x2a
    2338:	b29b      	uxth	r3, r3
    233a:	b113      	cbz	r3, 2342 <z_arm_fault+0xbe>
			reason = usage_fault(esf);
    233c:	f7ff fefc 	bl	2138 <usage_fault.constprop.0>
    2340:	4604      	mov	r4, r0
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    2342:	f89d 3007 	ldrb.w	r3, [sp, #7]
    2346:	b993      	cbnz	r3, 236e <z_arm_fault+0xea>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    2348:	2220      	movs	r2, #32
    234a:	4639      	mov	r1, r7
    234c:	a802      	add	r0, sp, #8
    234e:	f002 fd9a 	bl	4e86 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    2352:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2354:	b335      	cbz	r5, 23a4 <z_arm_fault+0x120>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    2356:	f3c3 0208 	ubfx	r2, r3, #0, #9
    235a:	b922      	cbnz	r2, 2366 <z_arm_fault+0xe2>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    235c:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    2360:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    2364:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    2366:	a902      	add	r1, sp, #8
    2368:	4620      	mov	r0, r4
    236a:	f7ff fddf 	bl	1f2c <z_arm_fatal_error>
}
    236e:	b00a      	add	sp, #40	; 0x28
    2370:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
    2374:	f10d 0207 	add.w	r2, sp, #7
    2378:	2100      	movs	r1, #0
    237a:	e7cf      	b.n	231c <z_arm_fault+0x98>
		reason = bus_fault(esf, 0, recoverable);
    237c:	f10d 0107 	add.w	r1, sp, #7
    2380:	2000      	movs	r0, #0
    2382:	e7d5      	b.n	2330 <z_arm_fault+0xac>
	PR_FAULT_INFO(
    2384:	480f      	ldr	r0, [pc, #60]	; (23c4 <z_arm_fault+0x140>)
    2386:	2145      	movs	r1, #69	; 0x45
    2388:	e7b7      	b.n	22fa <z_arm_fault+0x76>
	PR_FAULT_INFO("***** %s %d) *****",
    238a:	490f      	ldr	r1, [pc, #60]	; (23c8 <z_arm_fault+0x144>)
    238c:	4a0f      	ldr	r2, [pc, #60]	; (23cc <z_arm_fault+0x148>)
    238e:	4810      	ldr	r0, [pc, #64]	; (23d0 <z_arm_fault+0x14c>)
    2390:	f416 7ff8 	tst.w	r6, #496	; 0x1f0
    2394:	bf08      	it	eq
    2396:	460a      	moveq	r2, r1
    2398:	f1a4 0310 	sub.w	r3, r4, #16
    239c:	2145      	movs	r1, #69	; 0x45
    239e:	f002 fbe3 	bl	4b68 <z_log_minimal_printk>
    23a2:	e7ac      	b.n	22fe <z_arm_fault+0x7a>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    23a4:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    23a8:	f023 0301 	bic.w	r3, r3, #1
    23ac:	e7da      	b.n	2364 <z_arm_fault+0xe0>
    23ae:	bf00      	nop
    23b0:	e000ed00 	.word	0xe000ed00
    23b4:	00007a51 	.word	0x00007a51
    23b8:	00007a81 	.word	0x00007a81
    23bc:	00007a9d 	.word	0x00007a9d
    23c0:	00007ac3 	.word	0x00007ac3
    23c4:	00007ae7 	.word	0x00007ae7
    23c8:	00007a23 	.word	0x00007a23
    23cc:	00007a38 	.word	0x00007a38
    23d0:	00007b10 	.word	0x00007b10

000023d4 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    23d4:	4a02      	ldr	r2, [pc, #8]	; (23e0 <z_arm_fault_init+0xc>)
    23d6:	6953      	ldr	r3, [r2, #20]
    23d8:	f043 0310 	orr.w	r3, r3, #16
    23dc:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    23de:	4770      	bx	lr
    23e0:	e000ed00 	.word	0xe000ed00

000023e4 <z_arm_exc_exit>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    23e4:	4770      	bx	lr
    23e6:	bf00      	nop

000023e8 <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    23e8:	4907      	ldr	r1, [pc, #28]	; (2408 <z_arm_clear_arm_mpu_config+0x20>)
    23ea:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90

	for (i = 0; i < num_regions; i++) {
    23ee:	2300      	movs	r3, #0
	int num_regions =
    23f0:	f3c2 2207 	ubfx	r2, r2, #8, #8
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
  MPU->RASR = 0U;
    23f4:	4618      	mov	r0, r3
	for (i = 0; i < num_regions; i++) {
    23f6:	4293      	cmp	r3, r2
    23f8:	d100      	bne.n	23fc <z_arm_clear_arm_mpu_config+0x14>
		ARM_MPU_ClrRegion(i);
	}
}
    23fa:	4770      	bx	lr
  MPU->RNR = rnr;
    23fc:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
  MPU->RASR = 0U;
    2400:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	for (i = 0; i < num_regions; i++) {
    2404:	3301      	adds	r3, #1
    2406:	e7f6      	b.n	23f6 <z_arm_clear_arm_mpu_config+0xe>
    2408:	e000ed00 	.word	0xe000ed00

0000240c <z_arm_init_arch_hw_at_boot>:
 * components and core registers.
 *
 * @return N/A
 */
void z_arm_init_arch_hw_at_boot(void)
{
    240c:	b508      	push	{r3, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    240e:	b672      	cpsid	i
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    2410:	2300      	movs	r3, #0
    2412:	f383 8813 	msr	FAULTMASK, r3

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    2416:	f7ff ffe7 	bl	23e8 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
    241a:	4b14      	ldr	r3, [pc, #80]	; (246c <z_arm_init_arch_hw_at_boot+0x60>)
    241c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    2420:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    2424:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    2428:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    242c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    2430:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    2434:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    2438:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    243c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
    2440:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    2444:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    2448:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
    244c:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
    2450:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    2454:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
    2458:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
    245c:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
  __ASM volatile ("cpsie i" : : : "memory");
    2460:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    2462:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2466:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    246a:	bd08      	pop	{r3, pc}
    246c:	e000e100 	.word	0xe000e100

00002470 <z_arm_interrupt_init>:
    2470:	4804      	ldr	r0, [pc, #16]	; (2484 <z_arm_interrupt_init+0x14>)
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    2472:	2300      	movs	r3, #0
    2474:	2120      	movs	r1, #32
    2476:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    2478:	3301      	adds	r3, #1
    247a:	2b27      	cmp	r3, #39	; 0x27
    247c:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    2480:	d1f9      	bne.n	2476 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    2482:	4770      	bx	lr
    2484:	e000e100 	.word	0xe000e100

00002488 <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    2488:	4b02      	ldr	r3, [pc, #8]	; (2494 <z_arm_configure_static_mpu_regions+0xc>)
    248a:	4a03      	ldr	r2, [pc, #12]	; (2498 <z_arm_configure_static_mpu_regions+0x10>)
    248c:	4803      	ldr	r0, [pc, #12]	; (249c <z_arm_configure_static_mpu_regions+0x14>)
    248e:	2102      	movs	r1, #2
    2490:	f000 b86c 	b.w	256c <arm_core_mpu_configure_static_mpu_regions>
    2494:	20010000 	.word	0x20010000
    2498:	20000000 	.word	0x20000000
    249c:	00006fa4 	.word	0x00006fa4

000024a0 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    24a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
	/* Select the region you want to access */
	MPU->RNR = index;
    24a2:	4f24      	ldr	r7, [pc, #144]	; (2534 <mpu_configure_regions+0x94>)
	int i;
	int reg_index = start_reg_index;
    24a4:	4615      	mov	r5, r2

	for (i = 0; i < regions_num; i++) {
    24a6:	2200      	movs	r2, #0
    24a8:	428a      	cmp	r2, r1
    24aa:	da0e      	bge.n	24ca <mpu_configure_regions+0x2a>
		if (regions[i].size == 0U) {
    24ac:	6844      	ldr	r4, [r0, #4]
    24ae:	2c00      	cmp	r4, #0
    24b0:	d03c      	beq.n	252c <mpu_configure_regions+0x8c>
			continue;
		}
		/* Non-empty region. */

		if (do_sanity_check &&
    24b2:	b193      	cbz	r3, 24da <mpu_configure_regions+0x3a>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
    24b4:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
    24b8:	ea14 0f0c 	tst.w	r4, ip
    24bc:	d007      	beq.n	24ce <mpu_configure_regions+0x2e>
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
    24be:	481e      	ldr	r0, [pc, #120]	; (2538 <mpu_configure_regions+0x98>)
    24c0:	2145      	movs	r1, #69	; 0x45
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    24c2:	f002 fb51 	bl	4b68 <z_log_minimal_printk>
			return -EINVAL;
		}

		reg_index = mpu_configure_region(reg_index, &regions[i]);
    24c6:	f06f 0515 	mvn.w	r5, #21
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
    24ca:	4628      	mov	r0, r5
    24cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		&&
    24ce:	2c1f      	cmp	r4, #31
    24d0:	d9f5      	bls.n	24be <mpu_configure_regions+0x1e>
		((part->start & (part->size - 1U)) == 0U);
    24d2:	6806      	ldr	r6, [r0, #0]
		&&
    24d4:	ea1c 0f06 	tst.w	ip, r6
    24d8:	d1f1      	bne.n	24be <mpu_configure_regions+0x1e>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
    24da:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
    24dc:	6806      	ldr	r6, [r0, #0]
	/* in ARMv7-M MPU the base address is not required
	 * to determine region attributes
	 */
	(void) base;

	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    24de:	f8d0 c008 	ldr.w	ip, [r0, #8]
		reg_index = mpu_configure_region(reg_index, &regions[i]);
    24e2:	b2ed      	uxtb	r5, r5
	if (size <= 32U) {
    24e4:	d910      	bls.n	2508 <mpu_configure_regions+0x68>
	if (size > (1UL << 31)) {
    24e6:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    24ea:	d80f      	bhi.n	250c <mpu_configure_regions+0x6c>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    24ec:	3c01      	subs	r4, #1
    24ee:	fab4 f484 	clz	r4, r4
    24f2:	f1c4 041f 	rsb	r4, r4, #31
    24f6:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
    24f8:	2d07      	cmp	r5, #7
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    24fa:	ea4c 0404 	orr.w	r4, ip, r4
    24fe:	d907      	bls.n	2510 <mpu_configure_regions+0x70>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    2500:	480e      	ldr	r0, [pc, #56]	; (253c <mpu_configure_regions+0x9c>)
    2502:	462a      	mov	r2, r5
    2504:	2145      	movs	r1, #69	; 0x45
    2506:	e7dc      	b.n	24c2 <mpu_configure_regions+0x22>
		return REGION_32B;
    2508:	2408      	movs	r4, #8
    250a:	e7f5      	b.n	24f8 <mpu_configure_regions+0x58>
		return REGION_4G;
    250c:	243e      	movs	r4, #62	; 0x3e
    250e:	e7f3      	b.n	24f8 <mpu_configure_regions+0x58>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    2510:	f026 061f 	bic.w	r6, r6, #31
				| MPU_RBAR_VALID_Msk | index;
    2514:	432e      	orrs	r6, r5
    2516:	f046 0610 	orr.w	r6, r6, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    251a:	f044 0401 	orr.w	r4, r4, #1
	MPU->RNR = index;
    251e:	f8c7 5098 	str.w	r5, [r7, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    2522:	f8c7 609c 	str.w	r6, [r7, #156]	; 0x9c
		reg_index++;
    2526:	3501      	adds	r5, #1
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    2528:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
	for (i = 0; i < regions_num; i++) {
    252c:	3201      	adds	r2, #1
    252e:	300c      	adds	r0, #12
    2530:	e7ba      	b.n	24a8 <mpu_configure_regions+0x8>
    2532:	bf00      	nop
    2534:	e000ed00 	.word	0xe000ed00
    2538:	00007b2c 	.word	0x00007b2c
    253c:	00007b54 	.word	0x00007b54

00002540 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    2540:	4b04      	ldr	r3, [pc, #16]	; (2554 <arm_core_mpu_enable+0x14>)
    2542:	2205      	movs	r2, #5
    2544:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    2548:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    254c:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    2550:	4770      	bx	lr
    2552:	bf00      	nop
    2554:	e000ed00 	.word	0xe000ed00

00002558 <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    2558:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    255c:	4b02      	ldr	r3, [pc, #8]	; (2568 <arm_core_mpu_disable+0x10>)
    255e:	2200      	movs	r2, #0
    2560:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    2564:	4770      	bx	lr
    2566:	bf00      	nop
    2568:	e000ed00 	.word	0xe000ed00

0000256c <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    256c:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    256e:	4c03      	ldr	r4, [pc, #12]	; (257c <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    2570:	2301      	movs	r3, #1
    2572:	7822      	ldrb	r2, [r4, #0]
    2574:	f7ff ff94 	bl	24a0 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    2578:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
    257a:	bd10      	pop	{r4, pc}
    257c:	2000280d 	.word	0x2000280d

00002580 <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    2580:	4914      	ldr	r1, [pc, #80]	; (25d4 <z_arm_mpu_init+0x54>)
    2582:	6808      	ldr	r0, [r1, #0]
    2584:	2808      	cmp	r0, #8
{
    2586:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
    2588:	d821      	bhi.n	25ce <z_arm_mpu_init+0x4e>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    258a:	f7ff ffe5 	bl	2558 <arm_core_mpu_disable>
	MPU->RNR = index;
    258e:	4c12      	ldr	r4, [pc, #72]	; (25d8 <z_arm_mpu_init+0x58>)
    2590:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    2592:	2200      	movs	r2, #0
    2594:	4290      	cmp	r0, r2
    2596:	f101 010c 	add.w	r1, r1, #12
    259a:	d105      	bne.n	25a8 <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    259c:	4b0f      	ldr	r3, [pc, #60]	; (25dc <z_arm_mpu_init+0x5c>)
    259e:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
    25a0:	f7ff ffce 	bl	2540 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    25a4:	2000      	movs	r0, #0
}
    25a6:	bd10      	pop	{r4, pc}
    25a8:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    25ac:	f851 3c0c 	ldr.w	r3, [r1, #-12]
    25b0:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    25b4:	4313      	orrs	r3, r2
    25b6:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    25ba:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    25be:	f851 3c04 	ldr.w	r3, [r1, #-4]
    25c2:	f043 0301 	orr.w	r3, r3, #1
    25c6:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    25ca:	3201      	adds	r2, #1
    25cc:	e7e2      	b.n	2594 <z_arm_mpu_init+0x14>
		return -1;
    25ce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    25d2:	e7e8      	b.n	25a6 <z_arm_mpu_init+0x26>
    25d4:	00006fbc 	.word	0x00006fbc
    25d8:	e000ed00 	.word	0xe000ed00
    25dc:	2000280d 	.word	0x2000280d

000025e0 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    25e0:	4b01      	ldr	r3, [pc, #4]	; (25e8 <__stdout_hook_install+0x8>)
    25e2:	6018      	str	r0, [r3, #0]
}
    25e4:	4770      	bx	lr
    25e6:	bf00      	nop
    25e8:	20000010 	.word	0x20000010

000025ec <nordicsemi_nrf52_init>:
	__asm__ volatile(
    25ec:	f04f 0320 	mov.w	r3, #32
    25f0:	f3ef 8211 	mrs	r2, BASEPRI
    25f4:	f383 8811 	msr	BASEPRI, r3
    25f8:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    25fc:	4906      	ldr	r1, [pc, #24]	; (2618 <nordicsemi_nrf52_init+0x2c>)
    25fe:	2301      	movs	r3, #1
    2600:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    2604:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    2608:	f8c1 3578 	str.w	r3, [r1, #1400]	; 0x578
	__asm__ volatile(
    260c:	f382 8811 	msr	BASEPRI, r2
    2610:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    2614:	2000      	movs	r0, #0
    2616:	4770      	bx	lr
    2618:	4001e000 	.word	0x4001e000

0000261c <sys_arch_reboot>:
    *p_gpregret = val;
    261c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2620:	b2c0      	uxtb	r0, r0
    2622:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
    2626:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    262a:	4905      	ldr	r1, [pc, #20]	; (2640 <sys_arch_reboot+0x24>)
    262c:	4b05      	ldr	r3, [pc, #20]	; (2644 <sys_arch_reboot+0x28>)
    262e:	68ca      	ldr	r2, [r1, #12]
    2630:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    2634:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    2636:	60cb      	str	r3, [r1, #12]
    2638:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    263c:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    263e:	e7fd      	b.n	263c <sys_arch_reboot+0x20>
    2640:	e000ed00 	.word	0xe000ed00
    2644:	05fa0004 	.word	0x05fa0004

00002648 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    2648:	b120      	cbz	r0, 2654 <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    264a:	4b03      	ldr	r3, [pc, #12]	; (2658 <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    264c:	0180      	lsls	r0, r0, #6
    264e:	f043 0301 	orr.w	r3, r3, #1
    2652:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    2654:	4770      	bx	lr
    2656:	bf00      	nop
    2658:	00006ec0 	.word	0x00006ec0

0000265c <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    265c:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
    265e:	4b09      	ldr	r3, [pc, #36]	; (2684 <gpio_nrfx_init+0x28>)
    2660:	781a      	ldrb	r2, [r3, #0]
    2662:	b96a      	cbnz	r2, 2680 <gpio_nrfx_init+0x24>
		gpio_initialized = true;
    2664:	2101      	movs	r1, #1
    2666:	7019      	strb	r1, [r3, #0]
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    2668:	2006      	movs	r0, #6
    266a:	2105      	movs	r1, #5
    266c:	f7ff fc08 	bl	1e80 <z_arm_irq_priority_set>
			    gpiote_event_handler, NULL, 0);

		irq_enable(DT_IRQN(GPIOTE_NODE));
    2670:	2006      	movs	r0, #6
    2672:	f7ff fbe7 	bl	1e44 <arch_irq_enable>
    return ((uint32_t)p_reg + event);
}

NRF_STATIC_INLINE void nrf_gpiote_int_enable(NRF_GPIOTE_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
    2676:	4b04      	ldr	r3, [pc, #16]	; (2688 <gpio_nrfx_init+0x2c>)
    2678:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    267c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		nrf_gpiote_int_enable(NRF_GPIOTE, NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
    2680:	2000      	movs	r0, #0
    2682:	bd08      	pop	{r3, pc}
    2684:	2000280e 	.word	0x2000280e
    2688:	40006000 	.word	0x40006000

0000268c <gpio_nrfx_pin_interrupt_configure>:
{
    268c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    268e:	4617      	mov	r7, r2
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    2690:	6842      	ldr	r2, [r0, #4]
	return port->data;
    2692:	6906      	ldr	r6, [r0, #16]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    2694:	7a12      	ldrb	r2, [r2, #8]
    2696:	f001 041f 	and.w	r4, r1, #31
	if (!IS_ENABLED(CONFIG_GPIO_NRF_INT_EDGE_USING_SENSE) &&
    269a:	f5b7 3fa0 	cmp.w	r7, #81920	; 0x14000
{
    269e:	460d      	mov	r5, r1
    26a0:	ea44 1442 	orr.w	r4, r4, r2, lsl #5
	if (!IS_ENABLED(CONFIG_GPIO_NRF_INT_EDGE_USING_SENSE) &&
    26a4:	d10c      	bne.n	26c0 <gpio_nrfx_pin_interrupt_configure+0x34>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
    26a6:	f004 021f 	and.w	r2, r4, #31
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    26aa:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
    26ae:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    26b2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    26b6:	07d0      	lsls	r0, r2, #31
    26b8:	d507      	bpl.n	26ca <gpio_nrfx_pin_interrupt_configure+0x3e>
		return -ENOTSUP;
    26ba:	f06f 0085 	mvn.w	r0, #133	; 0x85
    26be:	e09a      	b.n	27f6 <gpio_nrfx_pin_interrupt_configure+0x16a>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
    26c0:	f5b7 5f00 	cmp.w	r7, #8192	; 0x2000
    26c4:	68f1      	ldr	r1, [r6, #12]
    26c6:	f000 8098 	beq.w	27fa <gpio_nrfx_pin_interrupt_configure+0x16e>
    26ca:	68f2      	ldr	r2, [r6, #12]
    26cc:	2101      	movs	r1, #1
    26ce:	40a9      	lsls	r1, r5
    26d0:	4311      	orrs	r1, r2
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
    26d2:	6972      	ldr	r2, [r6, #20]
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
    26d4:	60f1      	str	r1, [r6, #12]
    26d6:	2101      	movs	r1, #1
    26d8:	40a9      	lsls	r1, r5
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
    26da:	f5b7 3fa0 	cmp.w	r7, #81920	; 0x14000
    26de:	bf0c      	ite	eq
    26e0:	430a      	orreq	r2, r1
    26e2:	438a      	bicne	r2, r1
    26e4:	6172      	str	r2, [r6, #20]
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
    26e6:	69b2      	ldr	r2, [r6, #24]
    26e8:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
    26ec:	bf0c      	ite	eq
    26ee:	430a      	orreq	r2, r1
    26f0:	438a      	bicne	r2, r1
    26f2:	61b2      	str	r2, [r6, #24]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
    26f4:	6932      	ldr	r2, [r6, #16]
    26f6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
    26fa:	bf0c      	ite	eq
    26fc:	4311      	orreq	r1, r2
    26fe:	ea22 0101 	bicne.w	r1, r2, r1
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_int_enable_check(NRF_GPIOTE_Type const * p_reg, uint32_t mask)
{
    return p_reg->INTENSET & mask;
    2702:	4a4a      	ldr	r2, [pc, #296]	; (282c <CONFIG_MAIN_STACK_SIZE+0x2c>)
    2704:	6131      	str	r1, [r6, #16]
    2706:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    270a:	2000      	movs	r0, #0
    270c:	b2db      	uxtb	r3, r3
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    270e:	f500 71a2 	add.w	r1, r0, #324	; 0x144
    2712:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
    2716:	f3c1 2104 	ubfx	r1, r1, #8, #5
		if ((nrf_gpiote_event_pin_get(NRF_GPIOTE, i) == abs_pin)
    271a:	428c      	cmp	r4, r1
    271c:	d172      	bne.n	2804 <CONFIG_MAIN_STACK_SIZE+0x4>
		    && (intenset & BIT(i))) {
    271e:	fa23 f100 	lsr.w	r1, r3, r0
    2722:	07c9      	lsls	r1, r1, #31
    2724:	d56e      	bpl.n	2804 <CONFIG_MAIN_STACK_SIZE+0x4>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
    2726:	0083      	lsls	r3, r0, #2
    2728:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    272c:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    2730:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
    2734:	f021 0101 	bic.w	r1, r1, #1
    2738:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
			nrf_gpiote_int_disable(NRF_GPIOTE, BIT(i));
    273c:	2301      	movs	r3, #1
    273e:	4083      	lsls	r3, r0
    p_reg->INTENCLR = mask;
    2740:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
			nrfx_gpiote_channel_free(i);
    2744:	b2c0      	uxtb	r0, r0
    2746:	f000 fe93 	bl	3470 <nrfx_gpiote_channel_free>
	nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
    274a:	4620      	mov	r0, r4
    274c:	2100      	movs	r1, #0
    274e:	f002 fbb1 	bl	4eb4 <nrf_gpio_cfg_sense_set>
	if (data->pin_int_en & BIT(pin)) {
    2752:	68f0      	ldr	r0, [r6, #12]
    2754:	40e8      	lsrs	r0, r5
    2756:	f010 0001 	ands.w	r0, r0, #1
    275a:	d04c      	beq.n	27f6 <gpio_nrfx_pin_interrupt_configure+0x16a>
		if (data->trig_edge & BIT(pin)) {
    275c:	6970      	ldr	r0, [r6, #20]
    275e:	40e8      	lsrs	r0, r5
    2760:	f010 0201 	ands.w	r2, r0, #1
    2764:	d055      	beq.n	2812 <CONFIG_MAIN_STACK_SIZE+0x12>
				if (data->double_edge & BIT(pin)) {
    2766:	69b3      	ldr	r3, [r6, #24]
    2768:	40eb      	lsrs	r3, r5
    276a:	07db      	lsls	r3, r3, #31
				} else if ((data->int_active_level & BIT(pin)) != 0U) {
    276c:	bf5f      	itttt	pl
    276e:	6931      	ldrpl	r1, [r6, #16]
    2770:	fa21 f505 	lsrpl.w	r5, r1, r5
    2774:	f005 0501 	andpl.w	r5, r5, #1
    2778:	f1c5 0502 	rsbpl	r5, r5, #2
	if (nrfx_gpiote_channel_alloc(&channel) != NRFX_SUCCESS) {
    277c:	f10d 0007 	add.w	r0, sp, #7
				} else if ((data->int_active_level & BIT(pin)) != 0U) {
    2780:	bf54      	ite	pl
    2782:	b2ed      	uxtbpl	r5, r5
					pol = NRF_GPIOTE_POLARITY_TOGGLE;
    2784:	2503      	movmi	r5, #3
	if (nrfx_gpiote_channel_alloc(&channel) != NRFX_SUCCESS) {
    2786:	f000 fe93 	bl	34b0 <nrfx_gpiote_channel_alloc>
    278a:	4b29      	ldr	r3, [pc, #164]	; (2830 <CONFIG_MAIN_STACK_SIZE+0x30>)
    278c:	4298      	cmp	r0, r3
    278e:	d13d      	bne.n	280c <CONFIG_MAIN_STACK_SIZE+0xc>
	nrf_gpiote_event_t evt = offsetof(NRF_GPIOTE_Type, EVENTS_IN[channel]);
    2790:	f89d 2007 	ldrb.w	r2, [sp, #7]
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    2794:	0093      	lsls	r3, r2, #2
    2796:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    279a:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    279e:	0224      	lsls	r4, r4, #8
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    27a0:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
    27a4:	f421 3147 	bic.w	r1, r1, #203776	; 0x31c00
    27a8:	f421 7140 	bic.w	r1, r1, #768	; 0x300
    27ac:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    27b0:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
    27b4:	f404 54f8 	and.w	r4, r4, #7936	; 0x1f00
    27b8:	430c      	orrs	r4, r1
    27ba:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
    27be:	f8c3 5510 	str.w	r5, [r3, #1296]	; 0x510
    return ((uint32_t)p_reg + event);
    27c2:	0093      	lsls	r3, r2, #2
    27c4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    27c8:	f503 43c2 	add.w	r3, r3, #24832	; 0x6100
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    27cc:	2000      	movs	r0, #0
    27ce:	6018      	str	r0, [r3, #0]
	nrf_gpiote_event_enable(NRF_GPIOTE, channel);
    27d0:	f89d 1007 	ldrb.w	r1, [sp, #7]
    27d4:	681b      	ldr	r3, [r3, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    27d6:	008b      	lsls	r3, r1, #2
    27d8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    27dc:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    27e0:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    27e4:	f042 0201 	orr.w	r2, r2, #1
    27e8:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
    p_reg->INTENSET = mask;
    27ec:	4a0f      	ldr	r2, [pc, #60]	; (282c <CONFIG_MAIN_STACK_SIZE+0x2c>)
	nrf_gpiote_int_enable(NRF_GPIOTE, BIT(channel));
    27ee:	2301      	movs	r3, #1
    27f0:	408b      	lsls	r3, r1
    27f2:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    27f6:	b003      	add	sp, #12
    27f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
    27fa:	2201      	movs	r2, #1
    27fc:	40aa      	lsls	r2, r5
    27fe:	ea21 0102 	bic.w	r1, r1, r2
    2802:	e766      	b.n	26d2 <gpio_nrfx_pin_interrupt_configure+0x46>
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    2804:	3001      	adds	r0, #1
    2806:	2808      	cmp	r0, #8
    2808:	d181      	bne.n	270e <gpio_nrfx_pin_interrupt_configure+0x82>
    280a:	e79e      	b.n	274a <gpio_nrfx_pin_interrupt_configure+0xbe>
		return -ENODEV;
    280c:	f06f 0012 	mvn.w	r0, #18
    2810:	e7f1      	b.n	27f6 <gpio_nrfx_pin_interrupt_configure+0x16a>
	if ((BIT(pin) & data->int_active_level) != 0U) {
    2812:	6931      	ldr	r1, [r6, #16]
    2814:	40e9      	lsrs	r1, r5
    2816:	f001 0101 	and.w	r1, r1, #1
    281a:	f1c1 0103 	rsb	r1, r1, #3
			nrf_gpio_cfg_sense_set(abs_pin, sense);
    281e:	4620      	mov	r0, r4
    2820:	b2c9      	uxtb	r1, r1
    2822:	f002 fb47 	bl	4eb4 <nrf_gpio_cfg_sense_set>
	int res = 0;
    2826:	4610      	mov	r0, r2
    2828:	e7e5      	b.n	27f6 <gpio_nrfx_pin_interrupt_configure+0x16a>
    282a:	bf00      	nop
    282c:	40006000 	.word	0x40006000
    2830:	0bad0000 	.word	0x0bad0000

00002834 <gpio_nrfx_config>:
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    2834:	4b2a      	ldr	r3, [pc, #168]	; (28e0 <gpio_nrfx_config+0xac>)
{
    2836:	b570      	push	{r4, r5, r6, lr}
	return port->config;
    2838:	6846      	ldr	r6, [r0, #4]
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    283a:	482a      	ldr	r0, [pc, #168]	; (28e4 <gpio_nrfx_config+0xb0>)
    283c:	4013      	ands	r3, r2
    283e:	4283      	cmp	r3, r0
    2840:	d03e      	beq.n	28c0 <gpio_nrfx_config+0x8c>
    2842:	d80d      	bhi.n	2860 <gpio_nrfx_config+0x2c>
    2844:	2b06      	cmp	r3, #6
    2846:	d015      	beq.n	2874 <gpio_nrfx_config+0x40>
    2848:	d805      	bhi.n	2856 <gpio_nrfx_config+0x22>
    284a:	b19b      	cbz	r3, 2874 <gpio_nrfx_config+0x40>
    284c:	2b02      	cmp	r3, #2
    284e:	d039      	beq.n	28c4 <gpio_nrfx_config+0x90>
    2850:	f06f 0015 	mvn.w	r0, #21
    2854:	e033      	b.n	28be <gpio_nrfx_config+0x8a>
    2856:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    285a:	d1f9      	bne.n	2850 <gpio_nrfx_config+0x1c>
		drive = NRF_GPIO_PIN_H0S1;
    285c:	2301      	movs	r3, #1
    285e:	e009      	b.n	2874 <gpio_nrfx_config+0x40>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    2860:	4821      	ldr	r0, [pc, #132]	; (28e8 <gpio_nrfx_config+0xb4>)
    2862:	4283      	cmp	r3, r0
    2864:	d030      	beq.n	28c8 <gpio_nrfx_config+0x94>
    2866:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
    286a:	d02f      	beq.n	28cc <gpio_nrfx_config+0x98>
    286c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
    2870:	d1ee      	bne.n	2850 <gpio_nrfx_config+0x1c>
		drive = NRF_GPIO_PIN_S0H1;
    2872:	2302      	movs	r3, #2
	if ((flags & GPIO_PULL_UP) != 0) {
    2874:	06d0      	lsls	r0, r2, #27
		pull = NRF_GPIO_PIN_NOPULL;
    2876:	bf54      	ite	pl
    2878:	f3c2 1540 	ubfxpl	r5, r2, #5, #1
		pull = NRF_GPIO_PIN_PULLUP;
    287c:	2503      	movmi	r5, #3
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
    287e:	f482 7480 	eor.w	r4, r2, #256	; 0x100
	if ((flags & GPIO_OUTPUT) != 0) {
    2882:	f412 7f00 	tst.w	r2, #512	; 0x200
	dir = ((flags & GPIO_OUTPUT) != 0)
    2886:	f3c2 2040 	ubfx	r0, r2, #9, #1
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
    288a:	f3c4 2400 	ubfx	r4, r4, #8, #1
	if ((flags & GPIO_OUTPUT) != 0) {
    288e:	d007      	beq.n	28a0 <gpio_nrfx_config+0x6c>
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
    2890:	f412 6f00 	tst.w	r2, #2048	; 0x800
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    2894:	6876      	ldr	r6, [r6, #4]
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
    2896:	d01b      	beq.n	28d0 <gpio_nrfx_config+0x9c>
			nrf_gpio_port_out_set(reg, BIT(pin));
    2898:	2201      	movs	r2, #1
    289a:	408a      	lsls	r2, r1
    p_reg->OUTSET = set_mask;
    289c:	f8c6 2508 	str.w	r2, [r6, #1288]	; 0x508
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    28a0:	ea40 0244 	orr.w	r2, r0, r4, lsl #1
    *p_pin = pin_number & 0x1F;
    28a4:	f001 011f 	and.w	r1, r1, #31
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    28a8:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    reg->PIN_CNF[pin_number] = cnf;
    28ac:	f501 71e0 	add.w	r1, r1, #448	; 0x1c0
    28b0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    28b4:	ea43 0385 	orr.w	r3, r3, r5, lsl #2
    reg->PIN_CNF[pin_number] = cnf;
    28b8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	return 0;
    28bc:	2000      	movs	r0, #0
}
    28be:	bd70      	pop	{r4, r5, r6, pc}
		drive = NRF_GPIO_PIN_H0D1;
    28c0:	2307      	movs	r3, #7
    28c2:	e7d7      	b.n	2874 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_D0S1;
    28c4:	2304      	movs	r3, #4
    28c6:	e7d5      	b.n	2874 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_D0H1;
    28c8:	2305      	movs	r3, #5
    28ca:	e7d3      	b.n	2874 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_H0H1;
    28cc:	2303      	movs	r3, #3
    28ce:	e7d1      	b.n	2874 <gpio_nrfx_config+0x40>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
    28d0:	0552      	lsls	r2, r2, #21
			nrf_gpio_port_out_clear(reg, BIT(pin));
    28d2:	bf42      	ittt	mi
    28d4:	2201      	movmi	r2, #1
    28d6:	408a      	lslmi	r2, r1
    p_reg->OUTCLR = clr_mask;
    28d8:	f8c6 250c 	strmi.w	r2, [r6, #1292]	; 0x50c
}
    28dc:	e7e0      	b.n	28a0 <gpio_nrfx_config+0x6c>
    28de:	bf00      	nop
    28e0:	00f00006 	.word	0x00f00006
    28e4:	00100006 	.word	0x00100006
    28e8:	00400002 	.word	0x00400002

000028ec <gpiote_event_handler>:
{
    28ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    28f0:	4b41      	ldr	r3, [pc, #260]	; (29f8 <gpiote_event_handler+0x10c>)
    28f2:	f8d3 517c 	ldr.w	r5, [r3, #380]	; 0x17c
	if (port_event) {
    28f6:	2d00      	cmp	r5, #0
    28f8:	d059      	beq.n	29ae <gpiote_event_handler+0xc2>
	uint32_t out = data->pin_int_en;
    28fa:	4b40      	ldr	r3, [pc, #256]	; (29fc <gpiote_event_handler+0x110>)
    return p_reg->IN;
    28fc:	f04f 49a0 	mov.w	r9, #1342177280	; 0x50000000
	out &= ~data->trig_edge & ~data->double_edge;
    2900:	e9d3 2105 	ldrd	r2, r1, [r3, #20]
	uint32_t out = data->pin_int_en;
    2904:	68df      	ldr	r7, [r3, #12]
    2906:	f8d9 4510 	ldr.w	r4, [r9, #1296]	; 0x510
	uint32_t pin_states = ~(port_in ^ data->int_active_level);
    290a:	691b      	ldr	r3, [r3, #16]
	out &= ~data->trig_edge & ~data->double_edge;
    290c:	430a      	orrs	r2, r1
    290e:	ea27 0702 	bic.w	r7, r7, r2
	uint32_t pin_states = ~(port_in ^ data->int_active_level);
    2912:	405c      	eors	r4, r3
	uint32_t out = pin_states & level_pins;
    2914:	ea27 0404 	bic.w	r4, r7, r4
	uint32_t check_pins = level_pins;
    2918:	463a      	mov	r2, r7
	uint32_t bit = 1U << pin;
    291a:	2601      	movs	r6, #1
	uint32_t pin = 0U;
    291c:	f04f 0800 	mov.w	r8, #0
	while (check_pins) {
    2920:	bb82      	cbnz	r2, 2984 <gpiote_event_handler+0x98>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    2922:	4b35      	ldr	r3, [pc, #212]	; (29f8 <gpiote_event_handler+0x10c>)
    2924:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
    2928:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
	uint32_t fired_triggers[GPIO_COUNT] = {0};
    292c:	4a34      	ldr	r2, [pc, #208]	; (2a00 <gpiote_event_handler+0x114>)
    return p_reg->INTENSET & mask;
    292e:	4832      	ldr	r0, [pc, #200]	; (29f8 <gpiote_event_handler+0x10c>)
    2930:	2300      	movs	r3, #0
		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
    2932:	2601      	movs	r6, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    2934:	461f      	mov	r7, r3
    return p_reg->INTENSET & mask;
    2936:	f8d0 1304 	ldr.w	r1, [r0, #772]	; 0x304
    293a:	fa06 fc03 	lsl.w	ip, r6, r3
    293e:	ea1c 0f01 	tst.w	ip, r1
    2942:	d00c      	beq.n	295e <gpiote_event_handler+0x72>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    2944:	6811      	ldr	r1, [r2, #0]
    2946:	b151      	cbz	r1, 295e <gpiote_event_handler+0x72>
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    2948:	f503 71a2 	add.w	r1, r3, #324	; 0x144
    294c:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    2950:	6017      	str	r7, [r2, #0]
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    2952:	f3c1 2104 	ubfx	r1, r1, #8, #5
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
    2956:	fa06 f101 	lsl.w	r1, r6, r1
    295a:	430c      	orrs	r4, r1
    295c:	6811      	ldr	r1, [r2, #0]
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    295e:	3301      	adds	r3, #1
    2960:	2b08      	cmp	r3, #8
    2962:	f102 0204 	add.w	r2, r2, #4
    2966:	d1e6      	bne.n	2936 <gpiote_event_handler+0x4a>
	if (fired_triggers[0]) {
    2968:	bb1c      	cbnz	r4, 29b2 <gpiote_event_handler+0xc6>
	if (port_event) {
    296a:	b14d      	cbz	r5, 2980 <gpiote_event_handler+0x94>
	uint32_t out = data->pin_int_en;
    296c:	4e23      	ldr	r6, [pc, #140]	; (29fc <gpiote_event_handler+0x110>)
	out &= ~data->trig_edge & ~data->double_edge;
    296e:	e9d6 3105 	ldrd	r3, r1, [r6, #20]
	uint32_t out = data->pin_int_en;
    2972:	68f2      	ldr	r2, [r6, #12]
	out &= ~data->trig_edge & ~data->double_edge;
    2974:	430b      	orrs	r3, r1
    2976:	ea22 0203 	bic.w	r2, r2, r3
	uint32_t bit = 1U << pin;
    297a:	2401      	movs	r4, #1
	uint32_t pin = 0U;
    297c:	2500      	movs	r5, #0
	while (level_pins) {
    297e:	bb4a      	cbnz	r2, 29d4 <gpiote_event_handler+0xe8>
}
    2980:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (check_pins & bit) {
    2984:	4216      	tst	r6, r2
    2986:	d00e      	beq.n	29a6 <gpiote_event_handler+0xba>
			if (!(level_pins & bit)) {
    2988:	423e      	tst	r6, r7
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    298a:	f008 001f 	and.w	r0, r8, #31
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    298e:	bf08      	it	eq
    2990:	f500 73e0 	addeq.w	r3, r0, #448	; 0x1c0
			nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
    2994:	f04f 0100 	mov.w	r1, #0
    2998:	bf08      	it	eq
    299a:	f859 3023 	ldreq.w	r3, [r9, r3, lsl #2]
    299e:	f002 fa89 	bl	4eb4 <nrf_gpio_cfg_sense_set>
			check_pins &= ~bit;
    29a2:	ea22 0206 	bic.w	r2, r2, r6
		++pin;
    29a6:	f108 0801 	add.w	r8, r8, #1
		bit <<= 1;
    29aa:	0076      	lsls	r6, r6, #1
    29ac:	e7b8      	b.n	2920 <gpiote_event_handler+0x34>
	uint32_t fired_triggers[GPIO_COUNT] = {0};
    29ae:	462c      	mov	r4, r5
    29b0:	e7bc      	b.n	292c <gpiote_event_handler+0x40>
	gpio_fire_callbacks(list, port, pins);
    29b2:	4b12      	ldr	r3, [pc, #72]	; (29fc <gpiote_event_handler+0x110>)
    29b4:	6859      	ldr	r1, [r3, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    29b6:	2900      	cmp	r1, #0
    29b8:	d0d7      	beq.n	296a <gpiote_event_handler+0x7e>
    29ba:	680e      	ldr	r6, [r1, #0]
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    29bc:	4f11      	ldr	r7, [pc, #68]	; (2a04 <gpiote_event_handler+0x118>)
		if (cb->pin_mask & pins) {
    29be:	688a      	ldr	r2, [r1, #8]
    29c0:	4022      	ands	r2, r4
    29c2:	d002      	beq.n	29ca <gpiote_event_handler+0xde>
			cb->handler(port, cb, cb->pin_mask & pins);
    29c4:	684b      	ldr	r3, [r1, #4]
    29c6:	4638      	mov	r0, r7
    29c8:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    29ca:	2e00      	cmp	r6, #0
    29cc:	d0cd      	beq.n	296a <gpiote_event_handler+0x7e>
    29ce:	4631      	mov	r1, r6
    29d0:	6836      	ldr	r6, [r6, #0]
    29d2:	e7f4      	b.n	29be <gpiote_event_handler+0xd2>
		if (level_pins & bit) {
    29d4:	4214      	tst	r4, r2
    29d6:	d00c      	beq.n	29f2 <gpiote_event_handler+0x106>
	if ((BIT(pin) & data->int_active_level) != 0U) {
    29d8:	6931      	ldr	r1, [r6, #16]
    29da:	40e9      	lsrs	r1, r5
    29dc:	f001 0101 	and.w	r1, r1, #1
    29e0:	f1c1 0103 	rsb	r1, r1, #3
			nrf_gpio_cfg_sense_set(abs_pin, sense);
    29e4:	b2c9      	uxtb	r1, r1
    29e6:	f005 001f 	and.w	r0, r5, #31
    29ea:	f002 fa63 	bl	4eb4 <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
    29ee:	ea22 0204 	bic.w	r2, r2, r4
		++pin;
    29f2:	3501      	adds	r5, #1
		bit <<= 1;
    29f4:	0064      	lsls	r4, r4, #1
    29f6:	e7c2      	b.n	297e <gpiote_event_handler+0x92>
    29f8:	40006000 	.word	0x40006000
    29fc:	20000dc8 	.word	0x20000dc8
    2a00:	40006100 	.word	0x40006100
    2a04:	00006ce0 	.word	0x00006ce0

00002a08 <flash_nrf_pages_layout>:

static void flash_nrf_pages_layout(const struct device *dev,
				     const struct flash_pages_layout **layout,
				     size_t *layout_size)
{
	*layout = &dev_layout;
    2a08:	4b02      	ldr	r3, [pc, #8]	; (2a14 <flash_nrf_pages_layout+0xc>)
    2a0a:	600b      	str	r3, [r1, #0]
	*layout_size = 1;
    2a0c:	2301      	movs	r3, #1
    2a0e:	6013      	str	r3, [r2, #0]
}
    2a10:	4770      	bx	lr
    2a12:	bf00      	nop
    2a14:	20000de8 	.word	0x20000de8

00002a18 <flash_nrf_get_parameters>:
flash_nrf_get_parameters(const struct device *dev)
{
	ARG_UNUSED(dev);

	return &flash_nrf_parameters;
}
    2a18:	4800      	ldr	r0, [pc, #0]	; (2a1c <flash_nrf_get_parameters+0x4>)
    2a1a:	4770      	bx	lr
    2a1c:	00007024 	.word	0x00007024

00002a20 <flash_nrf_erase>:
{
    2a20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2a22:	460e      	mov	r6, r1
    2a24:	4614      	mov	r4, r2
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
    2a26:	f002 fd65 	bl	54f4 <nrfx_nvmc_flash_page_size_get>
	if (is_regular_addr_valid(addr, size)) {
    2a2a:	4621      	mov	r1, r4
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
    2a2c:	4605      	mov	r5, r0
	if (is_regular_addr_valid(addr, size)) {
    2a2e:	4630      	mov	r0, r6
    2a30:	f002 fa9f 	bl	4f72 <is_regular_addr_valid>
		if (((addr % pg_size) != 0) || ((size % pg_size) != 0)) {
    2a34:	4637      	mov	r7, r6
	if (is_regular_addr_valid(addr, size)) {
    2a36:	b1f8      	cbz	r0, 2a78 <flash_nrf_erase+0x58>
		if (((addr % pg_size) != 0) || ((size % pg_size) != 0)) {
    2a38:	fbb6 f3f5 	udiv	r3, r6, r5
    2a3c:	fb05 6313 	mls	r3, r5, r3, r6
    2a40:	b923      	cbnz	r3, 2a4c <flash_nrf_erase+0x2c>
    2a42:	fbb4 f0f5 	udiv	r0, r4, r5
    2a46:	fb05 4010 	mls	r0, r5, r0, r4
    2a4a:	b140      	cbz	r0, 2a5e <flash_nrf_erase+0x3e>
			LOG_ERR("unaligned address: 0x%08lx:%zu",
    2a4c:	480d      	ldr	r0, [pc, #52]	; (2a84 <flash_nrf_erase+0x64>)
    2a4e:	4623      	mov	r3, r4
    2a50:	4632      	mov	r2, r6
    2a52:	2145      	movs	r1, #69	; 0x45
		LOG_ERR("invalid address: 0x%08lx:%zu",
    2a54:	f002 f888 	bl	4b68 <z_log_minimal_printk>
		return -EINVAL;
    2a58:	f06f 0015 	mvn.w	r0, #21
    2a5c:	e00b      	b.n	2a76 <flash_nrf_erase+0x56>
		if (!n_pages) {
    2a5e:	42a5      	cmp	r5, r4
    2a60:	d809      	bhi.n	2a76 <flash_nrf_erase+0x56>

#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

static int erase_op(void *context)
{
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
    2a62:	f002 fd47 	bl	54f4 <nrfx_nvmc_flash_page_size_get>
    2a66:	4605      	mov	r5, r0
		if (nrfx_nvmc_page_partial_erase_continue()) {
			e_ctx->len -= pg_size;
			e_ctx->flash_addr += pg_size;
		}
#else
		(void)nrfx_nvmc_page_erase(e_ctx->flash_addr);
    2a68:	4638      	mov	r0, r7
    2a6a:	f000 fd65 	bl	3538 <nrfx_nvmc_page_erase>
			}

		}
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

	} while (e_ctx->len > 0);
    2a6e:	1b64      	subs	r4, r4, r5
    2a70:	442f      	add	r7, r5
    2a72:	d1f9      	bne.n	2a68 <flash_nrf_erase+0x48>
	return ret;
    2a74:	4620      	mov	r0, r4
}
    2a76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		LOG_ERR("invalid address: 0x%08lx:%zu",
    2a78:	4803      	ldr	r0, [pc, #12]	; (2a88 <flash_nrf_erase+0x68>)
    2a7a:	4623      	mov	r3, r4
    2a7c:	4632      	mov	r2, r6
    2a7e:	2145      	movs	r1, #69	; 0x45
    2a80:	e7e8      	b.n	2a54 <flash_nrf_erase+0x34>
    2a82:	bf00      	nop
    2a84:	00007b99 	.word	0x00007b99
    2a88:	00007bbd 	.word	0x00007bbd

00002a8c <nrf_flash_init>:
{
    2a8c:	b510      	push	{r4, lr}
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
    2a8e:	f002 fd35 	bl	54fc <nrfx_nvmc_flash_page_count_get>
    2a92:	4c03      	ldr	r4, [pc, #12]	; (2aa0 <nrf_flash_init+0x14>)
    2a94:	6020      	str	r0, [r4, #0]
	dev_layout.pages_size = nrfx_nvmc_flash_page_size_get();
    2a96:	f002 fd2d 	bl	54f4 <nrfx_nvmc_flash_page_size_get>
    2a9a:	6060      	str	r0, [r4, #4]
}
    2a9c:	2000      	movs	r0, #0
    2a9e:	bd10      	pop	{r4, pc}
    2aa0:	20000de8 	.word	0x20000de8

00002aa4 <flash_nrf_read>:
{
    2aa4:	b570      	push	{r4, r5, r6, lr}
    2aa6:	460d      	mov	r5, r1
	if (is_regular_addr_valid(addr, len)) {
    2aa8:	4628      	mov	r0, r5
    2aaa:	4619      	mov	r1, r3
{
    2aac:	4616      	mov	r6, r2
    2aae:	461c      	mov	r4, r3
	if (is_regular_addr_valid(addr, len)) {
    2ab0:	f002 fa5f 	bl	4f72 <is_regular_addr_valid>
    2ab4:	b940      	cbnz	r0, 2ac8 <flash_nrf_read+0x24>
		LOG_ERR("invalid address: 0x%08lx:%zu",
    2ab6:	4809      	ldr	r0, [pc, #36]	; (2adc <flash_nrf_read+0x38>)
    2ab8:	4623      	mov	r3, r4
    2aba:	462a      	mov	r2, r5
    2abc:	2145      	movs	r1, #69	; 0x45
    2abe:	f002 f853 	bl	4b68 <z_log_minimal_printk>
    2ac2:	f06f 0015 	mvn.w	r0, #21
}
    2ac6:	bd70      	pop	{r4, r5, r6, pc}
	if (!len) {
    2ac8:	b134      	cbz	r4, 2ad8 <flash_nrf_read+0x34>
	memcpy(data, (void *)addr, len);
    2aca:	4622      	mov	r2, r4
    2acc:	4629      	mov	r1, r5
    2ace:	4630      	mov	r0, r6
    2ad0:	f002 f9d9 	bl	4e86 <memcpy>
	return 0;
    2ad4:	2000      	movs	r0, #0
    2ad6:	e7f6      	b.n	2ac6 <flash_nrf_read+0x22>
		return 0;
    2ad8:	4620      	mov	r0, r4
    2ada:	e7f4      	b.n	2ac6 <flash_nrf_read+0x22>
    2adc:	00007bbd 	.word	0x00007bbd

00002ae0 <flash_nrf_write>:
{
    2ae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2ae2:	460e      	mov	r6, r1
	if (is_regular_addr_valid(addr, len)) {
    2ae4:	4630      	mov	r0, r6
    2ae6:	4619      	mov	r1, r3
{
    2ae8:	4617      	mov	r7, r2
    2aea:	461c      	mov	r4, r3
	if (is_regular_addr_valid(addr, len)) {
    2aec:	f002 fa41 	bl	4f72 <is_regular_addr_valid>
    2af0:	b940      	cbnz	r0, 2b04 <flash_nrf_write+0x24>
		LOG_ERR("invalid address: 0x%08lx:%zu",
    2af2:	4814      	ldr	r0, [pc, #80]	; (2b44 <flash_nrf_write+0x64>)
    2af4:	4623      	mov	r3, r4
    2af6:	4632      	mov	r2, r6
    2af8:	2145      	movs	r1, #69	; 0x45
		LOG_ERR("not word-aligned: 0x%08lx:%zu",
    2afa:	f002 f835 	bl	4b68 <z_log_minimal_printk>
		return -EINVAL;
    2afe:	f06f 0015 	mvn.w	r0, #21
}
    2b02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (data & 0x3) ? false : true;
    2b04:	ea44 0506 	orr.w	r5, r4, r6
	if (!is_aligned_32(addr) || (len % sizeof(uint32_t))) {
    2b08:	f015 0503 	ands.w	r5, r5, #3
    2b0c:	d004      	beq.n	2b18 <flash_nrf_write+0x38>
		LOG_ERR("not word-aligned: 0x%08lx:%zu",
    2b0e:	480e      	ldr	r0, [pc, #56]	; (2b48 <flash_nrf_write+0x68>)
    2b10:	4623      	mov	r3, r4
    2b12:	4632      	mov	r2, r6
    2b14:	2145      	movs	r1, #69	; 0x45
    2b16:	e7f0      	b.n	2afa <flash_nrf_write+0x1a>
	if (!len) {
    2b18:	b18c      	cbz	r4, 2b3e <flash_nrf_write+0x5e>
		}
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */
	}
#endif /* CONFIG_SOC_FLASH_NRF_EMULATE_ONE_BYTE_WRITE_ACCESS */
	/* Write all the 4-byte aligned data */
	while (w_ctx->len >= sizeof(uint32_t)) {
    2b1a:	f024 0403 	bic.w	r4, r4, #3
    2b1e:	42ac      	cmp	r4, r5
    2b20:	eb05 0006 	add.w	r0, r5, r6
    2b24:	d106      	bne.n	2b34 <flash_nrf_write+0x54>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrf_nvmc_ready_check(NRF_NVMC_Type const * p_reg)
{
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
    2b26:	4a09      	ldr	r2, [pc, #36]	; (2b4c <flash_nrf_write+0x6c>)
    2b28:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
	while (!nrfx_nvmc_write_done_check()) {
    2b2c:	07db      	lsls	r3, r3, #31
    2b2e:	d5fb      	bpl.n	2b28 <flash_nrf_write+0x48>
	return ret;
    2b30:	2000      	movs	r0, #0
    2b32:	e7e6      	b.n	2b02 <flash_nrf_write+0x22>
		if (SUSPEND_POFWARN()) {
			return -ECANCELED;
		}

		nrfx_nvmc_word_write(w_ctx->flash_addr,
    2b34:	5979      	ldr	r1, [r7, r5]
    2b36:	f000 fd1f 	bl	3578 <nrfx_nvmc_word_write>
	w_ctx->len -= shift;
    2b3a:	3504      	adds	r5, #4
}
    2b3c:	e7ef      	b.n	2b1e <flash_nrf_write+0x3e>
		return 0;
    2b3e:	4620      	mov	r0, r4
    2b40:	e7df      	b.n	2b02 <flash_nrf_write+0x22>
    2b42:	bf00      	nop
    2b44:	00007bbd 	.word	0x00007bbd
    2b48:	00007bdf 	.word	0x00007bdf
    2b4c:	4001e000 	.word	0x4001e000

00002b50 <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
    2b50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return dev->data;
    2b52:	6906      	ldr	r6, [r0, #16]
{
    2b54:	4605      	mov	r5, r0
    2b56:	460f      	mov	r7, r1
	struct uarte_nrfx_data *data = get_dev_data(dev);
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    2b58:	f004 f86a 	bl	6c30 <k_is_in_isr>
    2b5c:	b910      	cbnz	r0, 2b64 <uarte_nrfx_poll_out+0x14>
	return !z_sys_post_kernel;
    2b5e:	4b1e      	ldr	r3, [pc, #120]	; (2bd8 <uarte_nrfx_poll_out+0x88>)
	int key;

	if (isr_mode) {
    2b60:	781b      	ldrb	r3, [r3, #0]
    2b62:	b9a3      	cbnz	r3, 2b8e <uarte_nrfx_poll_out+0x3e>
	__asm__ volatile(
    2b64:	f04f 0320 	mov.w	r3, #32
    2b68:	f3ef 8411 	mrs	r4, BASEPRI
    2b6c:	f383 8811 	msr	BASEPRI, r3
    2b70:	f3bf 8f6f 	isb	sy
		while (1) {
			key = irq_lock();
			if (is_tx_ready(dev)) {
    2b74:	6868      	ldr	r0, [r5, #4]
    2b76:	f002 fb03 	bl	5180 <is_tx_ready.isra.0>
    2b7a:	bb00      	cbnz	r0, 2bbe <uarte_nrfx_poll_out+0x6e>
	__asm__ volatile(
    2b7c:	f384 8811 	msr	BASEPRI, r4
    2b80:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    2b84:	e7ee      	b.n	2b64 <uarte_nrfx_poll_out+0x14>
	__asm__ volatile(
    2b86:	f384 8811 	msr	BASEPRI, r4
    2b8a:	f3bf 8f6f 	isb	sy
{
    2b8e:	2464      	movs	r4, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
    2b90:	6868      	ldr	r0, [r5, #4]
    2b92:	f002 faf5 	bl	5180 <is_tx_ready.isra.0>
    2b96:	b928      	cbnz	r0, 2ba4 <uarte_nrfx_poll_out+0x54>
    2b98:	2001      	movs	r0, #1
    2b9a:	f002 fc99 	bl	54d0 <nrfx_busy_wait>
    2b9e:	3c01      	subs	r4, #1
    2ba0:	d1f6      	bne.n	2b90 <uarte_nrfx_poll_out+0x40>
    2ba2:	e7f4      	b.n	2b8e <uarte_nrfx_poll_out+0x3e>
	__asm__ volatile(
    2ba4:	f04f 0320 	mov.w	r3, #32
    2ba8:	f3ef 8411 	mrs	r4, BASEPRI
    2bac:	f383 8811 	msr	BASEPRI, r3
    2bb0:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    2bb4:	6868      	ldr	r0, [r5, #4]
    2bb6:	f002 fae3 	bl	5180 <is_tx_ready.isra.0>
    2bba:	2800      	cmp	r0, #0
    2bbc:	d0e3      	beq.n	2b86 <uarte_nrfx_poll_out+0x36>
		}
	} else {
		key = wait_tx_ready(dev);
	}

	data->char_out = c;
    2bbe:	4631      	mov	r1, r6
	tx_start(dev, &data->char_out, 1);
    2bc0:	2201      	movs	r2, #1
	data->char_out = c;
    2bc2:	f801 7f14 	strb.w	r7, [r1, #20]!
	tx_start(dev, &data->char_out, 1);
    2bc6:	6868      	ldr	r0, [r5, #4]
    2bc8:	f002 fabf 	bl	514a <tx_start.isra.0>
	__asm__ volatile(
    2bcc:	f384 8811 	msr	BASEPRI, r4
    2bd0:	f3bf 8f6f 	isb	sy

	irq_unlock(key);
}
    2bd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2bd6:	bf00      	nop
    2bd8:	20002c3f 	.word	0x20002c3f

00002bdc <uarte_nrfx_configure>:
{
    2bdc:	b570      	push	{r4, r5, r6, lr}
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
    2bde:	794b      	ldrb	r3, [r1, #5]
    2be0:	2b01      	cmp	r3, #1
    2be2:	d124      	bne.n	2c2e <uarte_nrfx_configure+0x52>
	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    2be4:	798b      	ldrb	r3, [r1, #6]
    2be6:	2b03      	cmp	r3, #3
    2be8:	d121      	bne.n	2c2e <uarte_nrfx_configure+0x52>
	switch (cfg->flow_ctrl) {
    2bea:	79cc      	ldrb	r4, [r1, #7]
    2bec:	b12c      	cbz	r4, 2bfa <uarte_nrfx_configure+0x1e>
    2bee:	2c01      	cmp	r4, #1
    2bf0:	d11d      	bne.n	2c2e <uarte_nrfx_configure+0x52>
		if (IS_HWFC_PINS_USED(get_dev_config(dev)->flags)) {
    2bf2:	6843      	ldr	r3, [r0, #4]
    2bf4:	685b      	ldr	r3, [r3, #4]
    2bf6:	079b      	lsls	r3, r3, #30
    2bf8:	d019      	beq.n	2c2e <uarte_nrfx_configure+0x52>
	switch (cfg->parity) {
    2bfa:	790a      	ldrb	r2, [r1, #4]
    2bfc:	b112      	cbz	r2, 2c04 <uarte_nrfx_configure+0x28>
    2bfe:	2a02      	cmp	r2, #2
    2c00:	d115      	bne.n	2c2e <uarte_nrfx_configure+0x52>
    2c02:	220e      	movs	r2, #14
	if (baudrate_set(dev, cfg->baudrate) != 0) {
    2c04:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
    2c06:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
    2c08:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
    2c0c:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
    2c0e:	d062      	beq.n	2cd6 <uarte_nrfx_configure+0xfa>
    2c10:	d82b      	bhi.n	2c6a <uarte_nrfx_configure+0x8e>
    2c12:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    2c16:	d061      	beq.n	2cdc <uarte_nrfx_configure+0x100>
    2c18:	d814      	bhi.n	2c44 <uarte_nrfx_configure+0x68>
    2c1a:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    2c1e:	d05f      	beq.n	2ce0 <uarte_nrfx_configure+0x104>
    2c20:	d808      	bhi.n	2c34 <uarte_nrfx_configure+0x58>
    2c22:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    2c26:	d05e      	beq.n	2ce6 <uarte_nrfx_configure+0x10a>
    2c28:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    2c2c:	d05e      	beq.n	2cec <uarte_nrfx_configure+0x110>
    2c2e:	f06f 0085 	mvn.w	r0, #133	; 0x85
    2c32:	e04f      	b.n	2cd4 <uarte_nrfx_configure+0xf8>
    2c34:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    2c38:	d05b      	beq.n	2cf2 <uarte_nrfx_configure+0x116>
    2c3a:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    2c3e:	d1f6      	bne.n	2c2e <uarte_nrfx_configure+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    2c40:	4b36      	ldr	r3, [pc, #216]	; (2d1c <uarte_nrfx_configure+0x140>)
    2c42:	e03c      	b.n	2cbe <uarte_nrfx_configure+0xe2>
	switch (baudrate) {
    2c44:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    2c48:	d056      	beq.n	2cf8 <uarte_nrfx_configure+0x11c>
    2c4a:	d807      	bhi.n	2c5c <uarte_nrfx_configure+0x80>
    2c4c:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    2c50:	d054      	beq.n	2cfc <uarte_nrfx_configure+0x120>
    2c52:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    2c56:	d1ea      	bne.n	2c2e <uarte_nrfx_configure+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    2c58:	4b31      	ldr	r3, [pc, #196]	; (2d20 <uarte_nrfx_configure+0x144>)
    2c5a:	e030      	b.n	2cbe <uarte_nrfx_configure+0xe2>
	switch (baudrate) {
    2c5c:	f647 2612 	movw	r6, #31250	; 0x7a12
    2c60:	42b3      	cmp	r3, r6
    2c62:	d1e4      	bne.n	2c2e <uarte_nrfx_configure+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    2c64:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    2c68:	e029      	b.n	2cbe <uarte_nrfx_configure+0xe2>
	switch (baudrate) {
    2c6a:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    2c6e:	d047      	beq.n	2d00 <uarte_nrfx_configure+0x124>
    2c70:	d813      	bhi.n	2c9a <uarte_nrfx_configure+0xbe>
    2c72:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    2c76:	d046      	beq.n	2d06 <uarte_nrfx_configure+0x12a>
    2c78:	d809      	bhi.n	2c8e <uarte_nrfx_configure+0xb2>
    2c7a:	f64d 26c0 	movw	r6, #56000	; 0xdac0
    2c7e:	42b3      	cmp	r3, r6
    2c80:	d043      	beq.n	2d0a <uarte_nrfx_configure+0x12e>
    2c82:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    2c86:	d1d2      	bne.n	2c2e <uarte_nrfx_configure+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    2c88:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    2c8c:	e017      	b.n	2cbe <uarte_nrfx_configure+0xe2>
	switch (baudrate) {
    2c8e:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    2c92:	d1cc      	bne.n	2c2e <uarte_nrfx_configure+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    2c94:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    2c98:	e011      	b.n	2cbe <uarte_nrfx_configure+0xe2>
	switch (baudrate) {
    2c9a:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    2c9e:	d037      	beq.n	2d10 <uarte_nrfx_configure+0x134>
    2ca0:	d808      	bhi.n	2cb4 <uarte_nrfx_configure+0xd8>
    2ca2:	4e20      	ldr	r6, [pc, #128]	; (2d24 <uarte_nrfx_configure+0x148>)
    2ca4:	42b3      	cmp	r3, r6
    2ca6:	d036      	beq.n	2d16 <uarte_nrfx_configure+0x13a>
    2ca8:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    2cac:	d1bf      	bne.n	2c2e <uarte_nrfx_configure+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    2cae:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    2cb2:	e004      	b.n	2cbe <uarte_nrfx_configure+0xe2>
	switch (baudrate) {
    2cb4:	4e1c      	ldr	r6, [pc, #112]	; (2d28 <uarte_nrfx_configure+0x14c>)
    2cb6:	42b3      	cmp	r3, r6
    2cb8:	d1b9      	bne.n	2c2e <uarte_nrfx_configure+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    2cba:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    2cbe:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
	get_dev_data(dev)->uart_config = *cfg;
    2cc2:	6903      	ldr	r3, [r0, #16]
    2cc4:	c903      	ldmia	r1, {r0, r1}
                    | (uint32_t)p_cfg->hwfc;
    2cc6:	4322      	orrs	r2, r4
    2cc8:	3304      	adds	r3, #4
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    2cca:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
    2cce:	e883 0003 	stmia.w	r3, {r0, r1}
	return 0;
    2cd2:	2000      	movs	r0, #0
}
    2cd4:	bd70      	pop	{r4, r5, r6, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    2cd6:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    2cda:	e7f0      	b.n	2cbe <uarte_nrfx_configure+0xe2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    2cdc:	4b13      	ldr	r3, [pc, #76]	; (2d2c <uarte_nrfx_configure+0x150>)
    2cde:	e7ee      	b.n	2cbe <uarte_nrfx_configure+0xe2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    2ce0:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    2ce4:	e7eb      	b.n	2cbe <uarte_nrfx_configure+0xe2>
		nrf_baudrate = 0x00014000;
    2ce6:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    2cea:	e7e8      	b.n	2cbe <uarte_nrfx_configure+0xe2>
	switch (baudrate) {
    2cec:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    2cf0:	e7e5      	b.n	2cbe <uarte_nrfx_configure+0xe2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    2cf2:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    2cf6:	e7e2      	b.n	2cbe <uarte_nrfx_configure+0xe2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    2cf8:	4b0d      	ldr	r3, [pc, #52]	; (2d30 <uarte_nrfx_configure+0x154>)
    2cfa:	e7e0      	b.n	2cbe <uarte_nrfx_configure+0xe2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    2cfc:	4b0d      	ldr	r3, [pc, #52]	; (2d34 <uarte_nrfx_configure+0x158>)
    2cfe:	e7de      	b.n	2cbe <uarte_nrfx_configure+0xe2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    2d00:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    2d04:	e7db      	b.n	2cbe <uarte_nrfx_configure+0xe2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    2d06:	4b0c      	ldr	r3, [pc, #48]	; (2d38 <uarte_nrfx_configure+0x15c>)
    2d08:	e7d9      	b.n	2cbe <uarte_nrfx_configure+0xe2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    2d0a:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    2d0e:	e7d6      	b.n	2cbe <uarte_nrfx_configure+0xe2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    2d10:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    2d14:	e7d3      	b.n	2cbe <uarte_nrfx_configure+0xe2>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    2d16:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    2d1a:	e7d0      	b.n	2cbe <uarte_nrfx_configure+0xe2>
    2d1c:	0013b000 	.word	0x0013b000
    2d20:	004ea000 	.word	0x004ea000
    2d24:	0003d090 	.word	0x0003d090
    2d28:	000f4240 	.word	0x000f4240
    2d2c:	00275000 	.word	0x00275000
    2d30:	0075c000 	.word	0x0075c000
    2d34:	003af000 	.word	0x003af000
    2d38:	013a9000 	.word	0x013a9000

00002d3c <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
    2d3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2d3e:	2200      	movs	r2, #0
    2d40:	4605      	mov	r5, r0
    2d42:	2101      	movs	r1, #1
    2d44:	2002      	movs	r0, #2
    2d46:	f7ff f89b 	bl	1e80 <z_arm_irq_priority_set>
    2d4a:	2002      	movs	r0, #2
    2d4c:	f7ff f87a 	bl	1e44 <arch_irq_enable>
	return config->uarte_regs;
    2d50:	686b      	ldr	r3, [r5, #4]
	return dev->data;
    2d52:	692e      	ldr	r6, [r5, #16]
	return config->uarte_regs;
    2d54:	681c      	ldr	r4, [r3, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    2d56:	2300      	movs	r3, #0
    2d58:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
	data->dev = dev;
    2d5c:	4631      	mov	r1, r6
    p_reg->OUTSET = set_mask;
    2d5e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    2d62:	2240      	movs	r2, #64	; 0x40
    2d64:	f841 5b04 	str.w	r5, [r1], #4
    reg->PIN_CNF[pin_number] = cnf;
    2d68:	200c      	movs	r0, #12
    p_reg->OUTSET = set_mask;
    2d6a:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    p_reg->PSEL.TXD = pseltxd;
    2d6e:	2706      	movs	r7, #6
    reg->PIN_CNF[pin_number] = cnf;
    2d70:	2203      	movs	r2, #3
    2d72:	f8c3 2718 	str.w	r2, [r3, #1816]	; 0x718
    2d76:	f8c3 0720 	str.w	r0, [r3, #1824]	; 0x720
    2d7a:	f8c4 750c 	str.w	r7, [r4, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
    2d7e:	2708      	movs	r7, #8
    2d80:	f8c4 7514 	str.w	r7, [r4, #1300]	; 0x514
    2d84:	f8c3 071c 	str.w	r0, [r3, #1820]	; 0x71c
    p_reg->OUTSET = set_mask;
    2d88:	2020      	movs	r0, #32
    2d8a:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
    reg->PIN_CNF[pin_number] = cnf;
    2d8e:	f8c3 2714 	str.w	r2, [r3, #1812]	; 0x714
    p_reg->PSEL.RTS = pselrts;
    2d92:	2305      	movs	r3, #5
    2d94:	f8c4 3508 	str.w	r3, [r4, #1288]	; 0x508
    p_reg->PSEL.CTS = pselcts;
    2d98:	2307      	movs	r3, #7
    2d9a:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
    2d9e:	4628      	mov	r0, r5
    2da0:	f7ff ff1c 	bl	2bdc <uarte_nrfx_configure>
	if (err) {
    2da4:	4607      	mov	r7, r0
    2da6:	b980      	cbnz	r0, 2dca <uarte_0_init+0x8e>
	    get_dev_config(dev)->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
    2da8:	686b      	ldr	r3, [r5, #4]
    2daa:	685b      	ldr	r3, [r3, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
    2dac:	0719      	lsls	r1, r3, #28
    2dae:	d521      	bpl.n	2df4 <uarte_0_init+0xb8>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    2db0:	f106 0016 	add.w	r0, r6, #22
    2db4:	f000 fbee 	bl	3594 <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
    2db8:	4b22      	ldr	r3, [pc, #136]	; (2e44 <uarte_0_init+0x108>)
    2dba:	4298      	cmp	r0, r3
    2dbc:	d007      	beq.n	2dce <uarte_0_init+0x92>
		LOG_ERR("Failed to allocate PPI Channel");
    2dbe:	4822      	ldr	r0, [pc, #136]	; (2e48 <uarte_0_init+0x10c>)
    2dc0:	2145      	movs	r1, #69	; 0x45
    2dc2:	f001 fed1 	bl	4b68 <z_log_minimal_printk>
		return -EIO;
    2dc6:	f06f 0704 	mvn.w	r7, #4
UART_NRF_UARTE_DEVICE(0);
    2dca:	4638      	mov	r0, r7
    2dcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
    2dce:	7db0      	ldrb	r0, [r6, #22]
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    2dd0:	00c3      	lsls	r3, r0, #3
    2dd2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    2dd6:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    return (uint32_t)p_reg + (uint32_t)task;
    2dda:	f104 020c 	add.w	r2, r4, #12
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    2dde:	f504 7190 	add.w	r1, r4, #288	; 0x120
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
    2de2:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
    2de6:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->CHENSET = mask;
    2dea:	4a18      	ldr	r2, [pc, #96]	; (2e4c <uarte_0_init+0x110>)
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    2dec:	2301      	movs	r3, #1
    2dee:	4083      	lsls	r3, r0
    2df0:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    2df4:	2308      	movs	r3, #8
    2df6:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2dfa:	2300      	movs	r3, #0
    2dfc:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    2e00:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
    2e04:	f106 0315 	add.w	r3, r6, #21

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    2e08:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    2e0c:	2301      	movs	r3, #1
    2e0e:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2e12:	6023      	str	r3, [r4, #0]
	if (!(get_dev_config(dev)->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
    2e14:	686b      	ldr	r3, [r5, #4]
    2e16:	685b      	ldr	r3, [r3, #4]
    2e18:	071a      	lsls	r2, r3, #28
    p_reg->INTENSET = mask;
    2e1a:	bf5c      	itt	pl
    2e1c:	f44f 7280 	movpl.w	r2, #256	; 0x100
    2e20:	f8c4 2304 	strpl.w	r2, [r4, #772]	; 0x304
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
    2e24:	06db      	lsls	r3, r3, #27
    2e26:	bf44      	itt	mi
    2e28:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
    2e2c:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
    2e30:	3614      	adds	r6, #20
    p_reg->TXD.MAXCNT = length;
    2e32:	2300      	movs	r3, #0
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    2e34:	f8c4 6544 	str.w	r6, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    2e38:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2e3c:	2301      	movs	r3, #1
    2e3e:	60a3      	str	r3, [r4, #8]
    2e40:	60e3      	str	r3, [r4, #12]
UART_NRF_UARTE_DEVICE(0);
    2e42:	e7c2      	b.n	2dca <uarte_0_init+0x8e>
    2e44:	0bad0000 	.word	0x0bad0000
    2e48:	00007c0c 	.word	0x00007c0c
    2e4c:	4001f000 	.word	0x4001f000

00002e50 <k_sys_fatal_error_handler>:
	defined(CONFIG_SPM_SERVICE_NS_HANDLER_FROM_SPM_FAULT)
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
    2e50:	4803      	ldr	r0, [pc, #12]	; (2e60 <k_sys_fatal_error_handler+0x10>)
{
    2e52:	b508      	push	{r3, lr}
		LOG_ERR("Resetting system");
    2e54:	2145      	movs	r1, #69	; 0x45
    2e56:	f001 fe87 	bl	4b68 <z_log_minimal_printk>
		sys_arch_reboot(0);
    2e5a:	2000      	movs	r0, #0
    2e5c:	f7ff fbde 	bl	261c <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
    2e60:	00007c40 	.word	0x00007c40

00002e64 <boot_write_magic>:
}

static inline uint32_t
boot_magic_off(const struct flash_area *fap)
{
    return fap->fa_size - BOOT_MAGIC_SZ;
    2e64:	6881      	ldr	r1, [r0, #8]
    off = boot_magic_off(fap);

    BOOT_LOG_DBG("writing magic; fa_id=%d off=0x%lx (0x%lx)",
                 fap->fa_id, (unsigned long)off,
                 (unsigned long)(fap->fa_off + off));
    rc = flash_area_write(fap, off, boot_img_magic, BOOT_MAGIC_SZ);
    2e66:	4a05      	ldr	r2, [pc, #20]	; (2e7c <boot_write_magic+0x18>)
{
    2e68:	b508      	push	{r3, lr}
    rc = flash_area_write(fap, off, boot_img_magic, BOOT_MAGIC_SZ);
    2e6a:	3910      	subs	r1, #16
    2e6c:	2310      	movs	r3, #16
    2e6e:	f001 fec5 	bl	4bfc <flash_area_write>
    if (rc != 0) {
        return BOOT_EFLASH;
    }

    return 0;
}
    2e72:	3800      	subs	r0, #0
    2e74:	bf18      	it	ne
    2e76:	2001      	movne	r0, #1
    2e78:	bd08      	pop	{r3, pc}
    2e7a:	bf00      	nop
    2e7c:	00007080 	.word	0x00007080

00002e80 <boot_read_swap_state>:
{
    2e80:	b530      	push	{r4, r5, lr}
    2e82:	460c      	mov	r4, r1
    return fap->fa_size - BOOT_MAGIC_SZ;
    2e84:	6881      	ldr	r1, [r0, #8]
{
    2e86:	b087      	sub	sp, #28
    rc = flash_area_read(fap, off, magic, BOOT_MAGIC_SZ);
    2e88:	2310      	movs	r3, #16
    2e8a:	aa02      	add	r2, sp, #8
    2e8c:	3910      	subs	r1, #16
{
    2e8e:	4605      	mov	r5, r0
    rc = flash_area_read(fap, off, magic, BOOT_MAGIC_SZ);
    2e90:	f001 fe98 	bl	4bc4 <flash_area_read>
    if (rc < 0) {
    2e94:	2800      	cmp	r0, #0
    2e96:	da02      	bge.n	2e9e <boot_read_swap_state+0x1e>
        return BOOT_EFLASH;
    2e98:	2001      	movs	r0, #1
}
    2e9a:	b007      	add	sp, #28
    2e9c:	bd30      	pop	{r4, r5, pc}
    if (buffer == NULL || len == 0) {
    2e9e:	2210      	movs	r2, #16
    2ea0:	a902      	add	r1, sp, #8
    2ea2:	4628      	mov	r0, r5
    2ea4:	f002 fa5d 	bl	5362 <bootutil_buffer_is_erased.part.0>
    if (bootutil_buffer_is_erased(fap, magic, BOOT_MAGIC_SZ)) {
    2ea8:	b368      	cbz	r0, 2f06 <boot_read_swap_state+0x86>
        state->magic = BOOT_MAGIC_UNSET;
    2eaa:	2303      	movs	r3, #3
        state->magic = boot_magic_decode(magic);
    2eac:	7023      	strb	r3, [r4, #0]
    return boot_copy_done_off(fap) - BOOT_MAX_ALIGN;
    2eae:	68a9      	ldr	r1, [r5, #8]
    rc = flash_area_read(fap, off, &swap_info, sizeof swap_info);
    2eb0:	2301      	movs	r3, #1
    2eb2:	f10d 0207 	add.w	r2, sp, #7
    2eb6:	3928      	subs	r1, #40	; 0x28
    2eb8:	4628      	mov	r0, r5
    2eba:	f001 fe83 	bl	4bc4 <flash_area_read>
    if (rc < 0) {
    2ebe:	2800      	cmp	r0, #0
    2ec0:	dbea      	blt.n	2e98 <boot_read_swap_state+0x18>
    state->swap_type = BOOT_GET_SWAP_TYPE(swap_info);
    2ec2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    2ec6:	f003 020f 	and.w	r2, r3, #15
    state->image_num = BOOT_GET_IMAGE_NUM(swap_info);
    2eca:	091b      	lsrs	r3, r3, #4
    state->swap_type = BOOT_GET_SWAP_TYPE(swap_info);
    2ecc:	7062      	strb	r2, [r4, #1]
    state->image_num = BOOT_GET_IMAGE_NUM(swap_info);
    2ece:	7123      	strb	r3, [r4, #4]
    if (buffer == NULL || len == 0) {
    2ed0:	2201      	movs	r2, #1
    2ed2:	f10d 0107 	add.w	r1, sp, #7
    2ed6:	4628      	mov	r0, r5
    2ed8:	f002 fa43 	bl	5362 <bootutil_buffer_is_erased.part.0>
    if (bootutil_buffer_is_erased(fap, &swap_info, sizeof swap_info) ||
    2edc:	b910      	cbnz	r0, 2ee4 <boot_read_swap_state+0x64>
    2ede:	7863      	ldrb	r3, [r4, #1]
    2ee0:	2b04      	cmp	r3, #4
    2ee2:	d903      	bls.n	2eec <boot_read_swap_state+0x6c>
        state->swap_type = BOOT_SWAP_TYPE_NONE;
    2ee4:	2301      	movs	r3, #1
    2ee6:	7063      	strb	r3, [r4, #1]
        state->image_num = 0;
    2ee8:	2300      	movs	r3, #0
    2eea:	7123      	strb	r3, [r4, #4]
    return boot_image_ok_off(fap) - BOOT_MAX_ALIGN;
    2eec:	68aa      	ldr	r2, [r5, #8]
    return boot_read_flag(fap, copy_done, boot_copy_done_off(fap));
    2eee:	1ca1      	adds	r1, r4, #2
    2ef0:	3a20      	subs	r2, #32
    2ef2:	4628      	mov	r0, r5
    2ef4:	f002 fa5d 	bl	53b2 <boot_read_flag>
    if (rc) {
    2ef8:	2800      	cmp	r0, #0
    2efa:	d1cd      	bne.n	2e98 <boot_read_swap_state+0x18>
    return boot_read_image_ok(fap, &state->image_ok);
    2efc:	1ce1      	adds	r1, r4, #3
    2efe:	4628      	mov	r0, r5
    2f00:	f002 fab0 	bl	5464 <boot_read_image_ok>
    2f04:	e7c9      	b.n	2e9a <boot_read_swap_state+0x1a>
    if (memcmp(magic, boot_img_magic, BOOT_MAGIC_SZ) == 0) {
    2f06:	4905      	ldr	r1, [pc, #20]	; (2f1c <boot_read_swap_state+0x9c>)
    2f08:	2210      	movs	r2, #16
    2f0a:	a802      	add	r0, sp, #8
    2f0c:	f001 ffaa 	bl	4e64 <memcmp>
        return BOOT_MAGIC_GOOD;
    2f10:	2800      	cmp	r0, #0
    2f12:	bf14      	ite	ne
    2f14:	2302      	movne	r3, #2
    2f16:	2301      	moveq	r3, #1
    2f18:	e7c8      	b.n	2eac <boot_read_swap_state+0x2c>
    2f1a:	bf00      	nop
    2f1c:	00007080 	.word	0x00007080

00002f20 <boot_swap_type_multi>:
    return boot_write_trailer(fap, off, (const uint8_t *) &swap_info, 1);
}

int
boot_swap_type_multi(int image_index)
{
    2f20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    2f24:	b085      	sub	sp, #20
    2f26:	4606      	mov	r6, r0

    rc = BOOT_HOOK_CALL(boot_read_swap_state_primary_slot_hook,
                        BOOT_HOOK_REGULAR, image_index, &primary_slot);
    if (rc == BOOT_HOOK_REGULAR)
    {
        rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_PRIMARY(image_index),
    2f28:	4669      	mov	r1, sp
    2f2a:	2002      	movs	r0, #2
    2f2c:	f002 fa9e 	bl	546c <boot_read_swap_state_by_id>
                                        &primary_slot);
    }
    if (rc) {
    2f30:	4605      	mov	r5, r0
    2f32:	b118      	cbz	r0, 2f3c <boot_swap_type_multi+0x1c>
        return BOOT_SWAP_TYPE_PANIC;
    2f34:	20ff      	movs	r0, #255	; 0xff
        }
    }

    BOOT_LOG_INF("Swap type: none");
    return BOOT_SWAP_TYPE_NONE;
}
    2f36:	b005      	add	sp, #20
    2f38:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_SECONDARY(image_index),
    2f3c:	a902      	add	r1, sp, #8
    2f3e:	2005      	movs	r0, #5
    2f40:	f002 fa94 	bl	546c <boot_read_swap_state_by_id>
    if (rc == BOOT_EFLASH) {
    2f44:	2801      	cmp	r0, #1
    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_SECONDARY(image_index),
    2f46:	4604      	mov	r4, r0
    if (rc == BOOT_EFLASH) {
    2f48:	d13f      	bne.n	2fca <boot_swap_type_multi+0xaa>
        BOOT_LOG_INF("Secondary image of image pair (%d.) "
    2f4a:	482d      	ldr	r0, [pc, #180]	; (3000 <boot_swap_type_multi+0xe0>)
    2f4c:	4632      	mov	r2, r6
    2f4e:	2149      	movs	r1, #73	; 0x49
    2f50:	f001 fe0a 	bl	4b68 <z_log_minimal_printk>
        secondary_slot.magic = BOOT_MAGIC_UNSET;
    2f54:	2303      	movs	r3, #3
    2f56:	f88d 3008 	strb.w	r3, [sp, #8]
        secondary_slot.swap_type = BOOT_SWAP_TYPE_NONE;
    2f5a:	f88d 4009 	strb.w	r4, [sp, #9]
        secondary_slot.copy_done = BOOT_FLAG_UNSET;
    2f5e:	f88d 300a 	strb.w	r3, [sp, #10]
        secondary_slot.image_ok = BOOT_FLAG_UNSET;
    2f62:	f88d 300b 	strb.w	r3, [sp, #11]
        secondary_slot.image_num = 0;
    2f66:	f88d 500c 	strb.w	r5, [sp, #12]
        if (boot_magic_compatible_check(table->magic_primary_slot,
    2f6a:	f89d 5000 	ldrb.w	r5, [sp]
            boot_magic_compatible_check(table->magic_secondary_slot,
    2f6e:	f89d 6008 	ldrb.w	r6, [sp, #8]
                table->image_ok_primary_slot == primary_slot.image_ok) &&
    2f72:	f89d 7003 	ldrb.w	r7, [sp, #3]
                table->image_ok_secondary_slot == secondary_slot.image_ok) &&
    2f76:	f89d 800b 	ldrb.w	r8, [sp, #11]
                table->copy_done_primary_slot == primary_slot.copy_done)) {
    2f7a:	f89d 9002 	ldrb.w	r9, [sp, #2]
    2f7e:	4c21      	ldr	r4, [pc, #132]	; (3004 <boot_swap_type_multi+0xe4>)
    2f80:	2200      	movs	r2, #0
        if (boot_magic_compatible_check(table->magic_primary_slot,
    2f82:	7820      	ldrb	r0, [r4, #0]
    2f84:	4629      	mov	r1, r5
    2f86:	f002 fa00 	bl	538a <boot_magic_compatible_check>
    2f8a:	b318      	cbz	r0, 2fd4 <boot_swap_type_multi+0xb4>
            boot_magic_compatible_check(table->magic_secondary_slot,
    2f8c:	7860      	ldrb	r0, [r4, #1]
    2f8e:	4631      	mov	r1, r6
    2f90:	f002 f9fb 	bl	538a <boot_magic_compatible_check>
                                        primary_slot.magic) &&
    2f94:	b1f0      	cbz	r0, 2fd4 <boot_swap_type_multi+0xb4>
            (table->image_ok_primary_slot == BOOT_FLAG_ANY   ||
    2f96:	78a3      	ldrb	r3, [r4, #2]
                                        secondary_slot.magic) &&
    2f98:	2b04      	cmp	r3, #4
    2f9a:	d001      	beq.n	2fa0 <boot_swap_type_multi+0x80>
            (table->image_ok_primary_slot == BOOT_FLAG_ANY   ||
    2f9c:	42bb      	cmp	r3, r7
    2f9e:	d119      	bne.n	2fd4 <boot_swap_type_multi+0xb4>
            (table->image_ok_secondary_slot == BOOT_FLAG_ANY ||
    2fa0:	78e3      	ldrb	r3, [r4, #3]
                table->image_ok_primary_slot == primary_slot.image_ok) &&
    2fa2:	2b04      	cmp	r3, #4
    2fa4:	d001      	beq.n	2faa <boot_swap_type_multi+0x8a>
            (table->image_ok_secondary_slot == BOOT_FLAG_ANY ||
    2fa6:	4543      	cmp	r3, r8
    2fa8:	d114      	bne.n	2fd4 <boot_swap_type_multi+0xb4>
            (table->copy_done_primary_slot == BOOT_FLAG_ANY  ||
    2faa:	7923      	ldrb	r3, [r4, #4]
                table->image_ok_secondary_slot == secondary_slot.image_ok) &&
    2fac:	2b04      	cmp	r3, #4
    2fae:	d10f      	bne.n	2fd0 <boot_swap_type_multi+0xb0>
            BOOT_LOG_INF("Swap type: %s",
    2fb0:	7963      	ldrb	r3, [r4, #5]
    2fb2:	2b02      	cmp	r3, #2
    2fb4:	d119      	bne.n	2fea <boot_swap_type_multi+0xca>
    2fb6:	4a14      	ldr	r2, [pc, #80]	; (3008 <boot_swap_type_multi+0xe8>)
    2fb8:	4814      	ldr	r0, [pc, #80]	; (300c <boot_swap_type_multi+0xec>)
    2fba:	2149      	movs	r1, #73	; 0x49
    2fbc:	f001 fdd4 	bl	4b68 <z_log_minimal_printk>
            if (table->swap_type != BOOT_SWAP_TYPE_TEST &&
    2fc0:	7960      	ldrb	r0, [r4, #5]
    2fc2:	1e83      	subs	r3, r0, #2
    2fc4:	2b02      	cmp	r3, #2
    2fc6:	d9b6      	bls.n	2f36 <boot_swap_type_multi+0x16>
    2fc8:	e7b4      	b.n	2f34 <boot_swap_type_multi+0x14>
    } else if (rc) {
    2fca:	2800      	cmp	r0, #0
    2fcc:	d0cd      	beq.n	2f6a <boot_swap_type_multi+0x4a>
    2fce:	e7b1      	b.n	2f34 <boot_swap_type_multi+0x14>
            (table->copy_done_primary_slot == BOOT_FLAG_ANY  ||
    2fd0:	454b      	cmp	r3, r9
    2fd2:	d0ed      	beq.n	2fb0 <boot_swap_type_multi+0x90>
    for (i = 0; i < BOOT_SWAP_TABLES_COUNT; i++) {
    2fd4:	3201      	adds	r2, #1
    2fd6:	2a03      	cmp	r2, #3
    2fd8:	f104 0406 	add.w	r4, r4, #6
    2fdc:	d1d1      	bne.n	2f82 <boot_swap_type_multi+0x62>
    BOOT_LOG_INF("Swap type: none");
    2fde:	480c      	ldr	r0, [pc, #48]	; (3010 <boot_swap_type_multi+0xf0>)
    2fe0:	2149      	movs	r1, #73	; 0x49
    2fe2:	f001 fdc1 	bl	4b68 <z_log_minimal_printk>
    return BOOT_SWAP_TYPE_NONE;
    2fe6:	2001      	movs	r0, #1
    2fe8:	e7a5      	b.n	2f36 <boot_swap_type_multi+0x16>
            BOOT_LOG_INF("Swap type: %s",
    2fea:	2b03      	cmp	r3, #3
    2fec:	d005      	beq.n	2ffa <boot_swap_type_multi+0xda>
    2fee:	4a09      	ldr	r2, [pc, #36]	; (3014 <boot_swap_type_multi+0xf4>)
    2ff0:	4909      	ldr	r1, [pc, #36]	; (3018 <boot_swap_type_multi+0xf8>)
    2ff2:	2b04      	cmp	r3, #4
    2ff4:	bf18      	it	ne
    2ff6:	460a      	movne	r2, r1
    2ff8:	e7de      	b.n	2fb8 <boot_swap_type_multi+0x98>
    2ffa:	4a08      	ldr	r2, [pc, #32]	; (301c <boot_swap_type_multi+0xfc>)
    2ffc:	e7dc      	b.n	2fb8 <boot_swap_type_multi+0x98>
    2ffe:	bf00      	nop
    3000:	00007c85 	.word	0x00007c85
    3004:	00007cf8 	.word	0x00007cf8
    3008:	00007c69 	.word	0x00007c69
    300c:	00007cd0 	.word	0x00007cd0
    3010:	00007ce3 	.word	0x00007ce3
    3014:	00007c62 	.word	0x00007c62
    3018:	00007c73 	.word	0x00007c73
    301c:	00007c6e 	.word	0x00007c6e

00003020 <nrf52_errata_16>:
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    3020:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
    3024:	f893 2fe0 	ldrb.w	r2, [r3, #4064]	; 0xfe0
            uint32_t var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
    3028:	2a06      	cmp	r2, #6
    302a:	d109      	bne.n	3040 <nrf52_errata_16+0x20>
            uint32_t var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
    302c:	f8d3 3fe8 	ldr.w	r3, [r3, #4072]	; 0xfe8
    3030:	f3c3 1303 	ubfx	r3, r3, #4, #4
    3034:	3b03      	subs	r3, #3
    3036:	2b04      	cmp	r3, #4
    3038:	d802      	bhi.n	3040 <nrf52_errata_16+0x20>
    303a:	4a02      	ldr	r2, [pc, #8]	; (3044 <nrf52_errata_16+0x24>)
    303c:	5cd0      	ldrb	r0, [r2, r3]
    303e:	4770      	bx	lr
                    default:
                        return false;
                }
            }
        #endif
        return false;
    3040:	2000      	movs	r0, #0
    #endif
}
    3042:	4770      	bx	lr
    3044:	00007d19 	.word	0x00007d19

00003048 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    3048:	4a02      	ldr	r2, [pc, #8]	; (3054 <nvmc_wait+0xc>)
    304a:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    304e:	2b00      	cmp	r3, #0
    3050:	d0fb      	beq.n	304a <nvmc_wait+0x2>
}
    3052:	4770      	bx	lr
    3054:	4001e000 	.word	0x4001e000

00003058 <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
    3058:	b510      	push	{r4, lr}
    #endif

    #if NRF52_ERRATA_12_ENABLE_WORKAROUND
        /* Workaround for Errata 12 "COMP: Reference ladder not correctly calibrated" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_12()){
    305a:	f002 fa2a 	bl	54b2 <nrf52_errata_108>
    305e:	b140      	cbz	r0, 3072 <SystemInit+0x1a>
            *(volatile uint32_t *)0x40013540 = (*(uint32_t *)0x10000324 & 0x00001F00) >> 8;
    3060:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    3064:	4a90      	ldr	r2, [pc, #576]	; (32a8 <SystemInit+0x250>)
    3066:	f8d3 3324 	ldr.w	r3, [r3, #804]	; 0x324
    306a:	f3c3 2304 	ubfx	r3, r3, #8, #5
    306e:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
    #endif

    #if NRF52_ERRATA_16_ENABLE_WORKAROUND
        /* Workaround for Errata 16 "System: RAM may be corrupt on wakeup from CPU IDLE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_16()){
    3072:	f7ff ffd5 	bl	3020 <nrf52_errata_16>
    3076:	b110      	cbz	r0, 307e <SystemInit+0x26>
            *(volatile uint32_t *)0x4007C074 = 3131961357ul;
    3078:	4b8c      	ldr	r3, [pc, #560]	; (32ac <SystemInit+0x254>)
    307a:	4a8d      	ldr	r2, [pc, #564]	; (32b0 <SystemInit+0x258>)
    307c:	675a      	str	r2, [r3, #116]	; 0x74
    #endif

    #if NRF52_ERRATA_31_ENABLE_WORKAROUND
        /* Workaround for Errata 31 "CLOCK: Calibration values are not correctly loaded from FICR at reset" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_31()){
    307e:	f002 fa18 	bl	54b2 <nrf52_errata_108>
    3082:	b148      	cbz	r0, 3098 <SystemInit+0x40>
            *(volatile uint32_t *)0x4000053C = ((*(volatile uint32_t *)0x10000244) & 0x0000E000) >> 13;
    3084:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    3088:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    308c:	f8d3 3244 	ldr.w	r3, [r3, #580]	; 0x244
    3090:	f3c3 3342 	ubfx	r3, r3, #13, #3
    3094:	f8c2 353c 	str.w	r3, [r2, #1340]	; 0x53c
    #endif

    #if NRF52_ERRATA_32_ENABLE_WORKAROUND
        /* Workaround for Errata 32 "DIF: Debug session automatically enables TracePort pins" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_32()){
    3098:	f7ff ffc2 	bl	3020 <nrf52_errata_16>
    309c:	b130      	cbz	r0, 30ac <SystemInit+0x54>
            CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
    309e:	4a85      	ldr	r2, [pc, #532]	; (32b4 <SystemInit+0x25c>)
    30a0:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
    30a4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    30a8:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
    30ac:	f002 fa01 	bl	54b2 <nrf52_errata_108>
    30b0:	b140      	cbz	r0, 30c4 <SystemInit+0x6c>
            NRF_CLOCK->EVENTS_DONE = 0;
    30b2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    30b6:	2200      	movs	r2, #0
    30b8:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
    30bc:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
    30c0:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_37_ENABLE_WORKAROUND
        /* Workaround for Errata 37 "RADIO: Encryption engine is slow by default" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_37()){
    30c4:	f7ff ffac 	bl	3020 <nrf52_errata_16>
    30c8:	b120      	cbz	r0, 30d4 <SystemInit+0x7c>
            *(volatile uint32_t *)0x400005A0 = 0x3;
    30ca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    30ce:	2203      	movs	r2, #3
    30d0:	f8c3 25a0 	str.w	r2, [r3, #1440]	; 0x5a0
    #endif

    #if NRF52_ERRATA_57_ENABLE_WORKAROUND
        /* Workaround for Errata 57 "NFCT: NFC Modulation amplitude" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_57()){
    30d4:	f7ff ffa4 	bl	3020 <nrf52_errata_16>
    30d8:	b160      	cbz	r0, 30f4 <SystemInit+0x9c>
            *(volatile uint32_t *)0x40005610 = 0x00000005;
    30da:	4b77      	ldr	r3, [pc, #476]	; (32b8 <SystemInit+0x260>)
    30dc:	2205      	movs	r2, #5
    30de:	f8c3 2610 	str.w	r2, [r3, #1552]	; 0x610
            *(volatile uint32_t *)0x40005688 = 0x00000001;
    30e2:	2201      	movs	r2, #1
    30e4:	f8c3 2688 	str.w	r2, [r3, #1672]	; 0x688
            *(volatile uint32_t *)0x40005618 = 0x00000000;
    30e8:	2200      	movs	r2, #0
    30ea:	f8c3 2618 	str.w	r2, [r3, #1560]	; 0x618
            *(volatile uint32_t *)0x40005614 = 0x0000003F;
    30ee:	223f      	movs	r2, #63	; 0x3f
    30f0:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1;
            uint32_t var2;

            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
    30f4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    30f8:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    30fc:	1c51      	adds	r1, r2, #1
            {
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    30fe:	bf09      	itett	eq
    3100:	f04f 4370 	moveq.w	r3, #4026531840	; 0xf0000000
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
            }
            else
            {
                var1 = *(uint32_t *)0x10000130ul;
                var2 = *(uint32_t *)0x10000134ul;
    3104:	f8d3 3134 	ldrne.w	r3, [r3, #308]	; 0x134
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    3108:	f893 2fe0 	ldrbeq.w	r2, [r3, #4064]	; 0xfe0
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
    310c:	f8d3 3fe8 	ldreq.w	r3, [r3, #4072]	; 0xfe8
    3110:	bf08      	it	eq
    3112:	f3c3 1303 	ubfxeq	r3, r3, #4, #4
            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
    3116:	2a06      	cmp	r2, #6
    3118:	d14d      	bne.n	31b6 <SystemInit+0x15e>
            {
                switch(var2)
    311a:	3b03      	subs	r3, #3
    311c:	2b04      	cmp	r3, #4
    311e:	d803      	bhi.n	3128 <SystemInit+0xd0>
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
    3120:	4a66      	ldr	r2, [pc, #408]	; (32bc <SystemInit+0x264>)
    3122:	5cd3      	ldrb	r3, [r2, r3]
    3124:	2b00      	cmp	r3, #0
    3126:	d046      	beq.n	31b6 <SystemInit+0x15e>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    3128:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    312c:	4b64      	ldr	r3, [pc, #400]	; (32c0 <SystemInit+0x268>)
    312e:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
    3132:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    3136:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
    313a:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    313e:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
    3142:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    3146:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
    314a:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    314e:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
    3152:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    3156:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    315a:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    315e:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
    3162:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    3166:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
    316a:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    316e:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
    3172:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    3176:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
    317a:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    317e:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
    3182:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    3186:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
    318a:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    318e:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
    3192:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    3196:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
    319a:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    319e:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
    31a2:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    31a6:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
    31aa:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    31ae:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
    31b2:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_108_ENABLE_WORKAROUND
        /* Workaround for Errata 108 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_108()){
    31b6:	f002 f97c 	bl	54b2 <nrf52_errata_108>
    31ba:	b148      	cbz	r0, 31d0 <SystemInit+0x178>
            *(volatile uint32_t *)0x40000EE4ul = *(volatile uint32_t *)0x10000258ul & 0x0000004Ful;
    31bc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    31c0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    31c4:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
    31c8:	f003 034f 	and.w	r3, r3, #79	; 0x4f
    31cc:	f8c2 3ee4 	str.w	r3, [r2, #3812]	; 0xee4
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
    31d0:	f002 f96f 	bl	54b2 <nrf52_errata_108>
    31d4:	b148      	cbz	r0, 31ea <SystemInit+0x192>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    31d6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    31da:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    31de:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
    31e0:	bf44      	itt	mi
    31e2:	f06f 0201 	mvnmi.w	r2, #1
    31e6:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    31ea:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
    31ee:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    31f2:	2a06      	cmp	r2, #6
    31f4:	d126      	bne.n	3244 <SystemInit+0x1ec>
            {
                switch(var2)
    31f6:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
    31fa:	3b03      	subs	r3, #3
    31fc:	2b04      	cmp	r3, #4
    31fe:	d802      	bhi.n	3206 <SystemInit+0x1ae>
    #endif

    #if NRF52_ERRATA_182_ENABLE_WORKAROUND
        /* Workaround for Errata 182 "RADIO: Fixes for anomalies #102, #106, and #107 do not take effect" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_182()){
    3200:	4a30      	ldr	r2, [pc, #192]	; (32c4 <SystemInit+0x26c>)
    3202:	5cd3      	ldrb	r3, [r2, r3]
    3204:	b163      	cbz	r3, 3220 <SystemInit+0x1c8>
            *(volatile uint32_t *) 0x4000173C |= (0x1 << 10);
    3206:	4a30      	ldr	r2, [pc, #192]	; (32c8 <SystemInit+0x270>)
    3208:	f8d2 373c 	ldr.w	r3, [r2, #1852]	; 0x73c
    320c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    3210:	f8c2 373c 	str.w	r3, [r2, #1852]	; 0x73c
        #if defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    3214:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
    3218:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
    321c:	2b06      	cmp	r3, #6
    321e:	d111      	bne.n	3244 <SystemInit+0x1ec>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    3220:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    3224:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
    3228:	3b03      	subs	r3, #3
    322a:	2b04      	cmp	r3, #4
    322c:	d802      	bhi.n	3234 <SystemInit+0x1dc>
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_errata_249())
    322e:	4a27      	ldr	r2, [pc, #156]	; (32cc <SystemInit+0x274>)
    3230:	5cd3      	ldrb	r3, [r2, r3]
    3232:	b13b      	cbz	r3, 3244 <SystemInit+0x1ec>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
    3234:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    3238:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
    323c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3240:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    3244:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    3248:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    324c:	2a00      	cmp	r2, #0
    324e:	db03      	blt.n	3258 <SystemInit+0x200>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
    3250:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    3254:	2b00      	cmp	r3, #0
    3256:	da22      	bge.n	329e <SystemInit+0x246>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    3258:	491d      	ldr	r1, [pc, #116]	; (32d0 <SystemInit+0x278>)
    325a:	2301      	movs	r3, #1
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    325c:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    3260:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    3264:	2415      	movs	r4, #21
    nvmc_wait();
    3266:	f7ff feef 	bl	3048 <nvmc_wait>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    326a:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
    326e:	f7ff feeb 	bl	3048 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
    3272:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
    3276:	f7ff fee7 	bl	3048 <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    327a:	2300      	movs	r3, #0
    327c:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
    3280:	f7ff fee2 	bl	3048 <nvmc_wait>
    3284:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    3288:	490a      	ldr	r1, [pc, #40]	; (32b4 <SystemInit+0x25c>)
    328a:	4b12      	ldr	r3, [pc, #72]	; (32d4 <SystemInit+0x27c>)
    328c:	68ca      	ldr	r2, [r1, #12]
    328e:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    3292:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    3294:	60cb      	str	r3, [r1, #12]
    3296:	f3bf 8f4f 	dsb	sy
    __NOP();
    329a:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    329c:	e7fd      	b.n	329a <SystemInit+0x242>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    329e:	4b0e      	ldr	r3, [pc, #56]	; (32d8 <SystemInit+0x280>)
    32a0:	4a0e      	ldr	r2, [pc, #56]	; (32dc <SystemInit+0x284>)
    32a2:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
    32a4:	bd10      	pop	{r4, pc}
    32a6:	bf00      	nop
    32a8:	40013000 	.word	0x40013000
    32ac:	4007c000 	.word	0x4007c000
    32b0:	baadf00d 	.word	0xbaadf00d
    32b4:	e000ed00 	.word	0xe000ed00
    32b8:	40005000 	.word	0x40005000
    32bc:	00007d0a 	.word	0x00007d0a
    32c0:	4000c000 	.word	0x4000c000
    32c4:	00007d0f 	.word	0x00007d0f
    32c8:	40001000 	.word	0x40001000
    32cc:	00007d14 	.word	0x00007d14
    32d0:	4001e000 	.word	0x4001e000
    32d4:	05fa0004 	.word	0x05fa0004
    32d8:	20000040 	.word	0x20000040
    32dc:	03d09000 	.word	0x03d09000

000032e0 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    32e0:	4b04      	ldr	r3, [pc, #16]	; (32f4 <nrfx_clock_init+0x14>)
    32e2:	791a      	ldrb	r2, [r3, #4]
    32e4:	b922      	cbnz	r2, 32f0 <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
    32e6:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
    32e8:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
    32ea:	809a      	strh	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
    32ec:	4802      	ldr	r0, [pc, #8]	; (32f8 <nrfx_clock_init+0x18>)
    32ee:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    32f0:	4802      	ldr	r0, [pc, #8]	; (32fc <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    32f2:	4770      	bx	lr
    32f4:	20000df4 	.word	0x20000df4
    32f8:	0bad0000 	.word	0x0bad0000
    32fc:	0bad000c 	.word	0x0bad000c

00003300 <nrfx_clock_start>:
    m_clock_cb.module_initialized = false;
    NRFX_LOG_INFO("Uninitialized.");
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    3300:	b530      	push	{r4, r5, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
    3302:	b110      	cbz	r0, 330a <nrfx_clock_start+0xa>
    3304:	2801      	cmp	r0, #1
    3306:	d034      	beq.n	3372 <nrfx_clock_start+0x72>
#endif
        default:
            NRFX_ASSERT(0);
            break;
    }
}
    3308:	bd30      	pop	{r4, r5, pc}
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    330a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    330e:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    3312:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
    3316:	03c9      	lsls	r1, r1, #15
    3318:	d529      	bpl.n	336e <nrfx_clock_start+0x6e>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    331a:	f002 0203 	and.w	r2, r2, #3
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
    331e:	2a01      	cmp	r2, #1
    3320:	d125      	bne.n	336e <nrfx_clock_start+0x6e>
    p_reg->LFCLKSRC = (uint32_t)(source);
    3322:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3326:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    332a:	2200      	movs	r2, #0
    332c:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    3330:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    p_reg->INTENSET = mask;
    3334:	2202      	movs	r2, #2
    3336:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    core_debug = CoreDebug->DEMCR;
    333a:	4a13      	ldr	r2, [pc, #76]	; (3388 <nrfx_clock_start+0x88>)
    333c:	f8d2 00fc 	ldr.w	r0, [r2, #252]	; 0xfc
    CoreDebug->DEMCR = core_debug | CoreDebug_DEMCR_TRCENA_Msk;
    3340:	f040 7380 	orr.w	r3, r0, #16777216	; 0x1000000
    3344:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
    dwt_ctrl = DWT->CTRL;
    3348:	4b10      	ldr	r3, [pc, #64]	; (338c <nrfx_clock_start+0x8c>)
    334a:	681c      	ldr	r4, [r3, #0]
    DWT->CTRL = dwt_ctrl | DWT_CTRL_CYCCNTENA_Msk;
    334c:	f044 0101 	orr.w	r1, r4, #1
    3350:	6019      	str	r1, [r3, #0]
    cyccnt_inital = DWT->CYCCNT;
    3352:	685d      	ldr	r5, [r3, #4]
    while ((DWT->CYCCNT - cyccnt_inital) < ANOMALY_132_DELAY_CYCLES)
    3354:	6859      	ldr	r1, [r3, #4]
    3356:	1b49      	subs	r1, r1, r5
    3358:	f5b1 5f0a 	cmp.w	r1, #8832	; 0x2280
    335c:	d3fa      	bcc.n	3354 <nrfx_clock_start+0x54>
    DWT->CTRL = dwt_ctrl;
    335e:	601c      	str	r4, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3360:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    CoreDebug->DEMCR = core_debug;
    3364:	f8c2 00fc 	str.w	r0, [r2, #252]	; 0xfc
    3368:	2201      	movs	r2, #1
    336a:	609a      	str	r2, [r3, #8]
}
    336c:	e7cc      	b.n	3308 <nrfx_clock_start+0x8>
    p_reg->LFCLKSRC = (uint32_t)(source);
    336e:	2200      	movs	r2, #0
    3370:	e7d7      	b.n	3322 <nrfx_clock_start+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3372:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3376:	2200      	movs	r2, #0
    3378:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    337c:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
    3380:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3384:	6018      	str	r0, [r3, #0]
}
    3386:	e7bf      	b.n	3308 <nrfx_clock_start+0x8>
    3388:	e000ed00 	.word	0xe000ed00
    338c:	e0001000 	.word	0xe0001000

00003390 <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
    3390:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
    3392:	b110      	cbz	r0, 339a <nrfx_clock_stop+0xa>
    3394:	2801      	cmp	r0, #1
    3396:	d017      	beq.n	33c8 <nrfx_clock_stop+0x38>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
    3398:	bd38      	pop	{r3, r4, r5, pc}
    p_reg->INTENCLR = mask;
    339a:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    339e:	2302      	movs	r3, #2
    33a0:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    33a4:	f8c4 0104 	str.w	r0, [r4, #260]	; 0x104
    33a8:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    33ac:	2301      	movs	r3, #1
    33ae:	60e3      	str	r3, [r4, #12]
    33b0:	f242 7510 	movw	r5, #10000	; 0x2710
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    33b4:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
    33b8:	03db      	lsls	r3, r3, #15
    33ba:	d5ed      	bpl.n	3398 <nrfx_clock_stop+0x8>
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
    33bc:	2001      	movs	r0, #1
    33be:	f002 f887 	bl	54d0 <nrfx_busy_wait>
    33c2:	3d01      	subs	r5, #1
    33c4:	d1f6      	bne.n	33b4 <nrfx_clock_stop+0x24>
    33c6:	e7e7      	b.n	3398 <nrfx_clock_stop+0x8>
    p_reg->INTENCLR = mask;
    33c8:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    33cc:	2300      	movs	r3, #0
    p_reg->INTENCLR = mask;
    33ce:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    33d2:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
    33d6:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    33da:	6060      	str	r0, [r4, #4]
    33dc:	f242 7510 	movw	r5, #10000	; 0x2710
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    33e0:	f8d4 340c 	ldr.w	r3, [r4, #1036]	; 0x40c
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    33e4:	f8d4 240c 	ldr.w	r2, [r4, #1036]	; 0x40c
    33e8:	03d2      	lsls	r2, r2, #15
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    33ea:	f003 0301 	and.w	r3, r3, #1
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    33ee:	d505      	bpl.n	33fc <nrfx_clock_stop+0x6c>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
    33f0:	b123      	cbz	r3, 33fc <nrfx_clock_stop+0x6c>
    33f2:	2001      	movs	r0, #1
    33f4:	f002 f86c 	bl	54d0 <nrfx_busy_wait>
    33f8:	3d01      	subs	r5, #1
    33fa:	d1f1      	bne.n	33e0 <nrfx_clock_stop+0x50>
            m_clock_cb.hfclk_started = false;
    33fc:	4b01      	ldr	r3, [pc, #4]	; (3404 <nrfx_clock_stop+0x74>)
    33fe:	2200      	movs	r2, #0
    3400:	715a      	strb	r2, [r3, #5]
    3402:	e7c9      	b.n	3398 <nrfx_clock_stop+0x8>
    3404:	20000df4 	.word	0x20000df4

00003408 <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    3408:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    340c:	b510      	push	{r4, lr}
    340e:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    3412:	b16a      	cbz	r2, 3430 <nrfx_power_clock_irq_handler+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3414:	2200      	movs	r2, #0
    3416:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    341a:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
    341e:	2201      	movs	r2, #1
    3420:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
    3424:	4b11      	ldr	r3, [pc, #68]	; (346c <nrfx_power_clock_irq_handler+0x64>)
    3426:	7958      	ldrb	r0, [r3, #5]
    3428:	b910      	cbnz	r0, 3430 <nrfx_power_clock_irq_handler+0x28>
        {
            m_clock_cb.hfclk_started = true;
    342a:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    342c:	681b      	ldr	r3, [r3, #0]
    342e:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    3430:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3434:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    3438:	b172      	cbz	r2, 3458 <nrfx_power_clock_irq_handler+0x50>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    343a:	2200      	movs	r2, #0
    343c:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    3440:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    3444:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    3448:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    344c:	0792      	lsls	r2, r2, #30
    344e:	d104      	bne.n	345a <nrfx_power_clock_irq_handler+0x52>
    p_reg->LFCLKSRC = (uint32_t)(source);
    3450:	2201      	movs	r2, #1
    3452:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3456:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    3458:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
    345a:	2202      	movs	r2, #2
    345c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    3460:	4b02      	ldr	r3, [pc, #8]	; (346c <nrfx_power_clock_irq_handler+0x64>)
}
    3462:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    3466:	681b      	ldr	r3, [r3, #0]
    3468:	2001      	movs	r0, #1
    346a:	4718      	bx	r3
    346c:	20000df4 	.word	0x20000df4

00003470 <nrfx_gpiote_channel_free>:
    return m_cb.allocated_channels_mask & (1UL << index);
}

static bool is_app_channel(uint8_t index)
{
    return NRFX_GPIOTE_APP_CHANNELS_MASK & (1UL << index);
    3470:	2301      	movs	r3, #1
    3472:	fa03 f000 	lsl.w	r0, r3, r0
    3476:	b2c3      	uxtb	r3, r0

nrfx_err_t nrfx_gpiote_channel_free(uint8_t channel)
{
    nrfx_err_t err_code = NRFX_SUCCESS;

    if (!is_app_channel(channel))
    3478:	b193      	cbz	r3, 34a0 <nrfx_gpiote_channel_free+0x30>
	__asm__ volatile(
    347a:	f04f 0320 	mov.w	r3, #32
    347e:	f3ef 8111 	mrs	r1, BASEPRI
    3482:	f383 8811 	msr	BASEPRI, r3
    3486:	f3bf 8f6f 	isb	sy
    m_cb.allocated_channels_mask &= ~(1UL << index);
    348a:	4a06      	ldr	r2, [pc, #24]	; (34a4 <nrfx_gpiote_channel_free+0x34>)
    348c:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
    348e:	ea23 0000 	bic.w	r0, r3, r0
    3492:	64d0      	str	r0, [r2, #76]	; 0x4c
	__asm__ volatile(
    3494:	f381 8811 	msr	BASEPRI, r1
    3498:	f3bf 8f6f 	isb	sy
    349c:	4802      	ldr	r0, [pc, #8]	; (34a8 <nrfx_gpiote_channel_free+0x38>)
    349e:	4770      	bx	lr
    {
        err_code = NRFX_ERROR_INVALID_PARAM;
    34a0:	4802      	ldr	r0, [pc, #8]	; (34ac <nrfx_gpiote_channel_free+0x3c>)
        NRFX_CRITICAL_SECTION_EXIT();
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    34a2:	4770      	bx	lr
    34a4:	20000dfc 	.word	0x20000dfc
    34a8:	0bad0000 	.word	0x0bad0000
    34ac:	0bad0004 	.word	0x0bad0004

000034b0 <nrfx_gpiote_channel_alloc>:

nrfx_err_t nrfx_gpiote_channel_alloc(uint8_t * p_channel)
{
    34b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    34b4:	4605      	mov	r5, r0
    return m_cb.allocated_channels_mask & (1UL << index);
    34b6:	f8df e05c 	ldr.w	lr, [pc, #92]	; 3514 <nrfx_gpiote_channel_alloc+0x64>
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
    34ba:	4817      	ldr	r0, [pc, #92]	; (3518 <nrfx_gpiote_channel_alloc+0x68>)
        NRFX_CRITICAL_SECTION_ENTER();
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
        {
            channel_allocated_set(ch_idx);
            *p_channel = ch_idx;
            err_code = NRFX_SUCCESS;
    34bc:	f8df 805c 	ldr.w	r8, [pc, #92]	; 351c <nrfx_gpiote_channel_alloc+0x6c>
{
    34c0:	2400      	movs	r4, #0
    uint32_t mask = NRFX_GPIOTE_APP_CHANNELS_MASK;
    34c2:	22ff      	movs	r2, #255	; 0xff
    return m_cb.allocated_channels_mask & (1UL << index);
    34c4:	2601      	movs	r6, #1
    34c6:	b2e3      	uxtb	r3, r4
	__asm__ volatile(
    34c8:	f04f 0120 	mov.w	r1, #32
    34cc:	f3ef 8c11 	mrs	ip, BASEPRI
    34d0:	f381 8811 	msr	BASEPRI, r1
    34d4:	f3bf 8f6f 	isb	sy
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
    34d8:	fa22 f103 	lsr.w	r1, r2, r3
    34dc:	07c9      	lsls	r1, r1, #31
    34de:	d50a      	bpl.n	34f6 <nrfx_gpiote_channel_alloc+0x46>
    return m_cb.allocated_channels_mask & (1UL << index);
    34e0:	f8de 104c 	ldr.w	r1, [lr, #76]	; 0x4c
    34e4:	fa06 f703 	lsl.w	r7, r6, r3
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
    34e8:	4239      	tst	r1, r7
    m_cb.allocated_channels_mask |= (1UL << index);
    34ea:	bf01      	itttt	eq
    34ec:	4339      	orreq	r1, r7
    34ee:	f8ce 104c 	streq.w	r1, [lr, #76]	; 0x4c
            err_code = NRFX_SUCCESS;
    34f2:	4640      	moveq	r0, r8
            *p_channel = ch_idx;
    34f4:	702b      	strbeq	r3, [r5, #0]
	__asm__ volatile(
    34f6:	f38c 8811 	msr	BASEPRI, ip
    34fa:	f3bf 8f6f 	isb	sy
        }
        NRFX_CRITICAL_SECTION_EXIT();

        if (err_code == NRFX_SUCCESS)
    34fe:	4540      	cmp	r0, r8
    3500:	d005      	beq.n	350e <nrfx_gpiote_channel_alloc+0x5e>
        {
            NRFX_LOG_INFO("Allocated channel: %d.", ch_idx);
            break;
        }

        mask &= ~(1UL << ch_idx);
    3502:	fa06 f303 	lsl.w	r3, r6, r3
    for (uint8_t ch_idx = 0; mask != 0; ch_idx++)
    3506:	439a      	bics	r2, r3
    3508:	f104 0401 	add.w	r4, r4, #1
    350c:	d1db      	bne.n	34c6 <nrfx_gpiote_channel_alloc+0x16>
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    350e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3512:	bf00      	nop
    3514:	20000dfc 	.word	0x20000dfc
    3518:	0bad0002 	.word	0x0bad0002
    351c:	0bad0000 	.word	0x0bad0000

00003520 <nvmc_word_write>:
    3520:	4a04      	ldr	r2, [pc, #16]	; (3534 <nvmc_word_write+0x14>)
    3522:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
{
#if defined(NRF9160_XXAA)
    while (!nrf_nvmc_write_ready_check(NRF_NVMC))
    {}
#else
    while (!nrf_nvmc_ready_check(NRF_NVMC))
    3526:	07db      	lsls	r3, r3, #31
    3528:	d5fb      	bpl.n	3522 <nvmc_word_write+0x2>
    {}
#endif

    *(volatile uint32_t *)addr = value;
    352a:	6001      	str	r1, [r0, #0]
  __ASM volatile ("dmb 0xF":::"memory");
    352c:	f3bf 8f5f 	dmb	sy
    __DMB();
}
    3530:	4770      	bx	lr
    3532:	bf00      	nop
    3534:	4001e000 	.word	0x4001e000

00003538 <nrfx_nvmc_page_erase>:
NRF_STATIC_INLINE uint32_t nrf_ficr_codepagesize_get(NRF_FICR_Type const * p_reg)
{
#if defined(FICR_INFO_CODEPAGESIZE_CODEPAGESIZE_Msk)
    return p_reg->INFO.CODEPAGESIZE;
#else
    return p_reg->CODEPAGESIZE;
    3538:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    353c:	691a      	ldr	r2, [r3, #16]
    return !(addr % flash_page_size_get());
    353e:	fbb0 f3f2 	udiv	r3, r0, r2
    3542:	fb02 0313 	mls	r3, r2, r3, r0

nrfx_err_t nrfx_nvmc_page_erase(uint32_t addr)
{
    NRFX_ASSERT(is_valid_address(addr, false));

    if (!is_page_aligned_check(addr))
    3546:	b973      	cbnz	r3, 3566 <nrfx_nvmc_page_erase+0x2e>
#endif

NRF_STATIC_INLINE void nrf_nvmc_mode_set(NRF_NVMC_Type * p_reg,
                                         nrf_nvmc_mode_t mode)
{
    p_reg->CONFIG = (uint32_t)mode;
    3548:	4b08      	ldr	r3, [pc, #32]	; (356c <nrfx_nvmc_page_erase+0x34>)
    354a:	2202      	movs	r2, #2
    354c:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    else
    {
        p_reg->ERASEPCR1 = page_addr;
    }
#elif defined(NRF52_SERIES)
    p_reg->ERASEPAGE = page_addr;
    3550:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
    3554:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
        return NRFX_ERROR_INVALID_ADDR;
    }

    nvmc_erase_mode_set();
    nrf_nvmc_page_erase_start(NRF_NVMC, addr);
    while (!nrf_nvmc_ready_check(NRF_NVMC))
    3558:	07d2      	lsls	r2, r2, #31
    355a:	d5fb      	bpl.n	3554 <nrfx_nvmc_page_erase+0x1c>
    p_reg->CONFIG = (uint32_t)mode;
    355c:	2200      	movs	r2, #0
    {}
    nvmc_readonly_mode_set();

    return NRFX_SUCCESS;
    355e:	4804      	ldr	r0, [pc, #16]	; (3570 <nrfx_nvmc_page_erase+0x38>)
    3560:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    3564:	4770      	bx	lr
        return NRFX_ERROR_INVALID_ADDR;
    3566:	4803      	ldr	r0, [pc, #12]	; (3574 <nrfx_nvmc_page_erase+0x3c>)
}
    3568:	4770      	bx	lr
    356a:	bf00      	nop
    356c:	4001e000 	.word	0x4001e000
    3570:	0bad0000 	.word	0x0bad0000
    3574:	0bad000a 	.word	0x0bad000a

00003578 <nrfx_nvmc_word_write>:

    nrfx_nvmc_word_write(aligned_addr, partial_word_create(addr, (const uint8_t *)&value, 2));
}

void nrfx_nvmc_word_write(uint32_t addr, uint32_t value)
{
    3578:	b510      	push	{r4, lr}
    357a:	4c05      	ldr	r4, [pc, #20]	; (3590 <nrfx_nvmc_word_write+0x18>)
    357c:	2301      	movs	r3, #1
    357e:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504
    NRFX_ASSERT(is_valid_address(addr, true));
    NRFX_ASSERT(nrfx_is_word_aligned((void const *)addr));

    nvmc_write_mode_set();

    nvmc_word_write(addr, value);
    3582:	f7ff ffcd 	bl	3520 <nvmc_word_write>
    3586:	2300      	movs	r3, #0
    3588:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504

    nvmc_readonly_mode_set();
}
    358c:	bd10      	pop	{r4, pc}
    358e:	bf00      	nop
    3590:	4001e000 	.word	0x4001e000

00003594 <nrfx_ppi_channel_alloc>:
    group_allocated_clr_all();
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
    3594:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
    uint32_t mask = NRFX_PPI_PROG_APP_CHANNELS_MASK;
    3598:	4a14      	ldr	r2, [pc, #80]	; (35ec <nrfx_ppi_channel_alloc+0x58>)
    return ((m_channels_allocated & nrfx_ppi_channel_to_mask(channel)) != 0);
    359a:	4e15      	ldr	r6, [pc, #84]	; (35f0 <nrfx_ppi_channel_alloc+0x5c>)
        NRFX_CRITICAL_SECTION_ENTER();
        if ((mask & nrfx_ppi_channel_to_mask(channel)) && (!is_allocated_channel(channel)))
        {
            channel_allocated_set(channel);
            *p_channel = channel;
            err_code   = NRFX_SUCCESS;
    359c:	4f15      	ldr	r7, [pc, #84]	; (35f4 <nrfx_ppi_channel_alloc+0x60>)
{
    359e:	4605      	mov	r5, r0
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
    35a0:	4815      	ldr	r0, [pc, #84]	; (35f8 <nrfx_ppi_channel_alloc+0x64>)
{
    35a2:	2400      	movs	r4, #0
NRFX_STATIC_INLINE uint32_t nrfx_ppi_task_addr_group_disable_get(nrf_ppi_channel_group_t group);

#ifndef NRFX_DECLARE_ONLY
NRFX_STATIC_INLINE uint32_t nrfx_ppi_channel_to_mask(nrf_ppi_channel_t channel)
{
    return (1uL << (uint32_t) channel);
    35a4:	f04f 0e01 	mov.w	lr, #1
    35a8:	fa5f fc84 	uxtb.w	ip, r4
	__asm__ volatile(
    35ac:	f04f 0320 	mov.w	r3, #32
    35b0:	f3ef 8811 	mrs	r8, BASEPRI
    35b4:	f383 8811 	msr	BASEPRI, r3
    35b8:	f3bf 8f6f 	isb	sy
    35bc:	fa0e f30c 	lsl.w	r3, lr, ip
        if ((mask & nrfx_ppi_channel_to_mask(channel)) && (!is_allocated_channel(channel)))
    35c0:	4213      	tst	r3, r2
    35c2:	d007      	beq.n	35d4 <nrfx_ppi_channel_alloc+0x40>
    return ((m_channels_allocated & nrfx_ppi_channel_to_mask(channel)) != 0);
    35c4:	6831      	ldr	r1, [r6, #0]
        if ((mask & nrfx_ppi_channel_to_mask(channel)) && (!is_allocated_channel(channel)))
    35c6:	420b      	tst	r3, r1
    m_channels_allocated |= nrfx_ppi_channel_to_mask(channel);
    35c8:	bf01      	itttt	eq
    35ca:	4319      	orreq	r1, r3
    35cc:	6031      	streq	r1, [r6, #0]
            *p_channel = channel;
    35ce:	f885 c000 	strbeq.w	ip, [r5]
            err_code   = NRFX_SUCCESS;
    35d2:	4638      	moveq	r0, r7
	__asm__ volatile(
    35d4:	f388 8811 	msr	BASEPRI, r8
    35d8:	f3bf 8f6f 	isb	sy
        }
        NRFX_CRITICAL_SECTION_EXIT();
        if (err_code == NRFX_SUCCESS)
    35dc:	42b8      	cmp	r0, r7
    35de:	d003      	beq.n	35e8 <nrfx_ppi_channel_alloc+0x54>
    for (uint8_t ch_idx = NRF_PPI_CHANNEL0; mask != 0; ch_idx++)
    35e0:	439a      	bics	r2, r3
    35e2:	f104 0401 	add.w	r4, r4, #1
    35e6:	d1df      	bne.n	35a8 <nrfx_ppi_channel_alloc+0x14>
        mask &= ~nrfx_ppi_channel_to_mask(channel);
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    35e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    35ec:	000fffff 	.word	0x000fffff
    35f0:	20000e4c 	.word	0x20000e4c
    35f4:	0bad0000 	.word	0x0bad0000
    35f8:	0bad0002 	.word	0x0bad0002

000035fc <verify_header>:
}
#endif /* MBEDTLS_MEMORY_DEBUG */

static int verify_header( memory_header *hdr )
{
    if( hdr->magic1 != MAGIC1 )
    35fc:	6801      	ldr	r1, [r0, #0]
    35fe:	4a0e      	ldr	r2, [pc, #56]	; (3638 <verify_header+0x3c>)
    3600:	4291      	cmp	r1, r2
{
    3602:	4603      	mov	r3, r0
    if( hdr->magic1 != MAGIC1 )
    3604:	d115      	bne.n	3632 <verify_header+0x36>
        mbedtls_fprintf( stderr, "FATAL: MAGIC1 mismatch\n" );
#endif
        return( 1 );
    }

    if( hdr->magic2 != MAGIC2 )
    3606:	69c1      	ldr	r1, [r0, #28]
    3608:	f1a2 2210 	sub.w	r2, r2, #268439552	; 0x10001000
    360c:	f1a2 12ef 	sub.w	r2, r2, #15663343	; 0xef00ef
    3610:	4291      	cmp	r1, r2
    3612:	d10e      	bne.n	3632 <verify_header+0x36>
        mbedtls_fprintf( stderr, "FATAL: MAGIC2 mismatch\n" );
#endif
        return( 1 );
    }

    if( hdr->alloc > 1 )
    3614:	6882      	ldr	r2, [r0, #8]
    3616:	2a01      	cmp	r2, #1
    3618:	d80b      	bhi.n	3632 <verify_header+0x36>
        mbedtls_fprintf( stderr, "FATAL: alloc has illegal value\n" );
#endif
        return( 1 );
    }

    if( hdr->prev != NULL && hdr->prev == hdr->next )
    361a:	68c2      	ldr	r2, [r0, #12]
    361c:	b112      	cbz	r2, 3624 <verify_header+0x28>
    361e:	6901      	ldr	r1, [r0, #16]
    3620:	428a      	cmp	r2, r1
    3622:	d006      	beq.n	3632 <verify_header+0x36>
        mbedtls_fprintf( stderr, "FATAL: prev == next\n" );
#endif
        return( 1 );
    }

    if( hdr->prev_free != NULL && hdr->prev_free == hdr->next_free )
    3624:	6958      	ldr	r0, [r3, #20]
    3626:	b128      	cbz	r0, 3634 <verify_header+0x38>
    3628:	699b      	ldr	r3, [r3, #24]
    362a:	1a1b      	subs	r3, r3, r0
    362c:	4258      	negs	r0, r3
    362e:	4158      	adcs	r0, r3
    3630:	4770      	bx	lr
        return( 1 );
    3632:	2001      	movs	r0, #1
#endif
        return( 1 );
    }

    return( 0 );
}
    3634:	4770      	bx	lr
    3636:	bf00      	nop
    3638:	ff00aa55 	.word	0xff00aa55

0000363c <verify_chain>:

static int verify_chain( void )
{
    memory_header *prv = heap.first, *cur;
    363c:	4b0d      	ldr	r3, [pc, #52]	; (3674 <verify_chain+0x38>)
{
    363e:	b570      	push	{r4, r5, r6, lr}
    memory_header *prv = heap.first, *cur;
    3640:	689e      	ldr	r6, [r3, #8]

    if( prv == NULL || verify_header( prv ) != 0 )
    3642:	b1a6      	cbz	r6, 366e <verify_chain+0x32>
    3644:	4630      	mov	r0, r6
    3646:	f7ff ffd9 	bl	35fc <verify_header>
    364a:	4604      	mov	r4, r0
    364c:	b978      	cbnz	r0, 366e <verify_chain+0x32>
                                  "failed\n" );
#endif
        return( 1 );
    }

    if( heap.first->prev != NULL )
    364e:	68f3      	ldr	r3, [r6, #12]
    3650:	b96b      	cbnz	r3, 366e <verify_chain+0x32>
                                  "first->prev != NULL\n" );
#endif
        return( 1 );
    }

    cur = heap.first->next;
    3652:	6935      	ldr	r5, [r6, #16]

    while( cur != NULL )
    3654:	b90d      	cbnz	r5, 365a <verify_chain+0x1e>
        prv = cur;
        cur = cur->next;
    }

    return( 0 );
}
    3656:	4620      	mov	r0, r4
    3658:	bd70      	pop	{r4, r5, r6, pc}
        if( verify_header( cur ) != 0 )
    365a:	4628      	mov	r0, r5
    365c:	f7ff ffce 	bl	35fc <verify_header>
    3660:	b928      	cbnz	r0, 366e <verify_chain+0x32>
        if( cur->prev != prv )
    3662:	68eb      	ldr	r3, [r5, #12]
    3664:	42b3      	cmp	r3, r6
    3666:	d102      	bne.n	366e <verify_chain+0x32>
        cur = cur->next;
    3668:	462e      	mov	r6, r5
    366a:	692d      	ldr	r5, [r5, #16]
    366c:	e7f2      	b.n	3654 <verify_chain+0x18>
        return( 1 );
    366e:	2401      	movs	r4, #1
    3670:	e7f1      	b.n	3656 <verify_chain+0x1a>
    3672:	bf00      	nop
    3674:	20000e50 	.word	0x20000e50

00003678 <buffer_alloc_calloc>:

static void *buffer_alloc_calloc( size_t n, size_t size )
{
    3678:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
#if defined(MBEDTLS_MEMORY_BACKTRACE)
    void *trace_buffer[MAX_BT];
    size_t trace_cnt;
#endif

    if( heap.buf == NULL || heap.first == NULL )
    367c:	4f40      	ldr	r7, [pc, #256]	; (3780 <buffer_alloc_calloc+0x108>)
    367e:	683c      	ldr	r4, [r7, #0]
    3680:	b1d4      	cbz	r4, 36b8 <buffer_alloc_calloc+0x40>
    3682:	68bc      	ldr	r4, [r7, #8]
    3684:	b1c4      	cbz	r4, 36b8 <buffer_alloc_calloc+0x40>
        return( NULL );

    original_len = len = n * size;

    if( n == 0 || size == 0 || len / n != size )
    3686:	2800      	cmp	r0, #0
    3688:	d04d      	beq.n	3726 <buffer_alloc_calloc+0xae>
    368a:	2900      	cmp	r1, #0
    368c:	d04b      	beq.n	3726 <buffer_alloc_calloc+0xae>
    original_len = len = n * size;
    368e:	fb01 f500 	mul.w	r5, r1, r0
    if( n == 0 || size == 0 || len / n != size )
    3692:	fbb5 f0f0 	udiv	r0, r5, r0
    3696:	4288      	cmp	r0, r1
    3698:	d145      	bne.n	3726 <buffer_alloc_calloc+0xae>
        return( NULL );
    else if( len > (size_t)-MBEDTLS_MEMORY_ALIGN_MULTIPLE )
    369a:	1d28      	adds	r0, r5, #4
    369c:	d843      	bhi.n	3726 <buffer_alloc_calloc+0xae>
        return( NULL );

    if( len % MBEDTLS_MEMORY_ALIGN_MULTIPLE )
    369e:	07a9      	lsls	r1, r5, #30
    36a0:	d00d      	beq.n	36be <buffer_alloc_calloc+0x46>
    {
        len -= len % MBEDTLS_MEMORY_ALIGN_MULTIPLE;
    36a2:	f025 0603 	bic.w	r6, r5, #3
        len += MBEDTLS_MEMORY_ALIGN_MULTIPLE;
    36a6:	3604      	adds	r6, #4
    memory_header *new, *cur = heap.first_free;
    36a8:	68fc      	ldr	r4, [r7, #12]
    36aa:	e003      	b.n	36b4 <buffer_alloc_calloc+0x3c>

    // Find block that fits
    //
    while( cur != NULL )
    {
        if( cur->size >= len )
    36ac:	6863      	ldr	r3, [r4, #4]
    36ae:	42b3      	cmp	r3, r6
    36b0:	d23b      	bcs.n	372a <buffer_alloc_calloc+0xb2>
            break;

        cur = cur->next_free;
    36b2:	69a4      	ldr	r4, [r4, #24]
    while( cur != NULL )
    36b4:	2c00      	cmp	r4, #0
    36b6:	d1f9      	bne.n	36ac <buffer_alloc_calloc+0x34>

    ret = (unsigned char *) cur + sizeof( memory_header );
    memset( ret, 0, original_len );

    return( ret );
}
    36b8:	4620      	mov	r0, r4
    36ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    36be:	462e      	mov	r6, r5
    36c0:	e7f2      	b.n	36a8 <buffer_alloc_calloc+0x30>
            heap.first_free = cur->next_free;
    36c2:	60f8      	str	r0, [r7, #12]
    36c4:	e044      	b.n	3750 <buffer_alloc_calloc+0xd8>
    p = ( (unsigned char *) cur ) + sizeof(memory_header) + len;
    36c6:	f106 0c20 	add.w	ip, r6, #32
    36ca:	eb04 030c 	add.w	r3, r4, ip
    new->size = cur->size - len - sizeof(memory_header);
    36ce:	3920      	subs	r1, #32
    36d0:	6059      	str	r1, [r3, #4]
    new->alloc = 0;
    36d2:	2100      	movs	r1, #0
    new->prev = cur;
    36d4:	e9c3 1402 	strd	r1, r4, [r3, #8]
    new->magic1 = MAGIC1;
    36d8:	f8df e0a8 	ldr.w	lr, [pc, #168]	; 3784 <buffer_alloc_calloc+0x10c>
    new->next = cur->next;
    36dc:	6921      	ldr	r1, [r4, #16]
    36de:	6119      	str	r1, [r3, #16]
    new->magic1 = MAGIC1;
    36e0:	f844 e00c 	str.w	lr, [r4, ip]
    new->magic2 = MAGIC2;
    36e4:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 3788 <buffer_alloc_calloc+0x110>
    36e8:	f8c3 c01c 	str.w	ip, [r3, #28]
    if( new->next != NULL )
    36ec:	b101      	cbz	r1, 36f0 <buffer_alloc_calloc+0x78>
        new->next->prev = new;
    36ee:	60cb      	str	r3, [r1, #12]
    new->next_free = cur->next_free;
    36f0:	e9c3 2005 	strd	r2, r0, [r3, #20]
    if( new->prev_free != NULL )
    36f4:	b1aa      	cbz	r2, 3722 <buffer_alloc_calloc+0xaa>
        new->prev_free->next_free = new;
    36f6:	6193      	str	r3, [r2, #24]
    if( new->next_free != NULL )
    36f8:	699a      	ldr	r2, [r3, #24]
    36fa:	b102      	cbz	r2, 36fe <buffer_alloc_calloc+0x86>
        new->next_free->prev_free = new;
    36fc:	6153      	str	r3, [r2, #20]
    cur->next = new;
    36fe:	6123      	str	r3, [r4, #16]
    cur->prev_free = NULL;
    3700:	2300      	movs	r3, #0
    cur->next_free = NULL;
    3702:	e9c4 3305 	strd	r3, r3, [r4, #20]
    if( ( heap.verify & MBEDTLS_MEMORY_VERIFY_ALLOC ) && verify_chain() != 0 )
    3706:	693b      	ldr	r3, [r7, #16]
    cur->alloc = 1;
    3708:	f04f 0901 	mov.w	r9, #1
    if( ( heap.verify & MBEDTLS_MEMORY_VERIFY_ALLOC ) && verify_chain() != 0 )
    370c:	07db      	lsls	r3, r3, #31
    cur->size = len;
    370e:	e9c4 6901 	strd	r6, r9, [r4, #4]
    if( ( heap.verify & MBEDTLS_MEMORY_VERIFY_ALLOC ) && verify_chain() != 0 )
    3712:	d52d      	bpl.n	3770 <buffer_alloc_calloc+0xf8>
    3714:	f7ff ff92 	bl	363c <verify_chain>
    3718:	b350      	cbz	r0, 3770 <buffer_alloc_calloc+0xf8>
        mbedtls_exit( 1 );
    371a:	4b1c      	ldr	r3, [pc, #112]	; (378c <buffer_alloc_calloc+0x114>)
    371c:	4648      	mov	r0, r9
    371e:	681b      	ldr	r3, [r3, #0]
    3720:	e025      	b.n	376e <buffer_alloc_calloc+0xf6>
        heap.first_free = new;
    3722:	60fb      	str	r3, [r7, #12]
    3724:	e7e8      	b.n	36f8 <buffer_alloc_calloc+0x80>
        return( NULL );
    3726:	2400      	movs	r4, #0
    3728:	e7c6      	b.n	36b8 <buffer_alloc_calloc+0x40>
    if( cur->alloc != 0 )
    372a:	68a3      	ldr	r3, [r4, #8]
    372c:	b11b      	cbz	r3, 3736 <buffer_alloc_calloc+0xbe>
        mbedtls_exit( 1 );
    372e:	4b17      	ldr	r3, [pc, #92]	; (378c <buffer_alloc_calloc+0x114>)
    3730:	2001      	movs	r0, #1
    3732:	681b      	ldr	r3, [r3, #0]
    3734:	4798      	blx	r3
    if( cur->size - len < sizeof(memory_header) +
    3736:	6861      	ldr	r1, [r4, #4]
    3738:	1b89      	subs	r1, r1, r6
    373a:	2923      	cmp	r1, #35	; 0x23
            cur->prev_free->next_free = cur->next_free;
    373c:	e9d4 2005 	ldrd	r2, r0, [r4, #20]
    3740:	f104 0820 	add.w	r8, r4, #32
    if( cur->size - len < sizeof(memory_header) +
    3744:	d8bf      	bhi.n	36c6 <buffer_alloc_calloc+0x4e>
        cur->alloc = 1;
    3746:	2301      	movs	r3, #1
    3748:	60a3      	str	r3, [r4, #8]
        if( cur->prev_free != NULL )
    374a:	2a00      	cmp	r2, #0
    374c:	d0b9      	beq.n	36c2 <buffer_alloc_calloc+0x4a>
            cur->prev_free->next_free = cur->next_free;
    374e:	6190      	str	r0, [r2, #24]
        if( cur->next_free != NULL )
    3750:	69a3      	ldr	r3, [r4, #24]
    3752:	b103      	cbz	r3, 3756 <buffer_alloc_calloc+0xde>
            cur->next_free->prev_free = cur->prev_free;
    3754:	615a      	str	r2, [r3, #20]
        cur->prev_free = NULL;
    3756:	2300      	movs	r3, #0
        cur->next_free = NULL;
    3758:	e9c4 3305 	strd	r3, r3, [r4, #20]
        if( ( heap.verify & MBEDTLS_MEMORY_VERIFY_ALLOC ) && verify_chain() != 0 )
    375c:	693b      	ldr	r3, [r7, #16]
    375e:	07da      	lsls	r2, r3, #31
    3760:	d506      	bpl.n	3770 <buffer_alloc_calloc+0xf8>
    3762:	f7ff ff6b 	bl	363c <verify_chain>
    3766:	b118      	cbz	r0, 3770 <buffer_alloc_calloc+0xf8>
            mbedtls_exit( 1 );
    3768:	4b08      	ldr	r3, [pc, #32]	; (378c <buffer_alloc_calloc+0x114>)
    376a:	681b      	ldr	r3, [r3, #0]
    376c:	2001      	movs	r0, #1
        mbedtls_exit( 1 );
    376e:	4798      	blx	r3
    memset( ret, 0, original_len );
    3770:	462a      	mov	r2, r5
    3772:	2100      	movs	r1, #0
    3774:	4640      	mov	r0, r8
    ret = (unsigned char *) cur + sizeof( memory_header );
    3776:	4644      	mov	r4, r8
    memset( ret, 0, original_len );
    3778:	f001 fb90 	bl	4e9c <memset>
    return( ret );
    377c:	e79c      	b.n	36b8 <buffer_alloc_calloc+0x40>
    377e:	bf00      	nop
    3780:	20000e50 	.word	0x20000e50
    3784:	ff00aa55 	.word	0xff00aa55
    3788:	ee119966 	.word	0xee119966
    378c:	20000048 	.word	0x20000048

00003790 <buffer_alloc_free>:

static void buffer_alloc_free( void *ptr )
{
    3790:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    memory_header *hdr, *old = NULL;
    unsigned char *p = (unsigned char *) ptr;

    if( ptr == NULL || heap.buf == NULL || heap.first == NULL )
    3794:	4605      	mov	r5, r0
    3796:	2800      	cmp	r0, #0
    3798:	d07c      	beq.n	3894 <buffer_alloc_free+0x104>
    379a:	4f3f      	ldr	r7, [pc, #252]	; (3898 <buffer_alloc_free+0x108>)
    379c:	683b      	ldr	r3, [r7, #0]
    379e:	2b00      	cmp	r3, #0
    37a0:	d078      	beq.n	3894 <buffer_alloc_free+0x104>
    37a2:	68ba      	ldr	r2, [r7, #8]
    37a4:	2a00      	cmp	r2, #0
    37a6:	d075      	beq.n	3894 <buffer_alloc_free+0x104>
        return;

    if( p < heap.buf || p >= heap.buf + heap.len )
    37a8:	4283      	cmp	r3, r0
    37aa:	d803      	bhi.n	37b4 <buffer_alloc_free+0x24>
    37ac:	687a      	ldr	r2, [r7, #4]
    37ae:	4413      	add	r3, r2
    37b0:	4298      	cmp	r0, r3
    37b2:	d303      	bcc.n	37bc <buffer_alloc_free+0x2c>
    {
#if defined(MBEDTLS_MEMORY_DEBUG)
        mbedtls_fprintf( stderr, "FATAL: mbedtls_free() outside of managed "
                                  "space\n" );
#endif
        mbedtls_exit( 1 );
    37b4:	4b39      	ldr	r3, [pc, #228]	; (389c <buffer_alloc_free+0x10c>)
    37b6:	2001      	movs	r0, #1
    37b8:	681b      	ldr	r3, [r3, #0]
    37ba:	4798      	blx	r3
    }

    p -= sizeof(memory_header);
    37bc:	f1a5 0420 	sub.w	r4, r5, #32
    hdr = (memory_header *) p;

    if( verify_header( hdr ) != 0 )
    37c0:	4620      	mov	r0, r4
    37c2:	f7ff ff1b 	bl	35fc <verify_header>
    37c6:	b118      	cbz	r0, 37d0 <buffer_alloc_free+0x40>
        mbedtls_exit( 1 );
    37c8:	4b34      	ldr	r3, [pc, #208]	; (389c <buffer_alloc_free+0x10c>)
    37ca:	2001      	movs	r0, #1
    37cc:	681b      	ldr	r3, [r3, #0]
    37ce:	4798      	blx	r3

    if( hdr->alloc != 1 )
    37d0:	f855 3c18 	ldr.w	r3, [r5, #-24]
    37d4:	2b01      	cmp	r3, #1
    37d6:	d003      	beq.n	37e0 <buffer_alloc_free+0x50>
    {
#if defined(MBEDTLS_MEMORY_DEBUG)
        mbedtls_fprintf( stderr, "FATAL: mbedtls_free() on unallocated "
                                  "data\n" );
#endif
        mbedtls_exit( 1 );
    37d8:	4b30      	ldr	r3, [pc, #192]	; (389c <buffer_alloc_free+0x10c>)
    37da:	2001      	movs	r0, #1
    37dc:	681b      	ldr	r3, [r3, #0]
    37de:	4798      	blx	r3
    hdr->trace_count = 0;
#endif

    // Regroup with block before
    //
    if( hdr->prev != NULL && hdr->prev->alloc == 0 )
    37e0:	f855 6c14 	ldr.w	r6, [r5, #-20]
    hdr->alloc = 0;
    37e4:	2300      	movs	r3, #0
    37e6:	f845 3c18 	str.w	r3, [r5, #-24]
    if( hdr->prev != NULL && hdr->prev->alloc == 0 )
    37ea:	b1ae      	cbz	r6, 3818 <buffer_alloc_free+0x88>
    37ec:	68b2      	ldr	r2, [r6, #8]
    37ee:	b992      	cbnz	r2, 3816 <buffer_alloc_free+0x86>
    {
#if defined(MBEDTLS_MEMORY_DEBUG)
        heap.header_count--;
#endif
        hdr->prev->size += sizeof(memory_header) + hdr->size;
    37f0:	f855 3c1c 	ldr.w	r3, [r5, #-28]
    37f4:	f103 0220 	add.w	r2, r3, #32
    37f8:	6873      	ldr	r3, [r6, #4]
    37fa:	4413      	add	r3, r2
    37fc:	6073      	str	r3, [r6, #4]
        hdr->prev->next = hdr->next;
    37fe:	f855 3c10 	ldr.w	r3, [r5, #-16]
    3802:	6133      	str	r3, [r6, #16]
        old = hdr;
        hdr = hdr->prev;

        if( hdr->next != NULL )
    3804:	b103      	cbz	r3, 3808 <buffer_alloc_free+0x78>
            hdr->next->prev = hdr;
    3806:	60de      	str	r6, [r3, #12]

        memset( old, 0, sizeof(memory_header) );
    3808:	4620      	mov	r0, r4
    380a:	2220      	movs	r2, #32
    380c:	2100      	movs	r1, #0
    380e:	f001 fb45 	bl	4e9c <memset>
    3812:	4623      	mov	r3, r4
    3814:	4634      	mov	r4, r6
    memory_header *hdr, *old = NULL;
    3816:	461e      	mov	r6, r3
    }

    // Regroup with block after
    //
    if( hdr->next != NULL && hdr->next->alloc == 0 )
    3818:	6920      	ldr	r0, [r4, #16]
    381a:	2800      	cmp	r0, #0
    381c:	d032      	beq.n	3884 <buffer_alloc_free+0xf4>
    381e:	6883      	ldr	r3, [r0, #8]
    3820:	2b00      	cmp	r3, #0
    3822:	d12f      	bne.n	3884 <buffer_alloc_free+0xf4>
    {
#if defined(MBEDTLS_MEMORY_DEBUG)
        heap.header_count--;
#endif
        hdr->size += sizeof(memory_header) + hdr->next->size;
    3824:	6863      	ldr	r3, [r4, #4]
    3826:	6842      	ldr	r2, [r0, #4]
    3828:	3320      	adds	r3, #32
    382a:	4413      	add	r3, r2
        old = hdr->next;
        hdr->next = hdr->next->next;

        if( hdr->prev_free != NULL || hdr->next_free != NULL )
    382c:	e9d4 2105 	ldrd	r2, r1, [r4, #20]
        hdr->size += sizeof(memory_header) + hdr->next->size;
    3830:	6063      	str	r3, [r4, #4]
        hdr->next = hdr->next->next;
    3832:	6903      	ldr	r3, [r0, #16]
    3834:	6123      	str	r3, [r4, #16]
        if( hdr->prev_free != NULL || hdr->next_free != NULL )
    3836:	b9da      	cbnz	r2, 3870 <buffer_alloc_free+0xe0>
    3838:	bb01      	cbnz	r1, 387c <buffer_alloc_free+0xec>

            if( hdr->next_free != NULL )
                hdr->next_free->prev_free = hdr->prev_free;
        }

        hdr->prev_free = old->prev_free;
    383a:	6942      	ldr	r2, [r0, #20]
        hdr->next_free = old->next_free;
    383c:	6981      	ldr	r1, [r0, #24]
        hdr->prev_free = old->prev_free;
    383e:	6162      	str	r2, [r4, #20]
        hdr->next_free = old->next_free;
    3840:	61a1      	str	r1, [r4, #24]

        if( hdr->prev_free != NULL )
    3842:	b1ea      	cbz	r2, 3880 <buffer_alloc_free+0xf0>
            hdr->prev_free->next_free = hdr;
    3844:	6194      	str	r4, [r2, #24]
        else
            heap.first_free = hdr;

        if( hdr->next_free != NULL )
    3846:	69a2      	ldr	r2, [r4, #24]
    3848:	b102      	cbz	r2, 384c <buffer_alloc_free+0xbc>
            hdr->next_free->prev_free = hdr;
    384a:	6154      	str	r4, [r2, #20]

        if( hdr->next != NULL )
    384c:	b103      	cbz	r3, 3850 <buffer_alloc_free+0xc0>
            hdr->next->prev = hdr;
    384e:	60dc      	str	r4, [r3, #12]

        memset( old, 0, sizeof(memory_header) );
    3850:	2220      	movs	r2, #32
    3852:	2100      	movs	r1, #0
    3854:	f001 fb22 	bl	4e9c <memset>
        if( heap.first_free != NULL )
            heap.first_free->prev_free = hdr;
        heap.first_free = hdr;
    }

    if( ( heap.verify & MBEDTLS_MEMORY_VERIFY_FREE ) && verify_chain() != 0 )
    3858:	693b      	ldr	r3, [r7, #16]
    385a:	079b      	lsls	r3, r3, #30
    385c:	d51a      	bpl.n	3894 <buffer_alloc_free+0x104>
    385e:	f7ff feed 	bl	363c <verify_chain>
    3862:	b1b8      	cbz	r0, 3894 <buffer_alloc_free+0x104>
        mbedtls_exit( 1 );
    3864:	4b0d      	ldr	r3, [pc, #52]	; (389c <buffer_alloc_free+0x10c>)
}
    3866:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        mbedtls_exit( 1 );
    386a:	681b      	ldr	r3, [r3, #0]
    386c:	2001      	movs	r0, #1
    386e:	4718      	bx	r3
                hdr->prev_free->next_free = hdr->next_free;
    3870:	6191      	str	r1, [r2, #24]
            if( hdr->next_free != NULL )
    3872:	69a1      	ldr	r1, [r4, #24]
    3874:	2900      	cmp	r1, #0
    3876:	d0e0      	beq.n	383a <buffer_alloc_free+0xaa>
                hdr->next_free->prev_free = hdr->prev_free;
    3878:	614a      	str	r2, [r1, #20]
    387a:	e7de      	b.n	383a <buffer_alloc_free+0xaa>
                heap.first_free = hdr->next_free;
    387c:	60f9      	str	r1, [r7, #12]
    387e:	e7f8      	b.n	3872 <buffer_alloc_free+0xe2>
            heap.first_free = hdr;
    3880:	60fc      	str	r4, [r7, #12]
    3882:	e7e0      	b.n	3846 <buffer_alloc_free+0xb6>
    if( old == NULL )
    3884:	2e00      	cmp	r6, #0
    3886:	d1e7      	bne.n	3858 <buffer_alloc_free+0xc8>
        hdr->next_free = heap.first_free;
    3888:	68fb      	ldr	r3, [r7, #12]
    388a:	61a3      	str	r3, [r4, #24]
        if( heap.first_free != NULL )
    388c:	b103      	cbz	r3, 3890 <buffer_alloc_free+0x100>
            heap.first_free->prev_free = hdr;
    388e:	615c      	str	r4, [r3, #20]
        heap.first_free = hdr;
    3890:	60fc      	str	r4, [r7, #12]
    3892:	e7e1      	b.n	3858 <buffer_alloc_free+0xc8>
}
    3894:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3898:	20000e50 	.word	0x20000e50
    389c:	20000048 	.word	0x20000048

000038a0 <mbedtls_memory_buffer_alloc_init>:
    (void) mbedtls_mutex_unlock( &heap.mutex );
}
#endif /* MBEDTLS_THREADING_C */

void mbedtls_memory_buffer_alloc_init( unsigned char *buf, size_t len )
{
    38a0:	b538      	push	{r3, r4, r5, lr}
    memset( &heap, 0, sizeof( buffer_alloc_ctx ) );
    38a2:	2214      	movs	r2, #20
{
    38a4:	460d      	mov	r5, r1
    38a6:	4604      	mov	r4, r0
    memset( &heap, 0, sizeof( buffer_alloc_ctx ) );
    38a8:	2100      	movs	r1, #0
    38aa:	4812      	ldr	r0, [pc, #72]	; (38f4 <mbedtls_memory_buffer_alloc_init+0x54>)
    38ac:	f001 faf6 	bl	4e9c <memset>
#if defined(MBEDTLS_THREADING_C)
    mbedtls_mutex_init( &heap.mutex );
    mbedtls_platform_set_calloc_free( buffer_alloc_calloc_mutexed,
                              buffer_alloc_free_mutexed );
#else
    mbedtls_platform_set_calloc_free( buffer_alloc_calloc, buffer_alloc_free );
    38b0:	4911      	ldr	r1, [pc, #68]	; (38f8 <mbedtls_memory_buffer_alloc_init+0x58>)
    38b2:	4812      	ldr	r0, [pc, #72]	; (38fc <mbedtls_memory_buffer_alloc_init+0x5c>)
    38b4:	f000 f832 	bl	391c <mbedtls_platform_set_calloc_free>
#endif

    if( len < sizeof( memory_header ) + MBEDTLS_MEMORY_ALIGN_MULTIPLE )
    38b8:	2d23      	cmp	r5, #35	; 0x23
    38ba:	d91a      	bls.n	38f2 <mbedtls_memory_buffer_alloc_init+0x52>
        return;
    else if( (size_t)buf % MBEDTLS_MEMORY_ALIGN_MULTIPLE )
    38bc:	f014 0303 	ands.w	r3, r4, #3
    {
        /* Adjust len first since buf is used in the computation */
        len -= MBEDTLS_MEMORY_ALIGN_MULTIPLE
    38c0:	bf1f      	itttt	ne
    38c2:	3d04      	subne	r5, #4
    38c4:	18ed      	addne	r5, r5, r3
             - (size_t)buf % MBEDTLS_MEMORY_ALIGN_MULTIPLE;
        buf += MBEDTLS_MEMORY_ALIGN_MULTIPLE
             - (size_t)buf % MBEDTLS_MEMORY_ALIGN_MULTIPLE;
    38c6:	f1c3 0304 	rsbne	r3, r3, #4
        buf += MBEDTLS_MEMORY_ALIGN_MULTIPLE
    38ca:	18e4      	addne	r4, r4, r3
    }

    memset( buf, 0, len );
    38cc:	462a      	mov	r2, r5
    38ce:	2100      	movs	r1, #0
    38d0:	4620      	mov	r0, r4
    38d2:	f001 fae3 	bl	4e9c <memset>

    heap.buf = buf;
    38d6:	4b07      	ldr	r3, [pc, #28]	; (38f4 <mbedtls_memory_buffer_alloc_init+0x54>)
    heap.len = len;

    heap.first = (memory_header *)buf;
    heap.first->size = len - sizeof( memory_header );
    heap.first->magic1 = MAGIC1;
    38d8:	4a09      	ldr	r2, [pc, #36]	; (3900 <mbedtls_memory_buffer_alloc_init+0x60>)
    heap.first = (memory_header *)buf;
    38da:	609c      	str	r4, [r3, #8]
    heap.len = len;
    38dc:	e9c3 4500 	strd	r4, r5, [r3]
    heap.first->magic1 = MAGIC1;
    38e0:	6022      	str	r2, [r4, #0]
    heap.first->magic2 = MAGIC2;
    38e2:	f1a2 2210 	sub.w	r2, r2, #268439552	; 0x10001000
    heap.first->size = len - sizeof( memory_header );
    38e6:	3d20      	subs	r5, #32
    heap.first->magic2 = MAGIC2;
    38e8:	f1a2 12ef 	sub.w	r2, r2, #15663343	; 0xef00ef
    heap.first->size = len - sizeof( memory_header );
    38ec:	6065      	str	r5, [r4, #4]
    heap.first->magic2 = MAGIC2;
    38ee:	61e2      	str	r2, [r4, #28]
    heap.first_free = heap.first;
    38f0:	60dc      	str	r4, [r3, #12]
}
    38f2:	bd38      	pop	{r3, r4, r5, pc}
    38f4:	20000e50 	.word	0x20000e50
    38f8:	00003791 	.word	0x00003791
    38fc:	00003679 	.word	0x00003679
    3900:	ff00aa55 	.word	0xff00aa55

00003904 <mbedtls_calloc>:
static void * (*mbedtls_calloc_func)( size_t, size_t ) = MBEDTLS_PLATFORM_STD_CALLOC;
static void (*mbedtls_free_func)( void * ) = MBEDTLS_PLATFORM_STD_FREE;

void * mbedtls_calloc( size_t nmemb, size_t size )
{
    return (*mbedtls_calloc_func)( nmemb, size );
    3904:	4b01      	ldr	r3, [pc, #4]	; (390c <mbedtls_calloc+0x8>)
    3906:	681b      	ldr	r3, [r3, #0]
    3908:	4718      	bx	r3
    390a:	bf00      	nop
    390c:	20000044 	.word	0x20000044

00003910 <mbedtls_free>:
}

void mbedtls_free( void * ptr )
{
    (*mbedtls_free_func)( ptr );
    3910:	4b01      	ldr	r3, [pc, #4]	; (3918 <mbedtls_free+0x8>)
    3912:	681b      	ldr	r3, [r3, #0]
    3914:	4718      	bx	r3
    3916:	bf00      	nop
    3918:	2000004c 	.word	0x2000004c

0000391c <mbedtls_platform_set_calloc_free>:
}

int mbedtls_platform_set_calloc_free( void * (*calloc_func)( size_t, size_t ),
                              void (*free_func)( void * ) )
{
    mbedtls_calloc_func = calloc_func;
    391c:	4b02      	ldr	r3, [pc, #8]	; (3928 <mbedtls_platform_set_calloc_free+0xc>)
    391e:	6018      	str	r0, [r3, #0]
    mbedtls_free_func = free_func;
    3920:	4b02      	ldr	r3, [pc, #8]	; (392c <mbedtls_platform_set_calloc_free+0x10>)
    return( 0 );
}
    3922:	2000      	movs	r0, #0
    mbedtls_free_func = free_func;
    3924:	6019      	str	r1, [r3, #0]
}
    3926:	4770      	bx	lr
    3928:	20000044 	.word	0x20000044
    392c:	2000004c 	.word	0x2000004c

00003930 <mbedtls_platform_zeroize>:

void mbedtls_platform_zeroize( void *buf, size_t len )
{
    MBEDTLS_INTERNAL_VALIDATE( len == 0 || buf != NULL );

    if( len > 0 )
    3930:	460a      	mov	r2, r1
    3932:	b119      	cbz	r1, 393c <mbedtls_platform_zeroize+0xc>
        memset_func( buf, 0, len );
    3934:	4b02      	ldr	r3, [pc, #8]	; (3940 <mbedtls_platform_zeroize+0x10>)
    3936:	2100      	movs	r1, #0
    3938:	681b      	ldr	r3, [r3, #0]
    393a:	4718      	bx	r3
}
    393c:	4770      	bx	lr
    393e:	bf00      	nop
    3940:	20000050 	.word	0x20000050

00003944 <rsa_check_context.constprop.0>:
/*
 * Checks whether the context fields are set in such a way
 * that the RSA primitives will be able to execute without error.
 * It does *not* make guarantees for consistency of the parameters.
 */
static int rsa_check_context( mbedtls_rsa_context const *ctx, int is_priv,
    3944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    /* blinding_needed is only used for NO_CRT to decide whether
     * P,Q need to be present or not. */
    ((void) blinding_needed);
#endif

    if( ctx->len != mbedtls_mpi_size( &ctx->N ) ||
    3946:	f100 0608 	add.w	r6, r0, #8
    394a:	6847      	ldr	r7, [r0, #4]
static int rsa_check_context( mbedtls_rsa_context const *ctx, int is_priv,
    394c:	4604      	mov	r4, r0
    if( ctx->len != mbedtls_mpi_size( &ctx->N ) ||
    394e:	4630      	mov	r0, r6
static int rsa_check_context( mbedtls_rsa_context const *ctx, int is_priv,
    3950:	460d      	mov	r5, r1
    if( ctx->len != mbedtls_mpi_size( &ctx->N ) ||
    3952:	f002 f945 	bl	5be0 <mbedtls_mpi_size>
    3956:	4287      	cmp	r7, r0
    3958:	d116      	bne.n	3988 <rsa_check_context.constprop.0+0x44>
    395a:	6863      	ldr	r3, [r4, #4]
    395c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    3960:	d812      	bhi.n	3988 <rsa_check_context.constprop.0+0x44>
     * 1. Modular exponentiation needs positive, odd moduli.
     */

    /* Modular exponentiation wrt. N is always used for
     * RSA public key operations. */
    if( mbedtls_mpi_cmp_int( &ctx->N, 0 ) <= 0 ||
    3962:	2100      	movs	r1, #0
    3964:	4630      	mov	r0, r6
    3966:	f002 fab1 	bl	5ecc <mbedtls_mpi_cmp_int>
    396a:	2800      	cmp	r0, #0
    396c:	dd0c      	ble.n	3988 <rsa_check_context.constprop.0+0x44>
        mbedtls_mpi_get_bit( &ctx->N, 0 ) == 0  )
    396e:	2100      	movs	r1, #0
    3970:	4630      	mov	r0, r6
    3972:	f002 f908 	bl	5b86 <mbedtls_mpi_get_bit>
    if( mbedtls_mpi_cmp_int( &ctx->N, 0 ) <= 0 ||
    3976:	b138      	cbz	r0, 3988 <rsa_check_context.constprop.0+0x44>

#if !defined(MBEDTLS_RSA_NO_CRT)
    /* Modular exponentiation for P and Q is only
     * used for private key operations and if CRT
     * is used. */
    if( is_priv &&
    3978:	b945      	cbnz	r5, 398c <rsa_check_context.constprop.0+0x48>
    /*
     * 2. Exponents must be positive
     */

    /* Always need E for public key operations */
    if( mbedtls_mpi_cmp_int( &ctx->E, 0 ) <= 0 )
    397a:	2100      	movs	r1, #0
    397c:	f104 0014 	add.w	r0, r4, #20
    3980:	f002 faa4 	bl	5ecc <mbedtls_mpi_cmp_int>
    3984:	2800      	cmp	r0, #0
    3986:	dc1e      	bgt.n	39c6 <rsa_check_context.constprop.0+0x82>
     * but check for QP >= 1 nonetheless. */
#if !defined(MBEDTLS_RSA_NO_CRT)
    if( is_priv &&
        mbedtls_mpi_cmp_int( &ctx->QP, 0 ) <= 0 )
    {
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
    3988:	481b      	ldr	r0, [pc, #108]	; (39f8 <rsa_check_context.constprop.0+0xb4>)
    398a:	e01e      	b.n	39ca <rsa_check_context.constprop.0+0x86>
        ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) <= 0 ||
    398c:	f104 062c 	add.w	r6, r4, #44	; 0x2c
    3990:	2100      	movs	r1, #0
    3992:	4630      	mov	r0, r6
    3994:	f002 fa9a 	bl	5ecc <mbedtls_mpi_cmp_int>
    if( is_priv &&
    3998:	2800      	cmp	r0, #0
    399a:	ddf5      	ble.n	3988 <rsa_check_context.constprop.0+0x44>
          mbedtls_mpi_get_bit( &ctx->P, 0 ) == 0 ||
    399c:	2100      	movs	r1, #0
    399e:	4630      	mov	r0, r6
    39a0:	f002 f8f1 	bl	5b86 <mbedtls_mpi_get_bit>
        ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) <= 0 ||
    39a4:	2800      	cmp	r0, #0
    39a6:	d0ef      	beq.n	3988 <rsa_check_context.constprop.0+0x44>
          mbedtls_mpi_cmp_int( &ctx->Q, 0 ) <= 0 ||
    39a8:	f104 0638 	add.w	r6, r4, #56	; 0x38
    39ac:	2100      	movs	r1, #0
    39ae:	4630      	mov	r0, r6
    39b0:	f002 fa8c 	bl	5ecc <mbedtls_mpi_cmp_int>
          mbedtls_mpi_get_bit( &ctx->P, 0 ) == 0 ||
    39b4:	2800      	cmp	r0, #0
    39b6:	dde7      	ble.n	3988 <rsa_check_context.constprop.0+0x44>
          mbedtls_mpi_get_bit( &ctx->Q, 0 ) == 0  ) )
    39b8:	2100      	movs	r1, #0
    39ba:	4630      	mov	r0, r6
    39bc:	f002 f8e3 	bl	5b86 <mbedtls_mpi_get_bit>
          mbedtls_mpi_cmp_int( &ctx->Q, 0 ) <= 0 ||
    39c0:	2800      	cmp	r0, #0
    39c2:	d1da      	bne.n	397a <rsa_check_context.constprop.0+0x36>
    39c4:	e7e0      	b.n	3988 <rsa_check_context.constprop.0+0x44>
    if( is_priv &&
    39c6:	b90d      	cbnz	r5, 39cc <rsa_check_context.constprop.0+0x88>
    }
#endif

    return( 0 );
    39c8:	2000      	movs	r0, #0
}
    39ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ( mbedtls_mpi_cmp_int( &ctx->DP, 0 ) <= 0 ||
    39cc:	2100      	movs	r1, #0
    39ce:	f104 0044 	add.w	r0, r4, #68	; 0x44
    39d2:	f002 fa7b 	bl	5ecc <mbedtls_mpi_cmp_int>
    if( is_priv &&
    39d6:	2800      	cmp	r0, #0
    39d8:	ddd6      	ble.n	3988 <rsa_check_context.constprop.0+0x44>
          mbedtls_mpi_cmp_int( &ctx->DQ, 0 ) <= 0  ) )
    39da:	2100      	movs	r1, #0
    39dc:	f104 0050 	add.w	r0, r4, #80	; 0x50
    39e0:	f002 fa74 	bl	5ecc <mbedtls_mpi_cmp_int>
        ( mbedtls_mpi_cmp_int( &ctx->DP, 0 ) <= 0 ||
    39e4:	2800      	cmp	r0, #0
    39e6:	ddcf      	ble.n	3988 <rsa_check_context.constprop.0+0x44>
        mbedtls_mpi_cmp_int( &ctx->QP, 0 ) <= 0 )
    39e8:	2100      	movs	r1, #0
    39ea:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    39ee:	f002 fa6d 	bl	5ecc <mbedtls_mpi_cmp_int>
    if( is_priv &&
    39f2:	2800      	cmp	r0, #0
    39f4:	dce8      	bgt.n	39c8 <rsa_check_context.constprop.0+0x84>
    39f6:	e7c7      	b.n	3988 <rsa_check_context.constprop.0+0x44>
    39f8:	ffffbf80 	.word	0xffffbf80

000039fc <mbedtls_rsa_check_pubkey>:

/*
 * Check a public RSA key
 */
int mbedtls_rsa_check_pubkey( const mbedtls_rsa_context *ctx )
{
    39fc:	b570      	push	{r4, r5, r6, lr}
    RSA_VALIDATE_RET( ctx != NULL );

    if( rsa_check_context( ctx, 0 /* public */, 0 /* no blinding */ ) != 0 )
    39fe:	2100      	movs	r1, #0
{
    3a00:	4604      	mov	r4, r0
    if( rsa_check_context( ctx, 0 /* public */, 0 /* no blinding */ ) != 0 )
    3a02:	f7ff ff9f 	bl	3944 <rsa_check_context.constprop.0>
    3a06:	4605      	mov	r5, r0
    3a08:	b9b8      	cbnz	r0, 3a3a <mbedtls_rsa_check_pubkey+0x3e>
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );

    if( mbedtls_mpi_bitlen( &ctx->N ) < 128 )
    3a0a:	f104 0608 	add.w	r6, r4, #8
    3a0e:	4630      	mov	r0, r6
    3a10:	f002 f8ca 	bl	5ba8 <mbedtls_mpi_bitlen>
    3a14:	287f      	cmp	r0, #127	; 0x7f
    3a16:	d910      	bls.n	3a3a <mbedtls_rsa_check_pubkey+0x3e>
    {
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
    }

    if( mbedtls_mpi_get_bit( &ctx->E, 0 ) == 0 ||
    3a18:	3414      	adds	r4, #20
    3a1a:	4629      	mov	r1, r5
    3a1c:	4620      	mov	r0, r4
    3a1e:	f002 f8b2 	bl	5b86 <mbedtls_mpi_get_bit>
    3a22:	b150      	cbz	r0, 3a3a <mbedtls_rsa_check_pubkey+0x3e>
        mbedtls_mpi_bitlen( &ctx->E )     < 2  ||
    3a24:	4620      	mov	r0, r4
    3a26:	f002 f8bf 	bl	5ba8 <mbedtls_mpi_bitlen>
    if( mbedtls_mpi_get_bit( &ctx->E, 0 ) == 0 ||
    3a2a:	2801      	cmp	r0, #1
    3a2c:	d905      	bls.n	3a3a <mbedtls_rsa_check_pubkey+0x3e>
        mbedtls_mpi_cmp_mpi( &ctx->E, &ctx->N ) >= 0 )
    3a2e:	4631      	mov	r1, r6
    3a30:	4620      	mov	r0, r4
    3a32:	f002 fa0a 	bl	5e4a <mbedtls_mpi_cmp_mpi>
        mbedtls_mpi_bitlen( &ctx->E )     < 2  ||
    3a36:	2800      	cmp	r0, #0
    3a38:	db00      	blt.n	3a3c <mbedtls_rsa_check_pubkey+0x40>
    {
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
    3a3a:	4d01      	ldr	r5, [pc, #4]	; (3a40 <mbedtls_rsa_check_pubkey+0x44>)
    }

    return( 0 );
}
    3a3c:	4628      	mov	r0, r5
    3a3e:	bd70      	pop	{r4, r5, r6, pc}
    3a40:	ffffbe00 	.word	0xffffbe00

00003a44 <mbedtls_rsa_public>:
 * Do an RSA public key operation
 */
int mbedtls_rsa_public( mbedtls_rsa_context *ctx,
                const unsigned char *input,
                unsigned char *output )
{
    3a44:	b5f0      	push	{r4, r5, r6, r7, lr}
    3a46:	460c      	mov	r4, r1
    3a48:	b087      	sub	sp, #28
    mbedtls_mpi T;
    RSA_VALIDATE_RET( ctx != NULL );
    RSA_VALIDATE_RET( input != NULL );
    RSA_VALIDATE_RET( output != NULL );

    if( rsa_check_context( ctx, 0 /* public */, 0 /* no blinding */ ) )
    3a4a:	2100      	movs	r1, #0
{
    3a4c:	4605      	mov	r5, r0
    3a4e:	4616      	mov	r6, r2
    if( rsa_check_context( ctx, 0 /* public */, 0 /* no blinding */ ) )
    3a50:	f7ff ff78 	bl	3944 <rsa_check_context.constprop.0>
    3a54:	bb80      	cbnz	r0, 3ab8 <mbedtls_rsa_public+0x74>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    mbedtls_mpi_init( &T );
    3a56:	a803      	add	r0, sp, #12
    3a58:	f002 f80f 	bl	5a7a <mbedtls_mpi_init>
#if defined(MBEDTLS_THREADING_C)
    if( ( ret = mbedtls_mutex_lock( &ctx->mutex ) ) != 0 )
        return( ret );
#endif

    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &T, input, ctx->len ) );
    3a5c:	4621      	mov	r1, r4
    3a5e:	686a      	ldr	r2, [r5, #4]
    3a60:	a803      	add	r0, sp, #12
    3a62:	f002 f8c3 	bl	5bec <mbedtls_mpi_read_binary>
    3a66:	4604      	mov	r4, r0
    3a68:	b9d0      	cbnz	r0, 3aa0 <mbedtls_rsa_public+0x5c>

    if( mbedtls_mpi_cmp_mpi( &T, &ctx->N ) >= 0 )
    3a6a:	f105 0408 	add.w	r4, r5, #8
    3a6e:	4621      	mov	r1, r4
    3a70:	a803      	add	r0, sp, #12
    3a72:	f002 f9ea 	bl	5e4a <mbedtls_mpi_cmp_mpi>
    3a76:	2800      	cmp	r0, #0
    3a78:	da1b      	bge.n	3ab2 <mbedtls_rsa_public+0x6e>
        ret = MBEDTLS_ERR_MPI_BAD_INPUT_DATA;
        goto cleanup;
    }

    olen = ctx->len;
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &T, &T, &ctx->E, &ctx->N, &ctx->RN ) );
    3a7a:	f105 0368 	add.w	r3, r5, #104	; 0x68
    3a7e:	a903      	add	r1, sp, #12
    3a80:	9300      	str	r3, [sp, #0]
    3a82:	f105 0214 	add.w	r2, r5, #20
    3a86:	4623      	mov	r3, r4
    3a88:	4608      	mov	r0, r1
    olen = ctx->len;
    3a8a:	686f      	ldr	r7, [r5, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &T, &T, &ctx->E, &ctx->N, &ctx->RN ) );
    3a8c:	f002 fd69 	bl	6562 <mbedtls_mpi_exp_mod>
    3a90:	4604      	mov	r4, r0
    3a92:	b928      	cbnz	r0, 3aa0 <mbedtls_rsa_public+0x5c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &T, output, olen ) );
    3a94:	463a      	mov	r2, r7
    3a96:	4631      	mov	r1, r6
    3a98:	a803      	add	r0, sp, #12
    3a9a:	f002 f8df 	bl	5c5c <mbedtls_mpi_write_binary>
    3a9e:	4604      	mov	r4, r0
#if defined(MBEDTLS_THREADING_C)
    if( mbedtls_mutex_unlock( &ctx->mutex ) != 0 )
        return( MBEDTLS_ERR_THREADING_MUTEX_ERROR );
#endif

    mbedtls_mpi_free( &T );
    3aa0:	a803      	add	r0, sp, #12
    3aa2:	f001 fff0 	bl	5a86 <mbedtls_mpi_free>

    if( ret != 0 )
    3aa6:	b10c      	cbz	r4, 3aac <mbedtls_rsa_public+0x68>
        return( MBEDTLS_ERR_RSA_PUBLIC_FAILED + ret );
    3aa8:	f5a4 4485 	sub.w	r4, r4, #17024	; 0x4280

    return( 0 );
}
    3aac:	4620      	mov	r0, r4
    3aae:	b007      	add	sp, #28
    3ab0:	bdf0      	pop	{r4, r5, r6, r7, pc}
        ret = MBEDTLS_ERR_MPI_BAD_INPUT_DATA;
    3ab2:	f06f 0403 	mvn.w	r4, #3
    3ab6:	e7f3      	b.n	3aa0 <mbedtls_rsa_public+0x5c>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
    3ab8:	4c00      	ldr	r4, [pc, #0]	; (3abc <mbedtls_rsa_public+0x78>)
    3aba:	e7f7      	b.n	3aac <mbedtls_rsa_public+0x68>
    3abc:	ffffbf80 	.word	0xffffbf80

00003ac0 <mbedtls_sha256_starts_ret>:
int mbedtls_sha256_starts_ret( mbedtls_sha256_context *ctx, int is224 )
{
    SHA256_VALIDATE_RET( ctx != NULL );
    SHA256_VALIDATE_RET( is224 == 0 || is224 == 1 );

    ctx->total[0] = 0;
    3ac0:	2300      	movs	r3, #0
    ctx->total[1] = 0;
    3ac2:	e9c0 3300 	strd	r3, r3, [r0]

    if( is224 == 0 )
    3ac6:	b9c1      	cbnz	r1, 3afa <mbedtls_sha256_starts_ret+0x3a>
    {
        /* SHA-256 */
        ctx->state[0] = 0x6A09E667;
        ctx->state[1] = 0xBB67AE85;
    3ac8:	4a19      	ldr	r2, [pc, #100]	; (3b30 <mbedtls_sha256_starts_ret+0x70>)
    3aca:	4b1a      	ldr	r3, [pc, #104]	; (3b34 <mbedtls_sha256_starts_ret+0x74>)
        ctx->state[2] = 0x3C6EF372;
        ctx->state[3] = 0xA54FF53A;
    3acc:	f8df c068 	ldr.w	ip, [pc, #104]	; 3b38 <mbedtls_sha256_starts_ret+0x78>
        ctx->state[1] = 0xBB67AE85;
    3ad0:	e9c0 2302 	strd	r2, r3, [r0, #8]
        ctx->state[3] = 0xA54FF53A;
    3ad4:	4b19      	ldr	r3, [pc, #100]	; (3b3c <mbedtls_sha256_starts_ret+0x7c>)
        ctx->state[4] = 0x510E527F;
        ctx->state[5] = 0x9B05688C;
    3ad6:	4a1a      	ldr	r2, [pc, #104]	; (3b40 <mbedtls_sha256_starts_ret+0x80>)
        ctx->state[3] = 0xA54FF53A;
    3ad8:	e9c0 c304 	strd	ip, r3, [r0, #16]
        ctx->state[5] = 0x9B05688C;
    3adc:	4b19      	ldr	r3, [pc, #100]	; (3b44 <mbedtls_sha256_starts_ret+0x84>)
    3ade:	e9c0 2306 	strd	r2, r3, [r0, #24]
        ctx->state[6] = 0x1F83D9AB;
    3ae2:	4b19      	ldr	r3, [pc, #100]	; (3b48 <mbedtls_sha256_starts_ret+0x88>)
    3ae4:	6203      	str	r3, [r0, #32]
        ctx->state[7] = 0x5BE0CD19;
    3ae6:	f103 5374 	add.w	r3, r3, #1023410176	; 0x3d000000
    3aea:	f5a3 0323 	sub.w	r3, r3, #10682368	; 0xa30000
    3aee:	f6a3 4392 	subw	r3, r3, #3218	; 0xc92
        ctx->state[2] = 0x3070DD17;
        ctx->state[3] = 0xF70E5939;
        ctx->state[4] = 0xFFC00B31;
        ctx->state[5] = 0x68581511;
        ctx->state[6] = 0x64F98FA7;
        ctx->state[7] = 0xBEFA4FA4;
    3af2:	6243      	str	r3, [r0, #36]	; 0x24
    }

    ctx->is224 = is224;
    3af4:	6681      	str	r1, [r0, #104]	; 0x68

    return( 0 );
}
    3af6:	2000      	movs	r0, #0
    3af8:	4770      	bx	lr
        ctx->state[1] = 0x367CD507;
    3afa:	4b14      	ldr	r3, [pc, #80]	; (3b4c <mbedtls_sha256_starts_ret+0x8c>)
    3afc:	4a14      	ldr	r2, [pc, #80]	; (3b50 <mbedtls_sha256_starts_ret+0x90>)
        ctx->state[4] = 0xFFC00B31;
    3afe:	f8df c054 	ldr.w	ip, [pc, #84]	; 3b54 <mbedtls_sha256_starts_ret+0x94>
        ctx->state[1] = 0x367CD507;
    3b02:	e9c0 2302 	strd	r2, r3, [r0, #8]
        ctx->state[2] = 0x3070DD17;
    3b06:	f103 4379 	add.w	r3, r3, #4177526784	; 0xf9000000
    3b0a:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
    3b0e:	f503 6301 	add.w	r3, r3, #2064	; 0x810
    3b12:	6103      	str	r3, [r0, #16]
        ctx->state[4] = 0xFFC00B31;
    3b14:	4b10      	ldr	r3, [pc, #64]	; (3b58 <mbedtls_sha256_starts_ret+0x98>)
    3b16:	e9c0 c305 	strd	ip, r3, [r0, #20]
        ctx->state[5] = 0x68581511;
    3b1a:	f103 43d1 	add.w	r3, r3, #1753219072	; 0x68800000
    3b1e:	f503 13c0 	add.w	r3, r3, #1572864	; 0x180000
    3b22:	f503 631e 	add.w	r3, r3, #2528	; 0x9e0
    3b26:	61c3      	str	r3, [r0, #28]
        ctx->state[6] = 0x64F98FA7;
    3b28:	4b0c      	ldr	r3, [pc, #48]	; (3b5c <mbedtls_sha256_starts_ret+0x9c>)
    3b2a:	6203      	str	r3, [r0, #32]
        ctx->state[7] = 0xBEFA4FA4;
    3b2c:	4b0c      	ldr	r3, [pc, #48]	; (3b60 <mbedtls_sha256_starts_ret+0xa0>)
    3b2e:	e7e0      	b.n	3af2 <mbedtls_sha256_starts_ret+0x32>
    3b30:	6a09e667 	.word	0x6a09e667
    3b34:	bb67ae85 	.word	0xbb67ae85
    3b38:	3c6ef372 	.word	0x3c6ef372
    3b3c:	a54ff53a 	.word	0xa54ff53a
    3b40:	510e527f 	.word	0x510e527f
    3b44:	9b05688c 	.word	0x9b05688c
    3b48:	1f83d9ab 	.word	0x1f83d9ab
    3b4c:	367cd507 	.word	0x367cd507
    3b50:	c1059ed8 	.word	0xc1059ed8
    3b54:	f70e5939 	.word	0xf70e5939
    3b58:	ffc00b31 	.word	0xffc00b31
    3b5c:	64f98fa7 	.word	0x64f98fa7
    3b60:	befa4fa4 	.word	0xbefa4fa4

00003b64 <mbedtls_internal_sha256_process>:
        (d) += local.temp1; (h) = local.temp1 + local.temp2;        \
    } while( 0 )

int mbedtls_internal_sha256_process( mbedtls_sha256_context *ctx,
                                const unsigned char data[64] )
{
    3b64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3b68:	b0d3      	sub	sp, #332	; 0x14c
    3b6a:	f100 0308 	add.w	r3, r0, #8
    3b6e:	9304      	str	r3, [sp, #16]
    3b70:	ab4a      	add	r3, sp, #296	; 0x128
    3b72:	9305      	str	r3, [sp, #20]
    3b74:	f100 0328 	add.w	r3, r0, #40	; 0x28
    3b78:	9306      	str	r3, [sp, #24]
    3b7a:	e9dd 3204 	ldrd	r3, r2, [sp, #16]

    SHA256_VALIDATE_RET( ctx != NULL );
    SHA256_VALIDATE_RET( (const unsigned char *)data != NULL );

    for( i = 0; i < 8; i++ )
        local.A[i] = ctx->state[i];
    3b7e:	f853 0b04 	ldr.w	r0, [r3], #4
    3b82:	f842 0b04 	str.w	r0, [r2], #4
    for( i = 0; i < 8; i++ )
    3b86:	9806      	ldr	r0, [sp, #24]
    3b88:	4298      	cmp	r0, r3
    3b8a:	d1f8      	bne.n	3b7e <mbedtls_internal_sha256_process+0x1a>
    3b8c:	aa0a      	add	r2, sp, #40	; 0x28
    3b8e:	f101 0040 	add.w	r0, r1, #64	; 0x40
        local.A[2] = local.A[1]; local.A[1] = local.A[0];
        local.A[0] = local.temp1;
    }
#else /* MBEDTLS_SHA256_SMALLER */
    for( i = 0; i < 16; i++ )
        GET_UINT32_BE( local.W[i], data, 4 * i );
    3b92:	784b      	ldrb	r3, [r1, #1]
    3b94:	780c      	ldrb	r4, [r1, #0]
    3b96:	041b      	lsls	r3, r3, #16
    3b98:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
    3b9c:	78cc      	ldrb	r4, [r1, #3]
    3b9e:	4323      	orrs	r3, r4
    3ba0:	788c      	ldrb	r4, [r1, #2]
    for( i = 0; i < 16; i++ )
    3ba2:	3104      	adds	r1, #4
        GET_UINT32_BE( local.W[i], data, 4 * i );
    3ba4:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    for( i = 0; i < 16; i++ )
    3ba8:	4288      	cmp	r0, r1
        GET_UINT32_BE( local.W[i], data, 4 * i );
    3baa:	f842 3b04 	str.w	r3, [r2], #4
    for( i = 0; i < 16; i++ )
    3bae:	d1f0      	bne.n	3b92 <mbedtls_internal_sha256_process+0x2e>
    3bb0:	9b50      	ldr	r3, [sp, #320]	; 0x140
    3bb2:	48a4      	ldr	r0, [pc, #656]	; (3e44 <mbedtls_internal_sha256_process+0x2e0>)
    3bb4:	9300      	str	r3, [sp, #0]
    3bb6:	e9dd 724a 	ldrd	r7, r2, [sp, #296]	; 0x128
    3bba:	e9dd 314c 	ldrd	r3, r1, [sp, #304]	; 0x130
    3bbe:	f10d 0b20 	add.w	fp, sp, #32
    3bc2:	f8dd c144 	ldr.w	ip, [sp, #324]	; 0x144
    3bc6:	f8dd a138 	ldr.w	sl, [sp, #312]	; 0x138
    3bca:	9e4f      	ldr	r6, [sp, #316]	; 0x13c
    3bcc:	9001      	str	r0, [sp, #4]
    3bce:	46de      	mov	lr, fp
    3bd0:	4681      	mov	r9, r0

    for( i = 0; i < 16; i += 8 )
    {
        P( local.A[0], local.A[1], local.A[2], local.A[3], local.A[4],
    3bd2:	f8de 4008 	ldr.w	r4, [lr, #8]
    3bd6:	f8d9 0000 	ldr.w	r0, [r9]
    3bda:	ea4f 25fa 	mov.w	r5, sl, ror #11
    3bde:	ea85 15ba 	eor.w	r5, r5, sl, ror #6
    3be2:	4420      	add	r0, r4
    3be4:	ea85 657a 	eor.w	r5, r5, sl, ror #25
    3be8:	4405      	add	r5, r0
    3bea:	9800      	ldr	r0, [sp, #0]
    3bec:	9c00      	ldr	r4, [sp, #0]
    3bee:	4070      	eors	r0, r6
    3bf0:	ea00 000a 	and.w	r0, r0, sl
    3bf4:	4060      	eors	r0, r4
    3bf6:	4405      	add	r5, r0
    3bf8:	ea47 0402 	orr.w	r4, r7, r2
    3bfc:	ea4f 3077 	mov.w	r0, r7, ror #13
    3c00:	44ac      	add	ip, r5
    3c02:	ea80 00b7 	eor.w	r0, r0, r7, ror #2
    3c06:	ea07 0502 	and.w	r5, r7, r2
    3c0a:	401c      	ands	r4, r3
    3c0c:	ea80 50b7 	eor.w	r0, r0, r7, ror #22
    3c10:	432c      	orrs	r4, r5
    3c12:	4404      	add	r4, r0
           local.A[5], local.A[6], local.A[7], local.W[i+0], K[i+0] );
        P( local.A[7], local.A[0], local.A[1], local.A[2], local.A[3],
    3c14:	f8d9 5004 	ldr.w	r5, [r9, #4]
    3c18:	f8de 000c 	ldr.w	r0, [lr, #12]
    3c1c:	4405      	add	r5, r0
    3c1e:	9800      	ldr	r0, [sp, #0]
        P( local.A[0], local.A[1], local.A[2], local.A[3], local.A[4],
    3c20:	4461      	add	r1, ip
    3c22:	44a4      	add	ip, r4
        P( local.A[7], local.A[0], local.A[1], local.A[2], local.A[3],
    3c24:	ea8a 0406 	eor.w	r4, sl, r6
    3c28:	4405      	add	r5, r0
    3c2a:	400c      	ands	r4, r1
    3c2c:	ea4f 20f1 	mov.w	r0, r1, ror #11
    3c30:	4074      	eors	r4, r6
    3c32:	ea80 10b1 	eor.w	r0, r0, r1, ror #6
    3c36:	4425      	add	r5, r4
    3c38:	ea80 6071 	eor.w	r0, r0, r1, ror #25
    3c3c:	4428      	add	r0, r5
    3c3e:	ea4c 0407 	orr.w	r4, ip, r7
    3c42:	ea4f 357c 	mov.w	r5, ip, ror #13
    3c46:	ea0c 0807 	and.w	r8, ip, r7
    3c4a:	ea85 05bc 	eor.w	r5, r5, ip, ror #2
    3c4e:	4014      	ands	r4, r2
    3c50:	ea44 0408 	orr.w	r4, r4, r8
    3c54:	ea85 55bc 	eor.w	r5, r5, ip, ror #22
    3c58:	4425      	add	r5, r4
    3c5a:	4405      	add	r5, r0
    3c5c:	4403      	add	r3, r0
           local.A[4], local.A[5], local.A[6], local.W[i+1], K[i+1] );
        P( local.A[6], local.A[7], local.A[0], local.A[1], local.A[2],
    3c5e:	f8d9 4008 	ldr.w	r4, [r9, #8]
    3c62:	f8de 0010 	ldr.w	r0, [lr, #16]
    3c66:	4404      	add	r4, r0
    3c68:	4426      	add	r6, r4
    3c6a:	ea81 040a 	eor.w	r4, r1, sl
    3c6e:	401c      	ands	r4, r3
    3c70:	ea84 080a 	eor.w	r8, r4, sl
    3c74:	eb06 0408 	add.w	r4, r6, r8
    3c78:	ea4f 26f3 	mov.w	r6, r3, ror #11
    3c7c:	ea86 16b3 	eor.w	r6, r6, r3, ror #6
    3c80:	ea86 6673 	eor.w	r6, r6, r3, ror #25
    3c84:	4426      	add	r6, r4
    3c86:	ea4c 0005 	orr.w	r0, ip, r5
    3c8a:	ea4f 3475 	mov.w	r4, r5, ror #13
    3c8e:	ea0c 0805 	and.w	r8, ip, r5
    3c92:	ea84 04b5 	eor.w	r4, r4, r5, ror #2
    3c96:	4038      	ands	r0, r7
    3c98:	ea40 0008 	orr.w	r0, r0, r8
    3c9c:	ea84 54b5 	eor.w	r4, r4, r5, ror #22
    3ca0:	4404      	add	r4, r0
    3ca2:	4434      	add	r4, r6
    3ca4:	4432      	add	r2, r6
           local.A[3], local.A[4], local.A[5], local.W[i+2], K[i+2] );
        P( local.A[5], local.A[6], local.A[7], local.A[0], local.A[1],
    3ca6:	f8d9 000c 	ldr.w	r0, [r9, #12]
    3caa:	f8de 6014 	ldr.w	r6, [lr, #20]
    3cae:	4430      	add	r0, r6
    3cb0:	4482      	add	sl, r0
    3cb2:	ea81 0003 	eor.w	r0, r1, r3
    3cb6:	4010      	ands	r0, r2
    3cb8:	ea80 0801 	eor.w	r8, r0, r1
    3cbc:	eb0a 0008 	add.w	r0, sl, r8
    3cc0:	ea4f 2af2 	mov.w	sl, r2, ror #11
    3cc4:	ea8a 1ab2 	eor.w	sl, sl, r2, ror #6
    3cc8:	ea8a 6a72 	eor.w	sl, sl, r2, ror #25
    3ccc:	4482      	add	sl, r0
    3cce:	ea45 0604 	orr.w	r6, r5, r4
    3cd2:	ea4f 3074 	mov.w	r0, r4, ror #13
    3cd6:	eb0a 0807 	add.w	r8, sl, r7
    3cda:	ea80 00b4 	eor.w	r0, r0, r4, ror #2
    3cde:	ea05 0704 	and.w	r7, r5, r4
    3ce2:	ea06 060c 	and.w	r6, r6, ip
    3ce6:	433e      	orrs	r6, r7
    3ce8:	ea80 50b4 	eor.w	r0, r0, r4, ror #22
           local.A[2], local.A[3], local.A[4], local.W[i+3], K[i+3] );
        P( local.A[4], local.A[5], local.A[6], local.A[7], local.A[0],
    3cec:	f8de 7018 	ldr.w	r7, [lr, #24]
        P( local.A[5], local.A[6], local.A[7], local.A[0], local.A[1],
    3cf0:	4430      	add	r0, r6
        P( local.A[4], local.A[5], local.A[6], local.A[7], local.A[0],
    3cf2:	f8d9 6010 	ldr.w	r6, [r9, #16]
        P( local.A[5], local.A[6], local.A[7], local.A[0], local.A[1],
    3cf6:	4450      	add	r0, sl
        P( local.A[4], local.A[5], local.A[6], local.A[7], local.A[0],
    3cf8:	443e      	add	r6, r7
    3cfa:	ea83 0a02 	eor.w	sl, r3, r2
    3cfe:	4431      	add	r1, r6
    3d00:	ea0a 0a08 	and.w	sl, sl, r8
    3d04:	ea4f 26f8 	mov.w	r6, r8, ror #11
    3d08:	ea8a 0a03 	eor.w	sl, sl, r3
    3d0c:	ea86 16b8 	eor.w	r6, r6, r8, ror #6
    3d10:	4451      	add	r1, sl
    3d12:	ea86 6678 	eor.w	r6, r6, r8, ror #25
    3d16:	440e      	add	r6, r1
    3d18:	ea44 0700 	orr.w	r7, r4, r0
    3d1c:	ea4f 3170 	mov.w	r1, r0, ror #13
    3d20:	ea04 0a00 	and.w	sl, r4, r0
    3d24:	ea81 01b0 	eor.w	r1, r1, r0, ror #2
    3d28:	402f      	ands	r7, r5
    3d2a:	ea47 070a 	orr.w	r7, r7, sl
    3d2e:	ea81 51b0 	eor.w	r1, r1, r0, ror #22
    3d32:	4439      	add	r1, r7
    3d34:	4431      	add	r1, r6
    3d36:	44b4      	add	ip, r6
           local.A[1], local.A[2], local.A[3], local.W[i+4], K[i+4] );
        P( local.A[3], local.A[4], local.A[5], local.A[6], local.A[7],
    3d38:	f8de 701c 	ldr.w	r7, [lr, #28]
    3d3c:	f8d9 6014 	ldr.w	r6, [r9, #20]
    3d40:	ea82 0a08 	eor.w	sl, r2, r8
    3d44:	443e      	add	r6, r7
    3d46:	4433      	add	r3, r6
    3d48:	ea0a 0a0c 	and.w	sl, sl, ip
    3d4c:	ea4f 26fc 	mov.w	r6, ip, ror #11
    3d50:	ea8a 0a02 	eor.w	sl, sl, r2
    3d54:	ea86 16bc 	eor.w	r6, r6, ip, ror #6
    3d58:	4453      	add	r3, sl
    3d5a:	ea86 667c 	eor.w	r6, r6, ip, ror #25
    3d5e:	441e      	add	r6, r3
    3d60:	19ab      	adds	r3, r5, r6
    3d62:	9300      	str	r3, [sp, #0]
    3d64:	ea40 0501 	orr.w	r5, r0, r1
    3d68:	ea4f 3371 	mov.w	r3, r1, ror #13
    3d6c:	ea00 0701 	and.w	r7, r0, r1
    3d70:	4025      	ands	r5, r4
    3d72:	ea83 03b1 	eor.w	r3, r3, r1, ror #2
    3d76:	433d      	orrs	r5, r7
    3d78:	ea83 53b1 	eor.w	r3, r3, r1, ror #22
    3d7c:	442b      	add	r3, r5
    3d7e:	4433      	add	r3, r6
           local.A[0], local.A[1], local.A[2], local.W[i+5], K[i+5] );
        P( local.A[2], local.A[3], local.A[4], local.A[5], local.A[6],
    3d80:	f8d9 5018 	ldr.w	r5, [r9, #24]
    3d84:	f8de 6020 	ldr.w	r6, [lr, #32]
    3d88:	4435      	add	r5, r6
    3d8a:	442a      	add	r2, r5
    3d8c:	9d00      	ldr	r5, [sp, #0]
    3d8e:	9e00      	ldr	r6, [sp, #0]
    3d90:	ea88 070c 	eor.w	r7, r8, ip
    3d94:	402f      	ands	r7, r5
    3d96:	ea4f 25f5 	mov.w	r5, r5, ror #11
    3d9a:	ea87 0708 	eor.w	r7, r7, r8
    3d9e:	ea85 15b6 	eor.w	r5, r5, r6, ror #6
    3da2:	443a      	add	r2, r7
    3da4:	ea85 6576 	eor.w	r5, r5, r6, ror #25
    3da8:	4415      	add	r5, r2
    3daa:	1966      	adds	r6, r4, r5
    3dac:	ea4f 3273 	mov.w	r2, r3, ror #13
    3db0:	ea41 0403 	orr.w	r4, r1, r3
    3db4:	4004      	ands	r4, r0
    3db6:	ea01 0703 	and.w	r7, r1, r3
    3dba:	ea82 02b3 	eor.w	r2, r2, r3, ror #2
    3dbe:	433c      	orrs	r4, r7
    3dc0:	ea82 52b3 	eor.w	r2, r2, r3, ror #22
    3dc4:	4422      	add	r2, r4
    3dc6:	442a      	add	r2, r5
           local.A[7], local.A[0], local.A[1], local.W[i+6], K[i+6] );
        P( local.A[1], local.A[2], local.A[3], local.A[4], local.A[5],
    3dc8:	f8d9 401c 	ldr.w	r4, [r9, #28]
    3dcc:	f8de 5024 	ldr.w	r5, [lr, #36]	; 0x24
    3dd0:	442c      	add	r4, r5
    3dd2:	44a0      	add	r8, r4
    3dd4:	9c00      	ldr	r4, [sp, #0]
    3dd6:	ea8c 0404 	eor.w	r4, ip, r4
    3dda:	4034      	ands	r4, r6
    3ddc:	ea84 070c 	eor.w	r7, r4, ip
    3de0:	eb08 0407 	add.w	r4, r8, r7
    3de4:	ea4f 28f6 	mov.w	r8, r6, ror #11
    3de8:	ea88 18b6 	eor.w	r8, r8, r6, ror #6
    3dec:	ea4f 3572 	mov.w	r5, r2, ror #13
    3df0:	ea88 6876 	eor.w	r8, r8, r6, ror #25
    3df4:	ea85 05b2 	eor.w	r5, r5, r2, ror #2
    3df8:	ea43 0702 	orr.w	r7, r3, r2
    3dfc:	4444      	add	r4, r8
    3dfe:	400f      	ands	r7, r1
    3e00:	ea85 58b2 	eor.w	r8, r5, r2, ror #22
    3e04:	ea03 0502 	and.w	r5, r3, r2
    3e08:	433d      	orrs	r5, r7
    3e0a:	eb00 0a04 	add.w	sl, r0, r4
    for( i = 0; i < 16; i += 8 )
    3e0e:	f10e 0e20 	add.w	lr, lr, #32
    3e12:	a818      	add	r0, sp, #96	; 0x60
        P( local.A[1], local.A[2], local.A[3], local.A[4], local.A[5],
    3e14:	4445      	add	r5, r8
    for( i = 0; i < 16; i += 8 )
    3e16:	4570      	cmp	r0, lr
        P( local.A[1], local.A[2], local.A[3], local.A[4], local.A[5],
    3e18:	eb04 0705 	add.w	r7, r4, r5
    for( i = 0; i < 16; i += 8 )
    3e1c:	f109 0920 	add.w	r9, r9, #32
    3e20:	f47f aed7 	bne.w	3bd2 <mbedtls_internal_sha256_process+0x6e>
    3e24:	9800      	ldr	r0, [sp, #0]
    3e26:	f8cd c144 	str.w	ip, [sp, #324]	; 0x144
    3e2a:	e9cd 724a 	strd	r7, r2, [sp, #296]	; 0x128
    3e2e:	e9cd 314c 	strd	r3, r1, [sp, #304]	; 0x130
    3e32:	e9cd 4508 	strd	r4, r5, [sp, #32]
    3e36:	e9cd 604f 	strd	r6, r0, [sp, #316]	; 0x13c
    3e3a:	a838      	add	r0, sp, #224	; 0xe0
    3e3c:	f8cd a138 	str.w	sl, [sp, #312]	; 0x138
    3e40:	9007      	str	r0, [sp, #28]
    3e42:	e001      	b.n	3e48 <mbedtls_internal_sha256_process+0x2e4>
    3e44:	00007090 	.word	0x00007090
           local.A[6], local.A[7], local.A[0], local.W[i+7], K[i+7] );
    }

    for( i = 16; i < 64; i += 8 )
    {
        P( local.A[0], local.A[1], local.A[2], local.A[3], local.A[4],
    3e48:	f8db 0040 	ldr.w	r0, [fp, #64]	; 0x40
    3e4c:	f8db 500c 	ldr.w	r5, [fp, #12]
    3e50:	f8db 4008 	ldr.w	r4, [fp, #8]
    3e54:	ea4f 4ef0 	mov.w	lr, r0, ror #19
    3e58:	ea8e 4e70 	eor.w	lr, lr, r0, ror #17
    3e5c:	ea8e 2e90 	eor.w	lr, lr, r0, lsr #10
    3e60:	f8db 002c 	ldr.w	r0, [fp, #44]	; 0x2c
    3e64:	ea4f 48b5 	mov.w	r8, r5, ror #18
    3e68:	4404      	add	r4, r0
    3e6a:	ea88 18f5 	eor.w	r8, r8, r5, ror #7
    3e6e:	44a6      	add	lr, r4
    3e70:	ea88 08d5 	eor.w	r8, r8, r5, lsr #3
    3e74:	eb0e 0008 	add.w	r0, lr, r8
    3e78:	9003      	str	r0, [sp, #12]
    3e7a:	ea4f 24fa 	mov.w	r4, sl, ror #11
    3e7e:	9800      	ldr	r0, [sp, #0]
    3e80:	ea84 14ba 	eor.w	r4, r4, sl, ror #6
    3e84:	ea84 6e7a 	eor.w	lr, r4, sl, ror #25
    3e88:	ea80 0406 	eor.w	r4, r0, r6
    3e8c:	ea04 040a 	and.w	r4, r4, sl
    3e90:	4044      	eors	r4, r0
    3e92:	9801      	ldr	r0, [sp, #4]
    3e94:	6c00      	ldr	r0, [r0, #64]	; 0x40
    3e96:	4474      	add	r4, lr
    3e98:	4420      	add	r0, r4
    3e9a:	9c03      	ldr	r4, [sp, #12]
    3e9c:	f8cb 4048 	str.w	r4, [fp, #72]	; 0x48
    3ea0:	4420      	add	r0, r4
    3ea2:	4484      	add	ip, r0
    3ea4:	eb01 080c 	add.w	r8, r1, ip
    3ea8:	ea47 0002 	orr.w	r0, r7, r2
    3eac:	ea4f 3177 	mov.w	r1, r7, ror #13
    3eb0:	ea07 0402 	and.w	r4, r7, r2
    3eb4:	ea81 01b7 	eor.w	r1, r1, r7, ror #2
    3eb8:	4018      	ands	r0, r3
    3eba:	ea81 51b7 	eor.w	r1, r1, r7, ror #22
    3ebe:	4320      	orrs	r0, r4
    3ec0:	4408      	add	r0, r1
           local.A[5], local.A[6], local.A[7], R(i+0), K[i+0] );
        P( local.A[7], local.A[0], local.A[1], local.A[2], local.A[3],
    3ec2:	f8db 1044 	ldr.w	r1, [fp, #68]	; 0x44
    3ec6:	f8db 4010 	ldr.w	r4, [fp, #16]
        P( local.A[0], local.A[1], local.A[2], local.A[3], local.A[4],
    3eca:	4484      	add	ip, r0
        P( local.A[7], local.A[0], local.A[1], local.A[2], local.A[3],
    3ecc:	ea4f 40f1 	mov.w	r0, r1, ror #19
    3ed0:	ea80 4071 	eor.w	r0, r0, r1, ror #17
    3ed4:	ea80 2091 	eor.w	r0, r0, r1, lsr #10
    3ed8:	f8db 1030 	ldr.w	r1, [fp, #48]	; 0x30
    3edc:	4429      	add	r1, r5
    3ede:	4408      	add	r0, r1
    3ee0:	ea4f 41b4 	mov.w	r1, r4, ror #18
    3ee4:	ea81 11f4 	eor.w	r1, r1, r4, ror #7
    3ee8:	ea81 01d4 	eor.w	r1, r1, r4, lsr #3
    3eec:	4401      	add	r1, r0
    3eee:	9801      	ldr	r0, [sp, #4]
    3ef0:	9d00      	ldr	r5, [sp, #0]
    3ef2:	6c40      	ldr	r0, [r0, #68]	; 0x44
    3ef4:	f8cb 104c 	str.w	r1, [fp, #76]	; 0x4c
    3ef8:	ea8a 0e06 	eor.w	lr, sl, r6
    3efc:	ea0e 0e08 	and.w	lr, lr, r8
    3f00:	4428      	add	r0, r5
    3f02:	ea4f 25f8 	mov.w	r5, r8, ror #11
    3f06:	4408      	add	r0, r1
    3f08:	ea8e 0e06 	eor.w	lr, lr, r6
    3f0c:	ea85 15b8 	eor.w	r5, r5, r8, ror #6
    3f10:	ea85 6578 	eor.w	r5, r5, r8, ror #25
    3f14:	4486      	add	lr, r0
    3f16:	eb05 000e 	add.w	r0, r5, lr
    3f1a:	4403      	add	r3, r0
    3f1c:	9300      	str	r3, [sp, #0]
    3f1e:	ea4f 357c 	mov.w	r5, ip, ror #13
    3f22:	ea47 030c 	orr.w	r3, r7, ip
    3f26:	ea07 0e0c 	and.w	lr, r7, ip
    3f2a:	ea85 05bc 	eor.w	r5, r5, ip, ror #2
    3f2e:	4013      	ands	r3, r2
    3f30:	ea43 030e 	orr.w	r3, r3, lr
    3f34:	ea85 55bc 	eor.w	r5, r5, ip, ror #22
    3f38:	441d      	add	r5, r3
           local.A[4], local.A[5], local.A[6], R(i+1), K[i+1] );
        P( local.A[6], local.A[7], local.A[0], local.A[1], local.A[2],
    3f3a:	9b03      	ldr	r3, [sp, #12]
    3f3c:	ea4f 4ef3 	mov.w	lr, r3, ror #19
    3f40:	ea8e 4e73 	eor.w	lr, lr, r3, ror #17
    3f44:	ea8e 2e93 	eor.w	lr, lr, r3, lsr #10
    3f48:	f8db 3034 	ldr.w	r3, [fp, #52]	; 0x34
    3f4c:	4423      	add	r3, r4
    3f4e:	9c00      	ldr	r4, [sp, #0]
        P( local.A[7], local.A[0], local.A[1], local.A[2], local.A[3],
    3f50:	4405      	add	r5, r0
        P( local.A[6], local.A[7], local.A[0], local.A[1], local.A[2],
    3f52:	ea8a 0908 	eor.w	r9, sl, r8
    3f56:	f8db 0014 	ldr.w	r0, [fp, #20]
    3f5a:	ea09 0904 	and.w	r9, r9, r4
    3f5e:	9c01      	ldr	r4, [sp, #4]
    3f60:	449e      	add	lr, r3
    3f62:	ea4f 43b0 	mov.w	r3, r0, ror #18
    3f66:	6ca4      	ldr	r4, [r4, #72]	; 0x48
    3f68:	ea83 13f0 	eor.w	r3, r3, r0, ror #7
    3f6c:	ea83 03d0 	eor.w	r3, r3, r0, lsr #3
    3f70:	4473      	add	r3, lr
    3f72:	4434      	add	r4, r6
    3f74:	eb04 0e03 	add.w	lr, r4, r3
    3f78:	9c00      	ldr	r4, [sp, #0]
    3f7a:	9e00      	ldr	r6, [sp, #0]
    3f7c:	f8cb 3050 	str.w	r3, [fp, #80]	; 0x50
    3f80:	ea4f 24f4 	mov.w	r4, r4, ror #11
    3f84:	ea89 090a 	eor.w	r9, r9, sl
    3f88:	ea84 14b6 	eor.w	r4, r4, r6, ror #6
    3f8c:	ea84 6476 	eor.w	r4, r4, r6, ror #25
    3f90:	44f1      	add	r9, lr
    3f92:	eb04 0e09 	add.w	lr, r4, r9
    3f96:	4472      	add	r2, lr
    3f98:	ea4c 0605 	orr.w	r6, ip, r5
    3f9c:	ea4f 3475 	mov.w	r4, r5, ror #13
    3fa0:	9202      	str	r2, [sp, #8]
    3fa2:	ea84 04b5 	eor.w	r4, r4, r5, ror #2
    3fa6:	ea0c 0205 	and.w	r2, ip, r5
    3faa:	403e      	ands	r6, r7
    3fac:	ea84 54b5 	eor.w	r4, r4, r5, ror #22
    3fb0:	4316      	orrs	r6, r2
    3fb2:	4426      	add	r6, r4
    3fb4:	eb06 040e 	add.w	r4, r6, lr
           local.A[3], local.A[4], local.A[5], R(i+2), K[i+2] );
        P( local.A[5], local.A[6], local.A[7], local.A[0], local.A[1],
    3fb8:	ea4f 46f1 	mov.w	r6, r1, ror #19
    3fbc:	ea86 4671 	eor.w	r6, r6, r1, ror #17
    3fc0:	ea86 2191 	eor.w	r1, r6, r1, lsr #10
    3fc4:	f8db 6038 	ldr.w	r6, [fp, #56]	; 0x38
    3fc8:	f8db 2018 	ldr.w	r2, [fp, #24]
    3fcc:	4406      	add	r6, r0
    3fce:	4431      	add	r1, r6
    3fd0:	ea4f 46b2 	mov.w	r6, r2, ror #18
    3fd4:	ea86 16f2 	eor.w	r6, r6, r2, ror #7
    3fd8:	ea86 06d2 	eor.w	r6, r6, r2, lsr #3
    3fdc:	440e      	add	r6, r1
    3fde:	9900      	ldr	r1, [sp, #0]
    3fe0:	ea88 0e01 	eor.w	lr, r8, r1
    3fe4:	9902      	ldr	r1, [sp, #8]
    3fe6:	ea0e 0e01 	and.w	lr, lr, r1
    3fea:	9901      	ldr	r1, [sp, #4]
    3fec:	f8cb 6054 	str.w	r6, [fp, #84]	; 0x54
    3ff0:	6cc8      	ldr	r0, [r1, #76]	; 0x4c
    3ff2:	4450      	add	r0, sl
    3ff4:	1981      	adds	r1, r0, r6
    3ff6:	ea8e 0e08 	eor.w	lr, lr, r8
    3ffa:	448e      	add	lr, r1
    3ffc:	9902      	ldr	r1, [sp, #8]
    3ffe:	ea4f 20f1 	mov.w	r0, r1, ror #11
    4002:	ea80 10b1 	eor.w	r0, r0, r1, ror #6
    4006:	ea80 6071 	eor.w	r0, r0, r1, ror #25
    400a:	eb00 010e 	add.w	r1, r0, lr
    400e:	ea45 0a04 	orr.w	sl, r5, r4
    4012:	ea4f 3074 	mov.w	r0, r4, ror #13
    4016:	eb07 0901 	add.w	r9, r7, r1
    401a:	ea80 00b4 	eor.w	r0, r0, r4, ror #2
    401e:	ea05 0704 	and.w	r7, r5, r4
    4022:	ea0a 0a0c 	and.w	sl, sl, ip
    4026:	ea80 50b4 	eor.w	r0, r0, r4, ror #22
    402a:	ea4a 0a07 	orr.w	sl, sl, r7
    402e:	4482      	add	sl, r0
    4030:	eb0a 0001 	add.w	r0, sl, r1
           local.A[2], local.A[3], local.A[4], R(i+3), K[i+3] );
        P( local.A[4], local.A[5], local.A[6], local.A[7], local.A[0],
    4034:	ea4f 41f3 	mov.w	r1, r3, ror #19
    4038:	ea81 4173 	eor.w	r1, r1, r3, ror #17
    403c:	ea81 2393 	eor.w	r3, r1, r3, lsr #10
    4040:	f8db 103c 	ldr.w	r1, [fp, #60]	; 0x3c
    4044:	f8db 701c 	ldr.w	r7, [fp, #28]
    4048:	440a      	add	r2, r1
    404a:	4413      	add	r3, r2
    404c:	ea4f 42b7 	mov.w	r2, r7, ror #18
    4050:	ea82 12f7 	eor.w	r2, r2, r7, ror #7
    4054:	ea82 02d7 	eor.w	r2, r2, r7, lsr #3
    4058:	441a      	add	r2, r3
    405a:	9902      	ldr	r1, [sp, #8]
    405c:	9b00      	ldr	r3, [sp, #0]
    405e:	f8cb 2058 	str.w	r2, [fp, #88]	; 0x58
    4062:	ea83 0e01 	eor.w	lr, r3, r1
    4066:	ea0e 0e09 	and.w	lr, lr, r9
    406a:	ea8e 0e03 	eor.w	lr, lr, r3
    406e:	9b01      	ldr	r3, [sp, #4]
    4070:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    4072:	ea4f 21f9 	mov.w	r1, r9, ror #11
    4076:	4413      	add	r3, r2
    4078:	4443      	add	r3, r8
    407a:	ea81 11b9 	eor.w	r1, r1, r9, ror #6
    407e:	449e      	add	lr, r3
    4080:	ea81 6179 	eor.w	r1, r1, r9, ror #25
    4084:	eb01 030e 	add.w	r3, r1, lr
    4088:	ea44 0e00 	orr.w	lr, r4, r0
    408c:	ea4f 3170 	mov.w	r1, r0, ror #13
    4090:	ea04 0800 	and.w	r8, r4, r0
    4094:	ea81 01b0 	eor.w	r1, r1, r0, ror #2
    4098:	ea0e 0e05 	and.w	lr, lr, r5
    409c:	ea4e 0e08 	orr.w	lr, lr, r8
    40a0:	ea81 51b0 	eor.w	r1, r1, r0, ror #22
    40a4:	4471      	add	r1, lr
    40a6:	4419      	add	r1, r3
    40a8:	449c      	add	ip, r3
           local.A[1], local.A[2], local.A[3], R(i+4), K[i+4] );
        P( local.A[3], local.A[4], local.A[5], local.A[6], local.A[7],
    40aa:	ea4f 43f6 	mov.w	r3, r6, ror #19
    40ae:	ea83 4376 	eor.w	r3, r3, r6, ror #17
    40b2:	f8db e020 	ldr.w	lr, [fp, #32]
    40b6:	ea83 2696 	eor.w	r6, r3, r6, lsr #10
    40ba:	f8db 3040 	ldr.w	r3, [fp, #64]	; 0x40
    40be:	441f      	add	r7, r3
    40c0:	ea4f 43be 	mov.w	r3, lr, ror #18
    40c4:	ea83 13fe 	eor.w	r3, r3, lr, ror #7
    40c8:	ea83 03de 	eor.w	r3, r3, lr, lsr #3
    40cc:	4437      	add	r7, r6
    40ce:	441f      	add	r7, r3
    40d0:	9b02      	ldr	r3, [sp, #8]
    40d2:	9e00      	ldr	r6, [sp, #0]
    40d4:	f8cb 705c 	str.w	r7, [fp, #92]	; 0x5c
    40d8:	ea83 0809 	eor.w	r8, r3, r9
    40dc:	ea08 080c 	and.w	r8, r8, ip
    40e0:	ea88 0803 	eor.w	r8, r8, r3
    40e4:	9b01      	ldr	r3, [sp, #4]
    40e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    40e8:	443b      	add	r3, r7
    40ea:	4433      	add	r3, r6
    40ec:	4498      	add	r8, r3
    40ee:	ea4f 23fc 	mov.w	r3, ip, ror #11
    40f2:	ea83 13bc 	eor.w	r3, r3, ip, ror #6
    40f6:	ea83 637c 	eor.w	r3, r3, ip, ror #25
    40fa:	eb03 0608 	add.w	r6, r3, r8
    40fe:	19ab      	adds	r3, r5, r6
    4100:	9300      	str	r3, [sp, #0]
    4102:	ea40 0501 	orr.w	r5, r0, r1
    4106:	ea4f 3371 	mov.w	r3, r1, ror #13
    410a:	ea00 0801 	and.w	r8, r0, r1
    410e:	4025      	ands	r5, r4
    4110:	ea83 03b1 	eor.w	r3, r3, r1, ror #2
    4114:	ea45 0508 	orr.w	r5, r5, r8
    4118:	ea83 53b1 	eor.w	r3, r3, r1, ror #22
    411c:	442b      	add	r3, r5
    411e:	4433      	add	r3, r6
           local.A[0], local.A[1], local.A[2], R(i+5), K[i+5] );
        P( local.A[2], local.A[3], local.A[4], local.A[5], local.A[6],
    4120:	ea4f 46f2 	mov.w	r6, r2, ror #19
    4124:	ea86 4672 	eor.w	r6, r6, r2, ror #17
    4128:	f8db 8024 	ldr.w	r8, [fp, #36]	; 0x24
    412c:	ea86 2692 	eor.w	r6, r6, r2, lsr #10
    4130:	f8db 2044 	ldr.w	r2, [fp, #68]	; 0x44
    4134:	4496      	add	lr, r2
    4136:	ea4f 42b8 	mov.w	r2, r8, ror #18
    413a:	ea82 12f8 	eor.w	r2, r2, r8, ror #7
    413e:	4476      	add	r6, lr
    4140:	ea82 02d8 	eor.w	r2, r2, r8, lsr #3
    4144:	4416      	add	r6, r2
    4146:	9a00      	ldr	r2, [sp, #0]
    4148:	f8cb 6060 	str.w	r6, [fp, #96]	; 0x60
    414c:	ea89 0e0c 	eor.w	lr, r9, ip
    4150:	ea0e 0e02 	and.w	lr, lr, r2
    4154:	9a01      	ldr	r2, [sp, #4]
    4156:	6d95      	ldr	r5, [r2, #88]	; 0x58
    4158:	9a02      	ldr	r2, [sp, #8]
    415a:	4435      	add	r5, r6
    415c:	4415      	add	r5, r2
    415e:	9a00      	ldr	r2, [sp, #0]
    4160:	9e00      	ldr	r6, [sp, #0]
    4162:	ea4f 22f2 	mov.w	r2, r2, ror #11
    4166:	ea8e 0e09 	eor.w	lr, lr, r9
    416a:	ea82 12b6 	eor.w	r2, r2, r6, ror #6
    416e:	ea82 6276 	eor.w	r2, r2, r6, ror #25
    4172:	4475      	add	r5, lr
    4174:	4415      	add	r5, r2
    4176:	1966      	adds	r6, r4, r5
    4178:	ea4f 3273 	mov.w	r2, r3, ror #13
    417c:	ea41 0403 	orr.w	r4, r1, r3
    4180:	4004      	ands	r4, r0
    4182:	ea01 0e03 	and.w	lr, r1, r3
    4186:	ea82 02b3 	eor.w	r2, r2, r3, ror #2
    418a:	ea44 040e 	orr.w	r4, r4, lr
    418e:	ea82 52b3 	eor.w	r2, r2, r3, ror #22
    4192:	4422      	add	r2, r4
           local.A[7], local.A[0], local.A[1], R(i+6), K[i+6] );
        P( local.A[1], local.A[2], local.A[3], local.A[4], local.A[5],
    4194:	ea4f 44f7 	mov.w	r4, r7, ror #19
    4198:	ea84 4477 	eor.w	r4, r4, r7, ror #17
    419c:	ea84 2797 	eor.w	r7, r4, r7, lsr #10
    41a0:	9c03      	ldr	r4, [sp, #12]
        P( local.A[2], local.A[3], local.A[4], local.A[5], local.A[6],
    41a2:	442a      	add	r2, r5
        P( local.A[1], local.A[2], local.A[3], local.A[4], local.A[5],
    41a4:	f8db 5028 	ldr.w	r5, [fp, #40]	; 0x28
    41a8:	4444      	add	r4, r8
    41aa:	4427      	add	r7, r4
    41ac:	ea4f 44b5 	mov.w	r4, r5, ror #18
    41b0:	ea84 14f5 	eor.w	r4, r4, r5, ror #7
    41b4:	ea84 04d5 	eor.w	r4, r4, r5, lsr #3
    41b8:	443c      	add	r4, r7
    41ba:	9f01      	ldr	r7, [sp, #4]
    41bc:	9d00      	ldr	r5, [sp, #0]
    41be:	6dff      	ldr	r7, [r7, #92]	; 0x5c
    41c0:	f8cb 4064 	str.w	r4, [fp, #100]	; 0x64
    41c4:	ea8c 0505 	eor.w	r5, ip, r5
    41c8:	4427      	add	r7, r4
    41ca:	4035      	ands	r5, r6
    41cc:	ea4f 24f6 	mov.w	r4, r6, ror #11
    41d0:	ea85 050c 	eor.w	r5, r5, ip
    41d4:	444f      	add	r7, r9
    41d6:	ea84 14b6 	eor.w	r4, r4, r6, ror #6
    41da:	442f      	add	r7, r5
    41dc:	ea84 6476 	eor.w	r4, r4, r6, ror #25
    41e0:	443c      	add	r4, r7
    41e2:	eb00 0a04 	add.w	sl, r0, r4
    for( i = 16; i < 64; i += 8 )
    41e6:	9801      	ldr	r0, [sp, #4]
        P( local.A[1], local.A[2], local.A[3], local.A[4], local.A[5],
    41e8:	ea4f 3572 	mov.w	r5, r2, ror #13
    41ec:	ea85 05b2 	eor.w	r5, r5, r2, ror #2
    for( i = 16; i < 64; i += 8 )
    41f0:	3020      	adds	r0, #32
        P( local.A[1], local.A[2], local.A[3], local.A[4], local.A[5],
    41f2:	ea43 0702 	orr.w	r7, r3, r2
    41f6:	ea85 5eb2 	eor.w	lr, r5, r2, ror #22
    41fa:	400f      	ands	r7, r1
    41fc:	ea03 0502 	and.w	r5, r3, r2
    for( i = 16; i < 64; i += 8 )
    4200:	9001      	str	r0, [sp, #4]
    4202:	9807      	ldr	r0, [sp, #28]
        P( local.A[1], local.A[2], local.A[3], local.A[4], local.A[5],
    4204:	433d      	orrs	r5, r7
    for( i = 16; i < 64; i += 8 )
    4206:	f10b 0b20 	add.w	fp, fp, #32
        P( local.A[1], local.A[2], local.A[3], local.A[4], local.A[5],
    420a:	4475      	add	r5, lr
    for( i = 16; i < 64; i += 8 )
    420c:	4558      	cmp	r0, fp
        P( local.A[1], local.A[2], local.A[3], local.A[4], local.A[5],
    420e:	eb04 0705 	add.w	r7, r4, r5
    for( i = 16; i < 64; i += 8 )
    4212:	f47f ae19 	bne.w	3e48 <mbedtls_internal_sha256_process+0x2e4>
    4216:	9800      	ldr	r0, [sp, #0]
    4218:	f8cd c144 	str.w	ip, [sp, #324]	; 0x144
    421c:	e9cd 604f 	strd	r6, r0, [sp, #316]	; 0x13c
    4220:	e9cd 724a 	strd	r7, r2, [sp, #296]	; 0x128
    4224:	e9cd 314c 	strd	r3, r1, [sp, #304]	; 0x130
    4228:	e9cd 4508 	strd	r4, r5, [sp, #32]
    422c:	f8cd a138 	str.w	sl, [sp, #312]	; 0x138
           local.A[6], local.A[7], local.A[0], R(i+7), K[i+7] );
    }
#endif /* MBEDTLS_SHA256_SMALLER */

    for( i = 0; i < 8; i++ )
        ctx->state[i] += local.A[i];
    4230:	9b04      	ldr	r3, [sp, #16]
    4232:	9905      	ldr	r1, [sp, #20]
    4234:	681b      	ldr	r3, [r3, #0]
    4236:	f851 2b04 	ldr.w	r2, [r1], #4
    423a:	9105      	str	r1, [sp, #20]
    423c:	4413      	add	r3, r2
    423e:	9a04      	ldr	r2, [sp, #16]
    4240:	f842 3b04 	str.w	r3, [r2], #4
    for( i = 0; i < 8; i++ )
    4244:	9b06      	ldr	r3, [sp, #24]
        ctx->state[i] += local.A[i];
    4246:	9204      	str	r2, [sp, #16]
    for( i = 0; i < 8; i++ )
    4248:	4293      	cmp	r3, r2
    424a:	d1f1      	bne.n	4230 <mbedtls_internal_sha256_process+0x6cc>

    /* Zeroise buffers and variables to clear sensitive data from memory. */
    mbedtls_platform_zeroize( &local, sizeof( local ) );
    424c:	a808      	add	r0, sp, #32
    424e:	f44f 7194 	mov.w	r1, #296	; 0x128
    4252:	f7ff fb6d 	bl	3930 <mbedtls_platform_zeroize>

    return( 0 );
}
    4256:	2000      	movs	r0, #0
    4258:	b053      	add	sp, #332	; 0x14c
    425a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    425e:	bf00      	nop

00004260 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
    4260:	b510      	push	{r4, lr}
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    4262:	4c14      	ldr	r4, [pc, #80]	; (42b4 <_DoInit+0x54>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
    4264:	4a14      	ldr	r2, [pc, #80]	; (42b8 <_DoInit+0x58>)
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
    4266:	4915      	ldr	r1, [pc, #84]	; (42bc <_DoInit+0x5c>)
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    4268:	2303      	movs	r3, #3
    426a:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
    426c:	6163      	str	r3, [r4, #20]
  p->aUp[0].pBuffer       = _acUpBuffer;
    426e:	4b14      	ldr	r3, [pc, #80]	; (42c0 <_DoInit+0x60>)
  p->aUp[0].sName         = "Terminal";
    4270:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
    4272:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
    4274:	f44f 6380 	mov.w	r3, #1024	; 0x400
    4278:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
    427a:	2300      	movs	r3, #0
    427c:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
    427e:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    4280:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].sName         = "Terminal";
    4282:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
    4284:	4a0f      	ldr	r2, [pc, #60]	; (42c4 <_DoInit+0x64>)
    4286:	6662      	str	r2, [r4, #100]	; 0x64
  STRCPY((char*)&p->acID[7], "RTT");
    4288:	1de0      	adds	r0, r4, #7
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
    428a:	2210      	movs	r2, #16
    428c:	66a2      	str	r2, [r4, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
    428e:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
    4290:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    4292:	6763      	str	r3, [r4, #116]	; 0x74
  STRCPY((char*)&p->acID[7], "RTT");
    4294:	f000 fdc9 	bl	4e2a <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
    4298:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
    429c:	490a      	ldr	r1, [pc, #40]	; (42c8 <_DoInit+0x68>)
    429e:	4620      	mov	r0, r4
    42a0:	f000 fdc3 	bl	4e2a <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
    42a4:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
    42a8:	2320      	movs	r3, #32
    42aa:	71a3      	strb	r3, [r4, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
    42ac:	f3bf 8f5f 	dmb	sy
}
    42b0:	bd10      	pop	{r4, pc}
    42b2:	bf00      	nop
    42b4:	20000e64 	.word	0x20000e64
    42b8:	00007d1e 	.word	0x00007d1e
    42bc:	00007d27 	.word	0x00007d27
    42c0:	2000283f 	.word	0x2000283f
    42c4:	2000282f 	.word	0x2000282f
    42c8:	00007d2b 	.word	0x00007d2b

000042cc <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    42cc:	4b0e      	ldr	r3, [pc, #56]	; (4308 <z_sys_init_run_level+0x3c>)
{
    42ce:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    42d0:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    42d4:	3001      	adds	r0, #1
    42d6:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    42da:	42a6      	cmp	r6, r4
    42dc:	d800      	bhi.n	42e0 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
    42de:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
    42e0:	e9d4 3500 	ldrd	r3, r5, [r4]
    42e4:	4628      	mov	r0, r5
    42e6:	4798      	blx	r3
		if (dev != NULL) {
    42e8:	b165      	cbz	r5, 4304 <z_sys_init_run_level+0x38>
				dev->state->init_res = rc;
    42ea:	68eb      	ldr	r3, [r5, #12]
			if (rc != 0) {
    42ec:	b130      	cbz	r0, 42fc <z_sys_init_run_level+0x30>
				if (rc < 0) {
    42ee:	2800      	cmp	r0, #0
    42f0:	bfb8      	it	lt
    42f2:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
    42f4:	28ff      	cmp	r0, #255	; 0xff
    42f6:	bfa8      	it	ge
    42f8:	20ff      	movge	r0, #255	; 0xff
    42fa:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
    42fc:	785a      	ldrb	r2, [r3, #1]
    42fe:	f042 0201 	orr.w	r2, r2, #1
    4302:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    4304:	3408      	adds	r4, #8
    4306:	e7e8      	b.n	42da <z_sys_init_run_level+0xe>
    4308:	00007190 	.word	0x00007190

0000430c <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
    430c:	b570      	push	{r4, r5, r6, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
    430e:	4605      	mov	r5, r0
    4310:	b910      	cbnz	r0, 4318 <z_impl_device_get_binding+0xc>
		return NULL;
    4312:	2400      	movs	r4, #0
			return dev;
		}
	}

	return NULL;
}
    4314:	4620      	mov	r0, r4
    4316:	bd70      	pop	{r4, r5, r6, pc}
	if ((name == NULL) || (name[0] == '\0')) {
    4318:	7803      	ldrb	r3, [r0, #0]
    431a:	2b00      	cmp	r3, #0
    431c:	d0f9      	beq.n	4312 <z_impl_device_get_binding+0x6>
	for (dev = __device_start; dev != __device_end; dev++) {
    431e:	4c0e      	ldr	r4, [pc, #56]	; (4358 <z_impl_device_get_binding+0x4c>)
    4320:	4e0e      	ldr	r6, [pc, #56]	; (435c <z_impl_device_get_binding+0x50>)
    4322:	42b4      	cmp	r4, r6
    4324:	d108      	bne.n	4338 <z_impl_device_get_binding+0x2c>
	for (dev = __device_start; dev != __device_end; dev++) {
    4326:	4c0c      	ldr	r4, [pc, #48]	; (4358 <z_impl_device_get_binding+0x4c>)
    4328:	42b4      	cmp	r4, r6
    432a:	d0f2      	beq.n	4312 <z_impl_device_get_binding+0x6>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
    432c:	4620      	mov	r0, r4
    432e:	f002 fc75 	bl	6c1c <z_device_ready>
    4332:	b950      	cbnz	r0, 434a <z_impl_device_get_binding+0x3e>
	for (dev = __device_start; dev != __device_end; dev++) {
    4334:	3418      	adds	r4, #24
    4336:	e7f7      	b.n	4328 <z_impl_device_get_binding+0x1c>
		if (z_device_ready(dev) && (dev->name == name)) {
    4338:	4620      	mov	r0, r4
    433a:	f002 fc6f 	bl	6c1c <z_device_ready>
    433e:	b110      	cbz	r0, 4346 <z_impl_device_get_binding+0x3a>
    4340:	6823      	ldr	r3, [r4, #0]
    4342:	42ab      	cmp	r3, r5
    4344:	d0e6      	beq.n	4314 <z_impl_device_get_binding+0x8>
	for (dev = __device_start; dev != __device_end; dev++) {
    4346:	3418      	adds	r4, #24
    4348:	e7eb      	b.n	4322 <z_impl_device_get_binding+0x16>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
    434a:	6821      	ldr	r1, [r4, #0]
    434c:	4628      	mov	r0, r5
    434e:	f000 fd7d 	bl	4e4c <strcmp>
    4352:	2800      	cmp	r0, #0
    4354:	d1ee      	bne.n	4334 <z_impl_device_get_binding+0x28>
    4356:	e7dd      	b.n	4314 <z_impl_device_get_binding+0x8>
    4358:	00006c98 	.word	0x00006c98
    435c:	00006d10 	.word	0x00006d10

00004360 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    4360:	b573      	push	{r0, r1, r4, r5, r6, lr}
    4362:	4604      	mov	r4, r0
    4364:	460d      	mov	r5, r1
	__asm__ volatile(
    4366:	f04f 0320 	mov.w	r3, #32
    436a:	f3ef 8611 	mrs	r6, BASEPRI
    436e:	f383 8811 	msr	BASEPRI, r3
    4372:	f3bf 8f6f 	isb	sy
	switch (reason) {
    4376:	2804      	cmp	r0, #4
    4378:	bf96      	itet	ls
    437a:	4b12      	ldrls	r3, [pc, #72]	; (43c4 <z_fatal_error+0x64>)
    437c:	4b12      	ldrhi	r3, [pc, #72]	; (43c8 <z_fatal_error+0x68>)
	return 0;
    437e:	f853 3020 	ldrls.w	r3, [r3, r0, lsl #2]
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
    4382:	2200      	movs	r2, #0
    4384:	9200      	str	r2, [sp, #0]
    4386:	2145      	movs	r1, #69	; 0x45
    4388:	4602      	mov	r2, r0
    438a:	4810      	ldr	r0, [pc, #64]	; (43cc <z_fatal_error+0x6c>)
    438c:	f000 fbec 	bl	4b68 <z_log_minimal_printk>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
    4390:	b13d      	cbz	r5, 43a2 <z_fatal_error+0x42>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
    4392:	69eb      	ldr	r3, [r5, #28]
    4394:	f3c3 0308 	ubfx	r3, r3, #0, #9
    4398:	b11b      	cbz	r3, 43a2 <z_fatal_error+0x42>
		LOG_ERR("Fault during interrupt handling\n");
    439a:	480d      	ldr	r0, [pc, #52]	; (43d0 <z_fatal_error+0x70>)
    439c:	2145      	movs	r1, #69	; 0x45
    439e:	f000 fbe3 	bl	4b68 <z_log_minimal_printk>
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
    43a2:	4b0c      	ldr	r3, [pc, #48]	; (43d4 <z_fatal_error+0x74>)
    43a4:	480c      	ldr	r0, [pc, #48]	; (43d8 <z_fatal_error+0x78>)
    43a6:	2200      	movs	r2, #0
    43a8:	2145      	movs	r1, #69	; 0x45
    43aa:	f000 fbdd 	bl	4b68 <z_log_minimal_printk>
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
    43ae:	4629      	mov	r1, r5
    43b0:	4620      	mov	r0, r4
    43b2:	f7fe fd4d 	bl	2e50 <k_sys_fatal_error_handler>
	__asm__ volatile(
    43b6:	f386 8811 	msr	BASEPRI, r6
    43ba:	f3bf 8f6f 	isb	sy
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    43be:	b002      	add	sp, #8
    43c0:	bd70      	pop	{r4, r5, r6, pc}
    43c2:	bf00      	nop
    43c4:	000071a4 	.word	0x000071a4
    43c8:	00007d32 	.word	0x00007d32
    43cc:	00007d40 	.word	0x00007d40
    43d0:	00007d6d 	.word	0x00007d6d
    43d4:	00007d93 	.word	0x00007d93
    43d8:	00007d9b 	.word	0x00007d9b

000043dc <z_bss_zero>:
 * @return N/A
 */
__boot_func
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
    43dc:	4802      	ldr	r0, [pc, #8]	; (43e8 <z_bss_zero+0xc>)
    43de:	4a03      	ldr	r2, [pc, #12]	; (43ec <z_bss_zero+0x10>)
    43e0:	2100      	movs	r1, #0
    43e2:	1a12      	subs	r2, r2, r0
    43e4:	f000 bd5a 	b.w	4e9c <memset>
    43e8:	20000058 	.word	0x20000058
    43ec:	20002c40 	.word	0x20002c40

000043f0 <bg_thread_main>:
 *
 * @return N/A
 */
__boot_func
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
    43f0:	b508      	push	{r3, lr}
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
    43f2:	4b09      	ldr	r3, [pc, #36]	; (4418 <bg_thread_main+0x28>)
    43f4:	2201      	movs	r2, #1

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    43f6:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
    43f8:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    43fa:	f7ff ff67 	bl	42cc <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
    43fe:	f000 f85f 	bl	44c0 <boot_banner>
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    4402:	2003      	movs	r0, #3
    4404:	f7ff ff62 	bl	42cc <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_SMP);
#endif

	extern void main(void);

	main();
    4408:	f7fb ffea 	bl	3e0 <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    440c:	4a03      	ldr	r2, [pc, #12]	; (441c <bg_thread_main+0x2c>)
    440e:	7b13      	ldrb	r3, [r2, #12]
    4410:	f023 0301 	bic.w	r3, r3, #1
    4414:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    4416:	bd08      	pop	{r3, pc}
    4418:	20002c3f 	.word	0x20002c3f
    441c:	20000058 	.word	0x20000058

00004420 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
    4420:	b508      	push	{r3, lr}
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
    4422:	4b17      	ldr	r3, [pc, #92]	; (4480 <z_cstart+0x60>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    4424:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
    4428:	4c16      	ldr	r4, [pc, #88]	; (4484 <z_cstart+0x64>)
    442a:	6963      	ldr	r3, [r4, #20]
    442c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    4430:	6163      	str	r3, [r4, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    4432:	2500      	movs	r5, #0
    4434:	23e0      	movs	r3, #224	; 0xe0
    4436:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
    443a:	77e5      	strb	r5, [r4, #31]
    443c:	7625      	strb	r5, [r4, #24]
    443e:	7665      	strb	r5, [r4, #25]
    4440:	76a5      	strb	r5, [r4, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    4442:	6a63      	ldr	r3, [r4, #36]	; 0x24
    4444:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    4448:	6263      	str	r3, [r4, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    444a:	f7fd ffc3 	bl	23d4 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    444e:	f7fd fd5d 	bl	1f0c <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    4452:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    4456:	62a3      	str	r3, [r4, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    4458:	62e3      	str	r3, [r4, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    445a:	f7fe f891 	bl	2580 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    445e:	f7fe f813 	bl	2488 <z_arm_configure_static_mpu_regions>
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    4462:	f002 fbda 	bl	6c1a <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    4466:	4628      	mov	r0, r5
    4468:	f7ff ff30 	bl	42cc <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    446c:	2001      	movs	r0, #1
    446e:	f7ff ff2d 	bl	42cc <z_sys_init_run_level>
#else
#ifdef ARCH_SWITCH_TO_MAIN_NO_MULTITHREADING
	/* Custom ARCH-specific routine to switch to main()
	 * in the case of no multi-threading.
	 */
	ARCH_SWITCH_TO_MAIN_NO_MULTITHREADING(bg_thread_main,
    4472:	4805      	ldr	r0, [pc, #20]	; (4488 <z_cstart+0x68>)
    4474:	462b      	mov	r3, r5
    4476:	462a      	mov	r2, r5
    4478:	4629      	mov	r1, r5
    447a:	f7fd fd2f 	bl	1edc <z_arm_switch_to_main_no_multithreading>
    447e:	bf00      	nop
    4480:	20005c80 	.word	0x20005c80
    4484:	e000ed00 	.word	0xe000ed00
    4488:	000043f1 	.word	0x000043f1

0000448c <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
    448c:	b508      	push	{r3, lr}
	(void)memcpy(&__data_ram_start, &__data_rom_start,
		 __data_ram_end - __data_ram_start);
    448e:	4806      	ldr	r0, [pc, #24]	; (44a8 <z_data_copy+0x1c>)
	(void)memcpy(&__data_ram_start, &__data_rom_start,
    4490:	4a06      	ldr	r2, [pc, #24]	; (44ac <z_data_copy+0x20>)
    4492:	4907      	ldr	r1, [pc, #28]	; (44b0 <z_data_copy+0x24>)
    4494:	1a12      	subs	r2, r2, r0
    4496:	f000 fcf6 	bl	4e86 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    449a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&_ramfunc_ram_start, &_ramfunc_rom_start,
    449e:	4a05      	ldr	r2, [pc, #20]	; (44b4 <z_data_copy+0x28>)
    44a0:	4905      	ldr	r1, [pc, #20]	; (44b8 <z_data_copy+0x2c>)
    44a2:	4806      	ldr	r0, [pc, #24]	; (44bc <z_data_copy+0x30>)
    44a4:	f000 bcef 	b.w	4e86 <memcpy>
    44a8:	20000000 	.word	0x20000000
    44ac:	20000054 	.word	0x20000054
    44b0:	00007e3c 	.word	0x00007e3c
    44b4:	00000000 	.word	0x00000000
    44b8:	00007e3c 	.word	0x00007e3c
    44bc:	20000000 	.word	0x20000000

000044c0 <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
    44c0:	4a02      	ldr	r2, [pc, #8]	; (44cc <boot_banner+0xc>)
    44c2:	4903      	ldr	r1, [pc, #12]	; (44d0 <boot_banner+0x10>)
    44c4:	4803      	ldr	r0, [pc, #12]	; (44d4 <boot_banner+0x14>)
    44c6:	f000 ba96 	b.w	49f6 <printk>
    44ca:	bf00      	nop
    44cc:	00007d92 	.word	0x00007d92
    44d0:	00007e05 	.word	0x00007e05
    44d4:	00007e14 	.word	0x00007e14

000044d8 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    44d8:	4770      	bx	lr

000044da <flash_area_id_from_multi_image_slot>:
 * MCUBoot uses continuous numbering for the primary slot, the secondary slot,
 * and the scratch while zephyr might number it differently.
 */
int flash_area_id_from_multi_image_slot(int image_index, int slot)
{
    switch (slot) {
    44da:	b129      	cbz	r1, 44e8 <flash_area_id_from_multi_image_slot+0xe>
    44dc:	2901      	cmp	r1, #1
    44de:	bf14      	ite	ne
    44e0:	f06f 0015 	mvnne.w	r0, #21
    44e4:	2005      	moveq	r0, #5
    44e6:	4770      	bx	lr
    case 0: return FLASH_AREA_IMAGE_PRIMARY(image_index);
    44e8:	2002      	movs	r0, #2
    case 2: return FLASH_AREA_IMAGE_SCRATCH;
#endif
    }

    return -EINVAL; /* flash_area_open will fail on that */
}
    44ea:	4770      	bx	lr

000044ec <bootutil_tlv_iter_begin>:
 *          -1 on errors
 */
int
bootutil_tlv_iter_begin(struct image_tlv_iter *it, const struct image_header *hdr,
                        const struct flash_area *fap, uint16_t type, bool prot)
{
    44ec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    44f0:	460e      	mov	r6, r1
    44f2:	4617      	mov	r7, r2
    44f4:	4699      	mov	r9, r3
    uint32_t off_;
    struct image_tlv_info info;

    if (it == NULL || hdr == NULL || fap == NULL) {
    44f6:	4604      	mov	r4, r0
    44f8:	b928      	cbnz	r0, 4506 <bootutil_tlv_iter_begin+0x1a>
        return -1;
    44fa:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    it->prot_end = off_ + it->hdr->ih_protect_tlv_size;
    it->tlv_end = off_ + it->hdr->ih_protect_tlv_size + info.it_tlv_tot;
    // position on first TLV
    it->tlv_off = off_ + sizeof(info);
    return 0;
}
    44fe:	4640      	mov	r0, r8
    4500:	b003      	add	sp, #12
    4502:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (it == NULL || hdr == NULL || fap == NULL) {
    4506:	2900      	cmp	r1, #0
    4508:	d0f7      	beq.n	44fa <bootutil_tlv_iter_begin+0xe>
    450a:	2a00      	cmp	r2, #0
    450c:	d0f5      	beq.n	44fa <bootutil_tlv_iter_begin+0xe>
    off_ = BOOT_TLV_OFF(hdr);
    450e:	68cb      	ldr	r3, [r1, #12]
    4510:	890d      	ldrh	r5, [r1, #8]
    4512:	441d      	add	r5, r3
    if (LOAD_IMAGE_DATA(hdr, fap, off_, &info, sizeof(info))) {
    4514:	2304      	movs	r3, #4
    4516:	eb0d 0203 	add.w	r2, sp, r3
    451a:	4629      	mov	r1, r5
    451c:	4638      	mov	r0, r7
    451e:	f000 fb51 	bl	4bc4 <flash_area_read>
    4522:	4680      	mov	r8, r0
    4524:	2800      	cmp	r0, #0
    4526:	d1e8      	bne.n	44fa <bootutil_tlv_iter_begin+0xe>
    if (info.it_magic == IMAGE_TLV_PROT_INFO_MAGIC) {
    4528:	f8bd 1004 	ldrh.w	r1, [sp, #4]
        if (hdr->ih_protect_tlv_size != info.it_tlv_tot) {
    452c:	8973      	ldrh	r3, [r6, #10]
    if (info.it_magic == IMAGE_TLV_PROT_INFO_MAGIC) {
    452e:	f646 1208 	movw	r2, #26888	; 0x6908
    4532:	4291      	cmp	r1, r2
    4534:	d123      	bne.n	457e <bootutil_tlv_iter_begin+0x92>
        if (hdr->ih_protect_tlv_size != info.it_tlv_tot) {
    4536:	f8bd 1006 	ldrh.w	r1, [sp, #6]
    453a:	4299      	cmp	r1, r3
    453c:	d1dd      	bne.n	44fa <bootutil_tlv_iter_begin+0xe>
        if (LOAD_IMAGE_DATA(hdr, fap, off_ + info.it_tlv_tot,
    453e:	2304      	movs	r3, #4
    4540:	eb0d 0203 	add.w	r2, sp, r3
    4544:	4429      	add	r1, r5
    4546:	4638      	mov	r0, r7
    4548:	f000 fb3c 	bl	4bc4 <flash_area_read>
    454c:	2800      	cmp	r0, #0
    454e:	d1d4      	bne.n	44fa <bootutil_tlv_iter_begin+0xe>
    if (info.it_magic != IMAGE_TLV_INFO_MAGIC) {
    4550:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    4554:	f646 1307 	movw	r3, #26887	; 0x6907
    4558:	429a      	cmp	r2, r3
    455a:	d1ce      	bne.n	44fa <bootutil_tlv_iter_begin+0xe>
    it->prot = prot;
    455c:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    4560:	72a3      	strb	r3, [r4, #10]
    it->prot_end = off_ + it->hdr->ih_protect_tlv_size;
    4562:	8973      	ldrh	r3, [r6, #10]
    it->tlv_end = off_ + it->hdr->ih_protect_tlv_size + info.it_tlv_tot;
    4564:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    it->type = type;
    4568:	f8a4 9008 	strh.w	r9, [r4, #8]
    it->prot_end = off_ + it->hdr->ih_protect_tlv_size;
    456c:	442b      	add	r3, r5
    456e:	60e3      	str	r3, [r4, #12]
    it->tlv_off = off_ + sizeof(info);
    4570:	3504      	adds	r5, #4
    it->tlv_end = off_ + it->hdr->ih_protect_tlv_size + info.it_tlv_tot;
    4572:	4413      	add	r3, r2
    it->fap = fap;
    4574:	e9c4 6700 	strd	r6, r7, [r4]
    it->tlv_end = off_ + it->hdr->ih_protect_tlv_size + info.it_tlv_tot;
    4578:	6163      	str	r3, [r4, #20]
    it->tlv_off = off_ + sizeof(info);
    457a:	6125      	str	r5, [r4, #16]
    return 0;
    457c:	e7bf      	b.n	44fe <bootutil_tlv_iter_begin+0x12>
    } else if (hdr->ih_protect_tlv_size != 0) {
    457e:	2b00      	cmp	r3, #0
    4580:	d0e6      	beq.n	4550 <bootutil_tlv_iter_begin+0x64>
    4582:	e7ba      	b.n	44fa <bootutil_tlv_iter_begin+0xe>

00004584 <bootutil_tlv_iter_next>:
 *          -1 on errors
 */
int
bootutil_tlv_iter_next(struct image_tlv_iter *it, uint32_t *off, uint16_t *len,
                       uint16_t *type)
{
    4584:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    4588:	460f      	mov	r7, r1
    458a:	4690      	mov	r8, r2
    458c:	461e      	mov	r6, r3
    struct image_tlv tlv;
    int rc;

    if (it == NULL || it->hdr == NULL || it->fap == NULL) {
    458e:	4604      	mov	r4, r0
    4590:	b920      	cbnz	r0, 459c <bootutil_tlv_iter_next+0x18>
        return -1;
    4592:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff

        it->tlv_off += sizeof(tlv) + tlv.it_len;
    }

    return 1;
}
    4596:	b003      	add	sp, #12
    4598:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (it == NULL || it->hdr == NULL || it->fap == NULL) {
    459c:	6803      	ldr	r3, [r0, #0]
    459e:	2b00      	cmp	r3, #0
    45a0:	d0f7      	beq.n	4592 <bootutil_tlv_iter_next+0xe>
    45a2:	6843      	ldr	r3, [r0, #4]
    45a4:	2b00      	cmp	r3, #0
    45a6:	d0f4      	beq.n	4592 <bootutil_tlv_iter_next+0xe>
        if (it->type == IMAGE_TLV_ANY || tlv.it_type == it->type) {
    45a8:	f64f 79ff 	movw	r9, #65535	; 0xffff
    while (it->tlv_off < it->tlv_end) {
    45ac:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    45b0:	429a      	cmp	r2, r3
    45b2:	d216      	bcs.n	45e2 <bootutil_tlv_iter_next+0x5e>
        if (it->hdr->ih_protect_tlv_size > 0 && it->tlv_off == it->prot_end) {
    45b4:	6823      	ldr	r3, [r4, #0]
    45b6:	895b      	ldrh	r3, [r3, #10]
    45b8:	b123      	cbz	r3, 45c4 <bootutil_tlv_iter_next+0x40>
    45ba:	68e3      	ldr	r3, [r4, #12]
    45bc:	4293      	cmp	r3, r2
            it->tlv_off += sizeof(struct image_tlv_info);
    45be:	bf04      	itt	eq
    45c0:	3304      	addeq	r3, #4
    45c2:	6123      	streq	r3, [r4, #16]
        rc = LOAD_IMAGE_DATA(it->hdr, it->fap, it->tlv_off, &tlv, sizeof tlv);
    45c4:	2304      	movs	r3, #4
    45c6:	6921      	ldr	r1, [r4, #16]
    45c8:	6860      	ldr	r0, [r4, #4]
    45ca:	eb0d 0203 	add.w	r2, sp, r3
    45ce:	f000 faf9 	bl	4bc4 <flash_area_read>
        if (rc) {
    45d2:	2800      	cmp	r0, #0
    45d4:	d1dd      	bne.n	4592 <bootutil_tlv_iter_next+0xe>
        if (it->prot && it->tlv_off >= it->prot_end) {
    45d6:	7aa3      	ldrb	r3, [r4, #10]
    45d8:	6925      	ldr	r5, [r4, #16]
    45da:	b123      	cbz	r3, 45e6 <bootutil_tlv_iter_next+0x62>
    45dc:	68e3      	ldr	r3, [r4, #12]
    45de:	42ab      	cmp	r3, r5
    45e0:	d801      	bhi.n	45e6 <bootutil_tlv_iter_next+0x62>
            return 1;
    45e2:	2001      	movs	r0, #1
    45e4:	e7d7      	b.n	4596 <bootutil_tlv_iter_next+0x12>
        if (it->type == IMAGE_TLV_ANY || tlv.it_type == it->type) {
    45e6:	8921      	ldrh	r1, [r4, #8]
        it->tlv_off += sizeof(tlv) + tlv.it_len;
    45e8:	f8bd 2006 	ldrh.w	r2, [sp, #6]
        if (it->type == IMAGE_TLV_ANY || tlv.it_type == it->type) {
    45ec:	4549      	cmp	r1, r9
    45ee:	f102 0304 	add.w	r3, r2, #4
    45f2:	d003      	beq.n	45fc <bootutil_tlv_iter_next+0x78>
    45f4:	f8bd c004 	ldrh.w	ip, [sp, #4]
    45f8:	458c      	cmp	ip, r1
    45fa:	d10b      	bne.n	4614 <bootutil_tlv_iter_next+0x90>
            if (type != NULL) {
    45fc:	b116      	cbz	r6, 4604 <bootutil_tlv_iter_next+0x80>
                *type = tlv.it_type;
    45fe:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    4602:	8031      	strh	r1, [r6, #0]
            *off = it->tlv_off + sizeof(tlv);
    4604:	3504      	adds	r5, #4
    4606:	603d      	str	r5, [r7, #0]
            *len = tlv.it_len;
    4608:	f8a8 2000 	strh.w	r2, [r8]
            it->tlv_off += sizeof(tlv) + tlv.it_len;
    460c:	6922      	ldr	r2, [r4, #16]
    460e:	4413      	add	r3, r2
    4610:	6123      	str	r3, [r4, #16]
            return 0;
    4612:	e7c0      	b.n	4596 <bootutil_tlv_iter_next+0x12>
        it->tlv_off += sizeof(tlv) + tlv.it_len;
    4614:	442b      	add	r3, r5
    4616:	6123      	str	r3, [r4, #16]
    4618:	e7c8      	b.n	45ac <bootutil_tlv_iter_next+0x28>

0000461a <boot_fih_memequal>:
    return memcmp(s1, s2, n);
    461a:	f000 bc23 	b.w	4e64 <memcmp>

0000461e <boot_trailer_sz>:
           BOOT_STATUS_MAX_ENTRIES * BOOT_STATUS_STATE_COUNT * min_write_sz;
    461e:	f44f 73c0 	mov.w	r3, #384	; 0x180
    4622:	4358      	muls	r0, r3
}
    4624:	3030      	adds	r0, #48	; 0x30
    4626:	4770      	bx	lr

00004628 <boot_status_entries>:
    if (fap->fa_id == FLASH_AREA_IMAGE_PRIMARY(image_index) ||
    4628:	780b      	ldrb	r3, [r1, #0]
    462a:	2b02      	cmp	r3, #2
    462c:	d006      	beq.n	463c <boot_status_entries+0x14>
    return -1;
    462e:	2b05      	cmp	r3, #5
    4630:	bf0c      	ite	eq
    4632:	f44f 70c0 	moveq.w	r0, #384	; 0x180
    4636:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    463a:	4770      	bx	lr
        return BOOT_STATUS_STATE_COUNT * BOOT_STATUS_MAX_ENTRIES;
    463c:	f44f 70c0 	mov.w	r0, #384	; 0x180
}
    4640:	4770      	bx	lr

00004642 <boot_status_off>:
{
    4642:	b510      	push	{r4, lr}
    4644:	4604      	mov	r4, r0
    elem_sz = flash_area_align(fap);
    4646:	f000 fb3b 	bl	4cc0 <flash_area_align>
    return fap->fa_size - off_from_end;
    464a:	68a3      	ldr	r3, [r4, #8]
}
    464c:	f44f 72c0 	mov.w	r2, #384	; 0x180
    return fap->fa_size - off_from_end;
    4650:	3b30      	subs	r3, #48	; 0x30
}
    4652:	fb02 3010 	mls	r0, r2, r0, r3
    4656:	bd10      	pop	{r4, pc}

00004658 <boot_write_copy_done>:
    return boot_image_ok_off(fap) - BOOT_MAX_ALIGN;
    4658:	6881      	ldr	r1, [r0, #8]

    off = boot_copy_done_off(fap);
    BOOT_LOG_DBG("writing copy_done; fa_id=%d off=0x%lx (0x%lx)",
                 fap->fa_id, (unsigned long)off,
                 (unsigned long)(fap->fa_off + off));
    return boot_write_trailer_flag(fap, off, BOOT_FLAG_SET);
    465a:	2201      	movs	r2, #1
    465c:	3920      	subs	r1, #32
    465e:	f000 bef2 	b.w	5446 <boot_write_trailer_flag>

00004662 <boot_write_swap_size>:
}

int
boot_write_swap_size(const struct flash_area *fap, uint32_t swap_size)
{
    4662:	b513      	push	{r0, r1, r4, lr}
    4664:	4604      	mov	r4, r0
    4666:	9101      	str	r1, [sp, #4]
    return boot_swap_info_off(fap) - BOOT_MAX_ALIGN;
    4668:	f000 fe8c 	bl	5384 <boot_swap_info_off>

    off = boot_swap_size_off(fap);
    BOOT_LOG_DBG("writing swap_size; fa_id=%d off=0x%lx (0x%lx)",
                 fap->fa_id, (unsigned long)off,
                 (unsigned long)fap->fa_off + off);
    return boot_write_trailer(fap, off, (const uint8_t *) &swap_size, 4);
    466c:	2304      	movs	r3, #4
    466e:	f1a0 0108 	sub.w	r1, r0, #8
    4672:	eb0d 0203 	add.w	r2, sp, r3
    4676:	4620      	mov	r0, r4
    4678:	f000 feb8 	bl	53ec <boot_write_trailer>
}
    467c:	b002      	add	sp, #8
    467e:	bd10      	pop	{r4, pc}

00004680 <boot_read_image_headers>:
{
    4680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
            rc = boot_read_image_header(state, i, boot_img_hdr(state, i), bs);
    4682:	4613      	mov	r3, r2
{
    4684:	460f      	mov	r7, r1
    4686:	4616      	mov	r6, r2
            rc = boot_read_image_header(state, i, boot_img_hdr(state, i), bs);
    4688:	2100      	movs	r1, #0
    468a:	4602      	mov	r2, r0
{
    468c:	4605      	mov	r5, r0
            rc = boot_read_image_header(state, i, boot_img_hdr(state, i), bs);
    468e:	f7fc fba5 	bl	ddc <boot_read_image_header>
        if (rc != 0) {
    4692:	4604      	mov	r4, r0
    4694:	b950      	cbnz	r0, 46ac <boot_read_image_headers+0x2c>
            rc = boot_read_image_header(state, i, boot_img_hdr(state, i), bs);
    4696:	4633      	mov	r3, r6
    4698:	f105 022c 	add.w	r2, r5, #44	; 0x2c
    469c:	2101      	movs	r1, #1
    469e:	4628      	mov	r0, r5
    46a0:	f7fc fb9c 	bl	ddc <boot_read_image_header>
        if (rc != 0) {
    46a4:	b110      	cbz	r0, 46ac <boot_read_image_headers+0x2c>
            if (i > 0 && !require_all) {
    46a6:	2f00      	cmp	r7, #0
    46a8:	bf18      	it	ne
    46aa:	4604      	movne	r4, r0
}
    46ac:	4620      	mov	r0, r4
    46ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000046b0 <boot_read_image_size.isra.0>:
boot_read_image_size(struct boot_loader_state *state, int slot, uint32_t *size)
    46b0:	b573      	push	{r0, r1, r4, r5, r6, lr}
    46b2:	4605      	mov	r5, r0
    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
    46b4:	2000      	movs	r0, #0
boot_read_image_size(struct boot_loader_state *state, int slot, uint32_t *size)
    46b6:	460c      	mov	r4, r1
    46b8:	4616      	mov	r6, r2
    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
    46ba:	f7ff ff0e 	bl	44da <flash_area_id_from_multi_image_slot>
    rc = flash_area_open(area_id, &fap);
    46be:	4669      	mov	r1, sp
    46c0:	b2c0      	uxtb	r0, r0
    46c2:	f7fd f98d 	bl	19e0 <flash_area_open>
    if (rc != 0) {
    46c6:	bb30      	cbnz	r0, 4716 <boot_read_image_size.isra.0+0x66>
    off = BOOT_TLV_OFF(boot_img_hdr(state, slot));
    46c8:	212c      	movs	r1, #44	; 0x2c
    46ca:	fb01 5404 	mla	r4, r1, r4, r5
    if (flash_area_read(fap, off, &info, sizeof(info))) {
    46ce:	9800      	ldr	r0, [sp, #0]
    off = BOOT_TLV_OFF(boot_img_hdr(state, slot));
    46d0:	8921      	ldrh	r1, [r4, #8]
    46d2:	68e3      	ldr	r3, [r4, #12]
    46d4:	18cd      	adds	r5, r1, r3
    if (flash_area_read(fap, off, &info, sizeof(info))) {
    46d6:	2304      	movs	r3, #4
    46d8:	eb0d 0203 	add.w	r2, sp, r3
    46dc:	4629      	mov	r1, r5
    46de:	f000 fa71 	bl	4bc4 <flash_area_read>
    46e2:	b9c0      	cbnz	r0, 4716 <boot_read_image_size.isra.0+0x66>
    if (info.it_magic == IMAGE_TLV_PROT_INFO_MAGIC) {
    46e4:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    protect_tlv_size = boot_img_hdr(state, slot)->ih_protect_tlv_size;
    46e8:	8964      	ldrh	r4, [r4, #10]
    if (info.it_magic == IMAGE_TLV_PROT_INFO_MAGIC) {
    46ea:	f646 1308 	movw	r3, #26888	; 0x6908
    46ee:	429a      	cmp	r2, r3
    46f0:	d116      	bne.n	4720 <boot_read_image_size.isra.0+0x70>
        if (protect_tlv_size != info.it_tlv_tot) {
    46f2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    46f6:	429c      	cmp	r4, r3
    46f8:	d10d      	bne.n	4716 <boot_read_image_size.isra.0+0x66>
        if (flash_area_read(fap, off + info.it_tlv_tot, &info, sizeof(info))) {
    46fa:	2304      	movs	r3, #4
    46fc:	9800      	ldr	r0, [sp, #0]
    46fe:	eb0d 0203 	add.w	r2, sp, r3
    4702:	1961      	adds	r1, r4, r5
    4704:	f000 fa5e 	bl	4bc4 <flash_area_read>
    4708:	b928      	cbnz	r0, 4716 <boot_read_image_size.isra.0+0x66>
    if (info.it_magic != IMAGE_TLV_INFO_MAGIC) {
    470a:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    470e:	f646 1307 	movw	r3, #26887	; 0x6907
    4712:	429a      	cmp	r2, r3
    4714:	d007      	beq.n	4726 <boot_read_image_size.isra.0+0x76>
    flash_area_close(fap);
    4716:	9800      	ldr	r0, [sp, #0]
    4718:	f000 fa53 	bl	4bc2 <flash_area_close>
}
    471c:	b002      	add	sp, #8
    471e:	bd70      	pop	{r4, r5, r6, pc}
    } else if (protect_tlv_size != 0) {
    4720:	2c00      	cmp	r4, #0
    4722:	d0f2      	beq.n	470a <boot_read_image_size.isra.0+0x5a>
    4724:	e7f7      	b.n	4716 <boot_read_image_size.isra.0+0x66>
    *size = off + protect_tlv_size + info.it_tlv_tot;
    4726:	f8bd 1006 	ldrh.w	r1, [sp, #6]
    472a:	4421      	add	r1, r4
    472c:	4429      	add	r1, r5
    472e:	6031      	str	r1, [r6, #0]
    rc = 0;
    4730:	e7f1      	b.n	4716 <boot_read_image_size.isra.0+0x66>

00004732 <boot_read_sectors>:
{
    4732:	b537      	push	{r0, r1, r2, r4, r5, lr}
    rc = flash_area_get_sectors(flash_area, &num_sectors, out_sectors);
    4734:	6a42      	ldr	r2, [r0, #36]	; 0x24
{
    4736:	4604      	mov	r4, r0
    uint32_t num_sectors = BOOT_MAX_IMG_SECTORS;
    4738:	2580      	movs	r5, #128	; 0x80
    rc = flash_area_get_sectors(flash_area, &num_sectors, out_sectors);
    473a:	a901      	add	r1, sp, #4
    473c:	2002      	movs	r0, #2
    uint32_t num_sectors = BOOT_MAX_IMG_SECTORS;
    473e:	9501      	str	r5, [sp, #4]
    rc = flash_area_get_sectors(flash_area, &num_sectors, out_sectors);
    4740:	f7fd f962 	bl	1a08 <flash_area_get_sectors>
    if (rc != 0) {
    4744:	b958      	cbnz	r0, 475e <boot_read_sectors+0x2c>
    *out_num_sectors = num_sectors;
    4746:	9b01      	ldr	r3, [sp, #4]
    rc = flash_area_get_sectors(flash_area, &num_sectors, out_sectors);
    4748:	6d22      	ldr	r2, [r4, #80]	; 0x50
    *out_num_sectors = num_sectors;
    474a:	62a3      	str	r3, [r4, #40]	; 0x28
    rc = flash_area_get_sectors(flash_area, &num_sectors, out_sectors);
    474c:	a901      	add	r1, sp, #4
    474e:	2005      	movs	r0, #5
    uint32_t num_sectors = BOOT_MAX_IMG_SECTORS;
    4750:	9501      	str	r5, [sp, #4]
    rc = flash_area_get_sectors(flash_area, &num_sectors, out_sectors);
    4752:	f7fd f959 	bl	1a08 <flash_area_get_sectors>
    if (rc != 0) {
    4756:	4605      	mov	r5, r0
    4758:	b128      	cbz	r0, 4766 <boot_read_sectors+0x34>
        return BOOT_EFLASH_SEC;
    475a:	2509      	movs	r5, #9
    475c:	e000      	b.n	4760 <boot_read_sectors+0x2e>
        return BOOT_EFLASH;
    475e:	2501      	movs	r5, #1
}
    4760:	4628      	mov	r0, r5
    4762:	b003      	add	sp, #12
    4764:	bd30      	pop	{r4, r5, pc}
    *out_num_sectors = num_sectors;
    4766:	9b01      	ldr	r3, [sp, #4]
    elem_sz = flash_area_align(BOOT_IMG_AREA(state, BOOT_PRIMARY_SLOT));
    4768:	6a20      	ldr	r0, [r4, #32]
    *out_num_sectors = num_sectors;
    476a:	6563      	str	r3, [r4, #84]	; 0x54
    elem_sz = flash_area_align(BOOT_IMG_AREA(state, BOOT_PRIMARY_SLOT));
    476c:	f000 faa8 	bl	4cc0 <flash_area_align>
    4770:	65e0      	str	r0, [r4, #92]	; 0x5c
    return 0;
    4772:	e7f5      	b.n	4760 <boot_read_sectors+0x2e>

00004774 <boot_status_reset>:
    bs->idx = BOOT_STATUS_IDX_0;
    4774:	2301      	movs	r3, #1
    4776:	6003      	str	r3, [r0, #0]
    bs->state = BOOT_STATUS_STATE_0;
    4778:	f103 2301 	add.w	r3, r3, #16777472	; 0x1000100
    477c:	6043      	str	r3, [r0, #4]
    bs->swap_size = 0;
    477e:	2300      	movs	r3, #0
    bs->source = 0;
    4780:	e9c0 3302 	strd	r3, r3, [r0, #8]
}
    4784:	4770      	bx	lr

00004786 <boot_status_is_reset>:
            bs->idx == BOOT_STATUS_IDX_0 &&
    4786:	7943      	ldrb	r3, [r0, #5]
    4788:	2b01      	cmp	r3, #1
    478a:	d107      	bne.n	479c <boot_status_is_reset+0x16>
    return (bs->op == BOOT_STATUS_OP_MOVE &&
    478c:	6803      	ldr	r3, [r0, #0]
    478e:	2b01      	cmp	r3, #1
    4790:	d104      	bne.n	479c <boot_status_is_reset+0x16>
            bs->idx == BOOT_STATUS_IDX_0 &&
    4792:	7900      	ldrb	r0, [r0, #4]
    4794:	1e43      	subs	r3, r0, #1
    4796:	4258      	negs	r0, r3
    4798:	4158      	adcs	r0, r3
    479a:	4770      	bx	lr
    479c:	2000      	movs	r0, #0
}
    479e:	4770      	bx	lr

000047a0 <boot_write_status>:
{
    47a0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    47a2:	4606      	mov	r6, r0
    47a4:	460d      	mov	r5, r1
    rc = flash_area_open(area_id, &fap);
    47a6:	2002      	movs	r0, #2
    47a8:	a901      	add	r1, sp, #4
    47aa:	f7fd f919 	bl	19e0 <flash_area_open>
    if (rc != 0) {
    47ae:	bb38      	cbnz	r0, 4800 <boot_write_status+0x60>
    off = boot_status_off(fap) +
    47b0:	9801      	ldr	r0, [sp, #4]
    47b2:	f7ff ff46 	bl	4642 <boot_status_off>
          boot_status_internal_off(bs, BOOT_WRITE_SZ(state));
    47b6:	6df1      	ldr	r1, [r6, #92]	; 0x5c
    off = boot_status_off(fap) +
    47b8:	4604      	mov	r4, r0
          boot_status_internal_off(bs, BOOT_WRITE_SZ(state));
    47ba:	4628      	mov	r0, r5
    47bc:	f000 f8e4 	bl	4988 <boot_status_internal_off>
    off = boot_status_off(fap) +
    47c0:	4404      	add	r4, r0
    align = flash_area_align(fap);
    47c2:	9801      	ldr	r0, [sp, #4]
    47c4:	f000 fa7c 	bl	4cc0 <flash_area_align>
    47c8:	4606      	mov	r6, r0
    erased_val = flash_area_erased_val(fap);
    47ca:	9801      	ldr	r0, [sp, #4]
    47cc:	f000 fa81 	bl	4cd2 <flash_area_erased_val>
    memset(buf, erased_val, BOOT_MAX_ALIGN);
    47d0:	2208      	movs	r2, #8
    erased_val = flash_area_erased_val(fap);
    47d2:	4601      	mov	r1, r0
    memset(buf, erased_val, BOOT_MAX_ALIGN);
    47d4:	eb0d 0002 	add.w	r0, sp, r2
    47d8:	f000 fb60 	bl	4e9c <memset>
    buf[0] = bs->state;
    47dc:	792b      	ldrb	r3, [r5, #4]
    47de:	f88d 3008 	strb.w	r3, [sp, #8]
    rc = flash_area_write(fap, off, buf, align);
    47e2:	4621      	mov	r1, r4
    47e4:	9801      	ldr	r0, [sp, #4]
    47e6:	4633      	mov	r3, r6
    47e8:	aa02      	add	r2, sp, #8
    47ea:	f000 fa07 	bl	4bfc <flash_area_write>
    if (rc != 0) {
    47ee:	1e04      	subs	r4, r0, #0
    47f0:	bf18      	it	ne
    47f2:	2401      	movne	r4, #1
    flash_area_close(fap);
    47f4:	9801      	ldr	r0, [sp, #4]
    47f6:	f000 f9e4 	bl	4bc2 <flash_area_close>
}
    47fa:	4620      	mov	r0, r4
    47fc:	b004      	add	sp, #16
    47fe:	bd70      	pop	{r4, r5, r6, pc}
        rc = BOOT_EFLASH;
    4800:	2401      	movs	r4, #1
    4802:	e7f7      	b.n	47f4 <boot_write_status+0x54>

00004804 <boot_erase_region>:
    return flash_area_erase(fap, off, sz);
    4804:	f000 ba2d 	b.w	4c62 <flash_area_erase>

00004808 <swap_erase_trailer_sectors>:

#if defined(MCUBOOT_SWAP_USING_SCRATCH) || defined(MCUBOOT_SWAP_USING_MOVE)
int
swap_erase_trailer_sectors(const struct boot_loader_state *state,
                           const struct flash_area *fap)
{
    4808:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    480c:	460e      	mov	r6, r1
    int rc;

    BOOT_LOG_DBG("erasing trailer; fa_id=%d", fap->fa_id);

    image_index = BOOT_CURR_IMG(state);
    fa_id_primary = flash_area_id_from_multi_image_slot(image_index,
    480e:	2100      	movs	r1, #0
{
    4810:	4607      	mov	r7, r0
    fa_id_primary = flash_area_id_from_multi_image_slot(image_index,
    4812:	4608      	mov	r0, r1
    4814:	f7ff fe61 	bl	44da <flash_area_id_from_multi_image_slot>
            BOOT_PRIMARY_SLOT);
    fa_id_secondary = flash_area_id_from_multi_image_slot(image_index,
    4818:	2101      	movs	r1, #1
    fa_id_primary = flash_area_id_from_multi_image_slot(image_index,
    481a:	4604      	mov	r4, r0
    fa_id_secondary = flash_area_id_from_multi_image_slot(image_index,
    481c:	2000      	movs	r0, #0
    481e:	f7ff fe5c 	bl	44da <flash_area_id_from_multi_image_slot>
            BOOT_SECONDARY_SLOT);

    if (fap->fa_id == fa_id_primary) {
    4822:	7833      	ldrb	r3, [r6, #0]
    4824:	429c      	cmp	r4, r3
    4826:	d021      	beq.n	486c <swap_erase_trailer_sectors+0x64>
        slot = BOOT_PRIMARY_SLOT;
    } else if (fap->fa_id == fa_id_secondary) {
    4828:	4298      	cmp	r0, r3
    482a:	d121      	bne.n	4870 <swap_erase_trailer_sectors+0x68>
        slot = BOOT_SECONDARY_SLOT;
    482c:	2501      	movs	r5, #1
    return BOOT_IMG(state, slot).num_sectors;
    482e:	232c      	movs	r3, #44	; 0x2c
    4830:	fb03 7505 	mla	r5, r3, r5, r7
        return BOOT_EFLASH;
    }

    /* delete starting from last sector and moving to beginning */
    sector = boot_img_num_sectors(state, slot) - 1;
    trailer_sz = boot_trailer_sz(BOOT_WRITE_SZ(state));
    4834:	6df8      	ldr	r0, [r7, #92]	; 0x5c
    sector = boot_img_num_sectors(state, slot) - 1;
    4836:	6aac      	ldr	r4, [r5, #40]	; 0x28
    trailer_sz = boot_trailer_sz(BOOT_WRITE_SZ(state));
    4838:	f7ff fef1 	bl	461e <boot_trailer_sz>
    sector = boot_img_num_sectors(state, slot) - 1;
    483c:	3c01      	subs	r4, #1
    trailer_sz = boot_trailer_sz(BOOT_WRITE_SZ(state));
    483e:	4607      	mov	r7, r0
    total_sz = 0;
    4840:	f04f 0800 	mov.w	r8, #0
    return BOOT_IMG(state, slot).sectors[sector].fs_size;
    4844:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    4846:	eb03 02c4 	add.w	r2, r3, r4, lsl #3
    return BOOT_IMG(state, slot).sectors[sector].fs_off -
    484a:	f853 1034 	ldr.w	r1, [r3, r4, lsl #3]
    return BOOT_IMG(state, slot).sectors[sector].fs_size;
    484e:	f8d2 9004 	ldr.w	r9, [r2, #4]
    return BOOT_IMG(state, slot).sectors[sector].fs_off -
    4852:	681b      	ldr	r3, [r3, #0]
    do {
        sz = boot_img_sector_size(state, slot, sector);
        off = boot_img_sector_off(state, slot, sector);
        rc = boot_erase_region(fap, off, sz);
    4854:	464a      	mov	r2, r9
    4856:	1ac9      	subs	r1, r1, r3
    4858:	4630      	mov	r0, r6
        assert(rc == 0);

        sector--;
        total_sz += sz;
    485a:	44c8      	add	r8, r9
        rc = boot_erase_region(fap, off, sz);
    485c:	f7ff ffd2 	bl	4804 <boot_erase_region>
    } while (total_sz < trailer_sz);
    4860:	45b8      	cmp	r8, r7
        sector--;
    4862:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
    } while (total_sz < trailer_sz);
    4866:	d3ed      	bcc.n	4844 <swap_erase_trailer_sectors+0x3c>

    return rc;
}
    4868:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        slot = BOOT_PRIMARY_SLOT;
    486c:	2500      	movs	r5, #0
    486e:	e7de      	b.n	482e <swap_erase_trailer_sectors+0x26>
        return BOOT_EFLASH;
    4870:	2001      	movs	r0, #1
    4872:	e7f9      	b.n	4868 <swap_erase_trailer_sectors+0x60>

00004874 <swap_status_init>:

int
swap_status_init(const struct boot_loader_state *state,
                 const struct flash_area *fap,
                 const struct boot_status *bs)
{
    4874:	b537      	push	{r0, r1, r2, r4, r5, lr}
    4876:	4615      	mov	r5, r2
    4878:	460c      	mov	r4, r1

    image_index = BOOT_CURR_IMG(state);

    BOOT_LOG_DBG("initializing status; fa_id=%d", fap->fa_id);

    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_SECONDARY(image_index),
    487a:	2005      	movs	r0, #5
    487c:	4669      	mov	r1, sp
    487e:	f000 fdf5 	bl	546c <boot_read_swap_state_by_id>
            &swap_state);
    assert(rc == 0);

    if (bs->swap_type != BOOT_SWAP_TYPE_NONE) {
    4882:	79e9      	ldrb	r1, [r5, #7]
    4884:	2901      	cmp	r1, #1
    4886:	d003      	beq.n	4890 <swap_status_init+0x1c>
        rc = boot_write_swap_info(fap, bs->swap_type, image_index);
    4888:	2200      	movs	r2, #0
    488a:	4620      	mov	r0, r4
    488c:	f000 fe02 	bl	5494 <boot_write_swap_info>
        assert(rc == 0);
    }

    if (swap_state.image_ok == BOOT_FLAG_SET) {
    4890:	f89d 3003 	ldrb.w	r3, [sp, #3]
    4894:	2b01      	cmp	r3, #1
    4896:	d102      	bne.n	489e <swap_status_init+0x2a>
        rc = boot_write_image_ok(fap);
    4898:	4620      	mov	r0, r4
    489a:	f000 fdde 	bl	545a <boot_write_image_ok>
        assert(rc == 0);
    }

    rc = boot_write_swap_size(fap, bs->swap_size);
    489e:	68a9      	ldr	r1, [r5, #8]
    48a0:	4620      	mov	r0, r4
    48a2:	f7ff fede 	bl	4662 <boot_write_swap_size>

    rc = boot_write_enc_key(fap, 1, bs);
    assert(rc == 0);
#endif

    rc = boot_write_magic(fap);
    48a6:	4620      	mov	r0, r4
    48a8:	f7fe fadc 	bl	2e64 <boot_write_magic>
    assert(rc == 0);

    return 0;
}
    48ac:	2000      	movs	r0, #0
    48ae:	b003      	add	sp, #12
    48b0:	bd30      	pop	{r4, r5, pc}

000048b2 <swap_read_status>:

int
swap_read_status(struct boot_loader_state *state, struct boot_status *bs)
{
    48b2:	b573      	push	{r0, r1, r4, r5, r6, lr}
    48b4:	460d      	mov	r5, r1
    48b6:	4606      	mov	r6, r0
    uint32_t off;
    uint8_t swap_info;
    int area_id;
    int rc;

    bs->source = swap_status_source(state);
    48b8:	f7fc fb78 	bl	fac <swap_status_source>
    48bc:	4604      	mov	r4, r0
    48be:	60e8      	str	r0, [r5, #12]
    switch (bs->source) {
    48c0:	b130      	cbz	r0, 48d0 <swap_read_status+0x1e>
    48c2:	2802      	cmp	r0, #2
    48c4:	d12e      	bne.n	4924 <swap_read_status+0x72>
    default:
        assert(0);
        return BOOT_EBADARGS;
    }

    rc = flash_area_open(area_id, &fap);
    48c6:	a901      	add	r1, sp, #4
    48c8:	f7fd f88a 	bl	19e0 <flash_area_open>
    if (rc != 0) {
    48cc:	b118      	cbz	r0, 48d6 <swap_read_status+0x24>
        return BOOT_EFLASH;
    48ce:	2401      	movs	r4, #1
    }

    flash_area_close(fap);

    return rc;
}
    48d0:	4620      	mov	r0, r4
    48d2:	b002      	add	sp, #8
    48d4:	bd70      	pop	{r4, r5, r6, pc}
    rc = swap_read_status_bytes(fap, state, bs);
    48d6:	9801      	ldr	r0, [sp, #4]
    48d8:	462a      	mov	r2, r5
    48da:	4631      	mov	r1, r6
    48dc:	f7fc facc 	bl	e78 <swap_read_status_bytes>
    if (rc == 0) {
    48e0:	4604      	mov	r4, r0
    48e2:	b9d8      	cbnz	r0, 491c <swap_read_status+0x6a>
        off = boot_swap_info_off(fap);
    48e4:	9801      	ldr	r0, [sp, #4]
    48e6:	f000 fd4d 	bl	5384 <boot_swap_info_off>
        rc = flash_area_read(fap, off, &swap_info, sizeof swap_info);
    48ea:	2301      	movs	r3, #1
        off = boot_swap_info_off(fap);
    48ec:	4601      	mov	r1, r0
        rc = flash_area_read(fap, off, &swap_info, sizeof swap_info);
    48ee:	f10d 0203 	add.w	r2, sp, #3
    48f2:	9801      	ldr	r0, [sp, #4]
    48f4:	f000 f966 	bl	4bc4 <flash_area_read>
        if (rc != 0) {
    48f8:	4604      	mov	r4, r0
    48fa:	2800      	cmp	r0, #0
    48fc:	d1e7      	bne.n	48ce <swap_read_status+0x1c>
        if (bootutil_buffer_is_erased(fap, &swap_info, sizeof swap_info)) {
    48fe:	9801      	ldr	r0, [sp, #4]
    4900:	2201      	movs	r2, #1
    4902:	f10d 0103 	add.w	r1, sp, #3
    4906:	f000 fd4e 	bl	53a6 <bootutil_buffer_is_erased>
    490a:	b110      	cbz	r0, 4912 <swap_read_status+0x60>
            BOOT_SET_SWAP_INFO(swap_info, 0, BOOT_SWAP_TYPE_NONE);
    490c:	2301      	movs	r3, #1
    490e:	f88d 3003 	strb.w	r3, [sp, #3]
        bs->swap_type = BOOT_GET_SWAP_TYPE(swap_info);
    4912:	f89d 3003 	ldrb.w	r3, [sp, #3]
    4916:	f003 030f 	and.w	r3, r3, #15
    491a:	71eb      	strb	r3, [r5, #7]
    flash_area_close(fap);
    491c:	9801      	ldr	r0, [sp, #4]
    491e:	f000 f950 	bl	4bc2 <flash_area_close>
    return rc;
    4922:	e7d5      	b.n	48d0 <swap_read_status+0x1e>
    switch (bs->source) {
    4924:	2407      	movs	r4, #7
    4926:	e7d3      	b.n	48d0 <swap_read_status+0x1e>

00004928 <swap_set_copy_done>:

int
swap_set_copy_done(uint8_t image_index)
{
    4928:	b513      	push	{r0, r1, r4, lr}
    const struct flash_area *fap;
    int rc;

    rc = flash_area_open(FLASH_AREA_IMAGE_PRIMARY(image_index),
    492a:	2002      	movs	r0, #2
    492c:	a901      	add	r1, sp, #4
    492e:	f7fd f857 	bl	19e0 <flash_area_open>
            &fap);
    if (rc != 0) {
    4932:	b948      	cbnz	r0, 4948 <swap_set_copy_done+0x20>
        return BOOT_EFLASH;
    }

    rc = boot_write_copy_done(fap);
    4934:	9801      	ldr	r0, [sp, #4]
    4936:	f7ff fe8f 	bl	4658 <boot_write_copy_done>
    493a:	4604      	mov	r4, r0
    flash_area_close(fap);
    493c:	9801      	ldr	r0, [sp, #4]
    493e:	f000 f940 	bl	4bc2 <flash_area_close>
    return rc;
}
    4942:	4620      	mov	r0, r4
    4944:	b002      	add	sp, #8
    4946:	bd10      	pop	{r4, pc}
        return BOOT_EFLASH;
    4948:	2401      	movs	r4, #1
    494a:	e7fa      	b.n	4942 <swap_set_copy_done+0x1a>

0000494c <swap_set_image_ok>:

int
swap_set_image_ok(uint8_t image_index)
{
    494c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const struct flash_area *fap;
    struct boot_swap_state state;
    int rc;

    rc = flash_area_open(FLASH_AREA_IMAGE_PRIMARY(image_index),
    494e:	2002      	movs	r0, #2
    4950:	a901      	add	r1, sp, #4
    4952:	f7fd f845 	bl	19e0 <flash_area_open>
            &fap);
    if (rc != 0) {
    4956:	b9a8      	cbnz	r0, 4984 <swap_set_image_ok+0x38>
        return BOOT_EFLASH;
    }

    rc = boot_read_swap_state(fap, &state);
    4958:	9801      	ldr	r0, [sp, #4]
    495a:	a902      	add	r1, sp, #8
    495c:	f7fe fa90 	bl	2e80 <boot_read_swap_state>
    if (rc != 0) {
    4960:	4604      	mov	r4, r0
    4962:	b968      	cbnz	r0, 4980 <swap_set_image_ok+0x34>
        rc = BOOT_EFLASH;
        goto out;
    }

    if (state.image_ok == BOOT_FLAG_UNSET) {
    4964:	f89d 300b 	ldrb.w	r3, [sp, #11]
    4968:	2b03      	cmp	r3, #3
    496a:	d103      	bne.n	4974 <swap_set_image_ok+0x28>
        rc = boot_write_image_ok(fap);
    496c:	9801      	ldr	r0, [sp, #4]
    496e:	f000 fd74 	bl	545a <boot_write_image_ok>
    4972:	4604      	mov	r4, r0
    }

out:
    flash_area_close(fap);
    4974:	9801      	ldr	r0, [sp, #4]
    4976:	f000 f924 	bl	4bc2 <flash_area_close>
    return rc;
}
    497a:	4620      	mov	r0, r4
    497c:	b004      	add	sp, #16
    497e:	bd10      	pop	{r4, pc}
        rc = BOOT_EFLASH;
    4980:	2401      	movs	r4, #1
    4982:	e7f7      	b.n	4974 <swap_set_image_ok+0x28>
        return BOOT_EFLASH;
    4984:	2401      	movs	r4, #1
    4986:	e7f8      	b.n	497a <swap_set_image_ok+0x2e>

00004988 <boot_status_internal_off>:
{
    4988:	b530      	push	{r4, r5, lr}
    idx_sz = elem_sz * ((bs->op == BOOT_STATUS_OP_MOVE) ?
    498a:	7943      	ldrb	r3, [r0, #5]
           (bs->state - BOOT_STATUS_STATE_0) * elem_sz;
    498c:	7902      	ldrb	r2, [r0, #4]
            BOOT_STATUS_MOVE_STATE_COUNT : BOOT_STATUS_SWAP_STATE_COUNT);
    498e:	2b01      	cmp	r3, #1
    4990:	bf0c      	ite	eq
    4992:	2301      	moveq	r3, #1
    4994:	2302      	movne	r3, #2
    idx_sz = elem_sz * ((bs->op == BOOT_STATUS_OP_MOVE) ?
    4996:	fb01 f403 	mul.w	r4, r1, r3
           (bs->idx - BOOT_STATUS_IDX_0) * idx_sz +
    499a:	6803      	ldr	r3, [r0, #0]
    499c:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
           (bs->state - BOOT_STATUS_STATE_0) * elem_sz;
    49a0:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
           (bs->idx - BOOT_STATUS_IDX_0) * idx_sz +
    49a4:	fb04 f303 	mul.w	r3, r4, r3
               0 : (BOOT_MAX_IMG_SECTORS * BOOT_STATUS_MOVE_STATE_COUNT * elem_sz)) +
    49a8:	bf14      	ite	ne
    49aa:	01cd      	lslne	r5, r1, #7
    49ac:	2500      	moveq	r5, #0
           (bs->idx - BOOT_STATUS_IDX_0) * idx_sz +
    49ae:	fb01 3102 	mla	r1, r1, r2, r3
}
    49b2:	1948      	adds	r0, r1, r5
    49b4:	bd30      	pop	{r4, r5, pc}

000049b6 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
    49b6:	4603      	mov	r3, r0
    49b8:	b158      	cbz	r0, 49d2 <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    49ba:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    49bc:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
    49c0:	2a01      	cmp	r2, #1
    49c2:	d003      	beq.n	49cc <sys_notify_validate+0x16>
    49c4:	2a03      	cmp	r2, #3
    49c6:	d104      	bne.n	49d2 <sys_notify_validate+0x1c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
    49c8:	6802      	ldr	r2, [r0, #0]
    49ca:	b112      	cbz	r2, 49d2 <sys_notify_validate+0x1c>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
    49cc:	2000      	movs	r0, #0
    49ce:	6098      	str	r0, [r3, #8]
    49d0:	4770      	bx	lr
		return -EINVAL;
    49d2:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
    49d6:	4770      	bx	lr

000049d8 <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    49d8:	6842      	ldr	r2, [r0, #4]
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
    49da:	6081      	str	r1, [r0, #8]
	return method & SYS_NOTIFY_METHOD_MASK;
    49dc:	f002 0203 	and.w	r2, r2, #3
	switch (method) {
    49e0:	2a03      	cmp	r2, #3
    49e2:	f04f 0200 	mov.w	r2, #0
{
    49e6:	4603      	mov	r3, r0
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    49e8:	bf0c      	ite	eq
    49ea:	6800      	ldreq	r0, [r0, #0]
	sys_notify_generic_callback rv = NULL;
    49ec:	4610      	movne	r0, r2
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    49ee:	605a      	str	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    49f0:	4770      	bx	lr

000049f2 <arch_printk_char_out>:
}
    49f2:	2000      	movs	r0, #0
    49f4:	4770      	bx	lr

000049f6 <printk>:
 *
 * @return N/A
 */

void printk(const char *fmt, ...)
{
    49f6:	b40f      	push	{r0, r1, r2, r3}
    49f8:	b507      	push	{r0, r1, r2, lr}
    49fa:	a904      	add	r1, sp, #16
    49fc:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    4a00:	9101      	str	r1, [sp, #4]

	if (IS_ENABLED(CONFIG_LOG_PRINTK)) {
		log_printk(fmt, ap);
	} else {
		vprintk(fmt, ap);
    4a02:	f7fc fcb3 	bl	136c <vprintk>
	}
	va_end(ap);
}
    4a06:	b003      	add	sp, #12
    4a08:	f85d eb04 	ldr.w	lr, [sp], #4
    4a0c:	b004      	add	sp, #16
    4a0e:	4770      	bx	lr

00004a10 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    4a10:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
    4a12:	f013 0307 	ands.w	r3, r3, #7
    4a16:	d105      	bne.n	4a24 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
    4a18:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
    4a1a:	2b00      	cmp	r3, #0
    4a1c:	bf0c      	ite	eq
    4a1e:	2000      	moveq	r0, #0
    4a20:	2003      	movne	r0, #3
    4a22:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    4a24:	2b02      	cmp	r3, #2
    4a26:	d105      	bne.n	4a34 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
    4a28:	8b43      	ldrh	r3, [r0, #26]
		evt = EVT_STOP;
    4a2a:	2b00      	cmp	r3, #0
    4a2c:	bf14      	ite	ne
    4a2e:	2000      	movne	r0, #0
    4a30:	2004      	moveq	r0, #4
    4a32:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
    4a34:	2b01      	cmp	r3, #1
    4a36:	d105      	bne.n	4a44 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
    4a38:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
    4a3a:	2b00      	cmp	r3, #0
    4a3c:	bf0c      	ite	eq
    4a3e:	2000      	moveq	r0, #0
    4a40:	2005      	movne	r0, #5
    4a42:	4770      	bx	lr
	int evt = EVT_NOP;
    4a44:	2000      	movs	r0, #0
}
    4a46:	4770      	bx	lr

00004a48 <notify_one>:
{
    4a48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4a4c:	460d      	mov	r5, r1
    4a4e:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    4a50:	4619      	mov	r1, r3
    4a52:	1d28      	adds	r0, r5, #4
{
    4a54:	4690      	mov	r8, r2
    4a56:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    4a58:	f7ff ffbe 	bl	49d8 <sys_notify_finalize>
	if (cb) {
    4a5c:	4604      	mov	r4, r0
    4a5e:	b138      	cbz	r0, 4a70 <notify_one+0x28>
		cb(mgr, cli, state, res);
    4a60:	4633      	mov	r3, r6
    4a62:	4642      	mov	r2, r8
    4a64:	4629      	mov	r1, r5
    4a66:	4638      	mov	r0, r7
    4a68:	46a4      	mov	ip, r4
}
    4a6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
    4a6e:	4760      	bx	ip
}
    4a70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00004a74 <transition_complete>:
{
    4a74:	b410      	push	{r4}
	__asm__ volatile(
    4a76:	f04f 0420 	mov.w	r4, #32
    4a7a:	f3ef 8211 	mrs	r2, BASEPRI
    4a7e:	f384 8811 	msr	BASEPRI, r4
    4a82:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
    4a86:	6141      	str	r1, [r0, #20]
}
    4a88:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
    4a8a:	2101      	movs	r1, #1
    4a8c:	f7fc bc7c 	b.w	1388 <process_event>

00004a90 <validate_args>:
{
    4a90:	b510      	push	{r4, lr}
    4a92:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    4a94:	b140      	cbz	r0, 4aa8 <validate_args+0x18>
    4a96:	b139      	cbz	r1, 4aa8 <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
    4a98:	1d08      	adds	r0, r1, #4
    4a9a:	f7ff ff8c 	bl	49b6 <sys_notify_validate>
	if ((rv == 0)
    4a9e:	b928      	cbnz	r0, 4aac <validate_args+0x1c>
	    && ((cli->notify.flags
    4aa0:	68a3      	ldr	r3, [r4, #8]
    4aa2:	f033 0303 	bics.w	r3, r3, #3
    4aa6:	d001      	beq.n	4aac <validate_args+0x1c>
		rv = -EINVAL;
    4aa8:	f06f 0015 	mvn.w	r0, #21
}
    4aac:	bd10      	pop	{r4, pc}

00004aae <onoff_manager_init>:
{
    4aae:	b538      	push	{r3, r4, r5, lr}
    4ab0:	460c      	mov	r4, r1
	if ((mgr == NULL)
    4ab2:	4605      	mov	r5, r0
    4ab4:	b158      	cbz	r0, 4ace <onoff_manager_init+0x20>
	    || (transitions == NULL)
    4ab6:	b151      	cbz	r1, 4ace <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
    4ab8:	680b      	ldr	r3, [r1, #0]
    4aba:	b143      	cbz	r3, 4ace <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
    4abc:	684b      	ldr	r3, [r1, #4]
    4abe:	b133      	cbz	r3, 4ace <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    4ac0:	221c      	movs	r2, #28
    4ac2:	2100      	movs	r1, #0
    4ac4:	f000 f9ea 	bl	4e9c <memset>
    4ac8:	612c      	str	r4, [r5, #16]
	return 0;
    4aca:	2000      	movs	r0, #0
}
    4acc:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    4ace:	f06f 0015 	mvn.w	r0, #21
    4ad2:	e7fb      	b.n	4acc <onoff_manager_init+0x1e>

00004ad4 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    4ad4:	b570      	push	{r4, r5, r6, lr}
    4ad6:	4604      	mov	r4, r0
    4ad8:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    4ada:	f7ff ffd9 	bl	4a90 <validate_args>

	if (rv < 0) {
    4ade:	1e05      	subs	r5, r0, #0
    4ae0:	db31      	blt.n	4b46 <onoff_request+0x72>
    4ae2:	f04f 0320 	mov.w	r3, #32
    4ae6:	f3ef 8111 	mrs	r1, BASEPRI
    4aea:	f383 8811 	msr	BASEPRI, r3
    4aee:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    4af2:	8b63      	ldrh	r3, [r4, #26]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    4af4:	8b20      	ldrh	r0, [r4, #24]
	if (mgr->refs == SERVICE_REFS_MAX) {
    4af6:	f64f 75ff 	movw	r5, #65535	; 0xffff
    4afa:	42ab      	cmp	r3, r5
    4afc:	f000 0207 	and.w	r2, r0, #7
    4b00:	d02e      	beq.n	4b60 <onoff_request+0x8c>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
    4b02:	2a02      	cmp	r2, #2
    4b04:	d10e      	bne.n	4b24 <onoff_request+0x50>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
    4b06:	3301      	adds	r3, #1
    4b08:	8363      	strh	r3, [r4, #26]
	rv = state;
    4b0a:	4615      	mov	r5, r2
		notify = true;
    4b0c:	2301      	movs	r3, #1
	__asm__ volatile(
    4b0e:	f381 8811 	msr	BASEPRI, r1
    4b12:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
    4b16:	b1b3      	cbz	r3, 4b46 <onoff_request+0x72>
			notify_one(mgr, cli, state, 0);
    4b18:	2300      	movs	r3, #0
    4b1a:	4631      	mov	r1, r6
    4b1c:	4620      	mov	r0, r4
    4b1e:	f7ff ff93 	bl	4a48 <notify_one>
    4b22:	e010      	b.n	4b46 <onoff_request+0x72>
	} else if ((state == ONOFF_STATE_OFF)
    4b24:	0783      	lsls	r3, r0, #30
    4b26:	d001      	beq.n	4b2c <onoff_request+0x58>
		   || (state == ONOFF_STATE_TO_ON)) {
    4b28:	2a06      	cmp	r2, #6
    4b2a:	d10e      	bne.n	4b4a <onoff_request+0x76>
	parent->next = child;
    4b2c:	2300      	movs	r3, #0
    4b2e:	6033      	str	r3, [r6, #0]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
    4b30:	6863      	ldr	r3, [r4, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
    4b32:	b993      	cbnz	r3, 4b5a <onoff_request+0x86>
	list->head = node;
    4b34:	e9c4 6600 	strd	r6, r6, [r4]
	if (start) {
    4b38:	4615      	mov	r5, r2
    4b3a:	b962      	cbnz	r2, 4b56 <onoff_request+0x82>
		process_event(mgr, EVT_RECHECK, key);
    4b3c:	460a      	mov	r2, r1
    4b3e:	4620      	mov	r0, r4
    4b40:	2102      	movs	r1, #2
    4b42:	f7fc fc21 	bl	1388 <process_event>
		}
	}

	return rv;
}
    4b46:	4628      	mov	r0, r5
    4b48:	bd70      	pop	{r4, r5, r6, pc}
		rv = -EIO;
    4b4a:	2a05      	cmp	r2, #5
    4b4c:	bf0c      	ite	eq
    4b4e:	f06f 0585 	mvneq.w	r5, #133	; 0x85
    4b52:	f06f 0504 	mvnne.w	r5, #4
    4b56:	2300      	movs	r3, #0
    4b58:	e7d9      	b.n	4b0e <onoff_request+0x3a>
	parent->next = child;
    4b5a:	601e      	str	r6, [r3, #0]
	list->tail = node;
    4b5c:	6066      	str	r6, [r4, #4]
}
    4b5e:	e7eb      	b.n	4b38 <onoff_request+0x64>
		rv = -EAGAIN;
    4b60:	f06f 050a 	mvn.w	r5, #10
    4b64:	e7f7      	b.n	4b56 <onoff_request+0x82>

00004b66 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
    4b66:	4770      	bx	lr

00004b68 <z_log_minimal_printk>:
#include <sys/printk.h>

#define HEXDUMP_BYTES_IN_LINE 8U

void z_log_minimal_printk(const char *fmt, ...)
{
    4b68:	b40f      	push	{r0, r1, r2, r3}
    4b6a:	b507      	push	{r0, r1, r2, lr}
    4b6c:	a904      	add	r1, sp, #16
    4b6e:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    4b72:	9101      	str	r1, [sp, #4]
	vprintk(fmt, ap);
    4b74:	f7fc fbfa 	bl	136c <vprintk>
	va_end(ap);
}
    4b78:	b003      	add	sp, #12
    4b7a:	f85d eb04 	ldr.w	lr, [sp], #4
    4b7e:	b004      	add	sp, #16
    4b80:	4770      	bx	lr

00004b82 <device_get_binding>:
    4b82:	f7ff bbc3 	b.w	430c <z_impl_device_get_binding>

00004b86 <get_sectors_cb>:
{
    4b86:	b570      	push	{r4, r5, r6, lr}
	if (info->start_offset < data->area_off) {
    4b88:	6802      	ldr	r2, [r0, #0]
    4b8a:	684c      	ldr	r4, [r1, #4]
    4b8c:	42a2      	cmp	r2, r4
    4b8e:	d316      	bcc.n	4bbe <get_sectors_cb+0x38>
	} else if (info->start_offset >= data->area_off + data->area_len) {
    4b90:	688b      	ldr	r3, [r1, #8]
    4b92:	4423      	add	r3, r4
    4b94:	429a      	cmp	r2, r3
    4b96:	d206      	bcs.n	4ba6 <get_sectors_cb+0x20>
	} else if (data->ret_idx >= data->ret_len) {
    4b98:	e9d1 3504 	ldrd	r3, r5, [r1, #16]
    4b9c:	42ab      	cmp	r3, r5
    4b9e:	d304      	bcc.n	4baa <get_sectors_cb+0x24>
		data->status = -ENOMEM;
    4ba0:	f06f 030b 	mvn.w	r3, #11
    4ba4:	618b      	str	r3, [r1, #24]
		*bail_value = false;
    4ba6:	2000      	movs	r0, #0
    4ba8:	e00a      	b.n	4bc0 <get_sectors_cb+0x3a>
	ret[data->ret_idx].fs_off = info->start_offset - data->area_off;
    4baa:	68cd      	ldr	r5, [r1, #12]
    4bac:	1b12      	subs	r2, r2, r4
    4bae:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
    4bb2:	f845 2033 	str.w	r2, [r5, r3, lsl #3]
	ret[data->ret_idx].fs_size = info->size;
    4bb6:	6842      	ldr	r2, [r0, #4]
    4bb8:	6072      	str	r2, [r6, #4]
	data->ret_idx++;
    4bba:	3301      	adds	r3, #1
    4bbc:	610b      	str	r3, [r1, #16]
		*bail_value = true;
    4bbe:	2001      	movs	r0, #1
}
    4bc0:	bd70      	pop	{r4, r5, r6, pc}

00004bc2 <flash_area_close>:
}
    4bc2:	4770      	bx	lr

00004bc4 <flash_area_read>:
#endif /* CONFIG_FLASH_PAGE_LAYOUT */

int flash_area_read(const struct flash_area *fa, off_t off, void *dst,
		    size_t len)
{
    4bc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return (off >= 0) && ((off + len) <= fa->fa_size);
    4bc8:	1e0c      	subs	r4, r1, #0
{
    4bca:	4605      	mov	r5, r0
    4bcc:	4617      	mov	r7, r2
    4bce:	461e      	mov	r6, r3
	return (off >= 0) && ((off + len) <= fa->fa_size);
    4bd0:	db10      	blt.n	4bf4 <flash_area_read+0x30>
    4bd2:	6882      	ldr	r2, [r0, #8]
    4bd4:	18e3      	adds	r3, r4, r3
    4bd6:	4293      	cmp	r3, r2
    4bd8:	d80c      	bhi.n	4bf4 <flash_area_read+0x30>

	if (!is_in_flash_area_bounds(fa, off, len)) {
		return -EINVAL;
	}

	dev = device_get_binding(fa->fa_dev_name);
    4bda:	68c0      	ldr	r0, [r0, #12]
    4bdc:	f7ff ffd1 	bl	4b82 <device_get_binding>

	return flash_read(dev, fa->fa_off + off, dst, len);
    4be0:	6869      	ldr	r1, [r5, #4]
    4be2:	4421      	add	r1, r4
				    size_t len)
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;

	return api->read(dev, offset, data, len);
    4be4:	6883      	ldr	r3, [r0, #8]
    4be6:	681c      	ldr	r4, [r3, #0]
    4be8:	463a      	mov	r2, r7
    4bea:	4633      	mov	r3, r6
    4bec:	46a4      	mov	ip, r4
}
    4bee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    4bf2:	4760      	bx	ip
    4bf4:	f06f 0015 	mvn.w	r0, #21
    4bf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00004bfc <flash_area_write>:

int flash_area_write(const struct flash_area *fa, off_t off, const void *src,
		     size_t len)
{
    4bfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return (off >= 0) && ((off + len) <= fa->fa_size);
    4c00:	f1b1 0900 	subs.w	r9, r1, #0
{
    4c04:	4680      	mov	r8, r0
    4c06:	4617      	mov	r7, r2
    4c08:	461e      	mov	r6, r3
	return (off >= 0) && ((off + len) <= fa->fa_size);
    4c0a:	db27      	blt.n	4c5c <flash_area_write+0x60>
    4c0c:	6882      	ldr	r2, [r0, #8]
    4c0e:	444b      	add	r3, r9
    4c10:	4293      	cmp	r3, r2
    4c12:	d823      	bhi.n	4c5c <flash_area_write+0x60>

	if (!is_in_flash_area_bounds(fa, off, len)) {
		return -EINVAL;
	}

	flash_dev = device_get_binding(fa->fa_dev_name);
    4c14:	68c0      	ldr	r0, [r0, #12]
    4c16:	f7ff ffb4 	bl	4b82 <device_get_binding>

	rc = flash_write(flash_dev, fa->fa_off + off, (void *)src, len);
    4c1a:	f8d8 1004 	ldr.w	r1, [r8, #4]
	flash_dev = device_get_binding(fa->fa_dev_name);
    4c1e:	4605      	mov	r5, r0
	rc = flash_write(flash_dev, fa->fa_off + off, (void *)src, len);
    4c20:	4489      	add	r9, r1
			  size_t len);

static inline int z_impl_flash_write(const struct device *dev, off_t offset,
				     const void *data, size_t len)
{
	const struct flash_driver_api *api =
    4c22:	f8d0 8008 	ldr.w	r8, [r0, #8]
	/* write protection management in this function exists for keeping
	 * compatibility with out-of-tree drivers which are not aligned jet
	 * with write-protection API depreciation.
	 * This will be removed with flash_api_write_protection handler type.
	 */
	if (api->write_protection != NULL) {
    4c26:	f8d8 300c 	ldr.w	r3, [r8, #12]
    4c2a:	b96b      	cbnz	r3, 4c48 <flash_area_write+0x4c>
		if (rc) {
			return rc;
		}
	}

	rc = api->write(dev, offset, data, len);
    4c2c:	f8d8 4004 	ldr.w	r4, [r8, #4]
    4c30:	4633      	mov	r3, r6
    4c32:	463a      	mov	r2, r7
    4c34:	4649      	mov	r1, r9
    4c36:	4628      	mov	r0, r5
    4c38:	47a0      	blx	r4

	if (api->write_protection != NULL) {
    4c3a:	f8d8 300c 	ldr.w	r3, [r8, #12]
	rc = api->write(dev, offset, data, len);
    4c3e:	4604      	mov	r4, r0
	if (api->write_protection != NULL) {
    4c40:	b943      	cbnz	r3, 4c54 <flash_area_write+0x58>

	return rc;
}
    4c42:	4620      	mov	r0, r4
    4c44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		rc = api->write_protection(dev, false);
    4c48:	2100      	movs	r1, #0
    4c4a:	4798      	blx	r3
		if (rc) {
    4c4c:	4604      	mov	r4, r0
    4c4e:	2800      	cmp	r0, #0
    4c50:	d0ec      	beq.n	4c2c <flash_area_write+0x30>
    4c52:	e7f6      	b.n	4c42 <flash_area_write+0x46>
		(void) api->write_protection(dev, true);
    4c54:	2101      	movs	r1, #1
    4c56:	4628      	mov	r0, r5
    4c58:	4798      	blx	r3
    4c5a:	e7f2      	b.n	4c42 <flash_area_write+0x46>
		return -EINVAL;
    4c5c:	f06f 0415 	mvn.w	r4, #21
    4c60:	e7ef      	b.n	4c42 <flash_area_write+0x46>

00004c62 <flash_area_erase>:

int flash_area_erase(const struct flash_area *fa, off_t off, size_t len)
{
    4c62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return (off >= 0) && ((off + len) <= fa->fa_size);
    4c66:	1e0c      	subs	r4, r1, #0
{
    4c68:	4605      	mov	r5, r0
    4c6a:	4617      	mov	r7, r2
	return (off >= 0) && ((off + len) <= fa->fa_size);
    4c6c:	db25      	blt.n	4cba <flash_area_erase+0x58>
    4c6e:	18a3      	adds	r3, r4, r2
    4c70:	6882      	ldr	r2, [r0, #8]
    4c72:	4293      	cmp	r3, r2
    4c74:	d821      	bhi.n	4cba <flash_area_erase+0x58>

	if (!is_in_flash_area_bounds(fa, off, len)) {
		return -EINVAL;
	}

	flash_dev = device_get_binding(fa->fa_dev_name);
    4c76:	68c0      	ldr	r0, [r0, #12]
    4c78:	f7ff ff83 	bl	4b82 <device_get_binding>

	rc = flash_erase(flash_dev, fa->fa_off + off, len);
    4c7c:	686d      	ldr	r5, [r5, #4]
	flash_dev = device_get_binding(fa->fa_dev_name);
    4c7e:	4606      	mov	r6, r0
	rc = flash_erase(flash_dev, fa->fa_off + off, len);
    4c80:	4425      	add	r5, r4
__syscall int flash_erase(const struct device *dev, off_t offset, size_t size);

static inline int z_impl_flash_erase(const struct device *dev, off_t offset,
				     size_t size)
{
	const struct flash_driver_api *api =
    4c82:	f8d0 8008 	ldr.w	r8, [r0, #8]
	/* write protection management in this function exists for keeping
	 * compatibility with out-of-tree drivers which are not aligned jet
	 * with write-protection API depreciation.
	 * This will be removed with flash_api_write_protection handler type.
	 */
	if (api->write_protection != NULL) {
    4c86:	f8d8 300c 	ldr.w	r3, [r8, #12]
    4c8a:	b963      	cbnz	r3, 4ca6 <flash_area_erase+0x44>
		if (rc) {
			return rc;
		}
	}

	rc = api->erase(dev, offset, size);
    4c8c:	f8d8 3008 	ldr.w	r3, [r8, #8]
    4c90:	463a      	mov	r2, r7
    4c92:	4629      	mov	r1, r5
    4c94:	4630      	mov	r0, r6
    4c96:	4798      	blx	r3

	if (api->write_protection != NULL) {
    4c98:	f8d8 300c 	ldr.w	r3, [r8, #12]
	rc = api->erase(dev, offset, size);
    4c9c:	4604      	mov	r4, r0
	if (api->write_protection != NULL) {
    4c9e:	b943      	cbnz	r3, 4cb2 <flash_area_erase+0x50>

	return rc;
}
    4ca0:	4620      	mov	r0, r4
    4ca2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		rc = api->write_protection(dev, false);
    4ca6:	2100      	movs	r1, #0
    4ca8:	4798      	blx	r3
		if (rc) {
    4caa:	4604      	mov	r4, r0
    4cac:	2800      	cmp	r0, #0
    4cae:	d0ed      	beq.n	4c8c <flash_area_erase+0x2a>
    4cb0:	e7f6      	b.n	4ca0 <flash_area_erase+0x3e>
		(void) api->write_protection(dev, true);
    4cb2:	2101      	movs	r1, #1
    4cb4:	4630      	mov	r0, r6
    4cb6:	4798      	blx	r3
    4cb8:	e7f2      	b.n	4ca0 <flash_area_erase+0x3e>
		return -EINVAL;
    4cba:	f06f 0415 	mvn.w	r4, #21
    4cbe:	e7ef      	b.n	4ca0 <flash_area_erase+0x3e>

00004cc0 <flash_area_align>:

uint8_t flash_area_align(const struct flash_area *fa)
{
    4cc0:	b508      	push	{r3, lr}
	const struct device *dev;

	dev = device_get_binding(fa->fa_dev_name);
    4cc2:	68c0      	ldr	r0, [r0, #12]
    4cc4:	f7ff ff5d 	bl	4b82 <device_get_binding>
static inline size_t z_impl_flash_get_write_block_size(const struct device *dev)
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;

	return api->get_parameters(dev)->write_block_size;
    4cc8:	6883      	ldr	r3, [r0, #8]
    4cca:	691b      	ldr	r3, [r3, #16]
    4ccc:	4798      	blx	r3

	return flash_get_write_block_size(dev);
}
    4cce:	7800      	ldrb	r0, [r0, #0]
    4cd0:	bd08      	pop	{r3, pc}

00004cd2 <flash_area_erased_val>:
{
	return device_get_binding(fa->fa_dev_name);
}

uint8_t flash_area_erased_val(const struct flash_area *fa)
{
    4cd2:	b508      	push	{r3, lr}
	const struct flash_parameters *param;

	param = flash_get_parameters(device_get_binding(fa->fa_dev_name));
    4cd4:	68c0      	ldr	r0, [r0, #12]
    4cd6:	f7ff ff54 	bl	4b82 <device_get_binding>
static inline const struct flash_parameters *z_impl_flash_get_parameters(const struct device *dev)
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;

	return api->get_parameters(dev);
    4cda:	6883      	ldr	r3, [r0, #8]
    4cdc:	691b      	ldr	r3, [r3, #16]
    4cde:	4798      	blx	r3

	return param->erase_value;
}
    4ce0:	7900      	ldrb	r0, [r0, #4]
    4ce2:	bd08      	pop	{r3, pc}

00004ce4 <uart_poll_out>:
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
    4ce4:	6883      	ldr	r3, [r0, #8]
    4ce6:	685b      	ldr	r3, [r3, #4]
    4ce8:	4718      	bx	r3

00004cea <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
    4cea:	6903      	ldr	r3, [r0, #16]
    4cec:	b2c9      	uxtb	r1, r1
    4cee:	220c      	movs	r2, #12
    4cf0:	fb01 3302 	mla	r3, r1, r2, r3
    4cf4:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
    4cf6:	f000 0007 	and.w	r0, r0, #7
    4cfa:	4770      	bx	lr

00004cfc <set_on_state>:
	__asm__ volatile(
    4cfc:	f04f 0320 	mov.w	r3, #32
    4d00:	f3ef 8211 	mrs	r2, BASEPRI
    4d04:	f383 8811 	msr	BASEPRI, r3
    4d08:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    4d0c:	6803      	ldr	r3, [r0, #0]
    4d0e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    4d12:	f043 0302 	orr.w	r3, r3, #2
    4d16:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    4d18:	f382 8811 	msr	BASEPRI, r2
    4d1c:	f3bf 8f6f 	isb	sy
}
    4d20:	4770      	bx	lr

00004d22 <stop>:
{
    4d22:	4603      	mov	r3, r0
    4d24:	b570      	push	{r4, r5, r6, lr}
	struct nrf_clock_control_data *data = dev->data;
    4d26:	6900      	ldr	r0, [r0, #16]
	return &data->subsys[type];
    4d28:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
    4d2a:	f04f 0420 	mov.w	r4, #32
    4d2e:	f3ef 8611 	mrs	r6, BASEPRI
    4d32:	f384 8811 	msr	BASEPRI, r4
    4d36:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    4d3a:	250c      	movs	r5, #12
    4d3c:	fb05 0401 	mla	r4, r5, r1, r0
    4d40:	6c24      	ldr	r4, [r4, #64]	; 0x40
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    4d42:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
    4d46:	d001      	beq.n	4d4c <stop+0x2a>
    4d48:	42a2      	cmp	r2, r4
    4d4a:	d111      	bne.n	4d70 <stop+0x4e>
		*flags = CLOCK_CONTROL_STATUS_OFF;
    4d4c:	fb05 0001 	mla	r0, r5, r1, r0
    4d50:	2201      	movs	r2, #1
    4d52:	6402      	str	r2, [r0, #64]	; 0x40
	int err = 0;
    4d54:	2000      	movs	r0, #0
	__asm__ volatile(
    4d56:	f386 8811 	msr	BASEPRI, r6
    4d5a:	f3bf 8f6f 	isb	sy
	if (err < 0) {
    4d5e:	b930      	cbnz	r0, 4d6e <stop+0x4c>
	get_sub_config(dev, type)->stop();
    4d60:	685b      	ldr	r3, [r3, #4]
    4d62:	220c      	movs	r2, #12
    4d64:	fb02 3101 	mla	r1, r2, r1, r3
    4d68:	684b      	ldr	r3, [r1, #4]
    4d6a:	4798      	blx	r3
	return 0;
    4d6c:	2000      	movs	r0, #0
}
    4d6e:	bd70      	pop	{r4, r5, r6, pc}
		err = -EPERM;
    4d70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    4d74:	e7ef      	b.n	4d56 <stop+0x34>

00004d76 <api_stop>:
	return stop(dev, subsys, CTX_API);
    4d76:	2280      	movs	r2, #128	; 0x80
    4d78:	f7ff bfd3 	b.w	4d22 <stop>

00004d7c <async_start>:
{
    4d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4d7e:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
    4d80:	6904      	ldr	r4, [r0, #16]
{
    4d82:	4605      	mov	r5, r0
    4d84:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
    4d86:	f04f 0020 	mov.w	r0, #32
    4d8a:	f3ef 8c11 	mrs	ip, BASEPRI
    4d8e:	f380 8811 	msr	BASEPRI, r0
    4d92:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    4d96:	260c      	movs	r6, #12
    4d98:	fb06 4601 	mla	r6, r6, r1, r4
    4d9c:	6c30      	ldr	r0, [r6, #64]	; 0x40
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    4d9e:	f000 0e07 	and.w	lr, r0, #7
    4da2:	f1be 0f01 	cmp.w	lr, #1
    4da6:	d110      	bne.n	4dca <async_start+0x4e>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    4da8:	6437      	str	r7, [r6, #64]	; 0x40
	int err = 0;
    4daa:	2600      	movs	r6, #0
	__asm__ volatile(
    4dac:	f38c 8811 	msr	BASEPRI, ip
    4db0:	f3bf 8f6f 	isb	sy
	if (err < 0) {
    4db4:	b93e      	cbnz	r6, 4dc6 <async_start+0x4a>
	subdata->cb = cb;
    4db6:	200c      	movs	r0, #12
    4db8:	4341      	muls	r1, r0
    4dba:	440c      	add	r4, r1
	subdata->user_data = user_data;
    4dbc:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
    4dc0:	686b      	ldr	r3, [r5, #4]
    4dc2:	585b      	ldr	r3, [r3, r1]
    4dc4:	4798      	blx	r3
}
    4dc6:	4630      	mov	r0, r6
    4dc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
    4dca:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
		err = -EALREADY;
    4dce:	4287      	cmp	r7, r0
    4dd0:	bf14      	ite	ne
    4dd2:	f04f 36ff 	movne.w	r6, #4294967295	; 0xffffffff
    4dd6:	f06f 0677 	mvneq.w	r6, #119	; 0x77
    4dda:	e7e7      	b.n	4dac <async_start+0x30>

00004ddc <api_start>:
{
    4ddc:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
    4dde:	2480      	movs	r4, #128	; 0x80
    4de0:	9400      	str	r4, [sp, #0]
    4de2:	f7ff ffcb 	bl	4d7c <async_start>
}
    4de6:	b002      	add	sp, #8
    4de8:	bd10      	pop	{r4, pc}

00004dea <api_blocking_start>:
}
    4dea:	f06f 0085 	mvn.w	r0, #133	; 0x85
    4dee:	4770      	bx	lr

00004df0 <onoff_started_callback>:
	return &data->mgr[type];
    4df0:	6900      	ldr	r0, [r0, #16]
{
    4df2:	b410      	push	{r4}
	return &data->mgr[type];
    4df4:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
    4df6:	241c      	movs	r4, #28
    4df8:	fb03 0004 	mla	r0, r3, r4, r0
    4dfc:	2100      	movs	r1, #0
}
    4dfe:	bc10      	pop	{r4}
	notify(mgr, 0);
    4e00:	4710      	bx	r2

00004e02 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    4e02:	2000      	movs	r0, #0
    4e04:	f7fe bac4 	b.w	3390 <nrfx_clock_stop>

00004e08 <sys_clock_isr>:
/* Weak-linked noop defaults for optional driver interfaces*/

void __weak sys_clock_isr(void *arg)
{
	__ASSERT_NO_MSG(false);
}
    4e08:	4770      	bx	lr

00004e0a <sys_clock_disable>:
    4e0a:	4770      	bx	lr

00004e0c <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    4e0c:	2100      	movs	r1, #0
    4e0e:	2001      	movs	r0, #1
    4e10:	f7fd b88c 	b.w	1f2c <z_arm_fatal_error>

00004e14 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
    4e14:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
    4e16:	6800      	ldr	r0, [r0, #0]
    4e18:	f7fd b888 	b.w	1f2c <z_arm_fatal_error>

00004e1c <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
    4e1c:	b508      	push	{r3, lr}
	handler();
    4e1e:	f7fd f8b3 	bl	1f88 <z_SysNmiOnReset>
	z_arm_int_exit();
}
    4e22:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
    4e26:	f7fd badd 	b.w	23e4 <z_arm_exc_exit>

00004e2a <strcpy>:

char *strcpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
    4e2a:	3901      	subs	r1, #1
    4e2c:	4603      	mov	r3, r0
    4e2e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    4e32:	b90a      	cbnz	r2, 4e38 <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
    4e34:	701a      	strb	r2, [r3, #0]

	return dest;
}
    4e36:	4770      	bx	lr
		*d = *s;
    4e38:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
    4e3c:	e7f7      	b.n	4e2e <strcpy+0x4>

00004e3e <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    4e3e:	4603      	mov	r3, r0
	size_t n = 0;
    4e40:	2000      	movs	r0, #0

	while (*s != '\0') {
    4e42:	5c1a      	ldrb	r2, [r3, r0]
    4e44:	b902      	cbnz	r2, 4e48 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
    4e46:	4770      	bx	lr
		n++;
    4e48:	3001      	adds	r0, #1
    4e4a:	e7fa      	b.n	4e42 <strlen+0x4>

00004e4c <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
    4e4c:	1e43      	subs	r3, r0, #1
    4e4e:	3901      	subs	r1, #1
    4e50:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    4e54:	f811 0f01 	ldrb.w	r0, [r1, #1]!
    4e58:	4282      	cmp	r2, r0
    4e5a:	d101      	bne.n	4e60 <strcmp+0x14>
    4e5c:	2a00      	cmp	r2, #0
    4e5e:	d1f7      	bne.n	4e50 <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
    4e60:	1a10      	subs	r0, r2, r0
    4e62:	4770      	bx	lr

00004e64 <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
    4e64:	b510      	push	{r4, lr}
    4e66:	4603      	mov	r3, r0
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
    4e68:	b15a      	cbz	r2, 4e82 <memcmp+0x1e>
    4e6a:	3901      	subs	r1, #1
    4e6c:	1884      	adds	r4, r0, r2
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
    4e6e:	f813 0b01 	ldrb.w	r0, [r3], #1
    4e72:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    4e76:	42a3      	cmp	r3, r4
    4e78:	d001      	beq.n	4e7e <memcmp+0x1a>
    4e7a:	4290      	cmp	r0, r2
    4e7c:	d0f7      	beq.n	4e6e <memcmp+0xa>
		c1++;
		c2++;
	}

	return *c1 - *c2;
    4e7e:	1a80      	subs	r0, r0, r2
}
    4e80:	bd10      	pop	{r4, pc}
		return 0;
    4e82:	4610      	mov	r0, r2
    4e84:	e7fc      	b.n	4e80 <memcmp+0x1c>

00004e86 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
    4e86:	b510      	push	{r4, lr}
    4e88:	1e43      	subs	r3, r0, #1
    4e8a:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
    4e8c:	4291      	cmp	r1, r2
    4e8e:	d100      	bne.n	4e92 <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    4e90:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
    4e92:	f811 4b01 	ldrb.w	r4, [r1], #1
    4e96:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
    4e9a:	e7f7      	b.n	4e8c <memcpy+0x6>

00004e9c <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
    4e9c:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
    4e9e:	4402      	add	r2, r0
	unsigned char *d_byte = (unsigned char *)buf;
    4ea0:	4603      	mov	r3, r0
	while (n > 0) {
    4ea2:	4293      	cmp	r3, r2
    4ea4:	d100      	bne.n	4ea8 <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    4ea6:	4770      	bx	lr
		*(d_byte++) = c_byte;
    4ea8:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    4eac:	e7f9      	b.n	4ea2 <memset+0x6>

00004eae <_stdout_hook_default>:
}
    4eae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    4eb2:	4770      	bx	lr

00004eb4 <nrf_gpio_cfg_sense_set>:
    *p_pin = pin_number & 0x1F;
    4eb4:	f000 001f 	and.w	r0, r0, #31
    4eb8:	0080      	lsls	r0, r0, #2
    4eba:	f100 40a0 	add.w	r0, r0, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
    4ebe:	f8d0 3700 	ldr.w	r3, [r0, #1792]	; 0x700
    4ec2:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
    4ec6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    4eca:	f8c0 3700 	str.w	r3, [r0, #1792]	; 0x700
}
    4ece:	4770      	bx	lr

00004ed0 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    4ed0:	6843      	ldr	r3, [r0, #4]
    4ed2:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    4ed4:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
    4ed8:	600b      	str	r3, [r1, #0]
}
    4eda:	2000      	movs	r0, #0
    4edc:	4770      	bx	lr

00004ede <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    4ede:	6843      	ldr	r3, [r0, #4]
    4ee0:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
    4ee2:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
    4ee6:	4042      	eors	r2, r0
    4ee8:	400a      	ands	r2, r1
    4eea:	4042      	eors	r2, r0
    p_reg->OUT = value;
    4eec:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
    4ef0:	2000      	movs	r0, #0
    4ef2:	4770      	bx	lr

00004ef4 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    4ef4:	6843      	ldr	r3, [r0, #4]
    4ef6:	685b      	ldr	r3, [r3, #4]
}
    4ef8:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
    4efa:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    4efe:	4770      	bx	lr

00004f00 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    4f00:	6843      	ldr	r3, [r0, #4]
    4f02:	685b      	ldr	r3, [r3, #4]
}
    4f04:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
    4f06:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
    4f0a:	4770      	bx	lr

00004f0c <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    4f0c:	6843      	ldr	r3, [r0, #4]
    4f0e:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    4f10:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
    4f14:	404b      	eors	r3, r1
    p_reg->OUT = value;
    4f16:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
    4f1a:	2000      	movs	r0, #0
    4f1c:	4770      	bx	lr

00004f1e <gpio_nrfx_manage_callback>:
	return port->data;
    4f1e:	6903      	ldr	r3, [r0, #16]
	return list->head;
    4f20:	6858      	ldr	r0, [r3, #4]
{
    4f22:	b530      	push	{r4, r5, lr}
	if (!sys_slist_is_empty(callbacks)) {
    4f24:	b158      	cbz	r0, 4f3e <gpio_nrfx_manage_callback+0x20>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    4f26:	2400      	movs	r4, #0
    4f28:	4281      	cmp	r1, r0
    4f2a:	d112      	bne.n	4f52 <gpio_nrfx_manage_callback+0x34>
	return node->next;
    4f2c:	6808      	ldr	r0, [r1, #0]
	return list->tail;
    4f2e:	689d      	ldr	r5, [r3, #8]
Z_GENLIST_REMOVE(slist, snode)
    4f30:	b954      	cbnz	r4, 4f48 <gpio_nrfx_manage_callback+0x2a>
    4f32:	428d      	cmp	r5, r1
	list->head = node;
    4f34:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
    4f36:	d100      	bne.n	4f3a <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
    4f38:	6098      	str	r0, [r3, #8]
	parent->next = child;
    4f3a:	2000      	movs	r0, #0
    4f3c:	6008      	str	r0, [r1, #0]
	if (set) {
    4f3e:	b96a      	cbnz	r2, 4f5c <gpio_nrfx_manage_callback+0x3e>
	return 0;
    4f40:	2000      	movs	r0, #0
}
    4f42:	bd30      	pop	{r4, r5, pc}
    4f44:	4628      	mov	r0, r5
    4f46:	e7ef      	b.n	4f28 <gpio_nrfx_manage_callback+0xa>
Z_GENLIST_REMOVE(slist, snode)
    4f48:	428d      	cmp	r5, r1
	parent->next = child;
    4f4a:	6020      	str	r0, [r4, #0]
	list->tail = node;
    4f4c:	bf08      	it	eq
    4f4e:	609c      	streq	r4, [r3, #8]
}
    4f50:	e7f3      	b.n	4f3a <gpio_nrfx_manage_callback+0x1c>
	return node->next;
    4f52:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    4f54:	4604      	mov	r4, r0
    4f56:	2d00      	cmp	r5, #0
    4f58:	d1f4      	bne.n	4f44 <gpio_nrfx_manage_callback+0x26>
			if (!set) {
    4f5a:	b13a      	cbz	r2, 4f6c <gpio_nrfx_manage_callback+0x4e>
Z_GENLIST_PREPEND(slist, snode)
    4f5c:	6898      	ldr	r0, [r3, #8]
	parent->next = child;
    4f5e:	685a      	ldr	r2, [r3, #4]
    4f60:	600a      	str	r2, [r1, #0]
	list->head = node;
    4f62:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
    4f64:	2800      	cmp	r0, #0
    4f66:	d1eb      	bne.n	4f40 <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
    4f68:	6099      	str	r1, [r3, #8]
}
    4f6a:	e7ea      	b.n	4f42 <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
    4f6c:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    4f70:	e7e7      	b.n	4f42 <gpio_nrfx_manage_callback+0x24>

00004f72 <is_regular_addr_valid>:
{
    4f72:	b538      	push	{r3, r4, r5, lr}
    4f74:	4604      	mov	r4, r0
    4f76:	460d      	mov	r5, r1
	size_t flash_size = nrfx_nvmc_flash_size_get();
    4f78:	f000 fab6 	bl	54e8 <nrfx_nvmc_flash_size_get>
	if (addr >= flash_size ||
    4f7c:	4284      	cmp	r4, r0
    4f7e:	d209      	bcs.n	4f94 <is_regular_addr_valid+0x22>
    4f80:	2c00      	cmp	r4, #0
    4f82:	db07      	blt.n	4f94 <is_regular_addr_valid+0x22>
	    addr < 0 ||
    4f84:	42a8      	cmp	r0, r5
    4f86:	d305      	bcc.n	4f94 <is_regular_addr_valid+0x22>
	    (addr) + len > flash_size) {
    4f88:	442c      	add	r4, r5
	    len > flash_size ||
    4f8a:	4284      	cmp	r4, r0
    4f8c:	bf8c      	ite	hi
    4f8e:	2000      	movhi	r0, #0
    4f90:	2001      	movls	r0, #1
}
    4f92:	bd38      	pop	{r3, r4, r5, pc}
		return false;
    4f94:	2000      	movs	r0, #0
    4f96:	e7fc      	b.n	4f92 <is_regular_addr_valid+0x20>

00004f98 <flash_page_foreach>:
	return count;
}

void flash_page_foreach(const struct device *dev, flash_page_cb cb,
			void *data)
{
    4f98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	const struct flash_pages_layout *layout;
	struct flash_pages_info page_info;
	size_t block, num_blocks, page = 0, i;
	off_t off = 0;

	api->page_layout(dev, &layout, &num_blocks);
    4f9c:	6883      	ldr	r3, [r0, #8]
{
    4f9e:	b086      	sub	sp, #24
	api->page_layout(dev, &layout, &num_blocks);
    4fa0:	695b      	ldr	r3, [r3, #20]
{
    4fa2:	4688      	mov	r8, r1
    4fa4:	4691      	mov	r9, r2
	api->page_layout(dev, &layout, &num_blocks);
    4fa6:	a901      	add	r1, sp, #4
    4fa8:	aa02      	add	r2, sp, #8
    4faa:	4798      	blx	r3
	off_t off = 0;
    4fac:	2400      	movs	r4, #0
	size_t block, num_blocks, page = 0, i;
    4fae:	46a2      	mov	sl, r4

	for (block = 0; block < num_blocks; block++) {
    4fb0:	4625      	mov	r5, r4
    4fb2:	9b02      	ldr	r3, [sp, #8]
    4fb4:	42ab      	cmp	r3, r5
    4fb6:	d802      	bhi.n	4fbe <flash_page_foreach+0x26>

			off += page_info.size;
			page++;
		}
	}
}
    4fb8:	b006      	add	sp, #24
    4fba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		const struct flash_pages_layout *l = &layout[block];
    4fbe:	9f01      	ldr	r7, [sp, #4]
    4fc0:	eb07 07c5 	add.w	r7, r7, r5, lsl #3
		for (i = 0; i < l->pages_count; i++) {
    4fc4:	2600      	movs	r6, #0
		page_info.size = l->pages_size;
    4fc6:	687b      	ldr	r3, [r7, #4]
    4fc8:	9304      	str	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
    4fca:	683a      	ldr	r2, [r7, #0]
    4fcc:	42b2      	cmp	r2, r6
    4fce:	eb0a 0306 	add.w	r3, sl, r6
    4fd2:	d802      	bhi.n	4fda <flash_page_foreach+0x42>
	for (block = 0; block < num_blocks; block++) {
    4fd4:	3501      	adds	r5, #1
    4fd6:	469a      	mov	sl, r3
    4fd8:	e7eb      	b.n	4fb2 <flash_page_foreach+0x1a>
			if (!cb(&page_info, data)) {
    4fda:	4649      	mov	r1, r9
    4fdc:	a803      	add	r0, sp, #12
			page_info.start_offset = off;
    4fde:	9403      	str	r4, [sp, #12]
			page_info.index = page;
    4fe0:	9305      	str	r3, [sp, #20]
			if (!cb(&page_info, data)) {
    4fe2:	47c0      	blx	r8
    4fe4:	2800      	cmp	r0, #0
    4fe6:	d0e7      	beq.n	4fb8 <flash_page_foreach+0x20>
			off += page_info.size;
    4fe8:	9b04      	ldr	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
    4fea:	3601      	adds	r6, #1
			off += page_info.size;
    4fec:	441c      	add	r4, r3
		for (i = 0; i < l->pages_count; i++) {
    4fee:	e7ec      	b.n	4fca <flash_page_foreach+0x32>

00004ff0 <uarte_nrfx_config_get>:
	*cfg = get_dev_data(dev)->uart_config;
    4ff0:	6902      	ldr	r2, [r0, #16]
{
    4ff2:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
    4ff4:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
    4ff8:	e883 0003 	stmia.w	r3, {r0, r1}
}
    4ffc:	2000      	movs	r0, #0
    4ffe:	4770      	bx	lr

00005000 <uarte_nrfx_err_check>:
	return config->uarte_regs;
    5000:	6843      	ldr	r3, [r0, #4]
    5002:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    5004:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    5008:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
    500c:	4770      	bx	lr

0000500e <uarte_nrfx_poll_in>:
	return config->uarte_regs;
    500e:	6843      	ldr	r3, [r0, #4]
	return dev->data;
    5010:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
    5012:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5014:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    5018:	b148      	cbz	r0, 502e <uarte_nrfx_poll_in+0x20>
	*c = data->rx_data;
    501a:	7d52      	ldrb	r2, [r2, #21]
    501c:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    501e:	2000      	movs	r0, #0
    5020:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    5024:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5028:	2201      	movs	r2, #1
    502a:	601a      	str	r2, [r3, #0]
	return 0;
    502c:	4770      	bx	lr
		return -1;
    502e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    5032:	4770      	bx	lr

00005034 <uarte_nrfx_fifo_read>:
	if (size > 0 && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    5034:	2a00      	cmp	r2, #0
{
    5036:	b510      	push	{r4, lr}
    5038:	4604      	mov	r4, r0
	if (size > 0 && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    503a:	dd0f      	ble.n	505c <uarte_nrfx_fifo_read+0x28>
	return config->uarte_regs;
    503c:	6843      	ldr	r3, [r0, #4]
    503e:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5040:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (size > 0 && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    5044:	b148      	cbz	r0, 505a <uarte_nrfx_fifo_read+0x26>
	return dev->data;
    5046:	6922      	ldr	r2, [r4, #16]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5048:	2000      	movs	r0, #0
    504a:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    504e:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
		rx_data[num_rx++] = (uint8_t)data->rx_data;
    5052:	7d52      	ldrb	r2, [r2, #21]
    5054:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5056:	2001      	movs	r0, #1
    5058:	6018      	str	r0, [r3, #0]
}
    505a:	bd10      	pop	{r4, pc}
	int num_rx = 0;
    505c:	2000      	movs	r0, #0
    505e:	e7fc      	b.n	505a <uarte_nrfx_fifo_read+0x26>

00005060 <uarte_nrfx_irq_tx_enable>:
	return config->uarte_regs;
    5060:	6843      	ldr	r3, [r0, #4]
	return dev->data;
    5062:	6901      	ldr	r1, [r0, #16]
	return config->uarte_regs;
    5064:	681a      	ldr	r2, [r3, #0]
	__asm__ volatile(
    5066:	f04f 0020 	mov.w	r0, #32
    506a:	f3ef 8311 	mrs	r3, BASEPRI
    506e:	f380 8811 	msr	BASEPRI, r0
    5072:	f3bf 8f6f 	isb	sy
	data->int_driven->disable_tx_irq = false;
    5076:	68c9      	ldr	r1, [r1, #12]
    5078:	2000      	movs	r0, #0
    507a:	7388      	strb	r0, [r1, #14]
    p_reg->INTENSET = mask;
    507c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
    5080:	f8c2 1304 	str.w	r1, [r2, #772]	; 0x304
	__asm__ volatile(
    5084:	f383 8811 	msr	BASEPRI, r3
    5088:	f3bf 8f6f 	isb	sy
}
    508c:	4770      	bx	lr

0000508e <uarte_nrfx_irq_tx_disable>:
	data->int_driven->disable_tx_irq = true;
    508e:	6903      	ldr	r3, [r0, #16]
    5090:	68db      	ldr	r3, [r3, #12]
    5092:	2201      	movs	r2, #1
    5094:	739a      	strb	r2, [r3, #14]
}
    5096:	4770      	bx	lr

00005098 <uarte_nrfx_irq_tx_ready_complete>:
	bool ready = !data->int_driven->disable_tx_irq &&
    5098:	6903      	ldr	r3, [r0, #16]
    509a:	68db      	ldr	r3, [r3, #12]
    509c:	7b9a      	ldrb	r2, [r3, #14]
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
    509e:	f002 01ff 	and.w	r1, r2, #255	; 0xff
    50a2:	b962      	cbnz	r2, 50be <uarte_nrfx_irq_tx_ready_complete+0x26>
	return config->uarte_regs;
    50a4:	6842      	ldr	r2, [r0, #4]
    50a6:	6812      	ldr	r2, [r2, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    50a8:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	bool ready = !data->int_driven->disable_tx_irq &&
    50ac:	b140      	cbz	r0, 50c0 <uarte_nrfx_irq_tx_ready_complete+0x28>
    return p_reg->INTENSET & mask;
    50ae:	f8d2 0304 	ldr.w	r0, [r2, #772]	; 0x304
	if (ready) {
    50b2:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
    50b6:	d003      	beq.n	50c0 <uarte_nrfx_irq_tx_ready_complete+0x28>
		data->int_driven->fifo_fill_lock = 0;
    50b8:	6119      	str	r1, [r3, #16]
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
    50ba:	2001      	movs	r0, #1
    50bc:	4770      	bx	lr
    50be:	2000      	movs	r0, #0
}
    50c0:	4770      	bx	lr

000050c2 <uarte_nrfx_irq_rx_ready>:
	return config->uarte_regs;
    50c2:	6843      	ldr	r3, [r0, #4]
    50c4:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    50c6:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
}
    50ca:	3800      	subs	r0, #0
    50cc:	bf18      	it	ne
    50ce:	2001      	movne	r0, #1
    50d0:	4770      	bx	lr

000050d2 <uarte_nrfx_irq_rx_enable>:
	return config->uarte_regs;
    50d2:	6843      	ldr	r3, [r0, #4]
    50d4:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    50d6:	2210      	movs	r2, #16
    50d8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    50dc:	4770      	bx	lr

000050de <uarte_nrfx_irq_rx_disable>:
	return config->uarte_regs;
    50de:	6843      	ldr	r3, [r0, #4]
    50e0:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
    50e2:	2210      	movs	r2, #16
    50e4:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
    50e8:	4770      	bx	lr

000050ea <uarte_nrfx_irq_err_enable>:
	return config->uarte_regs;
    50ea:	6843      	ldr	r3, [r0, #4]
    50ec:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    50ee:	f44f 7200 	mov.w	r2, #512	; 0x200
    50f2:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    50f6:	4770      	bx	lr

000050f8 <uarte_nrfx_irq_err_disable>:
	return config->uarte_regs;
    50f8:	6843      	ldr	r3, [r0, #4]
    50fa:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
    50fc:	f44f 7200 	mov.w	r2, #512	; 0x200
    5100:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
    5104:	4770      	bx	lr

00005106 <uarte_nrfx_irq_update>:
}
    5106:	2001      	movs	r0, #1
    5108:	4770      	bx	lr

0000510a <uarte_nrfx_irq_callback_set>:
	data->int_driven->cb = cb;
    510a:	6903      	ldr	r3, [r0, #16]
    510c:	68db      	ldr	r3, [r3, #12]
	data->int_driven->cb_data = cb_data;
    510e:	e9c3 1200 	strd	r1, r2, [r3]
}
    5112:	4770      	bx	lr

00005114 <uarte_nrfx_irq_is_pending>:
{
    5114:	b538      	push	{r3, r4, r5, lr}
	return config->uarte_regs;
    5116:	6843      	ldr	r3, [r0, #4]
    5118:	681d      	ldr	r5, [r3, #0]
    return p_reg->INTENSET & mask;
    511a:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
		||
    511e:	025b      	lsls	r3, r3, #9
{
    5120:	4604      	mov	r4, r0
		||
    5122:	d405      	bmi.n	5130 <uarte_nrfx_irq_is_pending+0x1c>
    5124:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    5128:	f010 0010 	ands.w	r0, r0, #16
    512c:	d106      	bne.n	513c <uarte_nrfx_irq_is_pending+0x28>
}
    512e:	bd38      	pop	{r3, r4, r5, pc}
		 uarte_nrfx_irq_tx_ready_complete(dev))
    5130:	f7ff ffb2 	bl	5098 <uarte_nrfx_irq_tx_ready_complete>
					    NRF_UARTE_INT_TXSTOPPED_MASK) &&
    5134:	2800      	cmp	r0, #0
    5136:	d0f5      	beq.n	5124 <uarte_nrfx_irq_is_pending+0x10>
		||
    5138:	2001      	movs	r0, #1
    513a:	e7f8      	b.n	512e <uarte_nrfx_irq_is_pending+0x1a>
		 uarte_nrfx_irq_rx_ready(dev)));
    513c:	4620      	mov	r0, r4
    513e:	f7ff ffc0 	bl	50c2 <uarte_nrfx_irq_rx_ready>
					    NRF_UARTE_INT_ENDRX_MASK) &&
    5142:	3800      	subs	r0, #0
    5144:	bf18      	it	ne
    5146:	2001      	movne	r0, #1
    5148:	e7f1      	b.n	512e <uarte_nrfx_irq_is_pending+0x1a>

0000514a <tx_start.isra.0>:
	return config->uarte_regs;
    514a:	6803      	ldr	r3, [r0, #0]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    514c:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    5150:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5154:	2200      	movs	r2, #0
    5156:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    515a:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    515e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
    5162:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
    5166:	6842      	ldr	r2, [r0, #4]
    5168:	06d2      	lsls	r2, r2, #27
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    516a:	bf41      	itttt	mi
    516c:	2208      	movmi	r2, #8
    516e:	f8c3 2500 	strmi.w	r2, [r3, #1280]	; 0x500
    p_reg->INTENSET = mask;
    5172:	f44f 0280 	movmi.w	r2, #4194304	; 0x400000
    5176:	f8c3 2304 	strmi.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    517a:	2201      	movs	r2, #1
    517c:	609a      	str	r2, [r3, #8]
}
    517e:	4770      	bx	lr

00005180 <is_tx_ready.isra.0>:
	return config->uarte_regs;
    5180:	6802      	ldr	r2, [r0, #0]
static bool is_tx_ready(const struct device *dev)
    5182:	4603      	mov	r3, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5184:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    5188:	b940      	cbnz	r0, 519c <is_tx_ready.isra.0+0x1c>
	bool ppi_endtx = get_dev_config(dev)->flags & UARTE_CFG_FLAG_PPI_ENDTX;
    518a:	685b      	ldr	r3, [r3, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    518c:	071b      	lsls	r3, r3, #28
    518e:	d406      	bmi.n	519e <is_tx_ready.isra.0+0x1e>
    5190:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
    5194:	3800      	subs	r0, #0
    5196:	bf18      	it	ne
    5198:	2001      	movne	r0, #1
    519a:	4770      	bx	lr
    519c:	2001      	movs	r0, #1
}
    519e:	4770      	bx	lr

000051a0 <uarte_nrfx_fifo_fill>:
{
    51a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return dev->data;
    51a2:	6906      	ldr	r6, [r0, #16]
	len = MIN(len, data->int_driven->tx_buff_size);
    51a4:	68f3      	ldr	r3, [r6, #12]
    51a6:	899c      	ldrh	r4, [r3, #12]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    51a8:	f3bf 8f5b 	dmb	ish
    51ac:	4294      	cmp	r4, r2
    51ae:	bfa8      	it	ge
    51b0:	4614      	movge	r4, r2
{
    51b2:	4605      	mov	r5, r0
    51b4:	3310      	adds	r3, #16
    51b6:	2201      	movs	r2, #1
    51b8:	e853 0f00 	ldrex	r0, [r3]
    51bc:	2800      	cmp	r0, #0
    51be:	d103      	bne.n	51c8 <uarte_nrfx_fifo_fill+0x28>
    51c0:	e843 2700 	strex	r7, r2, [r3]
    51c4:	2f00      	cmp	r7, #0
    51c6:	d1f7      	bne.n	51b8 <uarte_nrfx_fifo_fill+0x18>
    51c8:	f3bf 8f5b 	dmb	ish
    51cc:	bf0c      	ite	eq
    51ce:	4613      	moveq	r3, r2
    51d0:	2300      	movne	r3, #0
	if (!atomic_cas(&data->int_driven->fifo_fill_lock, 0, 1)) {
    51d2:	d01d      	beq.n	5210 <uarte_nrfx_fifo_fill+0x70>
		return 0;
    51d4:	461c      	mov	r4, r3
}
    51d6:	4620      	mov	r0, r4
    51d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		data->int_driven->tx_buffer[i] = tx_data[i];
    51da:	68f2      	ldr	r2, [r6, #12]
    51dc:	5cc8      	ldrb	r0, [r1, r3]
    51de:	6892      	ldr	r2, [r2, #8]
    51e0:	54d0      	strb	r0, [r2, r3]
	for (int i = 0; i < len; i++) {
    51e2:	3301      	adds	r3, #1
    51e4:	42a3      	cmp	r3, r4
    51e6:	dbf8      	blt.n	51da <uarte_nrfx_fifo_fill+0x3a>
	__asm__ volatile(
    51e8:	f04f 0320 	mov.w	r3, #32
    51ec:	f3ef 8711 	mrs	r7, BASEPRI
    51f0:	f383 8811 	msr	BASEPRI, r3
    51f4:	f3bf 8f6f 	isb	sy
	if (!is_tx_ready(dev)) {
    51f8:	6868      	ldr	r0, [r5, #4]
    51fa:	f7ff ffc1 	bl	5180 <is_tx_ready.isra.0>
    51fe:	68f3      	ldr	r3, [r6, #12]
    5200:	b940      	cbnz	r0, 5214 <uarte_nrfx_fifo_fill+0x74>
		data->int_driven->fifo_fill_lock = 0;
    5202:	6118      	str	r0, [r3, #16]
		len = 0;
    5204:	4604      	mov	r4, r0
	__asm__ volatile(
    5206:	f387 8811 	msr	BASEPRI, r7
    520a:	f3bf 8f6f 	isb	sy
	return len;
    520e:	e7e2      	b.n	51d6 <uarte_nrfx_fifo_fill+0x36>
	for (int i = 0; i < len; i++) {
    5210:	2300      	movs	r3, #0
    5212:	e7e7      	b.n	51e4 <uarte_nrfx_fifo_fill+0x44>
		tx_start(dev, data->int_driven->tx_buffer, len);
    5214:	6899      	ldr	r1, [r3, #8]
    5216:	6868      	ldr	r0, [r5, #4]
    5218:	4622      	mov	r2, r4
    521a:	f7ff ff96 	bl	514a <tx_start.isra.0>
    521e:	e7f2      	b.n	5206 <uarte_nrfx_fifo_fill+0x66>

00005220 <uarte_nrfx_isr_int>:
	return config->uarte_regs;
    5220:	6843      	ldr	r3, [r0, #4]
    5222:	681b      	ldr	r3, [r3, #0]
    return p_reg->INTENSET & mask;
    5224:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
    5228:	05d1      	lsls	r1, r2, #23
{
    522a:	b410      	push	{r4}
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
    522c:	d518      	bpl.n	5260 <uarte_nrfx_isr_int+0x40>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    522e:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    5232:	b1aa      	cbz	r2, 5260 <uarte_nrfx_isr_int+0x40>
	__asm__ volatile(
    5234:	f04f 0120 	mov.w	r1, #32
    5238:	f3ef 8211 	mrs	r2, BASEPRI
    523c:	f381 8811 	msr	BASEPRI, r1
    5240:	f3bf 8f6f 	isb	sy
    5244:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
    5248:	b131      	cbz	r1, 5258 <uarte_nrfx_isr_int+0x38>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    524a:	2100      	movs	r1, #0
    524c:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
    5250:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5254:	2101      	movs	r1, #1
    5256:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
    5258:	f382 8811 	msr	BASEPRI, r2
    525c:	f3bf 8f6f 	isb	sy
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
    5260:	6842      	ldr	r2, [r0, #4]
    5262:	6852      	ldr	r2, [r2, #4]
    5264:	06d2      	lsls	r2, r2, #27
    5266:	d51a      	bpl.n	529e <uarte_nrfx_isr_int+0x7e>
	__asm__ volatile(
    5268:	f04f 0220 	mov.w	r2, #32
    526c:	f3ef 8111 	mrs	r1, BASEPRI
    5270:	f382 8811 	msr	BASEPRI, r2
    5274:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5278:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
    527c:	b112      	cbz	r2, 5284 <uarte_nrfx_isr_int+0x64>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    527e:	2200      	movs	r2, #0
    5280:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
		if (!data->int_driven || data->int_driven->fifo_fill_lock == 0)
    5284:	6902      	ldr	r2, [r0, #16]
    5286:	68d2      	ldr	r2, [r2, #12]
    5288:	b10a      	cbz	r2, 528e <uarte_nrfx_isr_int+0x6e>
    528a:	6912      	ldr	r2, [r2, #16]
    528c:	b91a      	cbnz	r2, 5296 <uarte_nrfx_isr_int+0x76>
    p_reg->INTENCLR = mask;
    528e:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
    5292:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	__asm__ volatile(
    5296:	f381 8811 	msr	BASEPRI, r1
    529a:	f3bf 8f6f 	isb	sy
	if (!data->int_driven) {
    529e:	6902      	ldr	r2, [r0, #16]
    52a0:	68d2      	ldr	r2, [r2, #12]
    52a2:	b15a      	cbz	r2, 52bc <uarte_nrfx_isr_int+0x9c>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    52a4:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
    52a8:	b151      	cbz	r1, 52c0 <uarte_nrfx_isr_int+0xa0>
		if (data->int_driven->disable_tx_irq) {
    52aa:	7b94      	ldrb	r4, [r2, #14]
		data->int_driven->fifo_fill_lock = 0;
    52ac:	2100      	movs	r1, #0
    52ae:	6111      	str	r1, [r2, #16]
		if (data->int_driven->disable_tx_irq) {
    52b0:	b134      	cbz	r4, 52c0 <uarte_nrfx_isr_int+0xa0>
    p_reg->INTENCLR = mask;
    52b2:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
    52b6:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
			data->int_driven->disable_tx_irq = false;
    52ba:	7391      	strb	r1, [r2, #14]
}
    52bc:	bc10      	pop	{r4}
    52be:	4770      	bx	lr
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    52c0:	f8d3 1124 	ldr.w	r1, [r3, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
    52c4:	b121      	cbz	r1, 52d0 <uarte_nrfx_isr_int+0xb0>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    52c6:	2100      	movs	r1, #0
    52c8:	f8c3 1124 	str.w	r1, [r3, #292]	; 0x124
    52cc:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
	if (data->int_driven->cb) {
    52d0:	6813      	ldr	r3, [r2, #0]
    52d2:	2b00      	cmp	r3, #0
    52d4:	d0f2      	beq.n	52bc <uarte_nrfx_isr_int+0x9c>
		data->int_driven->cb(dev, data->int_driven->cb_data);
    52d6:	6851      	ldr	r1, [r2, #4]
}
    52d8:	bc10      	pop	{r4}
		data->int_driven->cb(dev, data->int_driven->cb_data);
    52da:	4718      	bx	r3

000052dc <fprotect_area>:
#define ENABLE_IN_DEBUG false
#endif


int fprotect_area(uint32_t start, size_t length)
{
    52dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
}

NRF_STATIC_INLINE void nrf_bprot_nvm_protection_in_debug_set(NRF_BPROT_Type * p_reg,
                                                             bool             enable)
{
    p_reg->DISABLEINDEBUG =
    52e0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    52e4:	4604      	mov	r4, r0
    52e6:	4688      	mov	r8, r1
    52e8:	b085      	sub	sp, #20
    52ea:	2701      	movs	r7, #1
	uint32_t block_end   = (start + length) / BPROT_REGIONS_SIZE;
	uint32_t block_mask[BPROT_CONFIGS_NUM] = {0};

	BUILD_ASSERT(BPROT_REGIONS_SIZE == CONFIG_FPROTECT_BLOCK_SIZE);

	if ((start % BPROT_REGIONS_SIZE) ||
    52ec:	ea44 0408 	orr.w	r4, r4, r8
	uint32_t block_end   = (start + length) / BPROT_REGIONS_SIZE;
    52f0:	eb00 0901 	add.w	r9, r0, r1
    52f4:	f8c3 7608 	str.w	r7, [r3, #1544]	; 0x608
	uint32_t block_start = start / BPROT_REGIONS_SIZE;
    52f8:	0b05      	lsrs	r5, r0, #12
	uint32_t block_mask[BPROT_CONFIGS_NUM] = {0};
    52fa:	2210      	movs	r2, #16
    52fc:	2100      	movs	r1, #0
    52fe:	4668      	mov	r0, sp
	if ((start % BPROT_REGIONS_SIZE) ||
    5300:	f3c4 040b 	ubfx	r4, r4, #0, #12
	uint32_t block_mask[BPROT_CONFIGS_NUM] = {0};
    5304:	f7ff fdca 	bl	4e9c <memset>
	uint32_t block_end   = (start + length) / BPROT_REGIONS_SIZE;
    5308:	ea4f 3619 	mov.w	r6, r9, lsr #12
	if ((start % BPROT_REGIONS_SIZE) ||
    530c:	b924      	cbnz	r4, 5318 <fprotect_area+0x3c>
	    (length % BPROT_REGIONS_SIZE) ||
    530e:	f5b9 2f01 	cmp.w	r9, #528384	; 0x81000
    5312:	d201      	bcs.n	5318 <fprotect_area+0x3c>
	    (block_end > BPROT_REGIONS_NUM) ||
    5314:	42b5      	cmp	r5, r6
    5316:	d910      	bls.n	533a <fprotect_area+0x5e>
		/*
		 * start or length isn't aligned with a BPROT region,
		 * or attempting to protect an area that is invalid or outside
		 * flash.
		 */
		return -EINVAL;
    5318:	f06f 0015 	mvn.w	r0, #21
    531c:	e01e      	b.n	535c <fprotect_area+0x80>
	}

	for (uint32_t i = block_start; i < block_end; i++) {
		block_mask[i / BITS_PER_LONG] |= BIT(i % BITS_PER_LONG);
    531e:	096a      	lsrs	r2, r5, #5
    5320:	ab04      	add	r3, sp, #16
    5322:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    5326:	f005 031f 	and.w	r3, r5, #31
    532a:	f852 1c10 	ldr.w	r1, [r2, #-16]
    532e:	fa07 f303 	lsl.w	r3, r7, r3
    5332:	430b      	orrs	r3, r1
    5334:	f842 3c10 	str.w	r3, [r2, #-16]
	for (uint32_t i = block_start; i < block_end; i++) {
    5338:	3501      	adds	r5, #1
    533a:	42b5      	cmp	r5, r6
    533c:	d1ef      	bne.n	531e <fprotect_area+0x42>
            p_reg->CONFIG0 = block_mask;
    533e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5342:	9a00      	ldr	r2, [sp, #0]
    5344:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
	}

	for (uint32_t i = 0; i < BPROT_CONFIGS_NUM; i++) {
		PROTECT(NRF_BPROT, i, block_mask[i]);
    5348:	9a01      	ldr	r2, [sp, #4]
            p_reg->CONFIG1 = block_mask;
    534a:	f8c3 2604 	str.w	r2, [r3, #1540]	; 0x604
    534e:	9a02      	ldr	r2, [sp, #8]
            p_reg->CONFIG2 = block_mask;
    5350:	f8c3 2610 	str.w	r2, [r3, #1552]	; 0x610
    5354:	9a03      	ldr	r2, [sp, #12]
            p_reg->CONFIG3 = block_mask;
    5356:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614
	}

	return 0;
    535a:	2000      	movs	r0, #0
}
    535c:	b005      	add	sp, #20
    535e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00005362 <bootutil_buffer_is_erased.part.0>:
bool bootutil_buffer_is_erased(const struct flash_area *area,
    5362:	b538      	push	{r3, r4, r5, lr}
    5364:	460c      	mov	r4, r1
    5366:	4615      	mov	r5, r2
    5368:	4425      	add	r5, r4
    erased_val = flash_area_erased_val(area);
    536a:	f7ff fcb2 	bl	4cd2 <flash_area_erased_val>
    for (i = 0, u8b = (uint8_t *)buffer; i < len; i++) {
    536e:	4621      	mov	r1, r4
    5370:	42a9      	cmp	r1, r5
    5372:	d101      	bne.n	5378 <bootutil_buffer_is_erased.part.0+0x16>
    return true;
    5374:	2001      	movs	r0, #1
}
    5376:	bd38      	pop	{r3, r4, r5, pc}
        if (u8b[i] != erased_val) {
    5378:	f811 3b01 	ldrb.w	r3, [r1], #1
    537c:	4298      	cmp	r0, r3
    537e:	d0f7      	beq.n	5370 <bootutil_buffer_is_erased.part.0+0xe>
            return false;
    5380:	2000      	movs	r0, #0
    5382:	e7f8      	b.n	5376 <bootutil_buffer_is_erased.part.0+0x14>

00005384 <boot_swap_info_off>:
    return boot_copy_done_off(fap) - BOOT_MAX_ALIGN;
    5384:	6880      	ldr	r0, [r0, #8]
}
    5386:	3828      	subs	r0, #40	; 0x28
    5388:	4770      	bx	lr

0000538a <boot_magic_compatible_check>:
    switch (tbl_val) {
    538a:	2804      	cmp	r0, #4
    538c:	d009      	beq.n	53a2 <boot_magic_compatible_check+0x18>
    538e:	2805      	cmp	r0, #5
    5390:	d103      	bne.n	539a <boot_magic_compatible_check+0x10>
        return val != BOOT_MAGIC_GOOD;
    5392:	1e48      	subs	r0, r1, #1
    5394:	bf18      	it	ne
    5396:	2001      	movne	r0, #1
    5398:	4770      	bx	lr
        return tbl_val == val;
    539a:	1a43      	subs	r3, r0, r1
    539c:	4258      	negs	r0, r3
    539e:	4158      	adcs	r0, r3
    53a0:	4770      	bx	lr
    switch (tbl_val) {
    53a2:	2001      	movs	r0, #1
}
    53a4:	4770      	bx	lr

000053a6 <bootutil_buffer_is_erased>:
    if (buffer == NULL || len == 0) {
    53a6:	b111      	cbz	r1, 53ae <bootutil_buffer_is_erased+0x8>
    53a8:	b10a      	cbz	r2, 53ae <bootutil_buffer_is_erased+0x8>
    53aa:	f7ff bfda 	b.w	5362 <bootutil_buffer_is_erased.part.0>
}
    53ae:	2000      	movs	r0, #0
    53b0:	4770      	bx	lr

000053b2 <boot_read_flag>:
{
    53b2:	b538      	push	{r3, r4, r5, lr}
    53b4:	460c      	mov	r4, r1
    rc = flash_area_read(fap, off, flag, sizeof *flag);
    53b6:	2301      	movs	r3, #1
{
    53b8:	4611      	mov	r1, r2
    rc = flash_area_read(fap, off, flag, sizeof *flag);
    53ba:	4622      	mov	r2, r4
{
    53bc:	4605      	mov	r5, r0
    rc = flash_area_read(fap, off, flag, sizeof *flag);
    53be:	f7ff fc01 	bl	4bc4 <flash_area_read>
    if (rc < 0) {
    53c2:	2800      	cmp	r0, #0
    53c4:	db10      	blt.n	53e8 <boot_read_flag+0x36>
    if (bootutil_buffer_is_erased(fap, flag, sizeof *flag)) {
    53c6:	2201      	movs	r2, #1
    53c8:	4621      	mov	r1, r4
    53ca:	4628      	mov	r0, r5
    53cc:	f7ff ffeb 	bl	53a6 <bootutil_buffer_is_erased>
    53d0:	b118      	cbz	r0, 53da <boot_read_flag+0x28>
        *flag = BOOT_FLAG_UNSET;
    53d2:	2303      	movs	r3, #3
    53d4:	7023      	strb	r3, [r4, #0]
    return 0;
    53d6:	2000      	movs	r0, #0
}
    53d8:	bd38      	pop	{r3, r4, r5, pc}
    if (flag != BOOT_FLAG_SET) {
    53da:	7823      	ldrb	r3, [r4, #0]
        return BOOT_FLAG_BAD;
    53dc:	2b01      	cmp	r3, #1
    53de:	bf0c      	ite	eq
    53e0:	2301      	moveq	r3, #1
    53e2:	2302      	movne	r3, #2
        *flag = boot_flag_decode(*flag);
    53e4:	7023      	strb	r3, [r4, #0]
    53e6:	e7f7      	b.n	53d8 <boot_read_flag+0x26>
        return BOOT_EFLASH;
    53e8:	2001      	movs	r0, #1
    53ea:	e7f5      	b.n	53d8 <boot_read_flag+0x26>

000053ec <boot_write_trailer>:
{
    53ec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    53f0:	461d      	mov	r5, r3
    53f2:	4606      	mov	r6, r0
    53f4:	460f      	mov	r7, r1
    53f6:	4690      	mov	r8, r2
    align = flash_area_align(fap);
    53f8:	f7ff fc62 	bl	4cc0 <flash_area_align>
    align = (inlen + align - 1) & ~(align - 1);
    53fc:	1944      	adds	r4, r0, r5
    53fe:	3c01      	subs	r4, #1
    5400:	4240      	negs	r0, r0
    5402:	4004      	ands	r4, r0
    5404:	b2e4      	uxtb	r4, r4
    if (align > BOOT_MAX_ALIGN) {
    5406:	2c08      	cmp	r4, #8
    5408:	d81a      	bhi.n	5440 <boot_write_trailer+0x54>
    erased_val = flash_area_erased_val(fap);
    540a:	4630      	mov	r0, r6
    540c:	f7ff fc61 	bl	4cd2 <flash_area_erased_val>
    memcpy(buf, inbuf, inlen);
    5410:	462a      	mov	r2, r5
    erased_val = flash_area_erased_val(fap);
    5412:	4681      	mov	r9, r0
    memcpy(buf, inbuf, inlen);
    5414:	4641      	mov	r1, r8
    5416:	4668      	mov	r0, sp
    5418:	f7ff fd35 	bl	4e86 <memcpy>
    memset(&buf[inlen], erased_val, align - inlen);
    541c:	1b62      	subs	r2, r4, r5
    541e:	4649      	mov	r1, r9
    5420:	eb0d 0005 	add.w	r0, sp, r5
    5424:	f7ff fd3a 	bl	4e9c <memset>
    rc = flash_area_write(fap, off, buf, align);
    5428:	4623      	mov	r3, r4
    542a:	466a      	mov	r2, sp
    542c:	4639      	mov	r1, r7
    542e:	4630      	mov	r0, r6
    5430:	f7ff fbe4 	bl	4bfc <flash_area_write>
    if (rc != 0) {
    5434:	3800      	subs	r0, #0
    5436:	bf18      	it	ne
    5438:	2001      	movne	r0, #1
}
    543a:	b003      	add	sp, #12
    543c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return -1;
    5440:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    5444:	e7f9      	b.n	543a <boot_write_trailer+0x4e>

00005446 <boot_write_trailer_flag>:
{
    5446:	b507      	push	{r0, r1, r2, lr}
    return boot_write_trailer(fap, off, buf, 1);
    5448:	2301      	movs	r3, #1
    const uint8_t buf[1] = { flag_val };
    544a:	f88d 2004 	strb.w	r2, [sp, #4]
    return boot_write_trailer(fap, off, buf, 1);
    544e:	aa01      	add	r2, sp, #4
    5450:	f7ff ffcc 	bl	53ec <boot_write_trailer>
}
    5454:	b003      	add	sp, #12
    5456:	f85d fb04 	ldr.w	pc, [sp], #4

0000545a <boot_write_image_ok>:
    return boot_magic_off(fap) - BOOT_MAX_ALIGN;
    545a:	6881      	ldr	r1, [r0, #8]
    return boot_write_trailer_flag(fap, off, BOOT_FLAG_SET);
    545c:	2201      	movs	r2, #1
    545e:	3918      	subs	r1, #24
    5460:	f7ff bff1 	b.w	5446 <boot_write_trailer_flag>

00005464 <boot_read_image_ok>:
    return boot_magic_off(fap) - BOOT_MAX_ALIGN;
    5464:	6882      	ldr	r2, [r0, #8]
    return boot_read_flag(fap, image_ok, boot_image_ok_off(fap));
    5466:	3a18      	subs	r2, #24
    5468:	f7ff bfa3 	b.w	53b2 <boot_read_flag>

0000546c <boot_read_swap_state_by_id>:
{
    546c:	b513      	push	{r0, r1, r4, lr}
    546e:	460c      	mov	r4, r1
    rc = flash_area_open(flash_area_id, &fap);
    5470:	b2c0      	uxtb	r0, r0
    5472:	a901      	add	r1, sp, #4
    5474:	f7fc fab4 	bl	19e0 <flash_area_open>
    if (rc != 0) {
    5478:	b950      	cbnz	r0, 5490 <boot_read_swap_state_by_id+0x24>
    rc = boot_read_swap_state(fap, state);
    547a:	4621      	mov	r1, r4
    547c:	9801      	ldr	r0, [sp, #4]
    547e:	f7fd fcff 	bl	2e80 <boot_read_swap_state>
    5482:	4604      	mov	r4, r0
    flash_area_close(fap);
    5484:	9801      	ldr	r0, [sp, #4]
    5486:	f7ff fb9c 	bl	4bc2 <flash_area_close>
}
    548a:	4620      	mov	r0, r4
    548c:	b002      	add	sp, #8
    548e:	bd10      	pop	{r4, pc}
        return BOOT_EFLASH;
    5490:	2401      	movs	r4, #1
    5492:	e7fa      	b.n	548a <boot_read_swap_state_by_id+0x1e>

00005494 <boot_write_swap_info>:
{
    5494:	b507      	push	{r0, r1, r2, lr}
    BOOT_SET_SWAP_INFO(swap_info, image_num, swap_type);
    5496:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
    549a:	f88d 1007 	strb.w	r1, [sp, #7]
    return boot_copy_done_off(fap) - BOOT_MAX_ALIGN;
    549e:	6881      	ldr	r1, [r0, #8]
    return boot_write_trailer(fap, off, (const uint8_t *) &swap_info, 1);
    54a0:	2301      	movs	r3, #1
    54a2:	f10d 0207 	add.w	r2, sp, #7
    54a6:	3928      	subs	r1, #40	; 0x28
    54a8:	f7ff ffa0 	bl	53ec <boot_write_trailer>
}
    54ac:	b003      	add	sp, #12
    54ae:	f85d fb04 	ldr.w	pc, [sp], #4

000054b2 <nrf52_errata_108>:
            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
    54b2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    54b6:	f8d3 0130 	ldr.w	r0, [r3, #304]	; 0x130
    54ba:	1c42      	adds	r2, r0, #1
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    54bc:	bf04      	itt	eq
    54be:	f04f 4370 	moveq.w	r3, #4026531840	; 0xf0000000
    54c2:	f893 0fe0 	ldrbeq.w	r0, [r3, #4064]	; 0xfe0
}
    54c6:	1f83      	subs	r3, r0, #6
    54c8:	4258      	negs	r0, r3
    54ca:	4158      	adcs	r0, r3
    54cc:	4770      	bx	lr

000054ce <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
    54ce:	4700      	bx	r0

000054d0 <nrfx_busy_wait>:
    54d0:	f001 bbb4 	b.w	6c3c <z_impl_k_busy_wait>

000054d4 <nrfx_clock_enable>:
{
    54d4:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    54d6:	2000      	movs	r0, #0
    54d8:	f7fc fcc4 	bl	1e64 <arch_irq_is_enabled>
    54dc:	b918      	cbnz	r0, 54e6 <nrfx_clock_enable+0x12>
}
    54de:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    54e2:	f7fc bcaf 	b.w	1e44 <arch_irq_enable>
    54e6:	bd08      	pop	{r3, pc}

000054e8 <nrfx_nvmc_flash_size_get>:
    54e8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    54ec:	691a      	ldr	r2, [r3, #16]
NRF_STATIC_INLINE uint32_t nrf_ficr_codesize_get(NRF_FICR_Type const * p_reg)
{
#if defined(FICR_INFO_CODESIZE_CODESIZE_Msk)
    return p_reg->INFO.CODESIZE;
#else
    return p_reg->CODESIZE;
    54ee:	6958      	ldr	r0, [r3, #20]
}

uint32_t nrfx_nvmc_flash_size_get(void)
{
    return flash_total_size_get();
}
    54f0:	4350      	muls	r0, r2
    54f2:	4770      	bx	lr

000054f4 <nrfx_nvmc_flash_page_size_get>:
    return p_reg->CODEPAGESIZE;
    54f4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    54f8:	6918      	ldr	r0, [r3, #16]

uint32_t nrfx_nvmc_flash_page_size_get(void)
{
    return flash_page_size_get();
}
    54fa:	4770      	bx	lr

000054fc <nrfx_nvmc_flash_page_count_get>:
    return p_reg->CODESIZE;
    54fc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    5500:	6958      	ldr	r0, [r3, #20]

uint32_t nrfx_nvmc_flash_page_count_get(void)
{
    return flash_page_count_get();
}
    5502:	4770      	bx	lr

00005504 <_mbedtls_init>:
	ARG_UNUSED(device);

	init_heap();

	return 0;
}
    5504:	2000      	movs	r0, #0
    5506:	4770      	bx	lr

00005508 <mbedtls_asn1_get_len>:
 */
int mbedtls_asn1_get_len( unsigned char **p,
                  const unsigned char *end,
                  size_t *len )
{
    if( ( end - *p ) < 1 )
    5508:	6803      	ldr	r3, [r0, #0]
{
    550a:	b570      	push	{r4, r5, r6, lr}
    if( ( end - *p ) < 1 )
    550c:	1acd      	subs	r5, r1, r3
    550e:	2d00      	cmp	r5, #0
    5510:	dd0d      	ble.n	552e <mbedtls_asn1_get_len+0x26>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    if( ( **p & 0x80 ) == 0 )
    5512:	f993 6000 	ldrsb.w	r6, [r3]
    5516:	781c      	ldrb	r4, [r3, #0]
    5518:	2e00      	cmp	r6, #0
    551a:	db0b      	blt.n	5534 <mbedtls_asn1_get_len+0x2c>
        *len = *(*p)++;
    551c:	1c5c      	adds	r4, r3, #1
    551e:	6004      	str	r4, [r0, #0]
    5520:	781b      	ldrb	r3, [r3, #0]
    5522:	6013      	str	r3, [r2, #0]
        default:
            return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
        }
    }

    if( *len > (size_t) ( end - *p ) )
    5524:	6803      	ldr	r3, [r0, #0]
    5526:	1ac9      	subs	r1, r1, r3
    5528:	6813      	ldr	r3, [r2, #0]
    552a:	428b      	cmp	r3, r1
    552c:	d932      	bls.n	5594 <mbedtls_asn1_get_len+0x8c>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
    552e:	f06f 005f 	mvn.w	r0, #95	; 0x5f

    return( 0 );
}
    5532:	bd70      	pop	{r4, r5, r6, pc}
        switch( **p & 0x7F )
    5534:	f004 047f 	and.w	r4, r4, #127	; 0x7f
    5538:	3c01      	subs	r4, #1
    553a:	2c03      	cmp	r4, #3
    553c:	d827      	bhi.n	558e <mbedtls_asn1_get_len+0x86>
    553e:	e8df f004 	tbb	[pc, r4]
    5542:	0902      	.short	0x0902
    5544:	1e12      	.short	0x1e12
            if( ( end - *p ) < 2 )
    5546:	2d01      	cmp	r5, #1
    5548:	d0f1      	beq.n	552e <mbedtls_asn1_get_len+0x26>
            *len = (*p)[1];
    554a:	785c      	ldrb	r4, [r3, #1]
    554c:	6014      	str	r4, [r2, #0]
            (*p) += 2;
    554e:	3302      	adds	r3, #2
            (*p) += 5;
    5550:	6003      	str	r3, [r0, #0]
            break;
    5552:	e7e7      	b.n	5524 <mbedtls_asn1_get_len+0x1c>
            if( ( end - *p ) < 3 )
    5554:	2d02      	cmp	r5, #2
    5556:	ddea      	ble.n	552e <mbedtls_asn1_get_len+0x26>
            *len = ( (size_t)(*p)[1] << 8 ) | (*p)[2];
    5558:	f8b3 4001 	ldrh.w	r4, [r3, #1]
    555c:	ba64      	rev16	r4, r4
    555e:	b2a4      	uxth	r4, r4
    5560:	6014      	str	r4, [r2, #0]
            (*p) += 3;
    5562:	3303      	adds	r3, #3
    5564:	e7f4      	b.n	5550 <mbedtls_asn1_get_len+0x48>
            if( ( end - *p ) < 4 )
    5566:	2d03      	cmp	r5, #3
    5568:	dde1      	ble.n	552e <mbedtls_asn1_get_len+0x26>
                   ( (size_t)(*p)[2] << 8  ) | (*p)[3];
    556a:	789c      	ldrb	r4, [r3, #2]
            *len = ( (size_t)(*p)[1] << 16 ) |
    556c:	785d      	ldrb	r5, [r3, #1]
                   ( (size_t)(*p)[2] << 8  ) | (*p)[3];
    556e:	0224      	lsls	r4, r4, #8
            *len = ( (size_t)(*p)[1] << 16 ) |
    5570:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
                   ( (size_t)(*p)[2] << 8  ) | (*p)[3];
    5574:	78dd      	ldrb	r5, [r3, #3]
    5576:	432c      	orrs	r4, r5
            *len = ( (size_t)(*p)[1] << 16 ) |
    5578:	6014      	str	r4, [r2, #0]
            (*p) += 4;
    557a:	3304      	adds	r3, #4
    557c:	e7e8      	b.n	5550 <mbedtls_asn1_get_len+0x48>
            if( ( end - *p ) < 5 )
    557e:	2d04      	cmp	r5, #4
    5580:	ddd5      	ble.n	552e <mbedtls_asn1_get_len+0x26>
            *len = ( (size_t)(*p)[1] << 24 ) | ( (size_t)(*p)[2] << 16 ) |
    5582:	f8d3 4001 	ldr.w	r4, [r3, #1]
    5586:	ba24      	rev	r4, r4
    5588:	6014      	str	r4, [r2, #0]
            (*p) += 5;
    558a:	3305      	adds	r3, #5
    558c:	e7e0      	b.n	5550 <mbedtls_asn1_get_len+0x48>
        switch( **p & 0x7F )
    558e:	f06f 0063 	mvn.w	r0, #99	; 0x63
    5592:	e7ce      	b.n	5532 <mbedtls_asn1_get_len+0x2a>
    return( 0 );
    5594:	2000      	movs	r0, #0
    5596:	e7cc      	b.n	5532 <mbedtls_asn1_get_len+0x2a>

00005598 <mbedtls_asn1_get_tag>:

int mbedtls_asn1_get_tag( unsigned char **p,
                  const unsigned char *end,
                  size_t *len, int tag )
{
    5598:	b470      	push	{r4, r5, r6}
    if( ( end - *p ) < 1 )
    559a:	6804      	ldr	r4, [r0, #0]
    559c:	1b0e      	subs	r6, r1, r4
    559e:	2e00      	cmp	r6, #0
    55a0:	dd07      	ble.n	55b2 <mbedtls_asn1_get_tag+0x1a>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    if( **p != tag )
    55a2:	7826      	ldrb	r6, [r4, #0]
    55a4:	429e      	cmp	r6, r3
    55a6:	d108      	bne.n	55ba <mbedtls_asn1_get_tag+0x22>
        return( MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );

    (*p)++;
    55a8:	3401      	adds	r4, #1
    55aa:	6004      	str	r4, [r0, #0]

    return( mbedtls_asn1_get_len( p, end, len ) );
}
    55ac:	bc70      	pop	{r4, r5, r6}
    return( mbedtls_asn1_get_len( p, end, len ) );
    55ae:	f7ff bfab 	b.w	5508 <mbedtls_asn1_get_len>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
    55b2:	f06f 005f 	mvn.w	r0, #95	; 0x5f
}
    55b6:	bc70      	pop	{r4, r5, r6}
    55b8:	4770      	bx	lr
        return( MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );
    55ba:	f06f 0061 	mvn.w	r0, #97	; 0x61
    55be:	e7fa      	b.n	55b6 <mbedtls_asn1_get_tag+0x1e>

000055c0 <mbedtls_asn1_get_mpi>:

#if defined(MBEDTLS_BIGNUM_C)
int mbedtls_asn1_get_mpi( unsigned char **p,
                  const unsigned char *end,
                  mbedtls_mpi *X )
{
    55c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
    55c2:	2302      	movs	r3, #2
{
    55c4:	4615      	mov	r5, r2
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
    55c6:	aa01      	add	r2, sp, #4
{
    55c8:	4604      	mov	r4, r0
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
    55ca:	f7ff ffe5 	bl	5598 <mbedtls_asn1_get_tag>
    55ce:	b940      	cbnz	r0, 55e2 <mbedtls_asn1_get_mpi+0x22>
        return( ret );

    ret = mbedtls_mpi_read_binary( X, *p, len );
    55d0:	9a01      	ldr	r2, [sp, #4]
    55d2:	6821      	ldr	r1, [r4, #0]
    55d4:	4628      	mov	r0, r5
    55d6:	f000 fb09 	bl	5bec <mbedtls_mpi_read_binary>

    *p += len;
    55da:	6823      	ldr	r3, [r4, #0]
    55dc:	9a01      	ldr	r2, [sp, #4]
    55de:	4413      	add	r3, r2
    55e0:	6023      	str	r3, [r4, #0]

    return( ret );
}
    55e2:	b003      	add	sp, #12
    55e4:	bd30      	pop	{r4, r5, pc}

000055e6 <mpi_sub_hlp>:
 *                      0 if `d >= s`.
 */
static mbedtls_mpi_uint mpi_sub_hlp( size_t n,
                                     mbedtls_mpi_uint *d,
                                     const mbedtls_mpi_uint *s )
{
    55e6:	b5f0      	push	{r4, r5, r6, r7, lr}
    55e8:	4605      	mov	r5, r0
    size_t i;
    mbedtls_mpi_uint c, z;

    for( i = c = 0; i < n; i++, s++, d++ )
    55ea:	2000      	movs	r0, #0
    55ec:	3904      	subs	r1, #4
    55ee:	4604      	mov	r4, r0
    55f0:	42ac      	cmp	r4, r5
    55f2:	d100      	bne.n	55f6 <mpi_sub_hlp+0x10>
        z = ( *d <  c );     *d -=  c;
        c = ( *d < *s ) + z; *d -= *s;
    }

    return( c );
}
    55f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        z = ( *d <  c );     *d -=  c;
    55f6:	f851 7f04 	ldr.w	r7, [r1, #4]!
    55fa:	1a3b      	subs	r3, r7, r0
    55fc:	600b      	str	r3, [r1, #0]
        c = ( *d < *s ) + z; *d -= *s;
    55fe:	f852 6024 	ldr.w	r6, [r2, r4, lsl #2]
    5602:	42b3      	cmp	r3, r6
    5604:	bf2c      	ite	cs
    5606:	f04f 0c00 	movcs.w	ip, #0
    560a:	f04f 0c01 	movcc.w	ip, #1
    560e:	1b9b      	subs	r3, r3, r6
    5610:	4287      	cmp	r7, r0
    5612:	bf2c      	ite	cs
    5614:	4660      	movcs	r0, ip
    5616:	f10c 0001 	addcc.w	r0, ip, #1
    561a:	600b      	str	r3, [r1, #0]
    for( i = c = 0; i < n; i++, s++, d++ )
    561c:	3401      	adds	r4, #1
    561e:	e7e7      	b.n	55f0 <mpi_sub_hlp+0xa>

00005620 <mpi_mul_hlp>:
 * appears to need this to prevent bad ARM code generation at -O3.
 */
__attribute__ ((noinline))
#endif
void mpi_mul_hlp( size_t i, mbedtls_mpi_uint *s, mbedtls_mpi_uint *d, mbedtls_mpi_uint b )
{
    5620:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    5624:	4691      	mov	r9, r2
    5626:	460e      	mov	r6, r1
    5628:	f102 0440 	add.w	r4, r2, #64	; 0x40
        MULADDC_INIT
        MULADDC_CORE
        MULADDC_STOP
    }
#else /* MULADDC_HUIT */
    for( ; i >= 16; i -= 16 )
    562c:	4686      	mov	lr, r0
    mbedtls_mpi_uint c = 0, t = 0;
    562e:	2500      	movs	r5, #0
    for( ; i >= 16; i -= 16 )
    5630:	f1be 0f0f 	cmp.w	lr, #15
    {
        MULADDC_INIT
        MULADDC_CORE   MULADDC_CORE
    5634:	f854 cc40 	ldr.w	ip, [r4, #-64]
    for( ; i >= 16; i -= 16 )
    5638:	f106 0640 	add.w	r6, r6, #64	; 0x40
    563c:	f104 0440 	add.w	r4, r4, #64	; 0x40
    5640:	d87d      	bhi.n	573e <mpi_mul_hlp+0x11e>
    5642:	0907      	lsrs	r7, r0, #4
    5644:	f06f 060f 	mvn.w	r6, #15
    5648:	fb06 0607 	mla	r6, r6, r7, r0
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE
        MULADDC_STOP
    }

    for( ; i >= 8; i -= 8 )
    564c:	2e07      	cmp	r6, #7
    564e:	ea4f 1e87 	mov.w	lr, r7, lsl #6
    5652:	eb01 1487 	add.w	r4, r1, r7, lsl #6
    5656:	eb09 1087 	add.w	r0, r9, r7, lsl #6
    565a:	d95c      	bls.n	5716 <mpi_mul_hlp+0xf6>
    {
        MULADDC_INIT
        MULADDC_CORE   MULADDC_CORE
    565c:	f851 700e 	ldr.w	r7, [r1, lr]
    5660:	fba3 1707 	umull	r1, r7, r3, r7
    5664:	186d      	adds	r5, r5, r1
    5666:	f147 0700 	adc.w	r7, r7, #0
    566a:	eb1c 0505 	adds.w	r5, ip, r5
    566e:	f849 500e 	str.w	r5, [r9, lr]
    5672:	6861      	ldr	r1, [r4, #4]
    5674:	f147 0200 	adc.w	r2, r7, #0
    5678:	fba3 5101 	umull	r5, r1, r3, r1
    567c:	1952      	adds	r2, r2, r5
    567e:	6845      	ldr	r5, [r0, #4]
    5680:	f141 0100 	adc.w	r1, r1, #0
    5684:	1952      	adds	r2, r2, r5
    5686:	6042      	str	r2, [r0, #4]
        MULADDC_CORE   MULADDC_CORE
    5688:	68a2      	ldr	r2, [r4, #8]
        MULADDC_CORE   MULADDC_CORE
    568a:	f141 0100 	adc.w	r1, r1, #0
        MULADDC_CORE   MULADDC_CORE
    568e:	fba3 5202 	umull	r5, r2, r3, r2
    5692:	1949      	adds	r1, r1, r5
    5694:	6885      	ldr	r5, [r0, #8]
    5696:	f142 0200 	adc.w	r2, r2, #0
    569a:	1949      	adds	r1, r1, r5
    569c:	6081      	str	r1, [r0, #8]
    569e:	68e1      	ldr	r1, [r4, #12]
    56a0:	f142 0200 	adc.w	r2, r2, #0
    56a4:	fba3 5101 	umull	r5, r1, r3, r1
    56a8:	1952      	adds	r2, r2, r5
    56aa:	68c5      	ldr	r5, [r0, #12]
    56ac:	f141 0100 	adc.w	r1, r1, #0
    56b0:	1952      	adds	r2, r2, r5
    56b2:	60c2      	str	r2, [r0, #12]

        MULADDC_CORE   MULADDC_CORE
    56b4:	6922      	ldr	r2, [r4, #16]
        MULADDC_CORE   MULADDC_CORE
    56b6:	f141 0100 	adc.w	r1, r1, #0
        MULADDC_CORE   MULADDC_CORE
    56ba:	fba3 5202 	umull	r5, r2, r3, r2
    56be:	1949      	adds	r1, r1, r5
    56c0:	6905      	ldr	r5, [r0, #16]
    56c2:	f142 0200 	adc.w	r2, r2, #0
    56c6:	1949      	adds	r1, r1, r5
    56c8:	6101      	str	r1, [r0, #16]
    56ca:	6961      	ldr	r1, [r4, #20]
    56cc:	f142 0200 	adc.w	r2, r2, #0
    56d0:	fba3 5101 	umull	r5, r1, r3, r1
    56d4:	1952      	adds	r2, r2, r5
    56d6:	6945      	ldr	r5, [r0, #20]
    56d8:	f141 0100 	adc.w	r1, r1, #0
    56dc:	1952      	adds	r2, r2, r5
    56de:	6142      	str	r2, [r0, #20]
        MULADDC_CORE   MULADDC_CORE
    56e0:	69a2      	ldr	r2, [r4, #24]
        MULADDC_CORE   MULADDC_CORE
    56e2:	f141 0100 	adc.w	r1, r1, #0
        MULADDC_CORE   MULADDC_CORE
    56e6:	fba3 5202 	umull	r5, r2, r3, r2
    56ea:	1949      	adds	r1, r1, r5
    56ec:	6985      	ldr	r5, [r0, #24]
    56ee:	f142 0200 	adc.w	r2, r2, #0
    56f2:	1949      	adds	r1, r1, r5
    56f4:	6181      	str	r1, [r0, #24]
    56f6:	69e5      	ldr	r5, [r4, #28]
    56f8:	f142 0200 	adc.w	r2, r2, #0
    56fc:	fba3 5105 	umull	r5, r1, r3, r5
    5700:	1952      	adds	r2, r2, r5
    5702:	f141 0500 	adc.w	r5, r1, #0
    5706:	69c1      	ldr	r1, [r0, #28]
    5708:	1852      	adds	r2, r2, r1
    570a:	61c2      	str	r2, [r0, #28]
    570c:	f145 0500 	adc.w	r5, r5, #0
    for( ; i >= 8; i -= 8 )
    5710:	3e08      	subs	r6, #8
        MULADDC_CORE   MULADDC_CORE
    5712:	3020      	adds	r0, #32
    5714:	3420      	adds	r4, #32
    5716:	ea4f 0e86 	mov.w	lr, r6, lsl #2
    571a:	4607      	mov	r7, r0
    571c:	eb04 0686 	add.w	r6, r4, r6, lsl #2
        MULADDC_STOP
    }

    for( ; i > 0; i-- )
    5720:	42a6      	cmp	r6, r4
    {
        MULADDC_INIT
        MULADDC_CORE
    5722:	f857 1b04 	ldr.w	r1, [r7], #4
    for( ; i > 0; i-- )
    5726:	f040 8108 	bne.w	593a <mpi_mul_hlp+0x31a>
    572a:	4470      	add	r0, lr
#endif /* MULADDC_HUIT */

    t++;

    do {
        *d += c; c = ( *d < c ); d++;
    572c:	6803      	ldr	r3, [r0, #0]
    572e:	195b      	adds	r3, r3, r5
    5730:	f840 3b04 	str.w	r3, [r0], #4
    5734:	f04f 0501 	mov.w	r5, #1
    }
    while( c != 0 );
    5738:	d2f8      	bcs.n	572c <mpi_mul_hlp+0x10c>
}
    573a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        MULADDC_CORE   MULADDC_CORE
    573e:	f856 7c40 	ldr.w	r7, [r6, #-64]
    5742:	f854 2c7c 	ldr.w	r2, [r4, #-124]
    5746:	fba3 8707 	umull	r8, r7, r3, r7
    574a:	eb15 0508 	adds.w	r5, r5, r8
    574e:	f147 0700 	adc.w	r7, r7, #0
    5752:	eb1c 0505 	adds.w	r5, ip, r5
    5756:	f844 5c80 	str.w	r5, [r4, #-128]
    575a:	f856 5c3c 	ldr.w	r5, [r6, #-60]
    575e:	f147 0700 	adc.w	r7, r7, #0
    5762:	fba3 c505 	umull	ip, r5, r3, r5
    5766:	eb17 070c 	adds.w	r7, r7, ip
    576a:	f145 0500 	adc.w	r5, r5, #0
    576e:	19d7      	adds	r7, r2, r7
    5770:	f844 7c7c 	str.w	r7, [r4, #-124]
        MULADDC_CORE   MULADDC_CORE
    5774:	f856 7c38 	ldr.w	r7, [r6, #-56]
        MULADDC_CORE   MULADDC_CORE
    5778:	f145 0500 	adc.w	r5, r5, #0
        MULADDC_CORE   MULADDC_CORE
    577c:	fba3 c707 	umull	ip, r7, r3, r7
    5780:	eb15 0c0c 	adds.w	ip, r5, ip
    5784:	f854 5c78 	ldr.w	r5, [r4, #-120]
    5788:	f147 0700 	adc.w	r7, r7, #0
    578c:	eb15 050c 	adds.w	r5, r5, ip
    5790:	f844 5c78 	str.w	r5, [r4, #-120]
    5794:	f856 5c34 	ldr.w	r5, [r6, #-52]
    5798:	f147 0700 	adc.w	r7, r7, #0
    579c:	fba3 c505 	umull	ip, r5, r3, r5
    57a0:	eb17 0c0c 	adds.w	ip, r7, ip
    57a4:	f854 7c74 	ldr.w	r7, [r4, #-116]
    57a8:	f145 0500 	adc.w	r5, r5, #0
    57ac:	eb17 070c 	adds.w	r7, r7, ip
    57b0:	f844 7c74 	str.w	r7, [r4, #-116]
        MULADDC_CORE   MULADDC_CORE
    57b4:	f856 7c30 	ldr.w	r7, [r6, #-48]
        MULADDC_CORE   MULADDC_CORE
    57b8:	f145 0500 	adc.w	r5, r5, #0
        MULADDC_CORE   MULADDC_CORE
    57bc:	fba3 c707 	umull	ip, r7, r3, r7
    57c0:	eb15 0c0c 	adds.w	ip, r5, ip
    57c4:	f854 5c70 	ldr.w	r5, [r4, #-112]
    57c8:	f147 0700 	adc.w	r7, r7, #0
    57cc:	eb15 050c 	adds.w	r5, r5, ip
    57d0:	f844 5c70 	str.w	r5, [r4, #-112]
    57d4:	f856 5c2c 	ldr.w	r5, [r6, #-44]
    57d8:	f147 0700 	adc.w	r7, r7, #0
    57dc:	fba3 c505 	umull	ip, r5, r3, r5
    57e0:	eb17 0c0c 	adds.w	ip, r7, ip
    57e4:	f854 7c6c 	ldr.w	r7, [r4, #-108]
    57e8:	f145 0500 	adc.w	r5, r5, #0
    57ec:	eb17 070c 	adds.w	r7, r7, ip
    57f0:	f844 7c6c 	str.w	r7, [r4, #-108]
        MULADDC_CORE   MULADDC_CORE
    57f4:	f856 7c28 	ldr.w	r7, [r6, #-40]
        MULADDC_CORE   MULADDC_CORE
    57f8:	f145 0500 	adc.w	r5, r5, #0
        MULADDC_CORE   MULADDC_CORE
    57fc:	fba3 c707 	umull	ip, r7, r3, r7
    5800:	eb15 0c0c 	adds.w	ip, r5, ip
    5804:	f854 5c68 	ldr.w	r5, [r4, #-104]
    5808:	f147 0700 	adc.w	r7, r7, #0
    580c:	eb15 050c 	adds.w	r5, r5, ip
    5810:	f844 5c68 	str.w	r5, [r4, #-104]
    5814:	f856 5c24 	ldr.w	r5, [r6, #-36]
    5818:	f147 0700 	adc.w	r7, r7, #0
    581c:	fba3 c505 	umull	ip, r5, r3, r5
    5820:	eb17 0c0c 	adds.w	ip, r7, ip
    5824:	f854 7c64 	ldr.w	r7, [r4, #-100]
    5828:	f145 0500 	adc.w	r5, r5, #0
    582c:	eb17 070c 	adds.w	r7, r7, ip
    5830:	f844 7c64 	str.w	r7, [r4, #-100]
        MULADDC_CORE   MULADDC_CORE
    5834:	f856 7c20 	ldr.w	r7, [r6, #-32]
        MULADDC_CORE   MULADDC_CORE
    5838:	f145 0500 	adc.w	r5, r5, #0
        MULADDC_CORE   MULADDC_CORE
    583c:	fba3 c707 	umull	ip, r7, r3, r7
    5840:	eb15 0c0c 	adds.w	ip, r5, ip
    5844:	f854 5c60 	ldr.w	r5, [r4, #-96]
    5848:	f147 0700 	adc.w	r7, r7, #0
    584c:	eb15 050c 	adds.w	r5, r5, ip
    5850:	f844 5c60 	str.w	r5, [r4, #-96]
    5854:	f856 5c1c 	ldr.w	r5, [r6, #-28]
    5858:	f147 0700 	adc.w	r7, r7, #0
    585c:	fba3 c505 	umull	ip, r5, r3, r5
    5860:	eb17 0c0c 	adds.w	ip, r7, ip
    5864:	f854 7c5c 	ldr.w	r7, [r4, #-92]
    5868:	f145 0500 	adc.w	r5, r5, #0
    586c:	eb17 070c 	adds.w	r7, r7, ip
    5870:	f844 7c5c 	str.w	r7, [r4, #-92]
        MULADDC_CORE   MULADDC_CORE
    5874:	f856 7c18 	ldr.w	r7, [r6, #-24]
        MULADDC_CORE   MULADDC_CORE
    5878:	f145 0500 	adc.w	r5, r5, #0
        MULADDC_CORE   MULADDC_CORE
    587c:	fba3 c707 	umull	ip, r7, r3, r7
    5880:	eb15 0c0c 	adds.w	ip, r5, ip
    5884:	f854 5c58 	ldr.w	r5, [r4, #-88]
    5888:	f147 0700 	adc.w	r7, r7, #0
    588c:	eb15 050c 	adds.w	r5, r5, ip
    5890:	f844 5c58 	str.w	r5, [r4, #-88]
    5894:	f856 5c14 	ldr.w	r5, [r6, #-20]
        MULADDC_CORE   MULADDC_CORE
    5898:	f854 2c44 	ldr.w	r2, [r4, #-68]
        MULADDC_CORE   MULADDC_CORE
    589c:	fba3 c505 	umull	ip, r5, r3, r5
    58a0:	f147 0700 	adc.w	r7, r7, #0
    58a4:	eb17 0c0c 	adds.w	ip, r7, ip
    58a8:	f854 7c54 	ldr.w	r7, [r4, #-84]
    58ac:	f145 0500 	adc.w	r5, r5, #0
    58b0:	eb17 070c 	adds.w	r7, r7, ip
    58b4:	f844 7c54 	str.w	r7, [r4, #-84]
        MULADDC_CORE   MULADDC_CORE
    58b8:	f856 7c10 	ldr.w	r7, [r6, #-16]
        MULADDC_CORE   MULADDC_CORE
    58bc:	f145 0500 	adc.w	r5, r5, #0
        MULADDC_CORE   MULADDC_CORE
    58c0:	fba3 c707 	umull	ip, r7, r3, r7
    58c4:	eb15 0c0c 	adds.w	ip, r5, ip
    58c8:	f854 5c50 	ldr.w	r5, [r4, #-80]
    58cc:	f147 0700 	adc.w	r7, r7, #0
    58d0:	eb15 050c 	adds.w	r5, r5, ip
    58d4:	f844 5c50 	str.w	r5, [r4, #-80]
    58d8:	f856 5c0c 	ldr.w	r5, [r6, #-12]
    58dc:	f147 0700 	adc.w	r7, r7, #0
    58e0:	fba3 c505 	umull	ip, r5, r3, r5
    58e4:	eb17 0c0c 	adds.w	ip, r7, ip
    58e8:	f854 7c4c 	ldr.w	r7, [r4, #-76]
    58ec:	f145 0500 	adc.w	r5, r5, #0
    58f0:	eb17 070c 	adds.w	r7, r7, ip
    58f4:	f844 7c4c 	str.w	r7, [r4, #-76]
        MULADDC_CORE   MULADDC_CORE
    58f8:	f856 7c08 	ldr.w	r7, [r6, #-8]
        MULADDC_CORE   MULADDC_CORE
    58fc:	f145 0500 	adc.w	r5, r5, #0
        MULADDC_CORE   MULADDC_CORE
    5900:	fba3 c707 	umull	ip, r7, r3, r7
    5904:	eb15 0c0c 	adds.w	ip, r5, ip
    5908:	f854 5c48 	ldr.w	r5, [r4, #-72]
    590c:	f147 0700 	adc.w	r7, r7, #0
    5910:	eb15 050c 	adds.w	r5, r5, ip
    5914:	f844 5c48 	str.w	r5, [r4, #-72]
    5918:	f856 5c04 	ldr.w	r5, [r6, #-4]
    591c:	f147 0700 	adc.w	r7, r7, #0
    5920:	fba3 5c05 	umull	r5, ip, r3, r5
    5924:	197f      	adds	r7, r7, r5
    5926:	f14c 0500 	adc.w	r5, ip, #0
    592a:	19d7      	adds	r7, r2, r7
    592c:	f145 0500 	adc.w	r5, r5, #0
    5930:	f844 7c44 	str.w	r7, [r4, #-68]
    for( ; i >= 16; i -= 16 )
    5934:	f1ae 0e10 	sub.w	lr, lr, #16
    5938:	e67a      	b.n	5630 <mpi_mul_hlp+0x10>
        MULADDC_CORE
    593a:	f854 2b04 	ldr.w	r2, [r4], #4
    593e:	fba3 2c02 	umull	r2, ip, r3, r2
    5942:	18ad      	adds	r5, r5, r2
    5944:	f14c 0200 	adc.w	r2, ip, #0
    5948:	1869      	adds	r1, r5, r1
    594a:	f142 0500 	adc.w	r5, r2, #0
    594e:	f847 1c04 	str.w	r1, [r7, #-4]
    for( ; i > 0; i-- )
    5952:	e6e5      	b.n	5720 <mpi_mul_hlp+0x100>

00005954 <mpi_montmul>:
 *                      Note that unlike the usual convention in the library
 *                      for `const mbedtls_mpi*`, the content of T can change.
 */
static void mpi_montmul( mbedtls_mpi *A, const mbedtls_mpi *B, const mbedtls_mpi *N, mbedtls_mpi_uint mm,
                         const mbedtls_mpi *T )
{
    5954:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5958:	b085      	sub	sp, #20
    595a:	4617      	mov	r7, r2
    595c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    595e:	9000      	str	r0, [sp, #0]
    size_t i, n, m;
    mbedtls_mpi_uint u0, u1, *d;

    memset( T->p, 0, T->n * ciL );
    5960:	6862      	ldr	r2, [r4, #4]
    5962:	68a0      	ldr	r0, [r4, #8]
{
    5964:	9303      	str	r3, [sp, #12]
    5966:	468a      	mov	sl, r1
    memset( T->p, 0, T->n * ciL );
    5968:	0092      	lsls	r2, r2, #2
    596a:	2100      	movs	r1, #0
    596c:	f7ff fa96 	bl	4e9c <memset>

    d = T->p;
    n = N->n;
    5970:	687d      	ldr	r5, [r7, #4]
    m = ( B->n < n ) ? B->n : n;
    5972:	f8da 3004 	ldr.w	r3, [sl, #4]
    d = T->p;
    5976:	68a6      	ldr	r6, [r4, #8]
    m = ( B->n < n ) ? B->n : n;
    5978:	42ab      	cmp	r3, r5
    597a:	bf28      	it	cs
    597c:	462b      	movcs	r3, r5
        u1 = ( d[0] + u0 * B->p[0] ) * mm;

        mpi_mul_hlp( m, B->p, d, u0 );
        mpi_mul_hlp( n, N->p, d, u1 );

        *d++ = u0; d[n + 1] = 0;
    597e:	1c6c      	adds	r4, r5, #1
    m = ( B->n < n ) ? B->n : n;
    5980:	9301      	str	r3, [sp, #4]
        *d++ = u0; d[n + 1] = 0;
    5982:	00a4      	lsls	r4, r4, #2
    d = T->p;
    5984:	46b1      	mov	r9, r6
    for( i = 0; i < n; i++ )
    5986:	f04f 0800 	mov.w	r8, #0
        u0 = A->p[i];
    598a:	9b00      	ldr	r3, [sp, #0]
    for( i = 0; i < n; i++ )
    598c:	45a8      	cmp	r8, r5
        u0 = A->p[i];
    598e:	6898      	ldr	r0, [r3, #8]
    for( i = 0; i < n; i++ )
    5990:	d121      	bne.n	59d6 <mpi_montmul+0x82>
    5992:	3c04      	subs	r4, #4
    5994:	eb06 0804 	add.w	r8, r6, r4
     * plus N. We now potentially subtract N, avoiding leaking whether the
     * subtraction is performed through side channels. */

    /* Copy the n least significant limbs of d to A, so that
     * A = d if d < N (recall that N has n limbs). */
    memcpy( A->p, d, n * ciL );
    5998:	4622      	mov	r2, r4
    599a:	4641      	mov	r1, r8
    599c:	f7ff fa73 	bl	4e86 <memcpy>
    /* If d >= N then we want to set A to d - N. To prevent timing attacks,
     * do the calculation without using conditional tests. */
    /* Set d to d0 + (2^biL)^n - N where d0 is the current value of d. */
    d[n] += 1;
    59a0:	f856 3014 	ldr.w	r3, [r6, r4, lsl #1]
    d[n] -= mpi_sub_hlp( n, d, N->p );
    59a4:	68ba      	ldr	r2, [r7, #8]
    d[n] += 1;
    59a6:	3301      	adds	r3, #1
    59a8:	f846 3014 	str.w	r3, [r6, r4, lsl #1]
    d[n] -= mpi_sub_hlp( n, d, N->p );
    59ac:	4641      	mov	r1, r8
    59ae:	4628      	mov	r0, r5
    59b0:	f7ff fe19 	bl	55e6 <mpi_sub_hlp>
    59b4:	f856 3014 	ldr.w	r3, [r6, r4, lsl #1]
    59b8:	1a18      	subs	r0, r3, r0
    59ba:	9b00      	ldr	r3, [sp, #0]
    59bc:	f846 0014 	str.w	r0, [r6, r4, lsl #1]
    for( i = 0; i < n; i++ )
    59c0:	689b      	ldr	r3, [r3, #8]
    59c2:	b2c0      	uxtb	r0, r0
    59c4:	3b04      	subs	r3, #4
    59c6:	2100      	movs	r1, #0
        dest[i] = dest[i] * ( 1 - assign ) + src[i] * assign;
    59c8:	f1c0 0401 	rsb	r4, r0, #1
    for( i = 0; i < n; i++ )
    59cc:	428d      	cmp	r5, r1
    59ce:	d121      	bne.n	5a14 <mpi_montmul+0xc0>
     * If d0 >= N then d >= (2^biL)^n, and d <= (2^biL)^n + N < 2 * (2^biL)^n
     * so d[n] == 1 and we want to set A to the result of the subtraction
     * which is d - (2^biL)^n, i.e. the n least significant limbs of d.
     * This exactly corresponds to a conditional assignment. */
    mpi_safe_cond_assign( n, A->p, d, (unsigned char) d[n] );
}
    59d0:	b005      	add	sp, #20
    59d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        u1 = ( d[0] + u0 * B->p[0] ) * mm;
    59d6:	f8da 1008 	ldr.w	r1, [sl, #8]
        u0 = A->p[i];
    59da:	f850 b028 	ldr.w	fp, [r0, r8, lsl #2]
        u1 = ( d[0] + u0 * B->p[0] ) * mm;
    59de:	f8d9 3000 	ldr.w	r3, [r9]
    59e2:	6808      	ldr	r0, [r1, #0]
    59e4:	9a03      	ldr	r2, [sp, #12]
    59e6:	fb00 330b 	mla	r3, r0, fp, r3
    59ea:	4353      	muls	r3, r2
        mpi_mul_hlp( m, B->p, d, u0 );
    59ec:	9801      	ldr	r0, [sp, #4]
        u1 = ( d[0] + u0 * B->p[0] ) * mm;
    59ee:	9302      	str	r3, [sp, #8]
        mpi_mul_hlp( m, B->p, d, u0 );
    59f0:	464a      	mov	r2, r9
    59f2:	465b      	mov	r3, fp
    59f4:	f7ff fe14 	bl	5620 <mpi_mul_hlp>
        mpi_mul_hlp( n, N->p, d, u1 );
    59f8:	9b02      	ldr	r3, [sp, #8]
    59fa:	68b9      	ldr	r1, [r7, #8]
    59fc:	464a      	mov	r2, r9
    59fe:	4628      	mov	r0, r5
    5a00:	f7ff fe0e 	bl	5620 <mpi_mul_hlp>
        *d++ = u0; d[n + 1] = 0;
    5a04:	f849 bb04 	str.w	fp, [r9], #4
    5a08:	2300      	movs	r3, #0
    5a0a:	f849 3004 	str.w	r3, [r9, r4]
    for( i = 0; i < n; i++ )
    5a0e:	f108 0801 	add.w	r8, r8, #1
    5a12:	e7ba      	b.n	598a <mpi_montmul+0x36>
        dest[i] = dest[i] * ( 1 - assign ) + src[i] * assign;
    5a14:	f858 2021 	ldr.w	r2, [r8, r1, lsl #2]
    5a18:	f853 6f04 	ldr.w	r6, [r3, #4]!
    5a1c:	4342      	muls	r2, r0
    5a1e:	fb06 2204 	mla	r2, r6, r4, r2
    5a22:	601a      	str	r2, [r3, #0]
    for( i = 0; i < n; i++ )
    5a24:	3101      	adds	r1, #1
    5a26:	e7d1      	b.n	59cc <mpi_montmul+0x78>

00005a28 <mpi_bigendian_to_host.part.0>:
static void mpi_bigendian_to_host( mbedtls_mpi_uint * const p, size_t limbs )
    5a28:	b573      	push	{r0, r1, r4, r5, r6, lr}
    for( cur_limb_left = p, cur_limb_right = p + ( limbs - 1 );
    5a2a:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    5a2e:	3901      	subs	r1, #1
    5a30:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    5a34:	4281      	cmp	r1, r0
    5a36:	d201      	bcs.n	5a3c <mpi_bigendian_to_host.part.0+0x14>
}
    5a38:	b002      	add	sp, #8
    5a3a:	bd70      	pop	{r4, r5, r6, pc}
    return( mpi_uint_bigendian_to_host_c( x ) );
    5a3c:	6803      	ldr	r3, [r0, #0]
    5a3e:	9301      	str	r3, [sp, #4]
        tmp             = mpi_uint_bigendian_to_host( *cur_limb_left  );
    5a40:	2304      	movs	r3, #4
    for( i = 0, x_ptr = (unsigned char*) &x; i < ciL; i++, x_ptr++ )
    5a42:	eb0d 0203 	add.w	r2, sp, r3
    mbedtls_mpi_uint tmp = 0;
    5a46:	2500      	movs	r5, #0
    5a48:	4614      	mov	r4, r2
        tmp |= (mbedtls_mpi_uint) *x_ptr;
    5a4a:	f812 6b01 	ldrb.w	r6, [r2], #1
    for( i = 0, x_ptr = (unsigned char*) &x; i < ciL; i++, x_ptr++ )
    5a4e:	3b01      	subs	r3, #1
    5a50:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
        tmp |= (mbedtls_mpi_uint) *x_ptr;
    5a54:	ea46 2505 	orr.w	r5, r6, r5, lsl #8
    for( i = 0, x_ptr = (unsigned char*) &x; i < ciL; i++, x_ptr++ )
    5a58:	d1f7      	bne.n	5a4a <mpi_bigendian_to_host.part.0+0x22>
    return( mpi_uint_bigendian_to_host_c( x ) );
    5a5a:	680a      	ldr	r2, [r1, #0]
    5a5c:	9201      	str	r2, [sp, #4]
        *cur_limb_left  = mpi_uint_bigendian_to_host( *cur_limb_right );
    5a5e:	2204      	movs	r2, #4
        tmp |= (mbedtls_mpi_uint) *x_ptr;
    5a60:	f814 6b01 	ldrb.w	r6, [r4], #1
    for( i = 0, x_ptr = (unsigned char*) &x; i < ciL; i++, x_ptr++ )
    5a64:	3a01      	subs	r2, #1
    5a66:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
        tmp |= (mbedtls_mpi_uint) *x_ptr;
    5a6a:	ea46 2303 	orr.w	r3, r6, r3, lsl #8
    for( i = 0, x_ptr = (unsigned char*) &x; i < ciL; i++, x_ptr++ )
    5a6e:	d1f7      	bne.n	5a60 <mpi_bigendian_to_host.part.0+0x38>
        *cur_limb_left  = mpi_uint_bigendian_to_host( *cur_limb_right );
    5a70:	f840 3b04 	str.w	r3, [r0], #4
        *cur_limb_right = tmp;
    5a74:	f841 5904 	str.w	r5, [r1], #-4
         cur_limb_left++, cur_limb_right-- )
    5a78:	e7dc      	b.n	5a34 <mpi_bigendian_to_host.part.0+0xc>

00005a7a <mbedtls_mpi_init>:
    X->n = 0;
    5a7a:	2300      	movs	r3, #0
    5a7c:	2201      	movs	r2, #1
    5a7e:	e9c0 2300 	strd	r2, r3, [r0]
    X->p = NULL;
    5a82:	6083      	str	r3, [r0, #8]
}
    5a84:	4770      	bx	lr

00005a86 <mbedtls_mpi_free>:
{
    5a86:	b510      	push	{r4, lr}
    if( X == NULL )
    5a88:	4604      	mov	r4, r0
    5a8a:	b168      	cbz	r0, 5aa8 <mbedtls_mpi_free+0x22>
    if( X->p != NULL )
    5a8c:	6880      	ldr	r0, [r0, #8]
    5a8e:	b130      	cbz	r0, 5a9e <mbedtls_mpi_free+0x18>
    mbedtls_platform_zeroize( v, ciL * n );
    5a90:	6861      	ldr	r1, [r4, #4]
    5a92:	0089      	lsls	r1, r1, #2
    5a94:	f7fd ff4c 	bl	3930 <mbedtls_platform_zeroize>
        mbedtls_free( X->p );
    5a98:	68a0      	ldr	r0, [r4, #8]
    5a9a:	f7fd ff39 	bl	3910 <mbedtls_free>
    X->n = 0;
    5a9e:	2300      	movs	r3, #0
    5aa0:	2201      	movs	r2, #1
    5aa2:	e9c4 2300 	strd	r2, r3, [r4]
    X->p = NULL;
    5aa6:	60a3      	str	r3, [r4, #8]
}
    5aa8:	bd10      	pop	{r4, pc}

00005aaa <mbedtls_mpi_grow>:
    if( nblimbs > MBEDTLS_MPI_MAX_LIMBS )
    5aaa:	f242 7310 	movw	r3, #10000	; 0x2710
    5aae:	4299      	cmp	r1, r3
{
    5ab0:	b570      	push	{r4, r5, r6, lr}
    5ab2:	4604      	mov	r4, r0
    5ab4:	460d      	mov	r5, r1
    if( nblimbs > MBEDTLS_MPI_MAX_LIMBS )
    5ab6:	d902      	bls.n	5abe <mbedtls_mpi_grow+0x14>
        return( MBEDTLS_ERR_MPI_ALLOC_FAILED );
    5ab8:	f06f 000f 	mvn.w	r0, #15
}
    5abc:	bd70      	pop	{r4, r5, r6, pc}
    if( X->n < nblimbs )
    5abe:	6843      	ldr	r3, [r0, #4]
    5ac0:	428b      	cmp	r3, r1
    5ac2:	d216      	bcs.n	5af2 <mbedtls_mpi_grow+0x48>
        if( ( p = (mbedtls_mpi_uint*)mbedtls_calloc( nblimbs, ciL ) ) == NULL )
    5ac4:	2104      	movs	r1, #4
    5ac6:	4628      	mov	r0, r5
    5ac8:	f7fd ff1c 	bl	3904 <mbedtls_calloc>
    5acc:	4606      	mov	r6, r0
    5ace:	2800      	cmp	r0, #0
    5ad0:	d0f2      	beq.n	5ab8 <mbedtls_mpi_grow+0xe>
        if( X->p != NULL )
    5ad2:	68a1      	ldr	r1, [r4, #8]
    5ad4:	b159      	cbz	r1, 5aee <mbedtls_mpi_grow+0x44>
            memcpy( p, X->p, X->n * ciL );
    5ad6:	6862      	ldr	r2, [r4, #4]
    5ad8:	0092      	lsls	r2, r2, #2
    5ada:	f7ff f9d4 	bl	4e86 <memcpy>
    mbedtls_platform_zeroize( v, ciL * n );
    5ade:	6861      	ldr	r1, [r4, #4]
    5ae0:	68a0      	ldr	r0, [r4, #8]
    5ae2:	0089      	lsls	r1, r1, #2
    5ae4:	f7fd ff24 	bl	3930 <mbedtls_platform_zeroize>
            mbedtls_free( X->p );
    5ae8:	68a0      	ldr	r0, [r4, #8]
    5aea:	f7fd ff11 	bl	3910 <mbedtls_free>
        X->p = p;
    5aee:	e9c4 5601 	strd	r5, r6, [r4, #4]
    return( 0 );
    5af2:	2000      	movs	r0, #0
    5af4:	e7e2      	b.n	5abc <mbedtls_mpi_grow+0x12>

00005af6 <mbedtls_mpi_copy>:
    if( X == Y )
    5af6:	4288      	cmp	r0, r1
{
    5af8:	b570      	push	{r4, r5, r6, lr}
    5afa:	4605      	mov	r5, r0
    5afc:	460e      	mov	r6, r1
    if( X == Y )
    5afe:	d003      	beq.n	5b08 <mbedtls_mpi_copy+0x12>
    if( Y->n == 0 )
    5b00:	684c      	ldr	r4, [r1, #4]
    5b02:	b93c      	cbnz	r4, 5b14 <mbedtls_mpi_copy+0x1e>
        mbedtls_mpi_free( X );
    5b04:	f7ff ffbf 	bl	5a86 <mbedtls_mpi_free>
        return( 0 );
    5b08:	2000      	movs	r0, #0
    5b0a:	e011      	b.n	5b30 <mbedtls_mpi_copy+0x3a>
        if( Y->p[i] != 0 )
    5b0c:	68b3      	ldr	r3, [r6, #8]
    5b0e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
    5b12:	b913      	cbnz	r3, 5b1a <mbedtls_mpi_copy+0x24>
    for( i = Y->n - 1; i > 0; i-- )
    5b14:	3c01      	subs	r4, #1
    5b16:	2c00      	cmp	r4, #0
    5b18:	d1f8      	bne.n	5b0c <mbedtls_mpi_copy+0x16>
    if( X->n < i )
    5b1a:	686a      	ldr	r2, [r5, #4]
    X->s = Y->s;
    5b1c:	6833      	ldr	r3, [r6, #0]
    5b1e:	602b      	str	r3, [r5, #0]
    i++;
    5b20:	3401      	adds	r4, #1
    if( X->n < i )
    5b22:	42a2      	cmp	r2, r4
    5b24:	d205      	bcs.n	5b32 <mbedtls_mpi_copy+0x3c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i ) );
    5b26:	4621      	mov	r1, r4
    5b28:	4628      	mov	r0, r5
    5b2a:	f7ff ffbe 	bl	5aaa <mbedtls_mpi_grow>
    5b2e:	b140      	cbz	r0, 5b42 <mbedtls_mpi_copy+0x4c>
}
    5b30:	bd70      	pop	{r4, r5, r6, pc}
        memset( X->p + i, 0, ( X->n - i ) * ciL );
    5b32:	68a8      	ldr	r0, [r5, #8]
    5b34:	1b12      	subs	r2, r2, r4
    5b36:	0092      	lsls	r2, r2, #2
    5b38:	2100      	movs	r1, #0
    5b3a:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    5b3e:	f7ff f9ad 	bl	4e9c <memset>
    memcpy( X->p, Y->p, i * ciL );
    5b42:	68b1      	ldr	r1, [r6, #8]
    5b44:	68a8      	ldr	r0, [r5, #8]
    5b46:	00a2      	lsls	r2, r4, #2
    5b48:	f7ff f99d 	bl	4e86 <memcpy>
    5b4c:	e7dc      	b.n	5b08 <mbedtls_mpi_copy+0x12>

00005b4e <mbedtls_mpi_lset>:
{
    5b4e:	b570      	push	{r4, r5, r6, lr}
    5b50:	460e      	mov	r6, r1
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, 1 ) );
    5b52:	2101      	movs	r1, #1
{
    5b54:	4604      	mov	r4, r0
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, 1 ) );
    5b56:	f7ff ffa8 	bl	5aaa <mbedtls_mpi_grow>
    5b5a:	4605      	mov	r5, r0
    5b5c:	b988      	cbnz	r0, 5b82 <mbedtls_mpi_lset+0x34>
    memset( X->p, 0, X->n * ciL );
    5b5e:	6862      	ldr	r2, [r4, #4]
    5b60:	4601      	mov	r1, r0
    5b62:	0092      	lsls	r2, r2, #2
    5b64:	68a0      	ldr	r0, [r4, #8]
    5b66:	f7ff f999 	bl	4e9c <memset>
    X->p[0] = ( z < 0 ) ? -z : z;
    5b6a:	68a3      	ldr	r3, [r4, #8]
    5b6c:	ea86 72e6 	eor.w	r2, r6, r6, asr #31
    X->s    = ( z < 0 ) ? -1 : 1;
    5b70:	2e00      	cmp	r6, #0
    X->p[0] = ( z < 0 ) ? -z : z;
    5b72:	eba2 72e6 	sub.w	r2, r2, r6, asr #31
    5b76:	601a      	str	r2, [r3, #0]
    X->s    = ( z < 0 ) ? -1 : 1;
    5b78:	bfb4      	ite	lt
    5b7a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
    5b7e:	2301      	movge	r3, #1
    5b80:	6023      	str	r3, [r4, #0]
}
    5b82:	4628      	mov	r0, r5
    5b84:	bd70      	pop	{r4, r5, r6, pc}

00005b86 <mbedtls_mpi_get_bit>:
    if( X->n * biL <= pos )
    5b86:	6843      	ldr	r3, [r0, #4]
    5b88:	ebb1 1f43 	cmp.w	r1, r3, lsl #5
    return( ( X->p[pos / biL] >> ( pos % biL ) ) & 0x01 );
    5b8c:	bf3f      	itttt	cc
    5b8e:	094a      	lsrcc	r2, r1, #5
    5b90:	6883      	ldrcc	r3, [r0, #8]
    5b92:	f853 0022 	ldrcc.w	r0, [r3, r2, lsl #2]
    5b96:	f001 011f 	andcc.w	r1, r1, #31
    5b9a:	bf3a      	itte	cc
    5b9c:	fa20 f101 	lsrcc.w	r1, r0, r1
    5ba0:	f001 0001 	andcc.w	r0, r1, #1
        return( 0 );
    5ba4:	2000      	movcs	r0, #0
}
    5ba6:	4770      	bx	lr

00005ba8 <mbedtls_mpi_bitlen>:
{
    5ba8:	4602      	mov	r2, r0
    if( X->n == 0 )
    5baa:	6840      	ldr	r0, [r0, #4]
    5bac:	b188      	cbz	r0, 5bd2 <mbedtls_mpi_bitlen+0x2a>
        if( X->p[i] != 0 )
    5bae:	6892      	ldr	r2, [r2, #8]
    for( i = X->n - 1; i > 0; i-- )
    5bb0:	1e43      	subs	r3, r0, #1
    5bb2:	b97b      	cbnz	r3, 5bd4 <mbedtls_mpi_bitlen+0x2c>
    j = biL - mbedtls_clz( X->p[i] );
    5bb4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    for( j = 0; j < biL; j++ )
    5bb8:	2000      	movs	r0, #0
    mbedtls_mpi_uint mask = (mbedtls_mpi_uint) 1 << (biL - 1);
    5bba:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
        if( x & mask ) break;
    5bbe:	4211      	tst	r1, r2
    5bc0:	d104      	bne.n	5bcc <mbedtls_mpi_bitlen+0x24>
    for( j = 0; j < biL; j++ )
    5bc2:	3001      	adds	r0, #1
    5bc4:	2820      	cmp	r0, #32
        mask >>= 1;
    5bc6:	ea4f 0252 	mov.w	r2, r2, lsr #1
    for( j = 0; j < biL; j++ )
    5bca:	d1f8      	bne.n	5bbe <mbedtls_mpi_bitlen+0x16>
    return( ( i * biL ) + j );
    5bcc:	3301      	adds	r3, #1
    5bce:	ebc0 1043 	rsb	r0, r0, r3, lsl #5
}
    5bd2:	4770      	bx	lr
        if( X->p[i] != 0 )
    5bd4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    5bd8:	2900      	cmp	r1, #0
    5bda:	d1eb      	bne.n	5bb4 <mbedtls_mpi_bitlen+0xc>
    for( i = X->n - 1; i > 0; i-- )
    5bdc:	3b01      	subs	r3, #1
    5bde:	e7e8      	b.n	5bb2 <mbedtls_mpi_bitlen+0xa>

00005be0 <mbedtls_mpi_size>:
{
    5be0:	b508      	push	{r3, lr}
    return( ( mbedtls_mpi_bitlen( X ) + 7 ) >> 3 );
    5be2:	f7ff ffe1 	bl	5ba8 <mbedtls_mpi_bitlen>
    5be6:	3007      	adds	r0, #7
}
    5be8:	08c0      	lsrs	r0, r0, #3
    5bea:	bd08      	pop	{r3, pc}

00005bec <mbedtls_mpi_read_binary>:
{
    5bec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    size_t const limbs    = CHARS_TO_LIMBS( buflen );
    5bf0:	f012 0503 	ands.w	r5, r2, #3
    5bf4:	bf18      	it	ne
    5bf6:	2501      	movne	r5, #1
    if( X->n != limbs )
    5bf8:	6843      	ldr	r3, [r0, #4]
    size_t const limbs    = CHARS_TO_LIMBS( buflen );
    5bfa:	eb05 0592 	add.w	r5, r5, r2, lsr #2
    if( X->n != limbs )
    5bfe:	42ab      	cmp	r3, r5
{
    5c00:	4604      	mov	r4, r0
    5c02:	4688      	mov	r8, r1
    5c04:	4617      	mov	r7, r2
    if( X->n != limbs )
    5c06:	d108      	bne.n	5c1a <mbedtls_mpi_read_binary+0x2e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( X, 0 ) );
    5c08:	2100      	movs	r1, #0
    5c0a:	4620      	mov	r0, r4
    5c0c:	f7ff ff9f 	bl	5b4e <mbedtls_mpi_lset>
    5c10:	4606      	mov	r6, r0
    5c12:	b188      	cbz	r0, 5c38 <mbedtls_mpi_read_binary+0x4c>
}
    5c14:	4630      	mov	r0, r6
    5c16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        mbedtls_mpi_free( X );
    5c1a:	f7ff ff34 	bl	5a86 <mbedtls_mpi_free>
    X->n = 0;
    5c1e:	2300      	movs	r3, #0
    5c20:	2201      	movs	r2, #1
    5c22:	e9c4 2300 	strd	r2, r3, [r4]
    X->p = NULL;
    5c26:	60a3      	str	r3, [r4, #8]
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, limbs ) );
    5c28:	4629      	mov	r1, r5
    5c2a:	4620      	mov	r0, r4
    5c2c:	f7ff ff3d 	bl	5aaa <mbedtls_mpi_grow>
    5c30:	4606      	mov	r6, r0
    5c32:	2800      	cmp	r0, #0
    5c34:	d0e8      	beq.n	5c08 <mbedtls_mpi_read_binary+0x1c>
    5c36:	e7ed      	b.n	5c14 <mbedtls_mpi_read_binary+0x28>
    if( buf != NULL )
    5c38:	f1b8 0f00 	cmp.w	r8, #0
    5c3c:	d0ea      	beq.n	5c14 <mbedtls_mpi_read_binary+0x28>
        memcpy( Xp + overhead, buf, buflen );
    5c3e:	68a3      	ldr	r3, [r4, #8]
    size_t const overhead = ( limbs * ciL ) - buflen;
    5c40:	ebc7 0085 	rsb	r0, r7, r5, lsl #2
        memcpy( Xp + overhead, buf, buflen );
    5c44:	463a      	mov	r2, r7
    5c46:	4641      	mov	r1, r8
    5c48:	4418      	add	r0, r3
    5c4a:	f7ff f91c 	bl	4e86 <memcpy>
    if( limbs == 0 )
    5c4e:	2d00      	cmp	r5, #0
    5c50:	d0e0      	beq.n	5c14 <mbedtls_mpi_read_binary+0x28>
    5c52:	68a0      	ldr	r0, [r4, #8]
    5c54:	4629      	mov	r1, r5
    5c56:	f7ff fee7 	bl	5a28 <mpi_bigendian_to_host.part.0>
    return( ret );
    5c5a:	e7db      	b.n	5c14 <mbedtls_mpi_read_binary+0x28>

00005c5c <mbedtls_mpi_write_binary>:
{
    5c5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5c5e:	4604      	mov	r4, r0
    5c60:	4608      	mov	r0, r1
    stored_bytes = X->n * ciL;
    5c62:	6863      	ldr	r3, [r4, #4]
    if( stored_bytes < buflen )
    5c64:	ebb2 0f83 	cmp.w	r2, r3, lsl #2
    stored_bytes = X->n * ciL;
    5c68:	ea4f 0583 	mov.w	r5, r3, lsl #2
    if( stored_bytes < buflen )
    5c6c:	d91b      	bls.n	5ca6 <mbedtls_mpi_write_binary+0x4a>
        p = buf + buflen - stored_bytes;
    5c6e:	1b52      	subs	r2, r2, r5
    5c70:	188e      	adds	r6, r1, r2
        memset( buf, 0, buflen - stored_bytes );
    5c72:	2100      	movs	r1, #0
    5c74:	f7ff f912 	bl	4e9c <memset>
        p = buf + buflen - stored_bytes;
    5c78:	4630      	mov	r0, r6
    5c7a:	462a      	mov	r2, r5
    for( i = 0; i < bytes_to_copy; i++ )
    5c7c:	1881      	adds	r1, r0, r2
    5c7e:	2300      	movs	r3, #0
    5c80:	429a      	cmp	r2, r3
    5c82:	d112      	bne.n	5caa <mbedtls_mpi_write_binary+0x4e>
    return( 0 );
    5c84:	2000      	movs	r0, #0
}
    5c86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            if( GET_BYTE( X, i ) != 0 )
    5c88:	68a7      	ldr	r7, [r4, #8]
    5c8a:	f023 0c03 	bic.w	ip, r3, #3
    5c8e:	f003 0103 	and.w	r1, r3, #3
    5c92:	00ce      	lsls	r6, r1, #3
    5c94:	f857 100c 	ldr.w	r1, [r7, ip]
    5c98:	40f1      	lsrs	r1, r6
    5c9a:	b2c9      	uxtb	r1, r1
    5c9c:	b989      	cbnz	r1, 5cc2 <mbedtls_mpi_write_binary+0x66>
        for( i = bytes_to_copy; i < stored_bytes; i++ )
    5c9e:	3301      	adds	r3, #1
    5ca0:	42ab      	cmp	r3, r5
    5ca2:	d1f1      	bne.n	5c88 <mbedtls_mpi_write_binary+0x2c>
    5ca4:	e7ea      	b.n	5c7c <mbedtls_mpi_write_binary+0x20>
    5ca6:	4613      	mov	r3, r2
    5ca8:	e7fa      	b.n	5ca0 <mbedtls_mpi_write_binary+0x44>
        p[bytes_to_copy - i - 1] = GET_BYTE( X, i );
    5caa:	68a7      	ldr	r7, [r4, #8]
    5cac:	f023 0603 	bic.w	r6, r3, #3
    5cb0:	f003 0003 	and.w	r0, r3, #3
    5cb4:	00c5      	lsls	r5, r0, #3
    5cb6:	59b8      	ldr	r0, [r7, r6]
    5cb8:	40e8      	lsrs	r0, r5
    5cba:	f801 0d01 	strb.w	r0, [r1, #-1]!
    for( i = 0; i < bytes_to_copy; i++ )
    5cbe:	3301      	adds	r3, #1
    5cc0:	e7de      	b.n	5c80 <mbedtls_mpi_write_binary+0x24>
                return( MBEDTLS_ERR_MPI_BUFFER_TOO_SMALL );
    5cc2:	f06f 0007 	mvn.w	r0, #7
    5cc6:	e7de      	b.n	5c86 <mbedtls_mpi_write_binary+0x2a>

00005cc8 <mbedtls_mpi_shift_l>:
{
    5cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5cca:	4605      	mov	r5, r0
    5ccc:	460e      	mov	r6, r1
    v0 = count / (biL    );
    5cce:	094c      	lsrs	r4, r1, #5
    t1 = count & (biL - 1);
    5cd0:	f001 071f 	and.w	r7, r1, #31
    i = mbedtls_mpi_bitlen( X ) + count;
    5cd4:	f7ff ff68 	bl	5ba8 <mbedtls_mpi_bitlen>
    if( X->n * biL < i )
    5cd8:	686b      	ldr	r3, [r5, #4]
    i = mbedtls_mpi_bitlen( X ) + count;
    5cda:	4430      	add	r0, r6
    if( X->n * biL < i )
    5cdc:	ebb0 1f43 	cmp.w	r0, r3, lsl #5
    5ce0:	d805      	bhi.n	5cee <mbedtls_mpi_shift_l+0x26>
    if( v0 > 0 )
    5ce2:	2e1f      	cmp	r6, #31
    5ce4:	d80f      	bhi.n	5d06 <mbedtls_mpi_shift_l+0x3e>
    if( t1 > 0 )
    5ce6:	2f00      	cmp	r7, #0
    5ce8:	d13c      	bne.n	5d64 <mbedtls_mpi_shift_l+0x9c>
    ret = 0;
    5cea:	2000      	movs	r0, #0
    5cec:	e00a      	b.n	5d04 <mbedtls_mpi_shift_l+0x3c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, BITS_TO_LIMBS( i ) ) );
    5cee:	f010 011f 	ands.w	r1, r0, #31
    5cf2:	bf18      	it	ne
    5cf4:	2101      	movne	r1, #1
    5cf6:	eb01 1150 	add.w	r1, r1, r0, lsr #5
    5cfa:	4628      	mov	r0, r5
    5cfc:	f7ff fed5 	bl	5aaa <mbedtls_mpi_grow>
    5d00:	2800      	cmp	r0, #0
    5d02:	d0ee      	beq.n	5ce2 <mbedtls_mpi_shift_l+0x1a>
}
    5d04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        for( i = X->n; i > v0; i-- )
    5d06:	686b      	ldr	r3, [r5, #4]
    5d08:	f06f 0003 	mvn.w	r0, #3
    5d0c:	009a      	lsls	r2, r3, #2
    5d0e:	4360      	muls	r0, r4
    5d10:	4619      	mov	r1, r3
    5d12:	42a1      	cmp	r1, r4
    5d14:	f1a2 0204 	sub.w	r2, r2, #4
    5d18:	d80c      	bhi.n	5d34 <mbedtls_mpi_shift_l+0x6c>
    5d1a:	1ae2      	subs	r2, r4, r3
    5d1c:	429c      	cmp	r4, r3
    5d1e:	bf88      	it	hi
    5d20:	2200      	movhi	r2, #0
    5d22:	4413      	add	r3, r2
    5d24:	009b      	lsls	r3, r3, #2
            X->p[i - 1] = 0;
    5d26:	2200      	movs	r2, #0
        for( ; i > 0; i-- )
    5d28:	3b04      	subs	r3, #4
    5d2a:	1d19      	adds	r1, r3, #4
    5d2c:	d0db      	beq.n	5ce6 <mbedtls_mpi_shift_l+0x1e>
            X->p[i - 1] = 0;
    5d2e:	68a9      	ldr	r1, [r5, #8]
    5d30:	50ca      	str	r2, [r1, r3]
        for( ; i > 0; i-- )
    5d32:	e7f9      	b.n	5d28 <mbedtls_mpi_shift_l+0x60>
            X->p[i - 1] = X->p[i - v0 - 1];
    5d34:	68ae      	ldr	r6, [r5, #8]
    5d36:	eb06 0c02 	add.w	ip, r6, r2
        for( i = X->n; i > v0; i-- )
    5d3a:	3901      	subs	r1, #1
            X->p[i - 1] = X->p[i - v0 - 1];
    5d3c:	f85c c000 	ldr.w	ip, [ip, r0]
    5d40:	f846 c002 	str.w	ip, [r6, r2]
        for( i = X->n; i > v0; i-- )
    5d44:	e7e5      	b.n	5d12 <mbedtls_mpi_shift_l+0x4a>
            r1 = X->p[i] >> (biL - t1);
    5d46:	68a8      	ldr	r0, [r5, #8]
    5d48:	f850 1024 	ldr.w	r1, [r0, r4, lsl #2]
            X->p[i] <<= t1;
    5d4c:	fa01 f307 	lsl.w	r3, r1, r7
            X->p[i] |= r0;
    5d50:	4313      	orrs	r3, r2
    5d52:	f840 3024 	str.w	r3, [r0, r4, lsl #2]
            r0 = r1;
    5d56:	fa21 f206 	lsr.w	r2, r1, r6
        for( i = v0; i < X->n; i++ )
    5d5a:	3401      	adds	r4, #1
    5d5c:	686b      	ldr	r3, [r5, #4]
    5d5e:	42a3      	cmp	r3, r4
    5d60:	d8f1      	bhi.n	5d46 <mbedtls_mpi_shift_l+0x7e>
    5d62:	e7c2      	b.n	5cea <mbedtls_mpi_shift_l+0x22>
    mbedtls_mpi_uint r0 = 0, r1;
    5d64:	2200      	movs	r2, #0
            r1 = X->p[i] >> (biL - t1);
    5d66:	f1c7 0620 	rsb	r6, r7, #32
    5d6a:	e7f7      	b.n	5d5c <mbedtls_mpi_shift_l+0x94>

00005d6c <mbedtls_mpi_shift_r>:
    if( v0 > X->n || ( v0 == X->n && v1 > 0 ) )
    5d6c:	6843      	ldr	r3, [r0, #4]
{
    5d6e:	b4f0      	push	{r4, r5, r6, r7}
    v0 = count /  biL;
    5d70:	094c      	lsrs	r4, r1, #5
    if( v0 > X->n || ( v0 == X->n && v1 > 0 ) )
    5d72:	42a3      	cmp	r3, r4
    v1 = count & (biL - 1);
    5d74:	f001 021f 	and.w	r2, r1, #31
    if( v0 > X->n || ( v0 == X->n && v1 > 0 ) )
    5d78:	d301      	bcc.n	5d7e <mbedtls_mpi_shift_r+0x12>
    5d7a:	d104      	bne.n	5d86 <mbedtls_mpi_shift_r+0x1a>
    5d7c:	b36a      	cbz	r2, 5dda <mbedtls_mpi_shift_r+0x6e>
}
    5d7e:	bcf0      	pop	{r4, r5, r6, r7}
        return mbedtls_mpi_lset( X, 0 );
    5d80:	2100      	movs	r1, #0
    5d82:	f7ff bee4 	b.w	5b4e <mbedtls_mpi_lset>
    if( v0 > 0 )
    5d86:	291f      	cmp	r1, #31
    5d88:	d829      	bhi.n	5dde <mbedtls_mpi_shift_r+0x72>
    if( v1 > 0 )
    5d8a:	b9aa      	cbnz	r2, 5db8 <mbedtls_mpi_shift_r+0x4c>
}
    5d8c:	2000      	movs	r0, #0
    5d8e:	bcf0      	pop	{r4, r5, r6, r7}
    5d90:	4770      	bx	lr
            X->p[i] = X->p[i + v0];
    5d92:	6885      	ldr	r5, [r0, #8]
    5d94:	586e      	ldr	r6, [r5, r1]
    5d96:	f845 6023 	str.w	r6, [r5, r3, lsl #2]
        for( i = 0; i < X->n - v0; i++ )
    5d9a:	3104      	adds	r1, #4
    5d9c:	3301      	adds	r3, #1
    5d9e:	6845      	ldr	r5, [r0, #4]
    5da0:	1b2d      	subs	r5, r5, r4
    5da2:	429d      	cmp	r5, r3
    5da4:	d8f5      	bhi.n	5d92 <mbedtls_mpi_shift_r+0x26>
            X->p[i] = 0;
    5da6:	2400      	movs	r4, #0
        for( ; i < X->n; i++ )
    5da8:	6841      	ldr	r1, [r0, #4]
    5daa:	4299      	cmp	r1, r3
    5dac:	d9ed      	bls.n	5d8a <mbedtls_mpi_shift_r+0x1e>
            X->p[i] = 0;
    5dae:	6881      	ldr	r1, [r0, #8]
    5db0:	f841 4023 	str.w	r4, [r1, r3, lsl #2]
        for( ; i < X->n; i++ )
    5db4:	3301      	adds	r3, #1
    5db6:	e7f7      	b.n	5da8 <mbedtls_mpi_shift_r+0x3c>
        for( i = X->n; i > 0; i-- )
    5db8:	6843      	ldr	r3, [r0, #4]
    mbedtls_mpi_uint r0 = 0, r1;
    5dba:	2400      	movs	r4, #0
            r1 = X->p[i - 1] << (biL - v1);
    5dbc:	f1c2 0720 	rsb	r7, r2, #32
        for( i = X->n; i > 0; i-- )
    5dc0:	3b01      	subs	r3, #1
    5dc2:	d3e3      	bcc.n	5d8c <mbedtls_mpi_shift_r+0x20>
            r1 = X->p[i - 1] << (biL - v1);
    5dc4:	6886      	ldr	r6, [r0, #8]
    5dc6:	f856 5023 	ldr.w	r5, [r6, r3, lsl #2]
            X->p[i - 1] >>= v1;
    5dca:	fa25 f102 	lsr.w	r1, r5, r2
            X->p[i - 1] |= r0;
    5dce:	4321      	orrs	r1, r4
    5dd0:	f846 1023 	str.w	r1, [r6, r3, lsl #2]
            r0 = r1;
    5dd4:	fa05 f407 	lsl.w	r4, r5, r7
    5dd8:	e7f2      	b.n	5dc0 <mbedtls_mpi_shift_r+0x54>
    if( v0 > 0 )
    5dda:	291f      	cmp	r1, #31
    5ddc:	d9d6      	bls.n	5d8c <mbedtls_mpi_shift_r+0x20>
    5dde:	00a1      	lsls	r1, r4, #2
{
    5de0:	2300      	movs	r3, #0
    5de2:	e7dc      	b.n	5d9e <mbedtls_mpi_shift_r+0x32>

00005de4 <mbedtls_mpi_cmp_abs>:
{
    5de4:	b530      	push	{r4, r5, lr}
    for( i = X->n; i > 0; i-- )
    5de6:	6843      	ldr	r3, [r0, #4]
    5de8:	b92b      	cbnz	r3, 5df6 <mbedtls_mpi_cmp_abs+0x12>
    for( j = Y->n; j > 0; j-- )
    5dea:	684a      	ldr	r2, [r1, #4]
    5dec:	b962      	cbnz	r2, 5e08 <mbedtls_mpi_cmp_abs+0x24>
    if( i == 0 && j == 0 )
    5dee:	1e18      	subs	r0, r3, #0
    5df0:	bf18      	it	ne
    5df2:	2001      	movne	r0, #1
    5df4:	e028      	b.n	5e48 <mbedtls_mpi_cmp_abs+0x64>
        if( X->p[i - 1] != 0 )
    5df6:	6882      	ldr	r2, [r0, #8]
    5df8:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    5dfc:	f852 2c04 	ldr.w	r2, [r2, #-4]
    5e00:	2a00      	cmp	r2, #0
    5e02:	d1f2      	bne.n	5dea <mbedtls_mpi_cmp_abs+0x6>
    for( i = X->n; i > 0; i-- )
    5e04:	3b01      	subs	r3, #1
    5e06:	e7ef      	b.n	5de8 <mbedtls_mpi_cmp_abs+0x4>
        if( Y->p[j - 1] != 0 )
    5e08:	688c      	ldr	r4, [r1, #8]
    5e0a:	eb04 0582 	add.w	r5, r4, r2, lsl #2
    5e0e:	f855 5c04 	ldr.w	r5, [r5, #-4]
    5e12:	b935      	cbnz	r5, 5e22 <mbedtls_mpi_cmp_abs+0x3e>
    for( j = Y->n; j > 0; j-- )
    5e14:	3a01      	subs	r2, #1
    5e16:	e7e9      	b.n	5dec <mbedtls_mpi_cmp_abs+0x8>
    if( i > j ) return(  1 );
    5e18:	2001      	movs	r0, #1
    5e1a:	e015      	b.n	5e48 <mbedtls_mpi_cmp_abs+0x64>
    if( j > i ) return( -1 );
    5e1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    5e20:	e012      	b.n	5e48 <mbedtls_mpi_cmp_abs+0x64>
    if( i == 0 && j == 0 )
    5e22:	2b00      	cmp	r3, #0
    5e24:	d0fa      	beq.n	5e1c <mbedtls_mpi_cmp_abs+0x38>
    if( i > j ) return(  1 );
    5e26:	4293      	cmp	r3, r2
    5e28:	d8f6      	bhi.n	5e18 <mbedtls_mpi_cmp_abs+0x34>
    if( j > i ) return( -1 );
    5e2a:	d3f7      	bcc.n	5e1c <mbedtls_mpi_cmp_abs+0x38>
    5e2c:	3b01      	subs	r3, #1
        if( X->p[i - 1] > Y->p[i - 1] ) return(  1 );
    5e2e:	6882      	ldr	r2, [r0, #8]
    5e30:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    5e34:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
    5e38:	4291      	cmp	r1, r2
    5e3a:	d8ed      	bhi.n	5e18 <mbedtls_mpi_cmp_abs+0x34>
        if( X->p[i - 1] < Y->p[i - 1] ) return( -1 );
    5e3c:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
    5e40:	d3ec      	bcc.n	5e1c <mbedtls_mpi_cmp_abs+0x38>
    for( ; i > 0; i-- )
    5e42:	1c5a      	adds	r2, r3, #1
    5e44:	d1f3      	bne.n	5e2e <mbedtls_mpi_cmp_abs+0x4a>
    return( 0 );
    5e46:	2000      	movs	r0, #0
}
    5e48:	bd30      	pop	{r4, r5, pc}

00005e4a <mbedtls_mpi_cmp_mpi>:
{
    5e4a:	b530      	push	{r4, r5, lr}
    for( i = X->n; i > 0; i-- )
    5e4c:	6843      	ldr	r3, [r0, #4]
{
    5e4e:	4602      	mov	r2, r0
    for( i = X->n; i > 0; i-- )
    5e50:	b923      	cbnz	r3, 5e5c <mbedtls_mpi_cmp_mpi+0x12>
    for( j = Y->n; j > 0; j-- )
    5e52:	6848      	ldr	r0, [r1, #4]
    5e54:	b958      	cbnz	r0, 5e6e <mbedtls_mpi_cmp_mpi+0x24>
    if( i == 0 && j == 0 )
    5e56:	2b00      	cmp	r3, #0
    5e58:	d136      	bne.n	5ec8 <mbedtls_mpi_cmp_mpi+0x7e>
    5e5a:	e02f      	b.n	5ebc <mbedtls_mpi_cmp_mpi+0x72>
        if( X->p[i - 1] != 0 )
    5e5c:	6890      	ldr	r0, [r2, #8]
    5e5e:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    5e62:	f850 0c04 	ldr.w	r0, [r0, #-4]
    5e66:	2800      	cmp	r0, #0
    5e68:	d1f3      	bne.n	5e52 <mbedtls_mpi_cmp_mpi+0x8>
    for( i = X->n; i > 0; i-- )
    5e6a:	3b01      	subs	r3, #1
    5e6c:	e7f0      	b.n	5e50 <mbedtls_mpi_cmp_mpi+0x6>
        if( Y->p[j - 1] != 0 )
    5e6e:	688c      	ldr	r4, [r1, #8]
    5e70:	eb04 0580 	add.w	r5, r4, r0, lsl #2
    5e74:	f855 5c04 	ldr.w	r5, [r5, #-4]
    5e78:	bb15      	cbnz	r5, 5ec0 <mbedtls_mpi_cmp_mpi+0x76>
    for( j = Y->n; j > 0; j-- )
    5e7a:	3801      	subs	r0, #1
    5e7c:	e7ea      	b.n	5e54 <mbedtls_mpi_cmp_mpi+0xa>
    if( j > i ) return( -Y->s );
    5e7e:	d202      	bcs.n	5e86 <mbedtls_mpi_cmp_mpi+0x3c>
    5e80:	6808      	ldr	r0, [r1, #0]
        if( X->p[i - 1] < Y->p[i - 1] ) return( -X->s );
    5e82:	4240      	negs	r0, r0
    5e84:	e021      	b.n	5eca <mbedtls_mpi_cmp_mpi+0x80>
    if( X->s > 0 && Y->s < 0 ) return(  1 );
    5e86:	6810      	ldr	r0, [r2, #0]
    if( j > i ) return( -Y->s );
    5e88:	6809      	ldr	r1, [r1, #0]
    if( X->s > 0 && Y->s < 0 ) return(  1 );
    5e8a:	2800      	cmp	r0, #0
    5e8c:	dd03      	ble.n	5e96 <mbedtls_mpi_cmp_mpi+0x4c>
    5e8e:	2900      	cmp	r1, #0
    5e90:	da07      	bge.n	5ea2 <mbedtls_mpi_cmp_mpi+0x58>
    5e92:	2001      	movs	r0, #1
    5e94:	e019      	b.n	5eca <mbedtls_mpi_cmp_mpi+0x80>
    if( Y->s > 0 && X->s < 0 ) return( -1 );
    5e96:	2900      	cmp	r1, #0
    5e98:	dd03      	ble.n	5ea2 <mbedtls_mpi_cmp_mpi+0x58>
    5e9a:	b110      	cbz	r0, 5ea2 <mbedtls_mpi_cmp_mpi+0x58>
    5e9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    5ea0:	e013      	b.n	5eca <mbedtls_mpi_cmp_mpi+0x80>
    5ea2:	3b01      	subs	r3, #1
        if( X->p[i - 1] > Y->p[i - 1] ) return(  X->s );
    5ea4:	6891      	ldr	r1, [r2, #8]
    5ea6:	f851 5023 	ldr.w	r5, [r1, r3, lsl #2]
    5eaa:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
    5eae:	428d      	cmp	r5, r1
    5eb0:	d80b      	bhi.n	5eca <mbedtls_mpi_cmp_mpi+0x80>
        if( X->p[i - 1] < Y->p[i - 1] ) return( -X->s );
    5eb2:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
    5eb6:	d3e4      	bcc.n	5e82 <mbedtls_mpi_cmp_mpi+0x38>
    for( ; i > 0; i-- )
    5eb8:	1c59      	adds	r1, r3, #1
    5eba:	d1f3      	bne.n	5ea4 <mbedtls_mpi_cmp_mpi+0x5a>
    return( 0 );
    5ebc:	2000      	movs	r0, #0
    5ebe:	e004      	b.n	5eca <mbedtls_mpi_cmp_mpi+0x80>
    if( i == 0 && j == 0 )
    5ec0:	2b00      	cmp	r3, #0
    5ec2:	d0dd      	beq.n	5e80 <mbedtls_mpi_cmp_mpi+0x36>
    if( i > j ) return(  X->s );
    5ec4:	4283      	cmp	r3, r0
    5ec6:	d9da      	bls.n	5e7e <mbedtls_mpi_cmp_mpi+0x34>
    5ec8:	6810      	ldr	r0, [r2, #0]
}
    5eca:	bd30      	pop	{r4, r5, pc}

00005ecc <mbedtls_mpi_cmp_int>:
{
    5ecc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    *p  = ( z < 0 ) ? -z : z;
    5ece:	ea81 73e1 	eor.w	r3, r1, r1, asr #31
    5ed2:	eba3 73e1 	sub.w	r3, r3, r1, asr #31
    Y.s = ( z < 0 ) ? -1 : 1;
    5ed6:	2900      	cmp	r1, #0
    *p  = ( z < 0 ) ? -z : z;
    5ed8:	9300      	str	r3, [sp, #0]
    Y.s = ( z < 0 ) ? -1 : 1;
    5eda:	bfb4      	ite	lt
    5edc:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
    5ee0:	2301      	movge	r3, #1
    5ee2:	9301      	str	r3, [sp, #4]
    return( mbedtls_mpi_cmp_mpi( X, &Y ) );
    5ee4:	a901      	add	r1, sp, #4
    Y.n = 1;
    5ee6:	2301      	movs	r3, #1
    5ee8:	9302      	str	r3, [sp, #8]
    Y.p = p;
    5eea:	f8cd d00c 	str.w	sp, [sp, #12]
    return( mbedtls_mpi_cmp_mpi( X, &Y ) );
    5eee:	f7ff ffac 	bl	5e4a <mbedtls_mpi_cmp_mpi>
}
    5ef2:	b005      	add	sp, #20
    5ef4:	f85d fb04 	ldr.w	pc, [sp], #4

00005ef8 <mbedtls_mpi_add_abs>:
    if( X == B )
    5ef8:	4290      	cmp	r0, r2
{
    5efa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5efe:	4606      	mov	r6, r0
    5f00:	460f      	mov	r7, r1
    5f02:	4615      	mov	r5, r2
    if( X == B )
    5f04:	d002      	beq.n	5f0c <mbedtls_mpi_add_abs+0x14>
    if( X != A )
    5f06:	4288      	cmp	r0, r1
    5f08:	d129      	bne.n	5f5e <mbedtls_mpi_add_abs+0x66>
{
    5f0a:	462f      	mov	r7, r5
    X->s = 1;
    5f0c:	2301      	movs	r3, #1
    for( j = B->n; j > 0; j-- )
    5f0e:	687d      	ldr	r5, [r7, #4]
    X->s = 1;
    5f10:	6033      	str	r3, [r6, #0]
    for( j = B->n; j > 0; j-- )
    5f12:	bb65      	cbnz	r5, 5f6e <mbedtls_mpi_add_abs+0x76>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, j ) );
    5f14:	4629      	mov	r1, r5
    5f16:	4630      	mov	r0, r6
    5f18:	f7ff fdc7 	bl	5aaa <mbedtls_mpi_grow>
    5f1c:	4604      	mov	r4, r0
    5f1e:	bb18      	cbnz	r0, 5f68 <mbedtls_mpi_add_abs+0x70>
    o = B->p; p = X->p; c = 0;
    5f20:	68b3      	ldr	r3, [r6, #8]
    5f22:	68b9      	ldr	r1, [r7, #8]
    5f24:	469c      	mov	ip, r3
    5f26:	4607      	mov	r7, r0
    for( i = 0; i < j; i++, o++, p++ )
    5f28:	4285      	cmp	r5, r0
    5f2a:	d129      	bne.n	5f80 <mbedtls_mpi_add_abs+0x88>
    5f2c:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    while( c != 0 )
    5f30:	b1d7      	cbz	r7, 5f68 <mbedtls_mpi_add_abs+0x70>
        if( i >= X->n )
    5f32:	6872      	ldr	r2, [r6, #4]
    5f34:	42aa      	cmp	r2, r5
    5f36:	f105 0801 	add.w	r8, r5, #1
    5f3a:	d807      	bhi.n	5f4c <mbedtls_mpi_add_abs+0x54>
            MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i + 1 ) );
    5f3c:	4641      	mov	r1, r8
    5f3e:	4630      	mov	r0, r6
    5f40:	f7ff fdb3 	bl	5aaa <mbedtls_mpi_grow>
    5f44:	bb68      	cbnz	r0, 5fa2 <mbedtls_mpi_add_abs+0xaa>
            p = X->p + i;
    5f46:	68b3      	ldr	r3, [r6, #8]
    5f48:	eb03 0385 	add.w	r3, r3, r5, lsl #2
        *p += c; c = ( *p < c ); i++; p++;
    5f4c:	681a      	ldr	r2, [r3, #0]
    5f4e:	19d2      	adds	r2, r2, r7
    5f50:	f843 2b04 	str.w	r2, [r3], #4
    5f54:	bf2c      	ite	cs
    5f56:	2701      	movcs	r7, #1
    5f58:	2700      	movcc	r7, #0
    5f5a:	4645      	mov	r5, r8
    5f5c:	e7e8      	b.n	5f30 <mbedtls_mpi_add_abs+0x38>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, A ) );
    5f5e:	f7ff fdca 	bl	5af6 <mbedtls_mpi_copy>
    5f62:	4604      	mov	r4, r0
    5f64:	2800      	cmp	r0, #0
    5f66:	d0d0      	beq.n	5f0a <mbedtls_mpi_add_abs+0x12>
}
    5f68:	4620      	mov	r0, r4
    5f6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if( B->p[j - 1] != 0 )
    5f6e:	68bb      	ldr	r3, [r7, #8]
    5f70:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    5f74:	f853 3c04 	ldr.w	r3, [r3, #-4]
    5f78:	2b00      	cmp	r3, #0
    5f7a:	d1cb      	bne.n	5f14 <mbedtls_mpi_add_abs+0x1c>
    for( j = B->n; j > 0; j-- )
    5f7c:	3d01      	subs	r5, #1
    5f7e:	e7c8      	b.n	5f12 <mbedtls_mpi_add_abs+0x1a>
        *p +=  c; c  = ( *p <  c );
    5f80:	f8dc 2000 	ldr.w	r2, [ip]
    5f84:	19d2      	adds	r2, r2, r7
    5f86:	f851 7020 	ldr.w	r7, [r1, r0, lsl #2]
    5f8a:	bf2c      	ite	cs
    5f8c:	f04f 0e01 	movcs.w	lr, #1
    5f90:	f04f 0e00 	movcc.w	lr, #0
        *p += tmp; c += ( *p < tmp );
    5f94:	19d2      	adds	r2, r2, r7
    5f96:	f84c 2b04 	str.w	r2, [ip], #4
    5f9a:	f14e 0700 	adc.w	r7, lr, #0
    for( i = 0; i < j; i++, o++, p++ )
    5f9e:	3001      	adds	r0, #1
    5fa0:	e7c2      	b.n	5f28 <mbedtls_mpi_add_abs+0x30>
    return( ret );
    5fa2:	4604      	mov	r4, r0
    5fa4:	e7e0      	b.n	5f68 <mbedtls_mpi_add_abs+0x70>

00005fa6 <mbedtls_mpi_sub_abs>:
{
    5fa6:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    5faa:	4617      	mov	r7, r2
    X->n = 0;
    5fac:	2300      	movs	r3, #0
    5fae:	2201      	movs	r2, #1
    if( X == B )
    5fb0:	42b8      	cmp	r0, r7
    X->n = 0;
    5fb2:	e9cd 2301 	strd	r2, r3, [sp, #4]
{
    5fb6:	4606      	mov	r6, r0
    5fb8:	4688      	mov	r8, r1
    X->p = NULL;
    5fba:	9303      	str	r3, [sp, #12]
    if( X == B )
    5fbc:	d106      	bne.n	5fcc <mbedtls_mpi_sub_abs+0x26>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, B ) );
    5fbe:	4601      	mov	r1, r0
    5fc0:	a801      	add	r0, sp, #4
    5fc2:	f7ff fd98 	bl	5af6 <mbedtls_mpi_copy>
    5fc6:	4604      	mov	r4, r0
    5fc8:	bb28      	cbnz	r0, 6016 <mbedtls_mpi_sub_abs+0x70>
        B = &TB;
    5fca:	af01      	add	r7, sp, #4
    if( X != A )
    5fcc:	4546      	cmp	r6, r8
    5fce:	d11b      	bne.n	6008 <mbedtls_mpi_sub_abs+0x62>
        if( B->p[n - 1] != 0 )
    5fd0:	e9d7 5201 	ldrd	r5, r2, [r7, #4]
    X->s = 1;
    5fd4:	2301      	movs	r3, #1
    5fd6:	6033      	str	r3, [r6, #0]
    for( n = B->n; n > 0; n-- )
    5fd8:	bb25      	cbnz	r5, 6024 <mbedtls_mpi_sub_abs+0x7e>
    carry = mpi_sub_hlp( n, X->p, B->p );
    5fda:	68b1      	ldr	r1, [r6, #8]
    5fdc:	4628      	mov	r0, r5
    5fde:	f7ff fb02 	bl	55e6 <mpi_sub_hlp>
    if( carry != 0 )
    5fe2:	4604      	mov	r4, r0
    5fe4:	b1b8      	cbz	r0, 6016 <mbedtls_mpi_sub_abs+0x70>
            --X->p[n];
    5fe6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
        for( ; n < X->n && X->p[n] == 0; n++ )
    5fea:	6873      	ldr	r3, [r6, #4]
    5fec:	42ab      	cmp	r3, r5
    5fee:	d92b      	bls.n	6048 <mbedtls_mpi_sub_abs+0xa2>
    5ff0:	68b3      	ldr	r3, [r6, #8]
    5ff2:	f853 2025 	ldr.w	r2, [r3, r5, lsl #2]
    5ff6:	b31a      	cbz	r2, 6040 <mbedtls_mpi_sub_abs+0x9a>
        --X->p[n];
    5ff8:	68b2      	ldr	r2, [r6, #8]
    5ffa:	f852 3025 	ldr.w	r3, [r2, r5, lsl #2]
    5ffe:	3b01      	subs	r3, #1
    6000:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
    ret = 0;
    6004:	2400      	movs	r4, #0
    6006:	e006      	b.n	6016 <mbedtls_mpi_sub_abs+0x70>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, A ) );
    6008:	4641      	mov	r1, r8
    600a:	4630      	mov	r0, r6
    600c:	f7ff fd73 	bl	5af6 <mbedtls_mpi_copy>
    6010:	4604      	mov	r4, r0
    6012:	2800      	cmp	r0, #0
    6014:	d0dc      	beq.n	5fd0 <mbedtls_mpi_sub_abs+0x2a>
    mbedtls_mpi_free( &TB );
    6016:	a801      	add	r0, sp, #4
    6018:	f7ff fd35 	bl	5a86 <mbedtls_mpi_free>
}
    601c:	4620      	mov	r0, r4
    601e:	b004      	add	sp, #16
    6020:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if( B->p[n - 1] != 0 )
    6024:	eb02 0385 	add.w	r3, r2, r5, lsl #2
    6028:	f853 3c04 	ldr.w	r3, [r3, #-4]
    602c:	b90b      	cbnz	r3, 6032 <mbedtls_mpi_sub_abs+0x8c>
    for( n = B->n; n > 0; n-- )
    602e:	3d01      	subs	r5, #1
    6030:	e7d2      	b.n	5fd8 <mbedtls_mpi_sub_abs+0x32>
    if( n > A->n )
    6032:	f8d8 3004 	ldr.w	r3, [r8, #4]
    6036:	42ab      	cmp	r3, r5
    6038:	d2cf      	bcs.n	5fda <mbedtls_mpi_sub_abs+0x34>
        ret = MBEDTLS_ERR_MPI_NEGATIVE_VALUE;
    603a:	f06f 0409 	mvn.w	r4, #9
    603e:	e7ea      	b.n	6016 <mbedtls_mpi_sub_abs+0x70>
            --X->p[n];
    6040:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
        for( ; n < X->n && X->p[n] == 0; n++ )
    6044:	3501      	adds	r5, #1
    6046:	e7d0      	b.n	5fea <mbedtls_mpi_sub_abs+0x44>
        if( n == X->n )
    6048:	d1d6      	bne.n	5ff8 <mbedtls_mpi_sub_abs+0x52>
    604a:	e7f6      	b.n	603a <mbedtls_mpi_sub_abs+0x94>

0000604c <mbedtls_mpi_add_mpi>:
{
    604c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    s = A->s;
    604e:	680d      	ldr	r5, [r1, #0]
    if( A->s * B->s < 0 )
    6050:	6813      	ldr	r3, [r2, #0]
    6052:	436b      	muls	r3, r5
{
    6054:	4604      	mov	r4, r0
    6056:	460f      	mov	r7, r1
    6058:	4616      	mov	r6, r2
    if( A->s * B->s < 0 )
    605a:	d516      	bpl.n	608a <mbedtls_mpi_add_mpi+0x3e>
        if( mbedtls_mpi_cmp_abs( A, B ) >= 0 )
    605c:	4611      	mov	r1, r2
    605e:	4638      	mov	r0, r7
    6060:	f7ff fec0 	bl	5de4 <mbedtls_mpi_cmp_abs>
    6064:	2800      	cmp	r0, #0
    6066:	db06      	blt.n	6076 <mbedtls_mpi_add_mpi+0x2a>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, A, B ) );
    6068:	4632      	mov	r2, r6
    606a:	4639      	mov	r1, r7
    606c:	4620      	mov	r0, r4
    606e:	f7ff ff9a 	bl	5fa6 <mbedtls_mpi_sub_abs>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( X, A, B ) );
    6072:	b140      	cbz	r0, 6086 <mbedtls_mpi_add_mpi+0x3a>
}
    6074:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, B, A ) );
    6076:	463a      	mov	r2, r7
    6078:	4631      	mov	r1, r6
    607a:	4620      	mov	r0, r4
    607c:	f7ff ff93 	bl	5fa6 <mbedtls_mpi_sub_abs>
    6080:	2800      	cmp	r0, #0
    6082:	d1f7      	bne.n	6074 <mbedtls_mpi_add_mpi+0x28>
            X->s = -s;
    6084:	426d      	negs	r5, r5
        X->s = s;
    6086:	6025      	str	r5, [r4, #0]
    return( ret );
    6088:	e7f4      	b.n	6074 <mbedtls_mpi_add_mpi+0x28>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( X, A, B ) );
    608a:	f7ff ff35 	bl	5ef8 <mbedtls_mpi_add_abs>
    608e:	e7f0      	b.n	6072 <mbedtls_mpi_add_mpi+0x26>

00006090 <mbedtls_mpi_sub_mpi>:
{
    6090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    s = A->s;
    6092:	680d      	ldr	r5, [r1, #0]
    if( A->s * B->s > 0 )
    6094:	6813      	ldr	r3, [r2, #0]
    6096:	436b      	muls	r3, r5
    6098:	2b00      	cmp	r3, #0
{
    609a:	4604      	mov	r4, r0
    609c:	460f      	mov	r7, r1
    609e:	4616      	mov	r6, r2
    if( A->s * B->s > 0 )
    60a0:	dd16      	ble.n	60d0 <mbedtls_mpi_sub_mpi+0x40>
        if( mbedtls_mpi_cmp_abs( A, B ) >= 0 )
    60a2:	4611      	mov	r1, r2
    60a4:	4638      	mov	r0, r7
    60a6:	f7ff fe9d 	bl	5de4 <mbedtls_mpi_cmp_abs>
    60aa:	2800      	cmp	r0, #0
    60ac:	db06      	blt.n	60bc <mbedtls_mpi_sub_mpi+0x2c>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, A, B ) );
    60ae:	4632      	mov	r2, r6
    60b0:	4639      	mov	r1, r7
    60b2:	4620      	mov	r0, r4
    60b4:	f7ff ff77 	bl	5fa6 <mbedtls_mpi_sub_abs>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( X, A, B ) );
    60b8:	b140      	cbz	r0, 60cc <mbedtls_mpi_sub_mpi+0x3c>
}
    60ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, B, A ) );
    60bc:	463a      	mov	r2, r7
    60be:	4631      	mov	r1, r6
    60c0:	4620      	mov	r0, r4
    60c2:	f7ff ff70 	bl	5fa6 <mbedtls_mpi_sub_abs>
    60c6:	2800      	cmp	r0, #0
    60c8:	d1f7      	bne.n	60ba <mbedtls_mpi_sub_mpi+0x2a>
            X->s = -s;
    60ca:	426d      	negs	r5, r5
        X->s = s;
    60cc:	6025      	str	r5, [r4, #0]
    return( ret );
    60ce:	e7f4      	b.n	60ba <mbedtls_mpi_sub_mpi+0x2a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( X, A, B ) );
    60d0:	f7ff ff12 	bl	5ef8 <mbedtls_mpi_add_abs>
    60d4:	e7f0      	b.n	60b8 <mbedtls_mpi_sub_mpi+0x28>

000060d6 <mbedtls_mpi_mul_mpi>:
{
    60d6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    X->n = 0;
    60da:	2300      	movs	r3, #0
{
    60dc:	b087      	sub	sp, #28
    60de:	4616      	mov	r6, r2
    if( X == A ) { MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TA, A ) ); A = &TA; }
    60e0:	4288      	cmp	r0, r1
    X->n = 0;
    60e2:	f04f 0201 	mov.w	r2, #1
    60e6:	e9cd 2300 	strd	r2, r3, [sp]
    X->s = 1;
    60ea:	e9cd 3202 	strd	r3, r2, [sp, #8]
    X->p = NULL;
    60ee:	e9cd 3304 	strd	r3, r3, [sp, #16]
{
    60f2:	4680      	mov	r8, r0
    60f4:	460f      	mov	r7, r1
    if( X == A ) { MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TA, A ) ); A = &TA; }
    60f6:	d105      	bne.n	6104 <mbedtls_mpi_mul_mpi+0x2e>
    60f8:	4668      	mov	r0, sp
    60fa:	f7ff fcfc 	bl	5af6 <mbedtls_mpi_copy>
    60fe:	4604      	mov	r4, r0
    6100:	bb20      	cbnz	r0, 614c <mbedtls_mpi_mul_mpi+0x76>
    6102:	466f      	mov	r7, sp
    if( X == B ) { MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, B ) ); B = &TB; }
    6104:	45b0      	cmp	r8, r6
    6106:	d106      	bne.n	6116 <mbedtls_mpi_mul_mpi+0x40>
    6108:	4641      	mov	r1, r8
    610a:	a803      	add	r0, sp, #12
    610c:	f7ff fcf3 	bl	5af6 <mbedtls_mpi_copy>
    6110:	4604      	mov	r4, r0
    6112:	b9d8      	cbnz	r0, 614c <mbedtls_mpi_mul_mpi+0x76>
    6114:	ae03      	add	r6, sp, #12
    for( i = A->n; i > 0; i-- )
    6116:	f8d7 9004 	ldr.w	r9, [r7, #4]
    611a:	f1b9 0f00 	cmp.w	r9, #0
    611e:	d11f      	bne.n	6160 <mbedtls_mpi_mul_mpi+0x8a>
    for( j = B->n; j > 0; j-- )
    6120:	6875      	ldr	r5, [r6, #4]
    6122:	bb3d      	cbnz	r5, 6174 <mbedtls_mpi_mul_mpi+0x9e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i + j ) );
    6124:	eb09 0105 	add.w	r1, r9, r5
    6128:	4640      	mov	r0, r8
    612a:	f7ff fcbe 	bl	5aaa <mbedtls_mpi_grow>
    612e:	4604      	mov	r4, r0
    6130:	b960      	cbnz	r0, 614c <mbedtls_mpi_mul_mpi+0x76>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( X, 0 ) );
    6132:	4601      	mov	r1, r0
    6134:	4640      	mov	r0, r8
    6136:	f7ff fd0a 	bl	5b4e <mbedtls_mpi_lset>
    613a:	4604      	mov	r4, r0
    613c:	b930      	cbnz	r0, 614c <mbedtls_mpi_mul_mpi+0x76>
    for( ; j > 0; j-- )
    613e:	3d01      	subs	r5, #1
    6140:	d221      	bcs.n	6186 <mbedtls_mpi_mul_mpi+0xb0>
    X->s = A->s * B->s;
    6142:	683b      	ldr	r3, [r7, #0]
    6144:	6832      	ldr	r2, [r6, #0]
    6146:	4353      	muls	r3, r2
    6148:	f8c8 3000 	str.w	r3, [r8]
    mbedtls_mpi_free( &TB ); mbedtls_mpi_free( &TA );
    614c:	a803      	add	r0, sp, #12
    614e:	f7ff fc9a 	bl	5a86 <mbedtls_mpi_free>
    6152:	4668      	mov	r0, sp
    6154:	f7ff fc97 	bl	5a86 <mbedtls_mpi_free>
}
    6158:	4620      	mov	r0, r4
    615a:	b007      	add	sp, #28
    615c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if( A->p[i - 1] != 0 )
    6160:	68bb      	ldr	r3, [r7, #8]
    6162:	eb03 0389 	add.w	r3, r3, r9, lsl #2
    6166:	f853 3c04 	ldr.w	r3, [r3, #-4]
    616a:	2b00      	cmp	r3, #0
    616c:	d1d8      	bne.n	6120 <mbedtls_mpi_mul_mpi+0x4a>
    for( i = A->n; i > 0; i-- )
    616e:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
    6172:	e7d2      	b.n	611a <mbedtls_mpi_mul_mpi+0x44>
        if( B->p[j - 1] != 0 )
    6174:	68b3      	ldr	r3, [r6, #8]
    6176:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    617a:	f853 3c04 	ldr.w	r3, [r3, #-4]
    617e:	2b00      	cmp	r3, #0
    6180:	d1d0      	bne.n	6124 <mbedtls_mpi_mul_mpi+0x4e>
    for( j = B->n; j > 0; j-- )
    6182:	3d01      	subs	r5, #1
    6184:	e7cd      	b.n	6122 <mbedtls_mpi_mul_mpi+0x4c>
        mpi_mul_hlp( i, A->p, X->p + j - 1, B->p[j - 1] );
    6186:	68b3      	ldr	r3, [r6, #8]
    6188:	f8d8 2008 	ldr.w	r2, [r8, #8]
    618c:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
    6190:	68b9      	ldr	r1, [r7, #8]
    6192:	eb02 0285 	add.w	r2, r2, r5, lsl #2
    6196:	4648      	mov	r0, r9
    6198:	f7ff fa42 	bl	5620 <mpi_mul_hlp>
    619c:	e7cf      	b.n	613e <mbedtls_mpi_mul_mpi+0x68>

0000619e <mbedtls_mpi_mul_int>:
{
    619e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    _B.s = 1;
    61a0:	2301      	movs	r3, #1
    p[0] = b;
    61a2:	9200      	str	r2, [sp, #0]
    return( mbedtls_mpi_mul_mpi( X, A, &_B ) );
    61a4:	aa01      	add	r2, sp, #4
    _B.n = 1;
    61a6:	e9cd 3301 	strd	r3, r3, [sp, #4]
    _B.p = p;
    61aa:	f8cd d00c 	str.w	sp, [sp, #12]
    return( mbedtls_mpi_mul_mpi( X, A, &_B ) );
    61ae:	f7ff ff92 	bl	60d6 <mbedtls_mpi_mul_mpi>
}
    61b2:	b005      	add	sp, #20
    61b4:	f85d fb04 	ldr.w	pc, [sp], #4

000061b8 <mbedtls_mpi_div_mpi>:
{
    61b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    61bc:	b099      	sub	sp, #100	; 0x64
    61be:	460f      	mov	r7, r1
    61c0:	9000      	str	r0, [sp, #0]
    if( mbedtls_mpi_cmp_int( B, 0 ) == 0 )
    61c2:	2100      	movs	r1, #0
    61c4:	4618      	mov	r0, r3
{
    61c6:	4690      	mov	r8, r2
    61c8:	9301      	str	r3, [sp, #4]
    if( mbedtls_mpi_cmp_int( B, 0 ) == 0 )
    61ca:	f7ff fe7f 	bl	5ecc <mbedtls_mpi_cmp_int>
    61ce:	2800      	cmp	r0, #0
    61d0:	f000 8192 	beq.w	64f8 <mbedtls_mpi_div_mpi+0x340>
    T2.n = sizeof( TP2 ) / sizeof( *TP2 );
    61d4:	2303      	movs	r3, #3
    X->n = 0;
    61d6:	2400      	movs	r4, #0
    61d8:	2501      	movs	r5, #1
    T2.n = sizeof( TP2 ) / sizeof( *TP2 );
    61da:	9313      	str	r3, [sp, #76]	; 0x4c
    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
    61dc:	9901      	ldr	r1, [sp, #4]
    T2.s = 1;
    61de:	9512      	str	r5, [sp, #72]	; 0x48
    T2.p = TP2;
    61e0:	ab15      	add	r3, sp, #84	; 0x54
    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
    61e2:	4640      	mov	r0, r8
    X->n = 0;
    61e4:	e9cd 5406 	strd	r5, r4, [sp, #24]
    X->s = 1;
    61e8:	e9cd 4508 	strd	r4, r5, [sp, #32]
    X->p = NULL;
    61ec:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
    X->n = 0;
    61f0:	e9cd 540c 	strd	r5, r4, [sp, #48]	; 0x30
    X->s = 1;
    61f4:	e9cd 450e 	strd	r4, r5, [sp, #56]	; 0x38
    X->p = NULL;
    61f8:	e9cd 4410 	strd	r4, r4, [sp, #64]	; 0x40
    T2.p = TP2;
    61fc:	9314      	str	r3, [sp, #80]	; 0x50
    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
    61fe:	f7ff fdf1 	bl	5de4 <mbedtls_mpi_cmp_abs>
    6202:	42a0      	cmp	r0, r4
    6204:	da27      	bge.n	6256 <mbedtls_mpi_div_mpi+0x9e>
        if( Q != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_lset( Q, 0 ) );
    6206:	9b00      	ldr	r3, [sp, #0]
    6208:	b92b      	cbnz	r3, 6216 <mbedtls_mpi_div_mpi+0x5e>
        if( R != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_copy( R, A ) );
    620a:	b9e7      	cbnz	r7, 6246 <mbedtls_mpi_div_mpi+0x8e>
        return( 0 );
    620c:	2400      	movs	r4, #0
}
    620e:	4620      	mov	r0, r4
    6210:	b019      	add	sp, #100	; 0x64
    6212:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if( Q != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_lset( Q, 0 ) );
    6216:	4621      	mov	r1, r4
    6218:	9800      	ldr	r0, [sp, #0]
    621a:	f7ff fc98 	bl	5b4e <mbedtls_mpi_lset>
    621e:	4604      	mov	r4, r0
    6220:	2800      	cmp	r0, #0
    6222:	d0f2      	beq.n	620a <mbedtls_mpi_div_mpi+0x52>
    mbedtls_mpi_free( &X ); mbedtls_mpi_free( &Y ); mbedtls_mpi_free( &Z );
    6224:	a806      	add	r0, sp, #24
    6226:	f7ff fc2e 	bl	5a86 <mbedtls_mpi_free>
    622a:	a809      	add	r0, sp, #36	; 0x24
    622c:	f7ff fc2b 	bl	5a86 <mbedtls_mpi_free>
    6230:	a80c      	add	r0, sp, #48	; 0x30
    6232:	f7ff fc28 	bl	5a86 <mbedtls_mpi_free>
    mbedtls_mpi_free( &T1 );
    6236:	a80f      	add	r0, sp, #60	; 0x3c
    6238:	f7ff fc25 	bl	5a86 <mbedtls_mpi_free>
    mbedtls_platform_zeroize( TP2, sizeof( TP2 ) );
    623c:	210c      	movs	r1, #12
    623e:	a815      	add	r0, sp, #84	; 0x54
    6240:	f7fd fb76 	bl	3930 <mbedtls_platform_zeroize>
    return( ret );
    6244:	e7e3      	b.n	620e <mbedtls_mpi_div_mpi+0x56>
        if( R != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_copy( R, A ) );
    6246:	4641      	mov	r1, r8
    6248:	4638      	mov	r0, r7
    624a:	f7ff fc54 	bl	5af6 <mbedtls_mpi_copy>
    624e:	4604      	mov	r4, r0
    6250:	2800      	cmp	r0, #0
    6252:	d1e7      	bne.n	6224 <mbedtls_mpi_div_mpi+0x6c>
    6254:	e7da      	b.n	620c <mbedtls_mpi_div_mpi+0x54>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &X, A ) );
    6256:	4641      	mov	r1, r8
    6258:	a806      	add	r0, sp, #24
    625a:	f7ff fc4c 	bl	5af6 <mbedtls_mpi_copy>
    625e:	4604      	mov	r4, r0
    6260:	2800      	cmp	r0, #0
    6262:	d1df      	bne.n	6224 <mbedtls_mpi_div_mpi+0x6c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &Y, B ) );
    6264:	ae09      	add	r6, sp, #36	; 0x24
    6266:	9901      	ldr	r1, [sp, #4]
    6268:	4630      	mov	r0, r6
    626a:	f7ff fc44 	bl	5af6 <mbedtls_mpi_copy>
    626e:	4604      	mov	r4, r0
    6270:	2800      	cmp	r0, #0
    6272:	d1d7      	bne.n	6224 <mbedtls_mpi_div_mpi+0x6c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &Z, A->n + 2 ) );
    6274:	f8d8 1004 	ldr.w	r1, [r8, #4]
    X.s = Y.s = 1;
    6278:	9509      	str	r5, [sp, #36]	; 0x24
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &Z, A->n + 2 ) );
    627a:	3102      	adds	r1, #2
    627c:	a80c      	add	r0, sp, #48	; 0x30
    X.s = Y.s = 1;
    627e:	9506      	str	r5, [sp, #24]
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &Z, A->n + 2 ) );
    6280:	f7ff fc13 	bl	5aaa <mbedtls_mpi_grow>
    6284:	4604      	mov	r4, r0
    6286:	2800      	cmp	r0, #0
    6288:	d1cc      	bne.n	6224 <mbedtls_mpi_div_mpi+0x6c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &Z,  0 ) );
    628a:	4601      	mov	r1, r0
    628c:	a80c      	add	r0, sp, #48	; 0x30
    628e:	f7ff fc5e 	bl	5b4e <mbedtls_mpi_lset>
    6292:	4604      	mov	r4, r0
    6294:	2800      	cmp	r0, #0
    6296:	d1c5      	bne.n	6224 <mbedtls_mpi_div_mpi+0x6c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &T1, 2 ) );
    6298:	2102      	movs	r1, #2
    629a:	a80f      	add	r0, sp, #60	; 0x3c
    629c:	f7ff fc05 	bl	5aaa <mbedtls_mpi_grow>
    62a0:	4604      	mov	r4, r0
    62a2:	2800      	cmp	r0, #0
    62a4:	d1be      	bne.n	6224 <mbedtls_mpi_div_mpi+0x6c>
    k = mbedtls_mpi_bitlen( &Y ) % biL;
    62a6:	4630      	mov	r0, r6
    62a8:	f7ff fc7e 	bl	5ba8 <mbedtls_mpi_bitlen>
    62ac:	f000 001f 	and.w	r0, r0, #31
    if( k < biL - 1 )
    62b0:	281f      	cmp	r0, #31
    62b2:	d073      	beq.n	639c <mbedtls_mpi_div_mpi+0x1e4>
        k = biL - 1 - k;
    62b4:	f1c0 0a1f 	rsb	sl, r0, #31
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &X, k ) );
    62b8:	4651      	mov	r1, sl
    62ba:	a806      	add	r0, sp, #24
    62bc:	f7ff fd04 	bl	5cc8 <mbedtls_mpi_shift_l>
    62c0:	4604      	mov	r4, r0
    62c2:	2800      	cmp	r0, #0
    62c4:	d1ae      	bne.n	6224 <mbedtls_mpi_div_mpi+0x6c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &Y, k ) );
    62c6:	4651      	mov	r1, sl
    62c8:	4630      	mov	r0, r6
    62ca:	f7ff fcfd 	bl	5cc8 <mbedtls_mpi_shift_l>
    62ce:	4604      	mov	r4, r0
    62d0:	2800      	cmp	r0, #0
    62d2:	d1a7      	bne.n	6224 <mbedtls_mpi_div_mpi+0x6c>
    n = X.n - 1;
    62d4:	f8dd 901c 	ldr.w	r9, [sp, #28]
    t = Y.n - 1;
    62d8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &Y, biL * ( n - t ) ) );
    62da:	eba9 0305 	sub.w	r3, r9, r5
    62de:	ea4f 1b43 	mov.w	fp, r3, lsl #5
    62e2:	4659      	mov	r1, fp
    62e4:	4630      	mov	r0, r6
    62e6:	9302      	str	r3, [sp, #8]
    62e8:	f7ff fcee 	bl	5cc8 <mbedtls_mpi_shift_l>
    62ec:	4604      	mov	r4, r0
    62ee:	2800      	cmp	r0, #0
    62f0:	d198      	bne.n	6224 <mbedtls_mpi_div_mpi+0x6c>
        Z.p[n - t]++;
    62f2:	9b02      	ldr	r3, [sp, #8]
    62f4:	009b      	lsls	r3, r3, #2
    while( mbedtls_mpi_cmp_mpi( &X, &Y ) >= 0 )
    62f6:	4631      	mov	r1, r6
    62f8:	a806      	add	r0, sp, #24
    62fa:	9302      	str	r3, [sp, #8]
    62fc:	f7ff fda5 	bl	5e4a <mbedtls_mpi_cmp_mpi>
    6300:	2800      	cmp	r0, #0
    6302:	9b02      	ldr	r3, [sp, #8]
    6304:	da4c      	bge.n	63a0 <mbedtls_mpi_div_mpi+0x1e8>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &Y, biL * ( n - t ) ) );
    6306:	4659      	mov	r1, fp
    6308:	4630      	mov	r0, r6
    630a:	f7ff fd2f 	bl	5d6c <mbedtls_mpi_shift_r>
    630e:	4604      	mov	r4, r0
    6310:	2800      	cmp	r0, #0
    6312:	d187      	bne.n	6224 <mbedtls_mpi_div_mpi+0x6c>
    t = Y.n - 1;
    6314:	1e6b      	subs	r3, r5, #1
    6316:	9302      	str	r3, [sp, #8]
        if( X.p[i] >= Y.p[t] )
    6318:	009b      	lsls	r3, r3, #2
    631a:	9304      	str	r3, [sp, #16]
            T1.p[0] = ( t < 1 ) ? 0 : Y.p[t - 1];
    631c:	f105 4380 	add.w	r3, r5, #1073741824	; 0x40000000
    6320:	3b02      	subs	r3, #2
    6322:	009b      	lsls	r3, r3, #2
    6324:	9305      	str	r3, [sp, #20]
    6326:	f109 4380 	add.w	r3, r9, #1073741824	; 0x40000000
    n = X.n - 1;
    632a:	f109 36ff 	add.w	r6, r9, #4294967295	; 0xffffffff
    632e:	3b01      	subs	r3, #1
    6330:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
    6334:	1b5d      	subs	r5, r3, r5
    6336:	f1a9 0902 	sub.w	r9, r9, #2
    633a:	00ad      	lsls	r5, r5, #2
    633c:	ea4f 0b89 	mov.w	fp, r9, lsl #2
    for( i = n; i > t ; i-- )
    6340:	9b02      	ldr	r3, [sp, #8]
    6342:	429e      	cmp	r6, r3
    6344:	d83b      	bhi.n	63be <mbedtls_mpi_div_mpi+0x206>
    if( Q != NULL )
    6346:	9b00      	ldr	r3, [sp, #0]
    6348:	b15b      	cbz	r3, 6362 <mbedtls_mpi_div_mpi+0x1aa>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( Q, &Z ) );
    634a:	a90c      	add	r1, sp, #48	; 0x30
    634c:	4618      	mov	r0, r3
    634e:	f7ff fbd2 	bl	5af6 <mbedtls_mpi_copy>
    6352:	bb08      	cbnz	r0, 6398 <mbedtls_mpi_div_mpi+0x1e0>
        Q->s = A->s * B->s;
    6354:	9a01      	ldr	r2, [sp, #4]
    6356:	f8d8 3000 	ldr.w	r3, [r8]
    635a:	6812      	ldr	r2, [r2, #0]
    635c:	4353      	muls	r3, r2
    635e:	9a00      	ldr	r2, [sp, #0]
    6360:	6013      	str	r3, [r2, #0]
    if( R != NULL )
    6362:	2f00      	cmp	r7, #0
    6364:	f43f af5e 	beq.w	6224 <mbedtls_mpi_div_mpi+0x6c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &X, k ) );
    6368:	4651      	mov	r1, sl
    636a:	a806      	add	r0, sp, #24
    636c:	f7ff fcfe 	bl	5d6c <mbedtls_mpi_shift_r>
    6370:	b990      	cbnz	r0, 6398 <mbedtls_mpi_div_mpi+0x1e0>
        X.s = A->s;
    6372:	f8d8 3000 	ldr.w	r3, [r8]
    6376:	9306      	str	r3, [sp, #24]
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( R, &X ) );
    6378:	a906      	add	r1, sp, #24
    637a:	4638      	mov	r0, r7
    637c:	f7ff fbbb 	bl	5af6 <mbedtls_mpi_copy>
    6380:	4601      	mov	r1, r0
    6382:	2800      	cmp	r0, #0
    6384:	f040 80b6 	bne.w	64f4 <mbedtls_mpi_div_mpi+0x33c>
        if( mbedtls_mpi_cmp_int( R, 0 ) == 0 )
    6388:	4638      	mov	r0, r7
    638a:	f7ff fd9f 	bl	5ecc <mbedtls_mpi_cmp_int>
    638e:	2800      	cmp	r0, #0
    6390:	f47f af48 	bne.w	6224 <mbedtls_mpi_div_mpi+0x6c>
            R->s = 1;
    6394:	2301      	movs	r3, #1
    6396:	603b      	str	r3, [r7, #0]
    6398:	4604      	mov	r4, r0
    639a:	e743      	b.n	6224 <mbedtls_mpi_div_mpi+0x6c>
    else k = 0;
    639c:	46a2      	mov	sl, r4
    639e:	e799      	b.n	62d4 <mbedtls_mpi_div_mpi+0x11c>
        Z.p[n - t]++;
    63a0:	990e      	ldr	r1, [sp, #56]	; 0x38
    63a2:	9302      	str	r3, [sp, #8]
    63a4:	58ca      	ldr	r2, [r1, r3]
    63a6:	3201      	adds	r2, #1
    63a8:	50ca      	str	r2, [r1, r3]
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X, &X, &Y ) );
    63aa:	a906      	add	r1, sp, #24
    63ac:	4632      	mov	r2, r6
    63ae:	4608      	mov	r0, r1
    63b0:	f7ff fe6e 	bl	6090 <mbedtls_mpi_sub_mpi>
    63b4:	9b02      	ldr	r3, [sp, #8]
    63b6:	4604      	mov	r4, r0
    63b8:	2800      	cmp	r0, #0
    63ba:	d09c      	beq.n	62f6 <mbedtls_mpi_div_mpi+0x13e>
    63bc:	e732      	b.n	6224 <mbedtls_mpi_div_mpi+0x6c>
        if( X.p[i] >= Y.p[t] )
    63be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    63c0:	f8dd 9020 	ldr.w	r9, [sp, #32]
    63c4:	9a04      	ldr	r2, [sp, #16]
    63c6:	f859 1026 	ldr.w	r1, [r9, r6, lsl #2]
    63ca:	589a      	ldr	r2, [r3, r2]
            Z.p[i - t - 1] = ~0;
    63cc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
        if( X.p[i] >= Y.p[t] )
    63ce:	4291      	cmp	r1, r2
            Z.p[i - t - 1] = ~0;
    63d0:	eb03 0005 	add.w	r0, r3, r5
    63d4:	9003      	str	r0, [sp, #12]
        if( X.p[i] >= Y.p[t] )
    63d6:	d376      	bcc.n	64c6 <mbedtls_mpi_div_mpi+0x30e>
            Z.p[i - t - 1] = ~0;
    63d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    63dc:	515a      	str	r2, [r3, r5]
        T2.p[0] = ( i < 2 ) ? 0 : X.p[i - 2];
    63de:	2e01      	cmp	r6, #1
    63e0:	bf8a      	itet	hi
    63e2:	eb09 030b 	addhi.w	r3, r9, fp
    63e6:	2300      	movls	r3, #0
    63e8:	f853 3c04 	ldrhi.w	r3, [r3, #-4]
    63ec:	9315      	str	r3, [sp, #84]	; 0x54
        T2.p[1] = ( i < 1 ) ? 0 : X.p[i - 1];
    63ee:	2e00      	cmp	r6, #0
    63f0:	d07c      	beq.n	64ec <mbedtls_mpi_div_mpi+0x334>
    63f2:	f859 300b 	ldr.w	r3, [r9, fp]
    63f6:	9316      	str	r3, [sp, #88]	; 0x58
        T2.p[2] = X.p[i];
    63f8:	00b3      	lsls	r3, r6, #2
        Z.p[i - t - 1]++;
    63fa:	9a03      	ldr	r2, [sp, #12]
        T2.p[2] = X.p[i];
    63fc:	f859 3003 	ldr.w	r3, [r9, r3]
    6400:	9317      	str	r3, [sp, #92]	; 0x5c
        Z.p[i - t - 1]++;
    6402:	9b03      	ldr	r3, [sp, #12]
    6404:	681b      	ldr	r3, [r3, #0]
    6406:	3301      	adds	r3, #1
    6408:	6013      	str	r3, [r2, #0]
            Z.p[i - t - 1]--;
    640a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    640c:	5953      	ldr	r3, [r2, r5]
    640e:	3b01      	subs	r3, #1
    6410:	5153      	str	r3, [r2, r5]
            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T1, 0 ) );
    6412:	2100      	movs	r1, #0
    6414:	a80f      	add	r0, sp, #60	; 0x3c
    6416:	f7ff fb9a 	bl	5b4e <mbedtls_mpi_lset>
    641a:	2800      	cmp	r0, #0
    641c:	d1bc      	bne.n	6398 <mbedtls_mpi_div_mpi+0x1e0>
            T1.p[0] = ( t < 1 ) ? 0 : Y.p[t - 1];
    641e:	9b02      	ldr	r3, [sp, #8]
    6420:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    6422:	2b00      	cmp	r3, #0
    6424:	d064      	beq.n	64f0 <mbedtls_mpi_div_mpi+0x338>
    6426:	9b05      	ldr	r3, [sp, #20]
    6428:	58d1      	ldr	r1, [r2, r3]
    642a:	9b11      	ldr	r3, [sp, #68]	; 0x44
    642c:	6019      	str	r1, [r3, #0]
            T1.p[1] = Y.p[t];
    642e:	9904      	ldr	r1, [sp, #16]
    6430:	5852      	ldr	r2, [r2, r1]
    6432:	605a      	str	r2, [r3, #4]
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1, &T1, Z.p[i - t - 1] ) );
    6434:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    6436:	a90f      	add	r1, sp, #60	; 0x3c
    6438:	595a      	ldr	r2, [r3, r5]
    643a:	4608      	mov	r0, r1
    643c:	f7ff feaf 	bl	619e <mbedtls_mpi_mul_int>
    6440:	2800      	cmp	r0, #0
    6442:	d1a9      	bne.n	6398 <mbedtls_mpi_div_mpi+0x1e0>
        while( mbedtls_mpi_cmp_mpi( &T1, &T2 ) > 0 );
    6444:	a912      	add	r1, sp, #72	; 0x48
    6446:	a80f      	add	r0, sp, #60	; 0x3c
    6448:	f7ff fcff 	bl	5e4a <mbedtls_mpi_cmp_mpi>
    644c:	2800      	cmp	r0, #0
    644e:	dcdc      	bgt.n	640a <mbedtls_mpi_div_mpi+0x252>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1, &Y, Z.p[i - t - 1] ) );
    6450:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    6452:	a909      	add	r1, sp, #36	; 0x24
    6454:	595a      	ldr	r2, [r3, r5]
    6456:	a80f      	add	r0, sp, #60	; 0x3c
    6458:	f7ff fea1 	bl	619e <mbedtls_mpi_mul_int>
    645c:	2800      	cmp	r0, #0
    645e:	d19b      	bne.n	6398 <mbedtls_mpi_div_mpi+0x1e0>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &T1,  biL * ( i - t - 1 ) ) );
    6460:	ea4f 09c5 	mov.w	r9, r5, lsl #3
    6464:	4649      	mov	r1, r9
    6466:	a80f      	add	r0, sp, #60	; 0x3c
    6468:	f7ff fc2e 	bl	5cc8 <mbedtls_mpi_shift_l>
    646c:	2800      	cmp	r0, #0
    646e:	d193      	bne.n	6398 <mbedtls_mpi_div_mpi+0x1e0>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X, &X, &T1 ) );
    6470:	a906      	add	r1, sp, #24
    6472:	4608      	mov	r0, r1
    6474:	aa0f      	add	r2, sp, #60	; 0x3c
    6476:	f7ff fe0b 	bl	6090 <mbedtls_mpi_sub_mpi>
    647a:	4601      	mov	r1, r0
    647c:	2800      	cmp	r0, #0
    647e:	d139      	bne.n	64f4 <mbedtls_mpi_div_mpi+0x33c>
        if( mbedtls_mpi_cmp_int( &X, 0 ) < 0 )
    6480:	a806      	add	r0, sp, #24
    6482:	f7ff fd23 	bl	5ecc <mbedtls_mpi_cmp_int>
    6486:	2800      	cmp	r0, #0
    6488:	da18      	bge.n	64bc <mbedtls_mpi_div_mpi+0x304>
            MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &T1, &Y ) );
    648a:	a909      	add	r1, sp, #36	; 0x24
    648c:	a80f      	add	r0, sp, #60	; 0x3c
    648e:	f7ff fb32 	bl	5af6 <mbedtls_mpi_copy>
    6492:	2800      	cmp	r0, #0
    6494:	d180      	bne.n	6398 <mbedtls_mpi_div_mpi+0x1e0>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &T1, biL * ( i - t - 1 ) ) );
    6496:	4649      	mov	r1, r9
    6498:	a80f      	add	r0, sp, #60	; 0x3c
    649a:	f7ff fc15 	bl	5cc8 <mbedtls_mpi_shift_l>
    649e:	2800      	cmp	r0, #0
    64a0:	f47f af7a 	bne.w	6398 <mbedtls_mpi_div_mpi+0x1e0>
            MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &X, &X, &T1 ) );
    64a4:	a906      	add	r1, sp, #24
    64a6:	aa0f      	add	r2, sp, #60	; 0x3c
    64a8:	4608      	mov	r0, r1
    64aa:	f7ff fdcf 	bl	604c <mbedtls_mpi_add_mpi>
    64ae:	2800      	cmp	r0, #0
    64b0:	f47f af72 	bne.w	6398 <mbedtls_mpi_div_mpi+0x1e0>
            Z.p[i - t - 1]--;
    64b4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    64b6:	5953      	ldr	r3, [r2, r5]
    64b8:	3b01      	subs	r3, #1
    64ba:	5153      	str	r3, [r2, r5]
    for( i = n; i > t ; i-- )
    64bc:	3e01      	subs	r6, #1
    64be:	3d04      	subs	r5, #4
    64c0:	f1ab 0b04 	sub.w	fp, fp, #4
    64c4:	e73c      	b.n	6340 <mbedtls_mpi_div_mpi+0x188>
            Z.p[i - t - 1] = mbedtls_int_div_int( X.p[i], X.p[i - 1],
    64c6:	f859 000b 	ldr.w	r0, [r9, fp]
    if( 0 == d || u1 >= d )
    64ca:	b152      	cbz	r2, 64e2 <mbedtls_mpi_div_mpi+0x32a>
    dividend  = (mbedtls_t_udbl) u1 << biL;
    64cc:	2300      	movs	r3, #0
    quotient = dividend / d;
    64ce:	f7f9 fe05 	bl	dc <__aeabi_uldivmod>
    return (mbedtls_mpi_uint) quotient;
    64d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    64d6:	4283      	cmp	r3, r0
    64d8:	f04f 0300 	mov.w	r3, #0
    64dc:	418b      	sbcs	r3, r1
    64de:	4602      	mov	r2, r0
    64e0:	d201      	bcs.n	64e6 <mbedtls_mpi_div_mpi+0x32e>
        return ( ~0 );
    64e2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
            Z.p[i - t - 1] = mbedtls_int_div_int( X.p[i], X.p[i - 1],
    64e6:	9b03      	ldr	r3, [sp, #12]
    64e8:	601a      	str	r2, [r3, #0]
    64ea:	e778      	b.n	63de <mbedtls_mpi_div_mpi+0x226>
        T2.p[1] = ( i < 1 ) ? 0 : X.p[i - 1];
    64ec:	4633      	mov	r3, r6
    64ee:	e782      	b.n	63f6 <mbedtls_mpi_div_mpi+0x23e>
            T1.p[0] = ( t < 1 ) ? 0 : Y.p[t - 1];
    64f0:	9902      	ldr	r1, [sp, #8]
    64f2:	e79a      	b.n	642a <mbedtls_mpi_div_mpi+0x272>
    64f4:	460c      	mov	r4, r1
    64f6:	e695      	b.n	6224 <mbedtls_mpi_div_mpi+0x6c>
        return( MBEDTLS_ERR_MPI_DIVISION_BY_ZERO );
    64f8:	f06f 040b 	mvn.w	r4, #11
    64fc:	e687      	b.n	620e <mbedtls_mpi_div_mpi+0x56>

000064fe <mbedtls_mpi_mod_mpi>:
{
    64fe:	b570      	push	{r4, r5, r6, lr}
    6500:	4604      	mov	r4, r0
    6502:	460d      	mov	r5, r1
    if( mbedtls_mpi_cmp_int( B, 0 ) < 0 )
    6504:	4610      	mov	r0, r2
    6506:	2100      	movs	r1, #0
{
    6508:	4616      	mov	r6, r2
    if( mbedtls_mpi_cmp_int( B, 0 ) < 0 )
    650a:	f7ff fcdf 	bl	5ecc <mbedtls_mpi_cmp_int>
    650e:	2800      	cmp	r0, #0
    6510:	db24      	blt.n	655c <mbedtls_mpi_mod_mpi+0x5e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_div_mpi( NULL, R, A, B ) );
    6512:	462a      	mov	r2, r5
    6514:	4633      	mov	r3, r6
    6516:	4621      	mov	r1, r4
    6518:	2000      	movs	r0, #0
    651a:	f7ff fe4d 	bl	61b8 <mbedtls_mpi_div_mpi>
    651e:	4605      	mov	r5, r0
    6520:	b138      	cbz	r0, 6532 <mbedtls_mpi_mod_mpi+0x34>
}
    6522:	4628      	mov	r0, r5
    6524:	bd70      	pop	{r4, r5, r6, pc}
      MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( R, R, B ) );
    6526:	4632      	mov	r2, r6
    6528:	4621      	mov	r1, r4
    652a:	4620      	mov	r0, r4
    652c:	f7ff fd8e 	bl	604c <mbedtls_mpi_add_mpi>
    6530:	b990      	cbnz	r0, 6558 <mbedtls_mpi_mod_mpi+0x5a>
    while( mbedtls_mpi_cmp_int( R, 0 ) < 0 )
    6532:	2100      	movs	r1, #0
    6534:	4620      	mov	r0, r4
    6536:	f7ff fcc9 	bl	5ecc <mbedtls_mpi_cmp_int>
    653a:	2800      	cmp	r0, #0
    653c:	dbf3      	blt.n	6526 <mbedtls_mpi_mod_mpi+0x28>
    while( mbedtls_mpi_cmp_mpi( R, B ) >= 0 )
    653e:	4631      	mov	r1, r6
    6540:	4620      	mov	r0, r4
    6542:	f7ff fc82 	bl	5e4a <mbedtls_mpi_cmp_mpi>
    6546:	2800      	cmp	r0, #0
    6548:	dbeb      	blt.n	6522 <mbedtls_mpi_mod_mpi+0x24>
      MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( R, R, B ) );
    654a:	4632      	mov	r2, r6
    654c:	4621      	mov	r1, r4
    654e:	4620      	mov	r0, r4
    6550:	f7ff fd9e 	bl	6090 <mbedtls_mpi_sub_mpi>
    6554:	2800      	cmp	r0, #0
    6556:	d0f2      	beq.n	653e <mbedtls_mpi_mod_mpi+0x40>
    6558:	4605      	mov	r5, r0
    655a:	e7e2      	b.n	6522 <mbedtls_mpi_mod_mpi+0x24>
        return( MBEDTLS_ERR_MPI_NEGATIVE_VALUE );
    655c:	f06f 0509 	mvn.w	r5, #9
    6560:	e7df      	b.n	6522 <mbedtls_mpi_mod_mpi+0x24>

00006562 <mbedtls_mpi_exp_mod>:
 * Sliding-window exponentiation: X = A^E mod N  (HAC 14.85)
 */
int mbedtls_mpi_exp_mod( mbedtls_mpi *X, const mbedtls_mpi *A,
                         const mbedtls_mpi *E, const mbedtls_mpi *N,
                         mbedtls_mpi *_RR )
{
    6562:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6566:	f5ad 7d57 	sub.w	sp, sp, #860	; 0x35c
    656a:	4606      	mov	r6, r0
    656c:	4688      	mov	r8, r1
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( A != NULL );
    MPI_VALIDATE_RET( E != NULL );
    MPI_VALIDATE_RET( N != NULL );

    if( mbedtls_mpi_cmp_int( N, 0 ) <= 0 || ( N->p[0] & 1 ) == 0 )
    656e:	4618      	mov	r0, r3
    6570:	2100      	movs	r1, #0
{
    6572:	9205      	str	r2, [sp, #20]
    6574:	461d      	mov	r5, r3
    if( mbedtls_mpi_cmp_int( N, 0 ) <= 0 || ( N->p[0] & 1 ) == 0 )
    6576:	f7ff fca9 	bl	5ecc <mbedtls_mpi_cmp_int>
    657a:	2800      	cmp	r0, #0
    657c:	f340 81f3 	ble.w	6966 <mbedtls_mpi_exp_mod+0x404>
    6580:	68ab      	ldr	r3, [r5, #8]
    6582:	681c      	ldr	r4, [r3, #0]
    6584:	f014 0301 	ands.w	r3, r4, #1
    6588:	9307      	str	r3, [sp, #28]
    658a:	f000 81ec 	beq.w	6966 <mbedtls_mpi_exp_mod+0x404>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    if( mbedtls_mpi_cmp_int( E, 0 ) < 0 )
    658e:	9805      	ldr	r0, [sp, #20]
    6590:	2100      	movs	r1, #0
    6592:	f7ff fc9b 	bl	5ecc <mbedtls_mpi_cmp_int>
    6596:	2800      	cmp	r0, #0
    6598:	f2c0 81e5 	blt.w	6966 <mbedtls_mpi_exp_mod+0x404>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    if( mbedtls_mpi_bitlen( E ) > MBEDTLS_MPI_MAX_BITS ||
    659c:	9805      	ldr	r0, [sp, #20]
    659e:	f7ff fb03 	bl	5ba8 <mbedtls_mpi_bitlen>
    65a2:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
    65a6:	f200 81de 	bhi.w	6966 <mbedtls_mpi_exp_mod+0x404>
        mbedtls_mpi_bitlen( N ) > MBEDTLS_MPI_MAX_BITS )
    65aa:	4628      	mov	r0, r5
    65ac:	f7ff fafc 	bl	5ba8 <mbedtls_mpi_bitlen>
    if( mbedtls_mpi_bitlen( E ) > MBEDTLS_MPI_MAX_BITS ||
    65b0:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
    65b4:	f200 81d7 	bhi.w	6966 <mbedtls_mpi_exp_mod+0x404>
    x += ( ( m0 + 2 ) & 4 ) << 1;
    65b8:	1ca7      	adds	r7, r4, #2
    65ba:	007f      	lsls	r7, r7, #1
    65bc:	f007 0708 	and.w	r7, r7, #8
    65c0:	4427      	add	r7, r4
    65c2:	2103      	movs	r1, #3
        x *= ( 2 - ( m0 * x ) );
    65c4:	fb07 f304 	mul.w	r3, r7, r4
    65c8:	f1c3 0302 	rsb	r3, r3, #2
    for( i = biL; i >= 8; i /= 2 )
    65cc:	3901      	subs	r1, #1
        x *= ( 2 - ( m0 * x ) );
    65ce:	fb03 f707 	mul.w	r7, r3, r7
    for( i = biL; i >= 8; i /= 2 )
    65d2:	d1f7      	bne.n	65c4 <mbedtls_mpi_exp_mod+0x62>
    X->s = 1;
    65d4:	2301      	movs	r3, #1
     * Init temps and window size
     */
    mpi_montg_init( &mm, N );
    mbedtls_mpi_init( &RR ); mbedtls_mpi_init( &T );
    mbedtls_mpi_init( &Apos );
    memset( W, 0, sizeof( W ) );
    65d6:	f44f 7240 	mov.w	r2, #768	; 0x300
    65da:	a816      	add	r0, sp, #88	; 0x58
    X->n = 0;
    65dc:	e9cd 310a 	strd	r3, r1, [sp, #40]	; 0x28
    X->s = 1;
    65e0:	e9cd 130c 	strd	r1, r3, [sp, #48]	; 0x30
    X->p = NULL;
    65e4:	e9cd 110e 	strd	r1, r1, [sp, #56]	; 0x38
    X->n = 0;
    65e8:	e9cd 3110 	strd	r3, r1, [sp, #64]	; 0x40
    X->p = NULL;
    65ec:	9112      	str	r1, [sp, #72]	; 0x48
    memset( W, 0, sizeof( W ) );
    65ee:	f7fe fc55 	bl	4e9c <memset>

    i = mbedtls_mpi_bitlen( E );
    65f2:	9805      	ldr	r0, [sp, #20]
    65f4:	f7ff fad8 	bl	5ba8 <mbedtls_mpi_bitlen>

    wsize = ( i > 671 ) ? 6 : ( i > 239 ) ? 5 :
    65f8:	f5b0 7f28 	cmp.w	r0, #672	; 0x2a0
    65fc:	f080 80ed 	bcs.w	67da <mbedtls_mpi_exp_mod+0x278>
    6600:	28ef      	cmp	r0, #239	; 0xef
    6602:	f200 80ec 	bhi.w	67de <mbedtls_mpi_exp_mod+0x27c>
    6606:	284f      	cmp	r0, #79	; 0x4f
    6608:	f200 80eb 	bhi.w	67e2 <mbedtls_mpi_exp_mod+0x280>
    660c:	2817      	cmp	r0, #23
    660e:	9b07      	ldr	r3, [sp, #28]
    6610:	bf88      	it	hi
    6612:	2303      	movhi	r3, #3
#if( MBEDTLS_MPI_WINDOW_SIZE < 6 )
    if( wsize > MBEDTLS_MPI_WINDOW_SIZE )
        wsize = MBEDTLS_MPI_WINDOW_SIZE;
#endif

    j = N->n + 1;
    6614:	6869      	ldr	r1, [r5, #4]
    wsize = ( i > 671 ) ? 6 : ( i > 239 ) ? 5 :
    6616:	9303      	str	r3, [sp, #12]
    j = N->n + 1;
    6618:	f101 0901 	add.w	r9, r1, #1
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, j ) );
    661c:	4649      	mov	r1, r9
    661e:	4630      	mov	r0, r6
    6620:	f7ff fa43 	bl	5aaa <mbedtls_mpi_grow>
    6624:	4604      	mov	r4, r0
    6626:	2800      	cmp	r0, #0
    6628:	f040 80b6 	bne.w	6798 <mbedtls_mpi_exp_mod+0x236>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[1],  j ) );
    662c:	4649      	mov	r1, r9
    662e:	a819      	add	r0, sp, #100	; 0x64
    6630:	f7ff fa3b 	bl	5aaa <mbedtls_mpi_grow>
    6634:	4604      	mov	r4, r0
    6636:	2800      	cmp	r0, #0
    6638:	f040 80ae 	bne.w	6798 <mbedtls_mpi_exp_mod+0x236>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &T, j * 2 ) );
    663c:	ea4f 0149 	mov.w	r1, r9, lsl #1
    6640:	a80d      	add	r0, sp, #52	; 0x34
    6642:	f7ff fa32 	bl	5aaa <mbedtls_mpi_grow>
    6646:	4604      	mov	r4, r0
    6648:	2800      	cmp	r0, #0
    664a:	f040 80a5 	bne.w	6798 <mbedtls_mpi_exp_mod+0x236>

    /*
     * Compensate for negative A (and correct at the end)
     */
    neg = ( A->s == -1 );
    664e:	f8d8 3000 	ldr.w	r3, [r8]
    6652:	9306      	str	r3, [sp, #24]
    if( neg )
    6654:	3301      	adds	r3, #1
    6656:	d10b      	bne.n	6670 <mbedtls_mpi_exp_mod+0x10e>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &Apos, A ) );
    6658:	4641      	mov	r1, r8
    665a:	a810      	add	r0, sp, #64	; 0x40
    665c:	f7ff fa4b 	bl	5af6 <mbedtls_mpi_copy>
    6660:	4604      	mov	r4, r0
    6662:	2800      	cmp	r0, #0
    6664:	f040 8098 	bne.w	6798 <mbedtls_mpi_exp_mod+0x236>
        Apos.s = 1;
    6668:	2301      	movs	r3, #1
    666a:	9310      	str	r3, [sp, #64]	; 0x40
        A = &Apos;
    666c:	f10d 0840 	add.w	r8, sp, #64	; 0x40
    }

    /*
     * If 1st call, pre-compute R^2 mod N
     */
    if( _RR == NULL || _RR->p == NULL )
    6670:	9be0      	ldr	r3, [sp, #896]	; 0x380
    6672:	b11b      	cbz	r3, 667c <mbedtls_mpi_exp_mod+0x11a>
    6674:	689b      	ldr	r3, [r3, #8]
    6676:	2b00      	cmp	r3, #0
    6678:	f040 80b5 	bne.w	67e6 <mbedtls_mpi_exp_mod+0x284>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &RR, 1 ) );
    667c:	2101      	movs	r1, #1
    667e:	a80a      	add	r0, sp, #40	; 0x28
    6680:	f7ff fa65 	bl	5b4e <mbedtls_mpi_lset>
    6684:	4604      	mov	r4, r0
    6686:	2800      	cmp	r0, #0
    6688:	f040 8086 	bne.w	6798 <mbedtls_mpi_exp_mod+0x236>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &RR, N->n * 2 * biL ) );
    668c:	6869      	ldr	r1, [r5, #4]
    668e:	a80a      	add	r0, sp, #40	; 0x28
    6690:	0189      	lsls	r1, r1, #6
    6692:	f7ff fb19 	bl	5cc8 <mbedtls_mpi_shift_l>
    6696:	4604      	mov	r4, r0
    6698:	2800      	cmp	r0, #0
    669a:	d17d      	bne.n	6798 <mbedtls_mpi_exp_mod+0x236>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &RR, &RR, N ) );
    669c:	a90a      	add	r1, sp, #40	; 0x28
    669e:	462a      	mov	r2, r5
    66a0:	4608      	mov	r0, r1
    66a2:	f7ff ff2c 	bl	64fe <mbedtls_mpi_mod_mpi>
    66a6:	4604      	mov	r4, r0
    66a8:	2800      	cmp	r0, #0
    66aa:	d175      	bne.n	6798 <mbedtls_mpi_exp_mod+0x236>

        if( _RR != NULL )
    66ac:	9be0      	ldr	r3, [sp, #896]	; 0x380
    66ae:	b123      	cbz	r3, 66ba <mbedtls_mpi_exp_mod+0x158>
            memcpy( _RR, &RR, sizeof( mbedtls_mpi ) );
    66b0:	220c      	movs	r2, #12
    66b2:	a90a      	add	r1, sp, #40	; 0x28
    66b4:	4618      	mov	r0, r3
    }
    else
        memcpy( &RR, _RR, sizeof( mbedtls_mpi ) );
    66b6:	f7fe fbe6 	bl	4e86 <memcpy>

    /*
     * W[1] = A * R^2 * R^-1 mod N = A * R mod N
     */
    if( mbedtls_mpi_cmp_mpi( A, N ) >= 0 )
    66ba:	4629      	mov	r1, r5
    66bc:	4640      	mov	r0, r8
    66be:	f7ff fbc4 	bl	5e4a <mbedtls_mpi_cmp_mpi>
    66c2:	2800      	cmp	r0, #0
    66c4:	f2c0 8093 	blt.w	67ee <mbedtls_mpi_exp_mod+0x28c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &W[1], A, N ) );
    66c8:	462a      	mov	r2, r5
    66ca:	4641      	mov	r1, r8
    66cc:	a819      	add	r0, sp, #100	; 0x64
    66ce:	f7ff ff16 	bl	64fe <mbedtls_mpi_mod_mpi>
    66d2:	4604      	mov	r4, r0
    66d4:	2800      	cmp	r0, #0
    66d6:	d15f      	bne.n	6798 <mbedtls_mpi_exp_mod+0x236>
    *mm = ~x + 1;
    66d8:	f1c7 0a00 	rsb	sl, r7, #0
    else
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[1], A ) );

    mpi_montmul( &W[1], &RR, N, mm, &T );
    66dc:	f10d 0934 	add.w	r9, sp, #52	; 0x34
    66e0:	4653      	mov	r3, sl
    66e2:	462a      	mov	r2, r5
    66e4:	a90a      	add	r1, sp, #40	; 0x28
    66e6:	a819      	add	r0, sp, #100	; 0x64
    66e8:	f8cd 9000 	str.w	r9, [sp]
    66ec:	f7ff f932 	bl	5954 <mpi_montmul>

    /*
     * X = R^2 * R^-1 mod N = R mod N
     */
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, &RR ) );
    66f0:	a90a      	add	r1, sp, #40	; 0x28
    66f2:	4630      	mov	r0, r6
    66f4:	f7ff f9ff 	bl	5af6 <mbedtls_mpi_copy>
    66f8:	4604      	mov	r4, r0
    66fa:	2800      	cmp	r0, #0
    66fc:	d14c      	bne.n	6798 <mbedtls_mpi_exp_mod+0x236>
    mbedtls_mpi_uint z = 1;
    66fe:	ab09      	add	r3, sp, #36	; 0x24
    6700:	2701      	movs	r7, #1
    U.p = &z;
    6702:	9315      	str	r3, [sp, #84]	; 0x54
    mpi_montmul( A, &U, N, mm, T );
    6704:	f8cd 9000 	str.w	r9, [sp]
    6708:	4653      	mov	r3, sl
    670a:	462a      	mov	r2, r5
    670c:	a913      	add	r1, sp, #76	; 0x4c
    670e:	4630      	mov	r0, r6
    U.n = U.s = (int) z;
    6710:	e9cd 7713 	strd	r7, r7, [sp, #76]	; 0x4c
    mbedtls_mpi_uint z = 1;
    6714:	9709      	str	r7, [sp, #36]	; 0x24
    mpi_montmul( A, &U, N, mm, T );
    6716:	f7ff f91d 	bl	5954 <mpi_montmul>
    mpi_montred( X, N, mm, &T );

    if( wsize > 1 )
    671a:	9b03      	ldr	r3, [sp, #12]
    671c:	42bb      	cmp	r3, r7
    671e:	d16b      	bne.n	67f8 <mbedtls_mpi_exp_mod+0x296>

            mpi_montmul( &W[i], &W[1], N, mm, &T );
        }
    }

    nblimbs = E->n;
    6720:	9b05      	ldr	r3, [sp, #20]
    bufsize = 0;
    nbits   = 0;
    wbits   = 0;
    state   = 0;
    6722:	f04f 0800 	mov.w	r8, #0
    nblimbs = E->n;
    6726:	685b      	ldr	r3, [r3, #4]
    6728:	9304      	str	r3, [sp, #16]
    nbits   = 0;
    672a:	46c3      	mov	fp, r8
    bufsize = 0;
    672c:	46c1      	mov	r9, r8
    wbits   = 0;
    672e:	4647      	mov	r7, r8

    while( 1 )
    {
        if( bufsize == 0 )
    6730:	f1b9 0f00 	cmp.w	r9, #0
    6734:	f040 80b4 	bne.w	68a0 <mbedtls_mpi_exp_mod+0x33e>
        {
            if( nblimbs == 0 )
    6738:	9b04      	ldr	r3, [sp, #16]
    673a:	2b00      	cmp	r3, #0
    673c:	f040 80ab 	bne.w	6896 <mbedtls_mpi_exp_mod+0x334>
    {
        mpi_montmul( X, X, N, mm, &T );

        wbits <<= 1;

        if( ( wbits & ( one << wsize ) ) != 0 )
    6740:	9b03      	ldr	r3, [sp, #12]
    6742:	f04f 0901 	mov.w	r9, #1
    6746:	fa09 f903 	lsl.w	r9, r9, r3
    674a:	f10d 0834 	add.w	r8, sp, #52	; 0x34
    for( i = 0; i < nbits; i++ )
    674e:	9b04      	ldr	r3, [sp, #16]
    6750:	455b      	cmp	r3, fp
    6752:	f040 80e9 	bne.w	6928 <mbedtls_mpi_exp_mod+0x3c6>
    mbedtls_mpi_uint z = 1;
    6756:	2301      	movs	r3, #1
    6758:	aa09      	add	r2, sp, #36	; 0x24
    U.n = U.s = (int) z;
    675a:	e9cd 3313 	strd	r3, r3, [sp, #76]	; 0x4c
    mbedtls_mpi_uint z = 1;
    675e:	9309      	str	r3, [sp, #36]	; 0x24
    U.p = &z;
    6760:	9215      	str	r2, [sp, #84]	; 0x54
    mpi_montmul( A, &U, N, mm, T );
    6762:	4653      	mov	r3, sl
    6764:	f8cd 8000 	str.w	r8, [sp]
    6768:	462a      	mov	r2, r5
    676a:	a913      	add	r1, sp, #76	; 0x4c
    676c:	4630      	mov	r0, r6
    676e:	f7ff f8f1 	bl	5954 <mpi_montmul>
    /*
     * X = A^E * R * R^-1 mod N = A^E mod N
     */
    mpi_montred( X, N, mm, &T );

    if( neg && E->n != 0 && ( E->p[0] & 1 ) != 0 )
    6772:	9b06      	ldr	r3, [sp, #24]
    6774:	3301      	adds	r3, #1
    6776:	d10f      	bne.n	6798 <mbedtls_mpi_exp_mod+0x236>
    6778:	9b05      	ldr	r3, [sp, #20]
    677a:	685b      	ldr	r3, [r3, #4]
    677c:	b163      	cbz	r3, 6798 <mbedtls_mpi_exp_mod+0x236>
    677e:	9b05      	ldr	r3, [sp, #20]
    6780:	689b      	ldr	r3, [r3, #8]
    6782:	681b      	ldr	r3, [r3, #0]
    6784:	07db      	lsls	r3, r3, #31
    6786:	d507      	bpl.n	6798 <mbedtls_mpi_exp_mod+0x236>
    {
        X->s = -1;
    6788:	9b06      	ldr	r3, [sp, #24]
    678a:	6033      	str	r3, [r6, #0]
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( X, N, X ) );
    678c:	4632      	mov	r2, r6
    678e:	4629      	mov	r1, r5
    6790:	4630      	mov	r0, r6
    6792:	f7ff fc5b 	bl	604c <mbedtls_mpi_add_mpi>
    6796:	4604      	mov	r4, r0
    }

cleanup:

    for( i = ( one << ( wsize - 1 ) ); i < ( one << wsize ); i++ )
    6798:	9b03      	ldr	r3, [sp, #12]
    679a:	9a03      	ldr	r2, [sp, #12]
    679c:	1e5d      	subs	r5, r3, #1
    679e:	2301      	movs	r3, #1
    67a0:	fa03 f505 	lsl.w	r5, r3, r5
    67a4:	fa03 f602 	lsl.w	r6, r3, r2
        mbedtls_mpi_free( &W[i] );
    67a8:	270c      	movs	r7, #12
    for( i = ( one << ( wsize - 1 ) ); i < ( one << wsize ); i++ )
    67aa:	42ae      	cmp	r6, r5
    67ac:	f200 80d4 	bhi.w	6958 <mbedtls_mpi_exp_mod+0x3f6>

    mbedtls_mpi_free( &W[1] ); mbedtls_mpi_free( &T ); mbedtls_mpi_free( &Apos );
    67b0:	a819      	add	r0, sp, #100	; 0x64
    67b2:	f7ff f968 	bl	5a86 <mbedtls_mpi_free>
    67b6:	a80d      	add	r0, sp, #52	; 0x34
    67b8:	f7ff f965 	bl	5a86 <mbedtls_mpi_free>
    67bc:	a810      	add	r0, sp, #64	; 0x40
    67be:	f7ff f962 	bl	5a86 <mbedtls_mpi_free>

    if( _RR == NULL || _RR->p == NULL )
    67c2:	9be0      	ldr	r3, [sp, #896]	; 0x380
    67c4:	b10b      	cbz	r3, 67ca <mbedtls_mpi_exp_mod+0x268>
    67c6:	689b      	ldr	r3, [r3, #8]
    67c8:	b913      	cbnz	r3, 67d0 <mbedtls_mpi_exp_mod+0x26e>
        mbedtls_mpi_free( &RR );
    67ca:	a80a      	add	r0, sp, #40	; 0x28
    67cc:	f7ff f95b 	bl	5a86 <mbedtls_mpi_free>

    return( ret );
}
    67d0:	4620      	mov	r0, r4
    67d2:	f50d 7d57 	add.w	sp, sp, #860	; 0x35c
    67d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    wsize = ( i > 671 ) ? 6 : ( i > 239 ) ? 5 :
    67da:	2306      	movs	r3, #6
    67dc:	e71a      	b.n	6614 <mbedtls_mpi_exp_mod+0xb2>
    67de:	2305      	movs	r3, #5
    67e0:	e718      	b.n	6614 <mbedtls_mpi_exp_mod+0xb2>
    67e2:	2304      	movs	r3, #4
    67e4:	e716      	b.n	6614 <mbedtls_mpi_exp_mod+0xb2>
        memcpy( &RR, _RR, sizeof( mbedtls_mpi ) );
    67e6:	99e0      	ldr	r1, [sp, #896]	; 0x380
    67e8:	220c      	movs	r2, #12
    67ea:	a80a      	add	r0, sp, #40	; 0x28
    67ec:	e763      	b.n	66b6 <mbedtls_mpi_exp_mod+0x154>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[1], A ) );
    67ee:	4641      	mov	r1, r8
    67f0:	a819      	add	r0, sp, #100	; 0x64
    67f2:	f7ff f980 	bl	5af6 <mbedtls_mpi_copy>
    67f6:	e76c      	b.n	66d2 <mbedtls_mpi_exp_mod+0x170>
        j =  one << ( wsize - 1 );
    67f8:	9b03      	ldr	r3, [sp, #12]
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[j], N->n + 1 ) );
    67fa:	6869      	ldr	r1, [r5, #4]
        j =  one << ( wsize - 1 );
    67fc:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
    6800:	fa07 f30b 	lsl.w	r3, r7, fp
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[j], N->n + 1 ) );
    6804:	270c      	movs	r7, #12
        j =  one << ( wsize - 1 );
    6806:	9304      	str	r3, [sp, #16]
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[j], N->n + 1 ) );
    6808:	fa07 f70b 	lsl.w	r7, r7, fp
    680c:	ab16      	add	r3, sp, #88	; 0x58
    680e:	441f      	add	r7, r3
    6810:	3101      	adds	r1, #1
    6812:	4638      	mov	r0, r7
    6814:	f7ff f949 	bl	5aaa <mbedtls_mpi_grow>
    6818:	2800      	cmp	r0, #0
    681a:	d1bc      	bne.n	6796 <mbedtls_mpi_exp_mod+0x234>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[j], &W[1]    ) );
    681c:	a919      	add	r1, sp, #100	; 0x64
    681e:	4638      	mov	r0, r7
    6820:	f7ff f969 	bl	5af6 <mbedtls_mpi_copy>
    6824:	2800      	cmp	r0, #0
    6826:	d1b6      	bne.n	6796 <mbedtls_mpi_exp_mod+0x234>
        for( i = 0; i < wsize - 1; i++ )
    6828:	46a0      	mov	r8, r4
            mpi_montmul( &W[j], &W[j], N, mm, &T );
    682a:	f8cd 9000 	str.w	r9, [sp]
    682e:	4653      	mov	r3, sl
    6830:	462a      	mov	r2, r5
    6832:	4639      	mov	r1, r7
    6834:	4638      	mov	r0, r7
        for( i = 0; i < wsize - 1; i++ )
    6836:	f108 0801 	add.w	r8, r8, #1
            mpi_montmul( &W[j], &W[j], N, mm, &T );
    683a:	f7ff f88b 	bl	5954 <mpi_montmul>
        for( i = 0; i < wsize - 1; i++ )
    683e:	45c3      	cmp	fp, r8
    6840:	d8f3      	bhi.n	682a <mbedtls_mpi_exp_mod+0x2c8>
        for( i = j + 1; i < ( one << wsize ); i++ )
    6842:	9b04      	ldr	r3, [sp, #16]
    6844:	9a03      	ldr	r2, [sp, #12]
    6846:	f103 0801 	add.w	r8, r3, #1
    684a:	2301      	movs	r3, #1
    684c:	4093      	lsls	r3, r2
    684e:	46bb      	mov	fp, r7
    6850:	9304      	str	r3, [sp, #16]
            mpi_montmul( &W[i], &W[1], N, mm, &T );
    6852:	af0d      	add	r7, sp, #52	; 0x34
        for( i = j + 1; i < ( one << wsize ); i++ )
    6854:	9b04      	ldr	r3, [sp, #16]
    6856:	4543      	cmp	r3, r8
    6858:	f67f af62 	bls.w	6720 <mbedtls_mpi_exp_mod+0x1be>
            MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[i], N->n + 1 ) );
    685c:	6869      	ldr	r1, [r5, #4]
    685e:	f10b 090c 	add.w	r9, fp, #12
    6862:	3101      	adds	r1, #1
    6864:	4648      	mov	r0, r9
    6866:	f7ff f920 	bl	5aaa <mbedtls_mpi_grow>
    686a:	2800      	cmp	r0, #0
    686c:	d193      	bne.n	6796 <mbedtls_mpi_exp_mod+0x234>
            MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[i], &W[i - 1] ) );
    686e:	4659      	mov	r1, fp
    6870:	4648      	mov	r0, r9
    6872:	f7ff f940 	bl	5af6 <mbedtls_mpi_copy>
    6876:	2800      	cmp	r0, #0
    6878:	d18d      	bne.n	6796 <mbedtls_mpi_exp_mod+0x234>
            mpi_montmul( &W[i], &W[1], N, mm, &T );
    687a:	9700      	str	r7, [sp, #0]
    687c:	4653      	mov	r3, sl
    687e:	462a      	mov	r2, r5
    6880:	a919      	add	r1, sp, #100	; 0x64
    6882:	4648      	mov	r0, r9
    6884:	f7ff f866 	bl	5954 <mpi_montmul>
        for( i = j + 1; i < ( one << wsize ); i++ )
    6888:	f108 0801 	add.w	r8, r8, #1
    688c:	46cb      	mov	fp, r9
    688e:	e7e1      	b.n	6854 <mbedtls_mpi_exp_mod+0x2f2>
        state = 2;
    6890:	f04f 0802 	mov.w	r8, #2
    6894:	e74c      	b.n	6730 <mbedtls_mpi_exp_mod+0x1ce>
            nblimbs--;
    6896:	9b04      	ldr	r3, [sp, #16]
    6898:	3b01      	subs	r3, #1
    689a:	9304      	str	r3, [sp, #16]
            bufsize = sizeof( mbedtls_mpi_uint ) << 3;
    689c:	f04f 0920 	mov.w	r9, #32
        ei = (E->p[nblimbs] >> bufsize) & 1;
    68a0:	9b05      	ldr	r3, [sp, #20]
    68a2:	9a04      	ldr	r2, [sp, #16]
    68a4:	689b      	ldr	r3, [r3, #8]
    68a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
        bufsize--;
    68aa:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
        ei = (E->p[nblimbs] >> bufsize) & 1;
    68ae:	fa23 f309 	lsr.w	r3, r3, r9
        if( ei == 0 && state == 0 )
    68b2:	f013 0301 	ands.w	r3, r3, #1
    68b6:	d10f      	bne.n	68d8 <mbedtls_mpi_exp_mod+0x376>
    68b8:	f1b8 0f00 	cmp.w	r8, #0
    68bc:	f43f af38 	beq.w	6730 <mbedtls_mpi_exp_mod+0x1ce>
        if( ei == 0 && state == 1 )
    68c0:	f1b8 0f01 	cmp.w	r8, #1
    68c4:	d108      	bne.n	68d8 <mbedtls_mpi_exp_mod+0x376>
            mpi_montmul( X, X, N, mm, &T );
    68c6:	ab0d      	add	r3, sp, #52	; 0x34
    68c8:	9300      	str	r3, [sp, #0]
    68ca:	462a      	mov	r2, r5
    68cc:	4653      	mov	r3, sl
    68ce:	4631      	mov	r1, r6
    68d0:	4630      	mov	r0, r6
    68d2:	f7ff f83f 	bl	5954 <mpi_montmul>
            continue;
    68d6:	e72b      	b.n	6730 <mbedtls_mpi_exp_mod+0x1ce>
        wbits |= ( ei << ( wsize - nbits ) );
    68d8:	9a03      	ldr	r2, [sp, #12]
        nbits++;
    68da:	f10b 0b01 	add.w	fp, fp, #1
        wbits |= ( ei << ( wsize - nbits ) );
    68de:	eba2 020b 	sub.w	r2, r2, fp
    68e2:	4093      	lsls	r3, r2
    68e4:	431f      	orrs	r7, r3
        if( nbits == wsize )
    68e6:	9b03      	ldr	r3, [sp, #12]
    68e8:	455b      	cmp	r3, fp
    68ea:	d1d1      	bne.n	6890 <mbedtls_mpi_exp_mod+0x32e>
            for( i = 0; i < wsize; i++ )
    68ec:	f04f 0800 	mov.w	r8, #0
                mpi_montmul( X, X, N, mm, &T );
    68f0:	ab0d      	add	r3, sp, #52	; 0x34
    68f2:	9300      	str	r3, [sp, #0]
    68f4:	462a      	mov	r2, r5
    68f6:	4653      	mov	r3, sl
    68f8:	4631      	mov	r1, r6
    68fa:	4630      	mov	r0, r6
            for( i = 0; i < wsize; i++ )
    68fc:	f108 0801 	add.w	r8, r8, #1
                mpi_montmul( X, X, N, mm, &T );
    6900:	f7ff f828 	bl	5954 <mpi_montmul>
            for( i = 0; i < wsize; i++ )
    6904:	45c3      	cmp	fp, r8
    6906:	d8f3      	bhi.n	68f0 <mbedtls_mpi_exp_mod+0x38e>
            mpi_montmul( X, &W[wbits], N, mm, &T );
    6908:	ab0d      	add	r3, sp, #52	; 0x34
    690a:	200c      	movs	r0, #12
    690c:	a916      	add	r1, sp, #88	; 0x58
    690e:	fb00 1107 	mla	r1, r0, r7, r1
    6912:	9300      	str	r3, [sp, #0]
    6914:	462a      	mov	r2, r5
    6916:	4653      	mov	r3, sl
    6918:	4630      	mov	r0, r6
            nbits = 0;
    691a:	2700      	movs	r7, #0
            mpi_montmul( X, &W[wbits], N, mm, &T );
    691c:	f7ff f81a 	bl	5954 <mpi_montmul>
            wbits = 0;
    6920:	46bb      	mov	fp, r7
            state--;
    6922:	f8dd 801c 	ldr.w	r8, [sp, #28]
    6926:	e703      	b.n	6730 <mbedtls_mpi_exp_mod+0x1ce>
        mpi_montmul( X, X, N, mm, &T );
    6928:	f8cd 8000 	str.w	r8, [sp]
    692c:	4653      	mov	r3, sl
    692e:	462a      	mov	r2, r5
    6930:	4631      	mov	r1, r6
    6932:	4630      	mov	r0, r6
        wbits <<= 1;
    6934:	007f      	lsls	r7, r7, #1
        mpi_montmul( X, X, N, mm, &T );
    6936:	f7ff f80d 	bl	5954 <mpi_montmul>
        if( ( wbits & ( one << wsize ) ) != 0 )
    693a:	ea19 0f07 	tst.w	r9, r7
    693e:	d007      	beq.n	6950 <mbedtls_mpi_exp_mod+0x3ee>
            mpi_montmul( X, &W[1], N, mm, &T );
    6940:	f8cd 8000 	str.w	r8, [sp]
    6944:	4653      	mov	r3, sl
    6946:	462a      	mov	r2, r5
    6948:	a919      	add	r1, sp, #100	; 0x64
    694a:	4630      	mov	r0, r6
    694c:	f7ff f802 	bl	5954 <mpi_montmul>
    for( i = 0; i < nbits; i++ )
    6950:	9b04      	ldr	r3, [sp, #16]
    6952:	3301      	adds	r3, #1
    6954:	9304      	str	r3, [sp, #16]
    6956:	e6fa      	b.n	674e <mbedtls_mpi_exp_mod+0x1ec>
        mbedtls_mpi_free( &W[i] );
    6958:	ab16      	add	r3, sp, #88	; 0x58
    695a:	fb07 3005 	mla	r0, r7, r5, r3
    695e:	f7ff f892 	bl	5a86 <mbedtls_mpi_free>
    for( i = ( one << ( wsize - 1 ) ); i < ( one << wsize ); i++ )
    6962:	3501      	adds	r5, #1
    6964:	e721      	b.n	67aa <mbedtls_mpi_exp_mod+0x248>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
    6966:	f06f 0403 	mvn.w	r4, #3
    696a:	e731      	b.n	67d0 <mbedtls_mpi_exp_mod+0x26e>

0000696c <platform_calloc_uninit>:
}
    696c:	2000      	movs	r0, #0
    696e:	4770      	bx	lr

00006970 <platform_exit_uninit>:
 * Make dummy function to prevent NULL pointer dereferences
 */
static void platform_exit_uninit( int status )
{
    ((void) status);
}
    6970:	4770      	bx	lr

00006972 <platform_free_uninit>:
    6972:	4770      	bx	lr

00006974 <mbedtls_rsa_import>:
{
    6974:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    6978:	4605      	mov	r5, r0
    697a:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
    697e:	4691      	mov	r9, r2
    6980:	4698      	mov	r8, r3
    if( ( N != NULL && ( ret = mbedtls_mpi_copy( &ctx->N, N ) ) != 0 ) ||
    6982:	460c      	mov	r4, r1
    6984:	b979      	cbnz	r1, 69a6 <mbedtls_rsa_import+0x32>
    6986:	f1b9 0f00 	cmp.w	r9, #0
    698a:	d115      	bne.n	69b8 <mbedtls_rsa_import+0x44>
        ( P != NULL && ( ret = mbedtls_mpi_copy( &ctx->P, P ) ) != 0 ) ||
    698c:	f1b8 0f00 	cmp.w	r8, #0
    6990:	d11a      	bne.n	69c8 <mbedtls_rsa_import+0x54>
        ( Q != NULL && ( ret = mbedtls_mpi_copy( &ctx->Q, Q ) ) != 0 ) ||
    6992:	bb0f      	cbnz	r7, 69d8 <mbedtls_rsa_import+0x64>
        ( D != NULL && ( ret = mbedtls_mpi_copy( &ctx->D, D ) ) != 0 ) ||
    6994:	bb46      	cbnz	r6, 69e8 <mbedtls_rsa_import+0x74>
    if( N != NULL )
    6996:	b37c      	cbz	r4, 69f8 <mbedtls_rsa_import+0x84>
        ctx->len = mbedtls_mpi_size( &ctx->N );
    6998:	f105 0008 	add.w	r0, r5, #8
    699c:	f7ff f920 	bl	5be0 <mbedtls_mpi_size>
    69a0:	6068      	str	r0, [r5, #4]
    return( 0 );
    69a2:	2000      	movs	r0, #0
    69a4:	e006      	b.n	69b4 <mbedtls_rsa_import+0x40>
    if( ( N != NULL && ( ret = mbedtls_mpi_copy( &ctx->N, N ) ) != 0 ) ||
    69a6:	3008      	adds	r0, #8
    69a8:	f7ff f8a5 	bl	5af6 <mbedtls_mpi_copy>
    69ac:	2800      	cmp	r0, #0
    69ae:	d0ea      	beq.n	6986 <mbedtls_rsa_import+0x12>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA + ret );
    69b0:	f5a0 4081 	sub.w	r0, r0, #16512	; 0x4080
}
    69b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        ( P != NULL && ( ret = mbedtls_mpi_copy( &ctx->P, P ) ) != 0 ) ||
    69b8:	4649      	mov	r1, r9
    69ba:	f105 002c 	add.w	r0, r5, #44	; 0x2c
    69be:	f7ff f89a 	bl	5af6 <mbedtls_mpi_copy>
    69c2:	2800      	cmp	r0, #0
    69c4:	d0e2      	beq.n	698c <mbedtls_rsa_import+0x18>
    69c6:	e7f3      	b.n	69b0 <mbedtls_rsa_import+0x3c>
        ( Q != NULL && ( ret = mbedtls_mpi_copy( &ctx->Q, Q ) ) != 0 ) ||
    69c8:	4641      	mov	r1, r8
    69ca:	f105 0038 	add.w	r0, r5, #56	; 0x38
    69ce:	f7ff f892 	bl	5af6 <mbedtls_mpi_copy>
    69d2:	2800      	cmp	r0, #0
    69d4:	d0dd      	beq.n	6992 <mbedtls_rsa_import+0x1e>
    69d6:	e7eb      	b.n	69b0 <mbedtls_rsa_import+0x3c>
        ( D != NULL && ( ret = mbedtls_mpi_copy( &ctx->D, D ) ) != 0 ) ||
    69d8:	4639      	mov	r1, r7
    69da:	f105 0020 	add.w	r0, r5, #32
    69de:	f7ff f88a 	bl	5af6 <mbedtls_mpi_copy>
    69e2:	2800      	cmp	r0, #0
    69e4:	d0d6      	beq.n	6994 <mbedtls_rsa_import+0x20>
    69e6:	e7e3      	b.n	69b0 <mbedtls_rsa_import+0x3c>
        ( E != NULL && ( ret = mbedtls_mpi_copy( &ctx->E, E ) ) != 0 ) )
    69e8:	4631      	mov	r1, r6
    69ea:	f105 0014 	add.w	r0, r5, #20
    69ee:	f7ff f882 	bl	5af6 <mbedtls_mpi_copy>
    69f2:	2800      	cmp	r0, #0
    69f4:	d0cf      	beq.n	6996 <mbedtls_rsa_import+0x22>
    69f6:	e7db      	b.n	69b0 <mbedtls_rsa_import+0x3c>
    return( 0 );
    69f8:	4620      	mov	r0, r4
    69fa:	e7db      	b.n	69b4 <mbedtls_rsa_import+0x40>

000069fc <mbedtls_rsa_init>:
{
    69fc:	b570      	push	{r4, r5, r6, lr}
    69fe:	4604      	mov	r4, r0
    6a00:	460e      	mov	r6, r1
    6a02:	4615      	mov	r5, r2
    memset( ctx, 0, sizeof( mbedtls_rsa_context ) );
    6a04:	2100      	movs	r1, #0
    6a06:	22ac      	movs	r2, #172	; 0xac
    6a08:	f7fe fa48 	bl	4e9c <memset>
    ctx->hash_id = hash_id;
    6a0c:	e9c4 6529 	strd	r6, r5, [r4, #164]	; 0xa4
}
    6a10:	bd70      	pop	{r4, r5, r6, pc}

00006a12 <mbedtls_rsa_free>:

/*
 * Free the components of an RSA key
 */
void mbedtls_rsa_free( mbedtls_rsa_context *ctx )
{
    6a12:	b510      	push	{r4, lr}
    if( ctx == NULL )
    6a14:	4604      	mov	r4, r0
    6a16:	b3a0      	cbz	r0, 6a82 <mbedtls_rsa_free+0x70>
        return;

    mbedtls_mpi_free( &ctx->Vi );
    6a18:	308c      	adds	r0, #140	; 0x8c
    6a1a:	f7ff f834 	bl	5a86 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->Vf );
    6a1e:	f104 0098 	add.w	r0, r4, #152	; 0x98
    6a22:	f7ff f830 	bl	5a86 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->RN );
    6a26:	f104 0068 	add.w	r0, r4, #104	; 0x68
    6a2a:	f7ff f82c 	bl	5a86 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->D  );
    6a2e:	f104 0020 	add.w	r0, r4, #32
    6a32:	f7ff f828 	bl	5a86 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->Q  );
    6a36:	f104 0038 	add.w	r0, r4, #56	; 0x38
    6a3a:	f7ff f824 	bl	5a86 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->P  );
    6a3e:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    6a42:	f7ff f820 	bl	5a86 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->E  );
    6a46:	f104 0014 	add.w	r0, r4, #20
    6a4a:	f7ff f81c 	bl	5a86 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->N  );
    6a4e:	f104 0008 	add.w	r0, r4, #8
    6a52:	f7ff f818 	bl	5a86 <mbedtls_mpi_free>

#if !defined(MBEDTLS_RSA_NO_CRT)
    mbedtls_mpi_free( &ctx->RQ );
    6a56:	f104 0080 	add.w	r0, r4, #128	; 0x80
    6a5a:	f7ff f814 	bl	5a86 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->RP );
    6a5e:	f104 0074 	add.w	r0, r4, #116	; 0x74
    6a62:	f7ff f810 	bl	5a86 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->QP );
    6a66:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    6a6a:	f7ff f80c 	bl	5a86 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->DQ );
    6a6e:	f104 0050 	add.w	r0, r4, #80	; 0x50
    6a72:	f7ff f808 	bl	5a86 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->DP );
    6a76:	f104 0044 	add.w	r0, r4, #68	; 0x44
    {
        mbedtls_mutex_free( &ctx->mutex );
        ctx->ver = 0;
    }
#endif
}
    6a7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_mpi_free( &ctx->DP );
    6a7e:	f7ff b802 	b.w	5a86 <mbedtls_mpi_free>
}
    6a82:	bd10      	pop	{r4, pc}

00006a84 <mbedtls_sha256_init>:
    memset( ctx, 0, sizeof( mbedtls_sha256_context ) );
    6a84:	226c      	movs	r2, #108	; 0x6c
    6a86:	2100      	movs	r1, #0
    6a88:	f7fe ba08 	b.w	4e9c <memset>

00006a8c <mbedtls_sha256_update_ret>:
 * SHA-256 process buffer
 */
int mbedtls_sha256_update_ret( mbedtls_sha256_context *ctx,
                               const unsigned char *input,
                               size_t ilen )
{
    6a8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    6a90:	4605      	mov	r5, r0
    6a92:	460e      	mov	r6, r1
    uint32_t left;

    SHA256_VALIDATE_RET( ctx != NULL );
    SHA256_VALIDATE_RET( ilen == 0 || input != NULL );

    if( ilen == 0 )
    6a94:	4614      	mov	r4, r2
    6a96:	b912      	cbnz	r2, 6a9e <mbedtls_sha256_update_ret+0x12>
    }

    if( ilen > 0 )
        memcpy( (void *) (ctx->buffer + left), input, ilen );

    return( 0 );
    6a98:	2000      	movs	r0, #0
}
    6a9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    left = ctx->total[0] & 0x3F;
    6a9e:	6803      	ldr	r3, [r0, #0]
    6aa0:	f003 073f 	and.w	r7, r3, #63	; 0x3f
    ctx->total[0] += (uint32_t) ilen;
    6aa4:	18d3      	adds	r3, r2, r3
    6aa6:	6003      	str	r3, [r0, #0]
        ctx->total[1]++;
    6aa8:	bf22      	ittt	cs
    6aaa:	6843      	ldrcs	r3, [r0, #4]
    6aac:	3301      	addcs	r3, #1
    6aae:	6043      	strcs	r3, [r0, #4]
    if( left && ilen >= fill )
    6ab0:	b1a7      	cbz	r7, 6adc <mbedtls_sha256_update_ret+0x50>
    fill = 64 - left;
    6ab2:	f1c7 0940 	rsb	r9, r7, #64	; 0x40
    if( left && ilen >= fill )
    6ab6:	454a      	cmp	r2, r9
    6ab8:	d310      	bcc.n	6adc <mbedtls_sha256_update_ret+0x50>
        memcpy( (void *) (ctx->buffer + left), input, fill );
    6aba:	f100 0828 	add.w	r8, r0, #40	; 0x28
    6abe:	464a      	mov	r2, r9
    6ac0:	eb08 0007 	add.w	r0, r8, r7
    6ac4:	f7fe f9df 	bl	4e86 <memcpy>
        if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
    6ac8:	4641      	mov	r1, r8
    6aca:	4628      	mov	r0, r5
    6acc:	f7fd f84a 	bl	3b64 <mbedtls_internal_sha256_process>
    6ad0:	2800      	cmp	r0, #0
    6ad2:	d1e2      	bne.n	6a9a <mbedtls_sha256_update_ret+0xe>
        ilen  -= fill;
    6ad4:	443c      	add	r4, r7
        input += fill;
    6ad6:	444e      	add	r6, r9
        ilen  -= fill;
    6ad8:	3c40      	subs	r4, #64	; 0x40
        left = 0;
    6ada:	4607      	mov	r7, r0
    6adc:	4426      	add	r6, r4
    6ade:	e005      	b.n	6aec <mbedtls_sha256_update_ret+0x60>
        if( ( ret = mbedtls_internal_sha256_process( ctx, input ) ) != 0 )
    6ae0:	4628      	mov	r0, r5
    6ae2:	f7fd f83f 	bl	3b64 <mbedtls_internal_sha256_process>
    6ae6:	2800      	cmp	r0, #0
    6ae8:	d1d7      	bne.n	6a9a <mbedtls_sha256_update_ret+0xe>
        ilen  -= 64;
    6aea:	3c40      	subs	r4, #64	; 0x40
    while( ilen >= 64 )
    6aec:	2c3f      	cmp	r4, #63	; 0x3f
    6aee:	eba6 0104 	sub.w	r1, r6, r4
    6af2:	d8f5      	bhi.n	6ae0 <mbedtls_sha256_update_ret+0x54>
    if( ilen > 0 )
    6af4:	2c00      	cmp	r4, #0
    6af6:	d0cf      	beq.n	6a98 <mbedtls_sha256_update_ret+0xc>
        memcpy( (void *) (ctx->buffer + left), input, ilen );
    6af8:	f105 0028 	add.w	r0, r5, #40	; 0x28
    6afc:	4622      	mov	r2, r4
    6afe:	4438      	add	r0, r7
    6b00:	f7fe f9c1 	bl	4e86 <memcpy>
    6b04:	e7c8      	b.n	6a98 <mbedtls_sha256_update_ret+0xc>

00006b06 <mbedtls_sha256_finish_ret>:
    SHA256_VALIDATE_RET( (unsigned char *)output != NULL );

    /*
     * Add padding: 0x80 then 0x00 until 8 bytes remain for the length
     */
    used = ctx->total[0] & 0x3F;
    6b06:	6803      	ldr	r3, [r0, #0]
    6b08:	f003 033f 	and.w	r3, r3, #63	; 0x3f

    ctx->buffer[used++] = 0x80;
    6b0c:	1c5a      	adds	r2, r3, #1
    6b0e:	4403      	add	r3, r0
{
    6b10:	b570      	push	{r4, r5, r6, lr}

    if( used <= 56 )
    6b12:	2a38      	cmp	r2, #56	; 0x38
{
    6b14:	460d      	mov	r5, r1
    {
        /* Enough room for padding + length in current block */
        memset( ctx->buffer + used, 0, 56 - used );
    6b16:	f100 0628 	add.w	r6, r0, #40	; 0x28
    ctx->buffer[used++] = 0x80;
    6b1a:	f04f 0180 	mov.w	r1, #128	; 0x80
{
    6b1e:	4604      	mov	r4, r0
    ctx->buffer[used++] = 0x80;
    6b20:	f883 1028 	strb.w	r1, [r3, #40]	; 0x28
        memset( ctx->buffer + used, 0, 56 - used );
    6b24:	eb06 0002 	add.w	r0, r6, r2
    if( used <= 56 )
    6b28:	d861      	bhi.n	6bee <mbedtls_sha256_finish_ret+0xe8>
        memset( ctx->buffer + used, 0, 56 - used );
    6b2a:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
    6b2e:	2100      	movs	r1, #0
        memset( ctx->buffer + used, 0, 64 - used );

        if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
            return( ret );

        memset( ctx->buffer, 0, 56 );
    6b30:	f7fe f9b4 	bl	4e9c <memset>

    /*
     * Add message length
     */
    high = ( ctx->total[0] >> 29 )
         | ( ctx->total[1] <<  3 );
    6b34:	e9d4 3100 	ldrd	r3, r1, [r4]
    high = ( ctx->total[0] >> 29 )
    6b38:	0f5a      	lsrs	r2, r3, #29
    6b3a:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
    low  = ( ctx->total[0] <<  3 );
    6b3e:	00db      	lsls	r3, r3, #3
    6b40:	ba12      	rev	r2, r2
    6b42:	ba1b      	rev	r3, r3

    PUT_UINT32_BE( high, ctx->buffer, 56 );
    6b44:	6622      	str	r2, [r4, #96]	; 0x60
    PUT_UINT32_BE( low,  ctx->buffer, 60 );
    6b46:	6663      	str	r3, [r4, #100]	; 0x64

    if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
    6b48:	4631      	mov	r1, r6
    6b4a:	4620      	mov	r0, r4
    6b4c:	f7fd f80a 	bl	3b64 <mbedtls_internal_sha256_process>
    6b50:	2800      	cmp	r0, #0
    6b52:	d14b      	bne.n	6bec <mbedtls_sha256_finish_ret+0xe6>
        return( ret );

    /*
     * Output final state
     */
    PUT_UINT32_BE( ctx->state[0], output,  0 );
    6b54:	7ae3      	ldrb	r3, [r4, #11]
    6b56:	702b      	strb	r3, [r5, #0]
    6b58:	8963      	ldrh	r3, [r4, #10]
    6b5a:	706b      	strb	r3, [r5, #1]
    6b5c:	68a3      	ldr	r3, [r4, #8]
    6b5e:	0a1b      	lsrs	r3, r3, #8
    6b60:	70ab      	strb	r3, [r5, #2]
    6b62:	68a3      	ldr	r3, [r4, #8]
    6b64:	70eb      	strb	r3, [r5, #3]
    PUT_UINT32_BE( ctx->state[1], output,  4 );
    6b66:	7be3      	ldrb	r3, [r4, #15]
    6b68:	712b      	strb	r3, [r5, #4]
    6b6a:	89e3      	ldrh	r3, [r4, #14]
    6b6c:	716b      	strb	r3, [r5, #5]
    6b6e:	68e3      	ldr	r3, [r4, #12]
    6b70:	0a1b      	lsrs	r3, r3, #8
    6b72:	71ab      	strb	r3, [r5, #6]
    6b74:	68e3      	ldr	r3, [r4, #12]
    6b76:	71eb      	strb	r3, [r5, #7]
    PUT_UINT32_BE( ctx->state[2], output,  8 );
    6b78:	7ce3      	ldrb	r3, [r4, #19]
    6b7a:	722b      	strb	r3, [r5, #8]
    6b7c:	8a63      	ldrh	r3, [r4, #18]
    6b7e:	726b      	strb	r3, [r5, #9]
    6b80:	6923      	ldr	r3, [r4, #16]
    6b82:	0a1b      	lsrs	r3, r3, #8
    6b84:	72ab      	strb	r3, [r5, #10]
    6b86:	6923      	ldr	r3, [r4, #16]
    6b88:	72eb      	strb	r3, [r5, #11]
    PUT_UINT32_BE( ctx->state[3], output, 12 );
    6b8a:	7de3      	ldrb	r3, [r4, #23]
    6b8c:	732b      	strb	r3, [r5, #12]
    6b8e:	8ae3      	ldrh	r3, [r4, #22]
    6b90:	736b      	strb	r3, [r5, #13]
    6b92:	6963      	ldr	r3, [r4, #20]
    6b94:	0a1b      	lsrs	r3, r3, #8
    6b96:	73ab      	strb	r3, [r5, #14]
    6b98:	6963      	ldr	r3, [r4, #20]
    6b9a:	73eb      	strb	r3, [r5, #15]
    PUT_UINT32_BE( ctx->state[4], output, 16 );
    6b9c:	7ee3      	ldrb	r3, [r4, #27]
    6b9e:	742b      	strb	r3, [r5, #16]
    6ba0:	8b63      	ldrh	r3, [r4, #26]
    6ba2:	746b      	strb	r3, [r5, #17]
    6ba4:	69a3      	ldr	r3, [r4, #24]
    6ba6:	0a1b      	lsrs	r3, r3, #8
    6ba8:	74ab      	strb	r3, [r5, #18]
    6baa:	69a3      	ldr	r3, [r4, #24]
    6bac:	74eb      	strb	r3, [r5, #19]
    PUT_UINT32_BE( ctx->state[5], output, 20 );
    6bae:	7fe3      	ldrb	r3, [r4, #31]
    6bb0:	752b      	strb	r3, [r5, #20]
    6bb2:	8be3      	ldrh	r3, [r4, #30]
    6bb4:	756b      	strb	r3, [r5, #21]
    6bb6:	69e3      	ldr	r3, [r4, #28]
    6bb8:	0a1b      	lsrs	r3, r3, #8
    6bba:	75ab      	strb	r3, [r5, #22]
    6bbc:	69e3      	ldr	r3, [r4, #28]
    6bbe:	75eb      	strb	r3, [r5, #23]
    PUT_UINT32_BE( ctx->state[6], output, 24 );
    6bc0:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
    6bc4:	762b      	strb	r3, [r5, #24]
    6bc6:	8c63      	ldrh	r3, [r4, #34]	; 0x22
    6bc8:	766b      	strb	r3, [r5, #25]
    6bca:	6a23      	ldr	r3, [r4, #32]
    6bcc:	0a1b      	lsrs	r3, r3, #8
    6bce:	76ab      	strb	r3, [r5, #26]
    6bd0:	6a23      	ldr	r3, [r4, #32]
    6bd2:	76eb      	strb	r3, [r5, #27]

    if( ctx->is224 == 0 )
    6bd4:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    6bd6:	b94b      	cbnz	r3, 6bec <mbedtls_sha256_finish_ret+0xe6>
        PUT_UINT32_BE( ctx->state[7], output, 28 );
    6bd8:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
    6bdc:	772b      	strb	r3, [r5, #28]
    6bde:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    6be0:	776b      	strb	r3, [r5, #29]
    6be2:	6a63      	ldr	r3, [r4, #36]	; 0x24
    6be4:	0a1b      	lsrs	r3, r3, #8
    6be6:	77ab      	strb	r3, [r5, #30]
    6be8:	6a63      	ldr	r3, [r4, #36]	; 0x24
    6bea:	77eb      	strb	r3, [r5, #31]

    return( 0 );
}
    6bec:	bd70      	pop	{r4, r5, r6, pc}
        memset( ctx->buffer + used, 0, 64 - used );
    6bee:	2100      	movs	r1, #0
    6bf0:	f1c2 0240 	rsb	r2, r2, #64	; 0x40
    6bf4:	f7fe f952 	bl	4e9c <memset>
        if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
    6bf8:	4631      	mov	r1, r6
    6bfa:	4620      	mov	r0, r4
    6bfc:	f7fc ffb2 	bl	3b64 <mbedtls_internal_sha256_process>
    6c00:	2800      	cmp	r0, #0
    6c02:	d1f3      	bne.n	6bec <mbedtls_sha256_finish_ret+0xe6>
        memset( ctx->buffer, 0, 56 );
    6c04:	4601      	mov	r1, r0
    6c06:	2238      	movs	r2, #56	; 0x38
    6c08:	4630      	mov	r0, r6
    6c0a:	e791      	b.n	6b30 <mbedtls_sha256_finish_ret+0x2a>

00006c0c <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
    6c0c:	f7fd bb28 	b.w	4260 <_DoInit>

00006c10 <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
    6c10:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
    6c12:	f7ff fffb 	bl	6c0c <SEGGER_RTT_Init>

	return 0;
}
    6c16:	2000      	movs	r0, #0
    6c18:	bd08      	pop	{r3, pc}

00006c1a <z_device_state_init>:
}
    6c1a:	4770      	bx	lr

00006c1c <z_device_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
    6c1c:	b138      	cbz	r0, 6c2e <z_device_ready+0x12>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
    6c1e:	68c3      	ldr	r3, [r0, #12]
    6c20:	8818      	ldrh	r0, [r3, #0]
    6c22:	f3c0 0008 	ubfx	r0, r0, #0, #9
    6c26:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
    6c2a:	4258      	negs	r0, r3
    6c2c:	4158      	adcs	r0, r3
}
    6c2e:	4770      	bx	lr

00006c30 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    6c30:	f3ef 8005 	mrs	r0, IPSR
}

bool k_is_in_isr(void)
{
	return arch_is_in_isr();
}
    6c34:	3800      	subs	r0, #0
    6c36:	bf18      	it	ne
    6c38:	2001      	movne	r0, #1
    6c3a:	4770      	bx	lr

00006c3c <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
    6c3c:	b108      	cbz	r0, 6c42 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
    6c3e:	f7fb bd03 	b.w	2648 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
    6c42:	4770      	bx	lr

00006c44 <z_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    6c44:	f7fc ba08 	b.w	3058 <SystemInit>
